Comment.Single:  "////// badcase.apex //////"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "Reports"
Operator:  "."
Name.Function:  "get"
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Keyword:  "instanceof"
Text:  " "
Name:  "CustomReport"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// Can safely cast it back to a custom report object"
Text:  "<newline>   "
Name:  "CustomReport"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "CustomReport"
Punctuation:  ")"
Text:  " "
Name:  "Reports"
Operator:  "."
Name.Function:  "get"
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>   "
Comment.Single:  "// Do something with the non-custom-report."
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name:  "Object"
Text:  " "
Name:  "o"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Type:  "Boolean"
Text:  " "
Name:  "result"
Text:  " "
Operator:  "="
Text:  " "
Name:  "o"
Text:  " "
Keyword:  "instanceof"
Text:  " "
Name:  "Account"
Punctuation:  ";"
Text:  "<newline>"
Name:  "System"
Operator:  "."
Name.Function:  "assertEquals"
Punctuation:  "("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Name:  "result"
Punctuation:  ");"
Text:  "<newline><newline>"
Name:  "String"
Text:  " "
Name:  "dq"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"This is a double-quoted string.\""
Punctuation:  ";"
Text:  "<newline>"
Name:  "String"
Text:  " "
Name:  "sq"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "This is a single-quoted string.'"
Punctuation:  ";"
Text:  "<newline>"
Name:  "String"
Text:  " "
Name:  "es_dq"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"This is a string with "
Literal.String.Escape:  "\\\""
Literal.String.Double:  " escape sequences "
Literal.String.Escape:  "\\b"
Literal.String.Double:  ".\""
Punctuation:  ";"
Text:  "<newline>"
Name:  "String"
Text:  " "
Name:  "es_sq"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "This is a string with "
Literal.String.Escape:  "\\'"
Literal.String.Double:  " escape sequences "
Literal.String.Escape:  "<newline>"
Literal.String.Double:  ".'"
Punctuation:  ";"
Text:  "<newline><newline>"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Literal.Number.Float:  "1.0"
Punctuation:  ";"
Text:  "<newline>"
Literal.Number.Bin:  "0b01"
Punctuation:  ";"
Text:  "<newline>"
Literal.Number.Hex:  "0xFFFFFF"
Punctuation:  ";"
Text:  "<newline>"
Literal.Number.Oct:  "01"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "virtual"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "SuperClass"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "public"
Text:  " "
Name:  "String"
Text:  " "
Name:  "mySalutation"
Punctuation:  ";"
Text:  "<newline>    "
Keyword.Declaration:  "public"
Text:  " "
Name:  "String"
Text:  " "
Name:  "myFirstName"
Punctuation:  ";"
Text:  "<newline>    "
Keyword.Declaration:  "public"
Text:  " "
Name:  "String"
Text:  " "
Name:  "myLastName"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword.Declaration:  "public"
Text:  " "
Name.Function:  "SuperClass"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>        "
Name:  "mySalutation"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "Mr.'"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "myFirstName"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "Carl'"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "myLastName"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "Vonderburg'"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Declaration:  "public"
Text:  " "
Name.Function:  "SuperClass"
Punctuation:  "("
Name:  "String"
Text:  " "
Name:  "salutation"
Punctuation:  ","
Text:  " "
Name:  "String"
Text:  " "
Name:  "firstName"
Punctuation:  ","
Text:  " "
Name:  "String"
Text:  " "
Name:  "lastName"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>        "
Name:  "mySalutation"
Text:  " "
Operator:  "="
Text:  " "
Name:  "salutation"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "myFirstName"
Text:  " "
Operator:  "="
Text:  " "
Name:  "firstName"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "myLastName"
Text:  " "
Operator:  "="
Text:  " "
Name:  "lastName"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "virtual"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "printName"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>        "
Name:  "System"
Operator:  "."
Name.Function:  "debug"
Punctuation:  "("
Literal.String.Single:  "'"
Literal.String.Double:  "My name is '"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "mySalutation"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "myLastName"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>   "
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "virtual"
Text:  " "
Name:  "String"
Text:  " "
Name.Function:  "getFirstName"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>       "
Keyword:  "return"
Text:  " "
Name:  "myFirstName"
Punctuation:  ";"
Text:  "<newline>   "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "Subclass"
Text:  " "
Keyword.Declaration:  "extends"
Text:  " "
Name:  "Superclass"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword.Declaration:  "public"
Text:  " "
Name:  "override"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "printName"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword.Declaration:  "super"
Operator:  "."
Name.Function:  "printName"
Punctuation:  "();"
Text:  "<newline>        "
Name:  "System"
Operator:  "."
Name.Function:  "debug"
Punctuation:  "("
Literal.String.Single:  "'"
Literal.String.Double:  "But you can call me '"
Text:  " "
Operator:  "+"
Text:  " "
Keyword.Declaration:  "super"
Operator:  "."
Name.Function:  "getFirstName"
Punctuation:  "());"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "public"
Text:  " "
Name.Function:  "Subclass"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "super"
Punctuation:  "("
Literal.String.Single:  "'"
Literal.String.Double:  "Madam'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "Brenda'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "Clapentrap'"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// using `this`"
Text:  "<newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "myTestThis"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>    "
Name:  "string"
Text:  " "
Name:  "s"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "this"
Operator:  "."
Name.Property:  "s"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "TestString'"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "testThis"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>    "
Comment.Single:  "// First constructor for the class. It requires a string parameter."
Text:  "<newline>    "
Keyword.Declaration:  "public"
Text:  " "
Name.Function:  "testThis"
Punctuation:  "("
Name:  "string"
Text:  " "
Name:  "s2"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "// Second constructor for the class. It does not require a parameter."
Text:  "<newline>    "
Comment.Single:  "// This constructor calls the first constructor using the this keyword."
Text:  "<newline>    "
Keyword.Declaration:  "public"
Text:  " "
Name.Function:  "testThis"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Function:  "this"
Punctuation:  "("
Literal.String.Single:  "'"
Literal.String.Double:  "None'"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// using transient"
Text:  "<newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "ExampleController"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>    "
Name:  "DateTime"
Text:  " "
Name:  "t1"
Punctuation:  ";"
Text:  "<newline>    "
Keyword.Declaration:  "transient"
Text:  " "
Name:  "DateTime"
Text:  " "
Name:  "t2"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword.Declaration:  "public"
Text:  " "
Name:  "String"
Text:  " "
Name.Function:  "getT1"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "t1"
Text:  " "
Operator:  "=="
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ")"
Text:  " "
Name:  "t1"
Text:  " "
Operator:  "="
Text:  " "
Name:  "System"
Operator:  "."
Name.Function:  "now"
Punctuation:  "();"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "'"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "t1"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Declaration:  "public"
Text:  " "
Name:  "String"
Text:  " "
Name.Function:  "getT2"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "t2"
Text:  " "
Operator:  "=="
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ")"
Text:  " "
Name:  "t2"
Text:  " "
Operator:  "="
Text:  " "
Name:  "System"
Operator:  "."
Name.Function:  "now"
Punctuation:  "();"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "'"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "t2"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// page controller"
Text:  "<newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "inherited"
Text:  " "
Keyword.Declaration:  "sharing"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "InheritedSharingClass"
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "public"
Text:  " "
Name:  "List"
Operator:  "<"
Name:  "Contact"
Operator:  ">"
Text:  " "
Name.Function:  "getAllTheSecrets"
Punctuation:  "(){"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Punctuation:  "["
Keyword:  "SELECT"
Text:  " "
Name:  "Name"
Text:  " "
Keyword:  "FROM"
Text:  " "
Name:  "Contact"
Punctuation:  "];"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// annotations"
Text:  "<newline>"
Keyword.Declaration:  "global"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "MyClass"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>    "
Name.Decorator:  "@Future("
Name:  "callout"
Operator:  "="
Keyword.Constant:  "true"
Punctuation:  ")"
Text:  " "
Name.Decorator:  "@IsTest"
Text:  "<newline>    "
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "static"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "myMethod"
Punctuation:  "("
Name:  "String"
Text:  " "
Name:  "a"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Comment.Multiline:  "/* ... */"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// Invokables"
Text:  "<newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "without"
Text:  " "
Keyword.Declaration:  "sharing"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "AccountQueryAction"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "@InvocableMethod("
Name:  "label"
Operator:  "="
Literal.String.Single:  "'"
Literal.String.Double:  "Get Account Names'"
Text:  " "
Name:  "description"
Operator:  "="
Literal.String.Single:  "'"
Literal.String.Double:  "Returns the list of account names corresponding to the specified account IDs.'"
Punctuation:  ")"
Text:  "<newline>        "
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "static"
Text:  " "
Name:  "List"
Operator:  "<"
Name:  "String"
Operator:  ">"
Text:  " "
Name.Function:  "getAccountNames"
Punctuation:  "("
Name:  "List"
Operator:  "<"
Name:  "ID"
Operator:  ">"
Text:  " "
Name:  "ids"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "List"
Operator:  "<"
Name:  "String"
Operator:  ">"
Text:  " "
Name:  "accountNames"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "List"
Operator:  "<"
Name:  "String"
Operator:  ">"
Punctuation:  "();"
Text:  "<newline>            "
Name:  "List"
Operator:  "<"
Name:  "Account"
Operator:  ">"
Text:  " "
Name:  "accounts"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Keyword:  "SELECT"
Text:  " "
Name:  "Name"
Text:  " "
Keyword:  "FROM"
Text:  " "
Name:  "Account"
Text:  " "
Keyword:  "WHERE"
Text:  " "
Name:  "Id"
Text:  " "
Name:  "in"
Text:  " "
Punctuation:  ":"
Name:  "ids"
Punctuation:  "];"
Text:  "<newline>            "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "Account"
Text:  " "
Name:  "account"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "accounts"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                "
Name:  "accountNames"
Operator:  "."
Name.Function:  "add"
Punctuation:  "("
Name:  "account"
Operator:  "."
Name.Property:  "Name"
Punctuation:  ");"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name:  "accountNames"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "AccountInsertAction"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "@InvocableMethod("
Name:  "label"
Operator:  "="
Literal.String.Single:  "'"
Literal.String.Double:  "Insert Accounts'"
Text:  " "
Name:  "description"
Operator:  "="
Literal.String.Single:  "'"
Literal.String.Double:  "Inserts the accounts specified and returns the IDs of the new accounts.'"
Punctuation:  ")"
Text:  "<newline>        "
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "static"
Text:  " "
Name:  "List"
Operator:  "<"
Name:  "ID"
Operator:  ">"
Text:  " "
Name.Function:  "insertAccounts"
Punctuation:  "("
Name:  "List"
Operator:  "<"
Name:  "Account"
Operator:  ">"
Text:  " "
Name:  "accounts"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "Database"
Operator:  "."
Name.Property:  "SaveResult"
Punctuation:  "[]"
Text:  " "
Name:  "results"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Database"
Operator:  "."
Name.Function:  "insert"
Punctuation:  "("
Name:  "accounts"
Punctuation:  ");"
Text:  "<newline>            "
Name:  "List"
Operator:  "<"
Name:  "ID"
Operator:  ">"
Text:  " "
Name:  "accountIds"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "List"
Operator:  "<"
Name:  "ID"
Operator:  ">"
Punctuation:  "();"
Text:  "<newline>            "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "Database"
Operator:  "."
Name.Property:  "SaveResult"
Text:  " "
Name:  "result"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "results"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "result"
Operator:  "."
Name.Function:  "isSuccess"
Punctuation:  "())"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "accountIds"
Operator:  "."
Name.Function:  "add"
Punctuation:  "("
Name:  "result"
Operator:  "."
Name.Function:  "getId"
Punctuation:  "());"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name:  "accountIds"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// test class"
Text:  "<newline>"
Name.Decorator:  "@isTest("
Name:  "SeeAllData"
Operator:  "="
Keyword.Constant:  "true"
Punctuation:  ")"
Text:  "<newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "TestDataAccessClass"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>    "
Keyword.Declaration:  "static"
Text:  " "
Keyword.Declaration:  "testmethod"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "myTestMethod1"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Comment.Single:  "// Query an existing account in the organization. "
Text:  "<newline>        "
Name:  "Account"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Keyword:  "SELECT"
Text:  " "
Name:  "Id"
Punctuation:  ","
Text:  " "
Name:  "Name"
Text:  " "
Keyword:  "FROM"
Text:  " "
Name:  "Account"
Text:  " "
Keyword:  "WHERE"
Text:  " "
Name:  "Name"
Operator:  "="
Literal.String.Single:  "'"
Literal.String.Double:  "Acme'"
Text:  " "
Keyword:  "LIMIT"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "];"
Text:  "<newline>        "
Name:  "System"
Operator:  "."
Name.Function:  "assert"
Punctuation:  "("
Name:  "a"
Text:  " "
Operator:  "!="
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ");"
Text:  "<newline><newline>        "
Comment.Single:  "// Create a test account based on the queried account."
Text:  "<newline>        "
Name:  "Account"
Text:  " "
Name:  "testAccount"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Operator:  "."
Name.Function:  "clone"
Punctuation:  "();"
Text:  "<newline>        "
Name:  "testAccount"
Operator:  "."
Name.Property:  "Name"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "Acme Test'"
Punctuation:  ";"
Text:  "<newline><newline>        "
Keyword:  "insert"
Text:  " "
Name:  "testAccount"
Punctuation:  ";"
Text:  "<newline><newline>        "
Comment.Single:  "// Query the test account that was inserted."
Text:  "<newline>        "
Name:  "Account"
Text:  " "
Name:  "testAccount2"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Keyword:  "SELECT"
Text:  " "
Name:  "Id"
Punctuation:  ","
Text:  " "
Name:  "Name"
Text:  " "
Keyword:  "FROM"
Text:  " "
Name:  "Account"
Text:  " <newline>                                "
Keyword:  "WHERE"
Text:  " "
Name:  "Name"
Operator:  "="
Literal.String.Single:  "'"
Literal.String.Double:  "Acme Test'"
Text:  " "
Keyword:  "LIMIT"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "];"
Text:  "<newline><newline>        "
Name:  "System"
Operator:  "."
Name.Function:  "assert"
Punctuation:  "("
Name:  "testAccount2"
Text:  " "
Operator:  "!="
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Decorator:  "@isTest"
Text:  " "
Keyword.Declaration:  "static"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "myTestMethod2"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Comment.Single:  "// Can access all data in the organization."
Text:  "<newline>   "
Punctuation:  "}"
Text:  "<newline><newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// Soql"
Text:  "<newline>"
Punctuation:  "["
Keyword:  "SELECT"
Text:  " "
Name:  "Company"
Punctuation:  ","
Text:  " "
Name.Function:  "toLabel"
Punctuation:  "("
Name:  "Status"
Punctuation:  ")"
Text:  " "
Keyword:  "FROM"
Text:  " "
Name:  "Lead"
Text:  " "
Keyword:  "WHERE"
Text:  " "
Name.Function:  "toLabel"
Punctuation:  "("
Name:  "Status"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'"
Literal.String.Double:  "le Draft'"
Punctuation:  "]"
Text:  "<newline>"
