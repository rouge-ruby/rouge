Comment.Multiline:  "/* it shouldn't hang */"
Text:  "\t"
Comment.Multiline:  "/* trying to lex this */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"ahg/awn/xan?\",\tHB_TAG('A','G','W',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Agaw */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"gsw?/gsw-FR?\",\tHB_TAG('A','L','S',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Alsatian */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"krc\",\tHB_TAG('B','A','L',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Balkar */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"??\",\tHB_TAG('B','C','R',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Bible Cree */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"sgw?\",\tHB_TAG('C','H','G',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Chaha Gurage */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"acf/gcf?\",\tHB_TAG('F','A','N',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* French Antillean */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"vls/nl-be\",\tHB_TAG('F','L','E',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Flemish */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"enf?/yrk?\",\tHB_TAG('F','N','E',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Forest Nenets */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"fuf?\",\tHB_TAG('F','T','A',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Futa */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"ar-Syrc?\",\tHB_TAG('G','A','R',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Garshuni */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"cfm/rnl?\",\tHB_TAG('H','A','L',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Halam */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"ga-Latg?/Latg?\",\tHB_TAG('I','R','T',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Irish Traditional */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"krc\",\tHB_TAG('K','A','R',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Karachay */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"alw?/ktb?\",\tHB_TAG('K','E','B',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Kebena */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"Geok\",\tHB_TAG('K','G','E',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Khutsuri Georgian */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"kca\",\tHB_TAG('K','H','K',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Khanty-Kazim */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"kca\",\tHB_TAG('K','H','S',' ')},*/"
Text:  "\t"
Comment.Multiline:  "/* Khanty-Shurishkar */"
Text:  "<newline><newline>"
Comment:  "#if 0<newline>this should be commented<newline>#if THING<newline>this should also be commented<newline>#endif<newline>also comments<newline>#else"
Text:  "<newline>"
Comment.Preproc:  "#  if thing<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Function:  "not_a_comment"
Punctuation:  "();"
Text:  "<newline>"
Comment.Preproc:  "#  endif<newline>#endif<newline>"
Text:  "<newline>"
Comment.Preproc:  "#macro<newline>"
Text:  "<newline>"
Keyword.Type:  "void"
Text:  " "
Name.Function:  "foo"
Punctuation:  "()"
Text:  " "
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword.Type:  "void"
Text:  " "
Name.Function:  "foo"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Multiline:  "/* nothing */"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Type:  "void"
Text:  " "
Name.Function:  "foo2"
Punctuation:  "("
Keyword.Type:  "void"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Comment.Multiline:  "/* nothing */"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Broken declarations should not break subsequent highlighting */"
Text:  "<newline><newline>"
Keyword.Type:  "void"
Text:  " "
Name.Function:  "foo"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "if"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "y"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "puts"
Punctuation:  "("
Literal.String:  "\"foo\""
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Preproc:  "#include"
Text:  " "
Comment.PreprocFile:  "<string.h>"
Comment.Single:  " /* this is a comment */"
Comment.Preproc:  "<newline>#include"
Text:  " "
Comment.PreprocFile:  "<string.h>"
Comment.Single:  " // this is a comment"
Comment.Preproc:  "<newline>#include"
Text:  " "
Comment.PreprocFile:  "\"string.h\""
Comment.Single:  " /* this is a comment */"
Comment.Preproc:  "<newline>#include"
Text:  " "
Comment.PreprocFile:  "\"string.h\""
Comment.Single:  " // this is a comment"
Comment.Preproc:  "<newline>#include"
Comment.PreprocFile:  "<string>"
Comment.Single:  "/* this is a comment */"
Comment.Preproc:  "<newline>#include"
Comment.PreprocFile:  "<string>"
Comment.Single:  "// this is a comment"
Comment.Preproc:  "<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* Execute compiled code */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* XXX TO DO:<newline>   XXX speed up searching for keywords by using a dictionary<newline>   XXX document it!<newline>   */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* enable more aggressive intra-module optimizations, where available */"
Text:  "<newline>"
Comment.Preproc:  "#define PY_LOCAL_AGGRESSIVE<newline>"
Text:  "<newline>"
Comment.Preproc:  "#include"
Text:  " "
Comment.PreprocFile:  "\"Python.h\""
Comment.Preproc:  "<newline>"
Text:  "<newline>"
Comment.Preproc:  "#include"
Text:  " "
Comment.PreprocFile:  "\"code.h\""
Comment.Preproc:  "<newline>#include"
Text:  " "
Comment.PreprocFile:  "\"frameobject.h\""
Comment.Preproc:  "<newline>#include"
Text:  " "
Comment.PreprocFile:  "\"eval.h\""
Comment.Preproc:  "<newline>#include"
Text:  " "
Comment.PreprocFile:  "\"opcode.h\""
Comment.Preproc:  "<newline>#include"
Text:  " "
Comment.PreprocFile:  "\"structmember.h\""
Comment.Preproc:  "<newline>"
Text:  "<newline>"
Comment.Preproc:  "#include"
Text:  " "
Comment.PreprocFile:  "<ctype.h>"
Comment.Preproc:  "<newline>"
Text:  "<newline>"
Comment.Preproc:  "#ifndef WITH_TSC<newline>"
Text:  "<newline>"
Comment.Preproc:  "#define READ_TIMESTAMP(var)<newline>"
Text:  "<newline>"
Comment.Preproc:  "#else<newline>"
Text:  "<newline>"
Keyword:  "typedef"
Text:  " "
Keyword.Type:  "unsigned"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Name:  "uint64"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Preproc:  "#if defined(__ppc__) "
Comment.Multiline:  "/* <- Don't know if this is the correct symbol; this<newline>\t\t\t   section should work for GCC on any PowerPC platform,<newline>\t\t\t   irrespective of OS.  POWER?  Who knows :-) */"
Comment.Preproc:  "<newline>"
Text:  "<newline>"
Comment.Preproc:  "#define READ_TIMESTAMP(var) ppc_getcounter(&var)<newline>"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "void"
Text:  "<newline>"
Name.Function:  "ppc_getcounter"
Punctuation:  "("
Name:  "uint64"
Text:  " "
Operator:  "*"
Name:  "v"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Keyword.Type:  "unsigned"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Name:  "tbu"
Punctuation:  ","
Text:  " "
Name:  "tb"
Punctuation:  ","
Text:  " "
Name:  "tbu2"
Punctuation:  ";"
Text:  "<newline><newline>  "
Name.Label:  "loop:"
Text:  "<newline>\t"
Name:  "asm"
Text:  " "
Keyword:  "volatile"
Text:  " "
Punctuation:  "("
Literal.String:  "\"mftbu %0\""
Text:  " "
Operator:  ":"
Text:  " "
Literal.String:  "\"=r\""
Text:  " "
Punctuation:  "("
Name:  "tbu"
Punctuation:  ")"
Text:  " "
Punctuation:  ");"
Text:  "<newline>\t"
Name:  "asm"
Text:  " "
Keyword:  "volatile"
Text:  " "
Punctuation:  "("
Literal.String:  "\"mftb  %0\""
Text:  " "
Operator:  ":"
Text:  " "
Literal.String:  "\"=r\""
Text:  " "
Punctuation:  "("
Name:  "tb"
Punctuation:  ")"
Text:  "  "
Punctuation:  ");"
Text:  "<newline>\t"
Name:  "asm"
Text:  " "
Keyword:  "volatile"
Text:  " "
Punctuation:  "("
Literal.String:  "\"mftbu %0\""
Text:  " "
Operator:  ":"
Text:  " "
Literal.String:  "\"=r\""
Text:  " "
Punctuation:  "("
Name:  "tbu2"
Punctuation:  "));"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "__builtin_expect"
Punctuation:  "("
Name:  "tbu"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "tbu2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  " "
Keyword:  "goto"
Text:  " "
Name:  "loop"
Punctuation:  ";"
Text:  "<newline><newline>\t"
Comment.Multiline:  "/* The slightly peculiar way of writing the next lines is<newline>\t   compiled better by GCC than any other way I tried. */"
Text:  "<newline>\t"
Punctuation:  "(("
Keyword.Type:  "long"
Operator:  "*"
Punctuation:  ")("
Name:  "v"
Punctuation:  "))["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "tbu"
Punctuation:  ";"
Text:  "<newline>\t"
Punctuation:  "(("
Keyword.Type:  "long"
Operator:  "*"
Punctuation:  ")("
Name:  "v"
Punctuation:  "))["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "tb"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Preproc:  "#else "
Comment.Multiline:  "/* this is for linux/x86 (and probably any other GCC/x86 combo) */"
Comment.Preproc:  "<newline>"
Text:  "<newline>"
Comment.Preproc:  "#define READ_TIMESTAMP(val) \\<newline>     __asm__ __volatile__(\"rdtsc\" : \"=A\" (val))<newline>"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "<newline>"
Keyword.Type:  "void"
Text:  " "
Name.Function:  "dump_tsc"
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "opcode"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "ticked"
Punctuation:  ","
Text:  " "
Name:  "uint64"
Text:  " "
Name:  "inst0"
Punctuation:  ","
Text:  " "
Name:  "uint64"
Text:  " "
Name:  "inst1"
Punctuation:  ","
Text:  "<newline>\t      "
Name:  "uint64"
Text:  " "
Name:  "loop0"
Punctuation:  ","
Text:  " "
Name:  "uint64"
Text:  " "
Name:  "loop1"
Punctuation:  ","
Text:  " "
Name:  "uint64"
Text:  " "
Name:  "intr0"
Punctuation:  ","
Text:  " "
Name:  "uint64"
Text:  " "
Name:  "intr1"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Name:  "uint64"
Text:  " "
Name:  "intr"
Punctuation:  ","
Text:  " "
Name:  "inst"
Punctuation:  ","
Text:  " "
Name:  "loop"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "PyThreadState"
Text:  " "
Operator:  "*"
Name:  "tstate"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyThreadState_Get"
Punctuation:  "();"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "tstate"
Operator:  "->"
Name:  "interp"
Operator:  "->"
Name:  "tscdump"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "intr"
Text:  " "
Operator:  "="
Text:  " "
Name:  "intr1"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "intr0"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "inst"
Text:  " "
Operator:  "="
Text:  " "
Name:  "inst1"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "inst0"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "intr"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "loop"
Text:  " "
Operator:  "="
Text:  " "
Name:  "loop1"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "loop0"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "intr"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "fprintf"
Punctuation:  "("
Name:  "stderr"
Punctuation:  ","
Text:  " "
Literal.String:  "\"opcode=%03d t=%d inst=%06lld loop=%06lld"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  "<newline>\t\t"
Name:  "opcode"
Punctuation:  ","
Text:  " "
Name:  "ticked"
Punctuation:  ","
Text:  " "
Name:  "inst"
Punctuation:  ","
Text:  " "
Name:  "loop"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* Turn this on if your compiler chokes on the big switch: */"
Text:  "<newline>"
Comment.Multiline:  "/* #define CASE_TOO_BIG 1 */"
Text:  "<newline><newline>"
Comment.Preproc:  "#ifdef Py_DEBUG<newline>"
Comment.Multiline:  "/* For debugging the interpreter: */"
Text:  "<newline>"
Comment.Preproc:  "#define LLTRACE  1\t"
Comment.Multiline:  "/* Low-level trace feature */"
Comment.Preproc:  "<newline>#define CHECKEXC 1\t"
Comment.Multiline:  "/* Double-check exception checking */"
Comment.Preproc:  "<newline>#endif<newline>"
Text:  "<newline>"
Keyword:  "typedef"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  "("
Operator:  "*"
Name:  "callproc"
Punctuation:  ")("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Forward declarations */"
Text:  "<newline>"
Comment.Preproc:  "#ifdef WITH_TSC<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "call_function"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "***"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Name:  "uint64"
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "uint64"
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Comment.Preproc:  "#else<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "call_function"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "***"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "fast_function"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "***"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "do_call"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "***"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "ext_do_call"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "***"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "update_keyword_args"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "***"
Punctuation:  ","
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "update_star_args"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "***"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "load_args"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "***"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Comment.Preproc:  "#define CALL_FLAG_VAR 1<newline>#define CALL_FLAG_KW 2<newline>"
Text:  "<newline>"
Comment.Preproc:  "#ifdef LLTRACE<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "lltrace"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Function:  "prtrace"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Keyword.Type:  "char"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Function:  "call_trace"
Punctuation:  "("
Name:  "Py_tracefunc"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyFrameObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  "<newline>\t\t      "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "call_trace_protected"
Punctuation:  "("
Name:  "Py_tracefunc"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  "<newline>\t\t\t\t "
Name:  "PyFrameObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "call_exc_trace"
Punctuation:  "("
Name:  "Py_tracefunc"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyFrameObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Function:  "maybe_call_line_trace"
Punctuation:  "("
Name:  "Py_tracefunc"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  "<newline>\t\t\t\t  "
Name:  "PyFrameObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "apply_slice"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Function:  "assign_slice"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  "<newline>\t\t\t"
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "cmp_outcome"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "import_from"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Function:  "import_all_from"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "build_class"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Function:  "exec_statement"
Punctuation:  "("
Name:  "PyFrameObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  "<newline>\t\t\t  "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "set_exc_info"
Punctuation:  "("
Name:  "PyThreadState"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "reset_exc_info"
Punctuation:  "("
Name:  "PyThreadState"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "format_exc_check_arg"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Keyword.Type:  "char"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  " "
Name.Function:  "string_concatenate"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  "<newline>\t\t\t\t    "
Name:  "PyFrameObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Keyword.Type:  "unsigned"
Text:  " "
Keyword.Type:  "char"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Preproc:  "#define NAME_ERROR_MSG \\<newline>\t\"name '%.200s' is not defined\"<newline>#define GLOBAL_NAME_ERROR_MSG \\<newline>\t\"global name '%.200s' is not defined\"<newline>#define UNBOUNDLOCAL_ERROR_MSG \\<newline>\t\"local variable '%.200s' referenced before assignment\"<newline>#define UNBOUNDFREE_ERROR_MSG \\<newline>\t\"free variable '%.200s' referenced before assignment\" \\<newline>        \" in enclosing scope\"<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* Dynamic execution profile */"
Text:  "<newline>"
Comment.Preproc:  "#ifdef DYNAMIC_EXECUTION_PROFILE<newline>#ifdef DXPAIRS<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Name:  "dxpairs"
Punctuation:  "["
Literal.Number.Integer:  "257"
Punctuation:  "]["
Literal.Number.Integer:  "256"
Punctuation:  "];"
Text:  "<newline>"
Comment.Preproc:  "#define dxp dxpairs[256]<newline>#else<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Name:  "dxp"
Punctuation:  "["
Literal.Number.Integer:  "256"
Punctuation:  "];"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>#endif<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* Function call profile */"
Text:  "<newline>"
Comment.Preproc:  "#ifdef CALL_PROFILE<newline>#define PCALL_NUM 11<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "pcall"
Punctuation:  "["
Name:  "PCALL_NUM"
Punctuation:  "];"
Text:  "<newline><newline>"
Comment.Preproc:  "#define PCALL_ALL 0<newline>#define PCALL_FUNCTION 1<newline>#define PCALL_FAST_FUNCTION 2<newline>#define PCALL_FASTER_FUNCTION 3<newline>#define PCALL_METHOD 4<newline>#define PCALL_BOUND_METHOD 5<newline>#define PCALL_CFUNCTION 6<newline>#define PCALL_TYPE 7<newline>#define PCALL_GENERATOR 8<newline>#define PCALL_OTHER 9<newline>#define PCALL_POP 10<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* Notes about the statistics<newline><newline>   PCALL_FAST stats<newline><newline>   FAST_FUNCTION means no argument tuple needs to be created.<newline>   FASTER_FUNCTION means that the fast-path frame setup code is used.<newline><newline>   If there is a method call where the call can be optimized by changing<newline>   the argument tuple and calling the function directly, it gets recorded<newline>   twice.<newline><newline>   As a result, the relationship among the statistics appears to be<newline>   PCALL_ALL == PCALL_FUNCTION + PCALL_METHOD - PCALL_BOUND_METHOD +<newline>                PCALL_CFUNCTION + PCALL_TYPE + PCALL_GENERATOR + PCALL_OTHER<newline>   PCALL_FUNCTION > PCALL_FAST_FUNCTION > PCALL_FASTER_FUNCTION<newline>   PCALL_METHOD > PCALL_BOUND_METHOD<newline>*/"
Text:  "<newline><newline>"
Comment.Preproc:  "#define PCALL(POS) pcall[POS]++<newline>"
Text:  "<newline>"
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  "<newline>"
Name.Function:  "PyEval_GetCallStats"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "self"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "Py_BuildValue"
Punctuation:  "("
Literal.String:  "\"iiiiiiiiii\""
Punctuation:  ","
Text:  "<newline>\t\t\t     "
Name:  "pcall"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "],"
Text:  " "
Name:  "pcall"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "],"
Text:  " "
Name:  "pcall"
Punctuation:  "["
Literal.Number.Integer:  "2"
Punctuation:  "],"
Text:  " "
Name:  "pcall"
Punctuation:  "["
Literal.Number.Integer:  "3"
Punctuation:  "],"
Text:  "<newline>\t\t\t     "
Name:  "pcall"
Punctuation:  "["
Literal.Number.Integer:  "4"
Punctuation:  "],"
Text:  " "
Name:  "pcall"
Punctuation:  "["
Literal.Number.Integer:  "5"
Punctuation:  "],"
Text:  " "
Name:  "pcall"
Punctuation:  "["
Literal.Number.Integer:  "6"
Punctuation:  "],"
Text:  " "
Name:  "pcall"
Punctuation:  "["
Literal.Number.Integer:  "7"
Punctuation:  "],"
Text:  "<newline>\t\t\t     "
Name:  "pcall"
Punctuation:  "["
Literal.Number.Integer:  "8"
Punctuation:  "],"
Text:  " "
Name:  "pcall"
Punctuation:  "["
Literal.Number.Integer:  "9"
Punctuation:  "]);"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#else<newline>#define PCALL(O)<newline>"
Text:  "<newline>"
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  "<newline>"
Name.Function:  "PyEval_GetCallStats"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "self"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "Py_None"
Punctuation:  ");"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "Py_None"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "<newline><newline>"
Comment.Preproc:  "#ifdef WITH_THREAD<newline>"
Text:  "<newline>"
Comment.Preproc:  "#ifdef HAVE_ERRNO_H<newline>#include"
Text:  " "
Comment.PreprocFile:  "<errno.h>"
Comment.Preproc:  "<newline>#endif<newline>#include"
Text:  " "
Comment.PreprocFile:  "\"pythread.h\""
Comment.Preproc:  "<newline>"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Name:  "PyThread_type_lock"
Text:  " "
Name:  "interpreter_lock"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* This is the GIL */"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Name:  "main_thread"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword.Type:  "int"
Text:  "<newline>"
Name.Function:  "PyEval_ThreadsInitialized"
Punctuation:  "("
Keyword.Type:  "void"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "interpreter_lock"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Type:  "void"
Text:  "<newline>"
Name.Function:  "PyEval_InitThreads"
Punctuation:  "("
Keyword.Type:  "void"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "interpreter_lock"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyThread_allocate_lock"
Punctuation:  "();"
Text:  "<newline>\t"
Name:  "PyThread_acquire_lock"
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>\t"
Name:  "main_thread"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyThread_get_thread_ident"
Punctuation:  "();"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Type:  "void"
Text:  "<newline>"
Name.Function:  "PyEval_AcquireLock"
Punctuation:  "("
Keyword.Type:  "void"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Name:  "PyThread_acquire_lock"
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Type:  "void"
Text:  "<newline>"
Name.Function:  "PyEval_ReleaseLock"
Punctuation:  "("
Keyword.Type:  "void"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Name:  "PyThread_release_lock"
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Type:  "void"
Text:  "<newline>"
Name.Function:  "PyEval_AcquireThread"
Punctuation:  "("
Name:  "PyThreadState"
Text:  " "
Operator:  "*"
Name:  "tstate"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "Py_FatalError"
Punctuation:  "("
Literal.String:  "\"PyEval_AcquireThread: NULL new thread state\""
Punctuation:  ");"
Text:  "<newline>\t"
Comment.Multiline:  "/* Check someone has called PyEval_InitThreads() to create the lock */"
Text:  "<newline>\t"
Name:  "assert"
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ");"
Text:  "<newline>\t"
Name:  "PyThread_acquire_lock"
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyThreadState_Swap"
Punctuation:  "("
Name:  "tstate"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "Py_FatalError"
Punctuation:  "("
Text:  "<newline>\t\t\t"
Literal.String:  "\"PyEval_AcquireThread: non-NULL old thread state\""
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Type:  "void"
Text:  "<newline>"
Name.Function:  "PyEval_ReleaseThread"
Punctuation:  "("
Name:  "PyThreadState"
Text:  " "
Operator:  "*"
Name:  "tstate"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "Py_FatalError"
Punctuation:  "("
Literal.String:  "\"PyEval_ReleaseThread: NULL thread state\""
Punctuation:  ");"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyThreadState_Swap"
Punctuation:  "("
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "tstate"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "Py_FatalError"
Punctuation:  "("
Literal.String:  "\"PyEval_ReleaseThread: wrong thread state\""
Punctuation:  ");"
Text:  "<newline>\t"
Name:  "PyThread_release_lock"
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* This function is called from PyOS_AfterFork to ensure that newly<newline>   created child processes don't hold locks referring to threads which<newline>   are not running in the child process.  (This could also be done using<newline>   pthread_atfork mechanism, at least for the pthreads implementation.) */"
Text:  "<newline><newline>"
Keyword.Type:  "void"
Text:  "<newline>"
Name.Function:  "PyEval_ReInitThreads"
Punctuation:  "("
Keyword.Type:  "void"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "interpreter_lock"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Punctuation:  ";"
Text:  "<newline>\t"
Comment.Multiline:  "/*XXX Can't use PyThread_free_lock here because it does too<newline>\t  much error-checking.  Doing this cleanly would require<newline>\t  adding a new function to each thread_*.h.  Instead, just<newline>\t  create a new lock and waste a little bit of memory */"
Text:  "<newline>\t"
Name:  "interpreter_lock"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyThread_allocate_lock"
Punctuation:  "();"
Text:  "<newline>\t"
Name:  "PyThread_acquire_lock"
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>\t"
Name:  "main_thread"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyThread_get_thread_ident"
Punctuation:  "();"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* Functions save_thread and restore_thread are always defined so<newline>   dynamically loaded modules needn't be compiled separately for use<newline>   with and without threads: */"
Text:  "<newline><newline>"
Name:  "PyThreadState"
Text:  " "
Operator:  "*"
Text:  "<newline>"
Name.Function:  "PyEval_SaveThread"
Punctuation:  "("
Keyword.Type:  "void"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Name:  "PyThreadState"
Text:  " "
Operator:  "*"
Name:  "tstate"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyThreadState_Swap"
Punctuation:  "("
Name.Builtin:  "NULL"
Punctuation:  ");"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "Py_FatalError"
Punctuation:  "("
Literal.String:  "\"PyEval_SaveThread: NULL tstate\""
Punctuation:  ");"
Text:  "<newline>"
Comment.Preproc:  "#ifdef WITH_THREAD<newline>"
Text:  "\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "PyThread_release_lock"
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ");"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t"
Keyword:  "return"
Text:  " "
Name:  "tstate"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Type:  "void"
Text:  "<newline>"
Name.Function:  "PyEval_RestoreThread"
Punctuation:  "("
Name:  "PyThreadState"
Text:  " "
Operator:  "*"
Name:  "tstate"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "Py_FatalError"
Punctuation:  "("
Literal.String:  "\"PyEval_RestoreThread: NULL tstate\""
Punctuation:  ");"
Text:  "<newline>"
Comment.Preproc:  "#ifdef WITH_THREAD<newline>"
Text:  "\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword.Type:  "int"
Text:  " "
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "errno"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "PyThread_acquire_lock"
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>\t\t"
Name:  "errno"
Text:  " "
Operator:  "="
Text:  " "
Name:  "err"
Punctuation:  ";"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t"
Name:  "PyThreadState_Swap"
Punctuation:  "("
Name:  "tstate"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Mechanism whereby asynchronously executing callbacks (e.g. UNIX<newline>   signal handlers or Mac I/O completion routines) can schedule calls<newline>   to a function to be called synchronously.<newline>   The synchronous function is called with one void* argument.<newline>   It should return 0 for success or -1 for failure -- failure should<newline>   be accompanied by an exception.<newline><newline>   If registry succeeds, the registry function returns 0; if it fails<newline>   (e.g. due to too many pending calls) it returns -1 (without setting<newline>   an exception condition).<newline><newline>   Note that because registry may occur from within signal handlers,<newline>   or other asynchronous events, calling malloc() is unsafe!<newline><newline>#ifdef WITH_THREAD<newline>   Any thread can schedule pending calls, but only the main thread<newline>   will execute them.<newline>#endif<newline><newline>   XXX WARNING!  ASYNCHRONOUSLY EXECUTING CODE!<newline>   There are two possible race conditions:<newline>   (1) nested asynchronous registry calls;<newline>   (2) registry calls made while pending calls are being processed.<newline>   While (1) is very unlikely, (2) is a real possibility.<newline>   The current code is safe against (2), but not against (1).<newline>   The safety against (2) is derived from the fact that only one<newline>   thread (the main thread) ever takes things out of the queue.<newline><newline>   XXX Darn!  With the advent of thread state, we should have an array<newline>   of pending calls per thread in the thread state!  Later...<newline>*/"
Text:  "<newline><newline>"
Comment.Preproc:  "#define NPENDINGCALLS 32<newline>"
Keyword:  "static"
Text:  " "
Keyword:  "struct"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t"
Keyword.Type:  "int"
Text:  " "
Punctuation:  "("
Operator:  "*"
Name:  "func"
Punctuation:  ")("
Keyword.Type:  "void"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>\t"
Keyword.Type:  "void"
Text:  " "
Operator:  "*"
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Name:  "pendingcalls"
Punctuation:  "["
Name:  "NPENDINGCALLS"
Punctuation:  "];"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword:  "volatile"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "pendingfirst"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword:  "volatile"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "pendinglast"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword:  "volatile"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "things_to_do"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword.Type:  "int"
Text:  "<newline>"
Name.Function:  "Py_AddPendingCall"
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Punctuation:  "("
Operator:  "*"
Name:  "func"
Punctuation:  ")("
Keyword.Type:  "void"
Text:  " "
Operator:  "*"
Punctuation:  "),"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Operator:  "*"
Name:  "arg"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "static"
Text:  " "
Keyword:  "volatile"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "busy"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t"
Keyword.Type:  "int"
Text:  " "
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "j"
Punctuation:  ";"
Text:  "<newline>\t"
Comment.Multiline:  "/* XXX Begin critical section */"
Text:  "<newline>\t"
Comment.Multiline:  "/* XXX If you want this to be safe against nested<newline>\t   XXX asynchronous calls, you'll have to work harder! */"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "busy"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "busy"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pendinglast"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "j"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Operator:  "%"
Text:  " "
Name:  "NPENDINGCALLS"
Punctuation:  ";"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "j"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "pendingfirst"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "busy"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* Queue full */"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline>\t"
Name:  "pendingcalls"
Punctuation:  "["
Name:  "i"
Punctuation:  "]."
Name:  "func"
Text:  " "
Operator:  "="
Text:  " "
Name:  "func"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "pendingcalls"
Punctuation:  "["
Name:  "i"
Punctuation:  "]."
Name:  "arg"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "pendinglast"
Text:  " "
Operator:  "="
Text:  " "
Name:  "j"
Punctuation:  ";"
Text:  "<newline><newline>\t"
Name:  "_Py_Ticker"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "things_to_do"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* Signal main loop */"
Text:  "<newline>\t"
Name:  "busy"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t"
Comment.Multiline:  "/* XXX End critical section */"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Type:  "int"
Text:  "<newline>"
Name.Function:  "Py_MakePendingCalls"
Punctuation:  "("
Keyword.Type:  "void"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "busy"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#ifdef WITH_THREAD<newline>"
Text:  "\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "main_thread"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyThread_get_thread_ident"
Punctuation:  "()"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "main_thread"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "busy"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "busy"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "things_to_do"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t"
Keyword:  "for"
Text:  " "
Punctuation:  "(;;)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword.Type:  "int"
Text:  " "
Name:  "i"
Punctuation:  ";"
Text:  "<newline>\t\t"
Keyword.Type:  "int"
Text:  " "
Punctuation:  "("
Operator:  "*"
Name:  "func"
Punctuation:  ")("
Keyword.Type:  "void"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>\t\t"
Keyword.Type:  "void"
Text:  " "
Operator:  "*"
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pendingfirst"
Punctuation:  ";"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "pendinglast"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* Queue empty */"
Text:  "<newline>\t\t"
Name:  "func"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pendingcalls"
Punctuation:  "["
Name:  "i"
Punctuation:  "]."
Name:  "func"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "arg"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pendingcalls"
Punctuation:  "["
Name:  "i"
Punctuation:  "]."
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "pendingfirst"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Operator:  "%"
Text:  " "
Name:  "NPENDINGCALLS"
Punctuation:  ";"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "func"
Punctuation:  "("
Name:  "arg"
Punctuation:  ")"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Name:  "busy"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "things_to_do"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* We're not done yet */"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline>\t"
Name:  "busy"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* The interpreter's recursion limit */"
Text:  "<newline><newline>"
Comment.Preproc:  "#ifndef Py_DEFAULT_RECURSION_LIMIT<newline>#define Py_DEFAULT_RECURSION_LIMIT 1000<newline>#endif<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "recursion_limit"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Py_DEFAULT_RECURSION_LIMIT"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Type:  "int"
Text:  " "
Name:  "_Py_CheckRecursionLimit"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Py_DEFAULT_RECURSION_LIMIT"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword.Type:  "int"
Text:  "<newline>"
Name.Function:  "Py_GetRecursionLimit"
Punctuation:  "("
Keyword.Type:  "void"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "recursion_limit"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Type:  "void"
Text:  "<newline>"
Name.Function:  "Py_SetRecursionLimit"
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "new_limit"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Name:  "recursion_limit"
Text:  " "
Operator:  "="
Text:  " "
Name:  "new_limit"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "_Py_CheckRecursionLimit"
Text:  " "
Operator:  "="
Text:  " "
Name:  "recursion_limit"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* the macro Py_EnterRecursiveCall() only calls _Py_CheckRecursiveCall()<newline>   if the recursion_depth reaches _Py_CheckRecursionLimit.<newline>   If USE_STACKCHECK, the macro decrements _Py_CheckRecursionLimit<newline>   to guarantee that _Py_CheckRecursiveCall() is regularly called.<newline>   Without USE_STACKCHECK, there is no need for this. */"
Text:  "<newline>"
Keyword.Type:  "int"
Text:  "<newline>"
Name.Function:  "_Py_CheckRecursiveCall"
Punctuation:  "("
Keyword.Type:  "char"
Text:  " "
Operator:  "*"
Name:  "where"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Name:  "PyThreadState"
Text:  " "
Operator:  "*"
Name:  "tstate"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyThreadState_GET"
Punctuation:  "();"
Text:  "<newline><newline>"
Comment.Preproc:  "#ifdef USE_STACKCHECK<newline>"
Text:  "\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyOS_CheckStack"
Punctuation:  "())"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Operator:  "--"
Name:  "tstate"
Operator:  "->"
Name:  "recursion_depth"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_MemoryError"
Punctuation:  ","
Text:  " "
Literal.String:  "\"Stack overflow\""
Punctuation:  ");"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "recursion_depth"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "recursion_limit"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Operator:  "--"
Name:  "tstate"
Operator:  "->"
Name:  "recursion_depth"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "PyErr_Format"
Punctuation:  "("
Name:  "PyExc_RuntimeError"
Punctuation:  ","
Text:  "<newline>\t\t\t     "
Literal.String:  "\"maximum recursion depth exceeded%s\""
Punctuation:  ","
Text:  "<newline>\t\t\t     "
Name:  "where"
Punctuation:  ");"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline>        "
Name:  "_Py_CheckRecursionLimit"
Text:  " "
Operator:  "="
Text:  " "
Name:  "recursion_limit"
Punctuation:  ";"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Status code for main loop (reason for stack unwind) */"
Text:  "<newline>"
Keyword:  "enum"
Text:  " "
Name:  "why_code"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "WHY_NOT"
Text:  " "
Operator:  "="
Text:  "\t"
Literal.Number.Hex:  "0x0001"
Punctuation:  ","
Text:  "\t"
Comment.Multiline:  "/* No error */"
Text:  "<newline>\t\t"
Name:  "WHY_EXCEPTION"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Hex:  "0x0002"
Punctuation:  ","
Text:  "\t"
Comment.Multiline:  "/* Exception occurred */"
Text:  "<newline>\t\t"
Name:  "WHY_RERAISE"
Text:  " "
Operator:  "="
Text:  "\t"
Literal.Number.Hex:  "0x0004"
Punctuation:  ","
Text:  "\t"
Comment.Multiline:  "/* Exception re-raised by 'finally' */"
Text:  "<newline>\t\t"
Name:  "WHY_RETURN"
Text:  " "
Operator:  "="
Text:  "\t"
Literal.Number.Hex:  "0x0008"
Punctuation:  ","
Text:  "\t"
Comment.Multiline:  "/* 'return' statement */"
Text:  "<newline>\t\t"
Name:  "WHY_BREAK"
Text:  " "
Operator:  "="
Text:  "\t"
Literal.Number.Hex:  "0x0010"
Punctuation:  ","
Text:  "\t"
Comment.Multiline:  "/* 'break' statement */"
Text:  "<newline>\t\t"
Name:  "WHY_CONTINUE"
Text:  " "
Operator:  "="
Text:  "\t"
Literal.Number.Hex:  "0x0020"
Punctuation:  ","
Text:  "\t"
Comment.Multiline:  "/* 'continue' statement */"
Text:  "<newline>\t\t"
Name:  "WHY_YIELD"
Text:  " "
Operator:  "="
Text:  "\t"
Literal.Number.Hex:  "0x0040"
Text:  "\t"
Comment.Multiline:  "/* 'yield' operator */"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword:  "enum"
Text:  " "
Name:  "why_code"
Text:  " "
Name.Function:  "do_raise"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Function:  "unpack_iterable"
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "**"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* for manipulating the thread switch and periodic \"stuff\" - used to be<newline>   per thread, now just a pair o' globals */"
Text:  "<newline>"
Keyword.Type:  "int"
Text:  " "
Name:  "_Py_CheckInterval"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "volatile"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "_Py_Ticker"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ";"
Text:  "<newline><newline>"
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  "<newline>"
Name.Function:  "PyEval_EvalCode"
Punctuation:  "("
Name:  "PyCodeObject"
Text:  " "
Operator:  "*"
Name:  "co"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "globals"
Punctuation:  ","
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "locals"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>\t"
Comment.Multiline:  "/* XXX raise SystemError if globals is NULL */"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "PyEval_EvalCodeEx"
Punctuation:  "("
Name:  "co"
Punctuation:  ","
Text:  "<newline>\t\t\t  "
Name:  "globals"
Punctuation:  ","
Text:  " "
Name:  "locals"
Punctuation:  ","
Text:  "<newline>\t\t\t  "
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "**"
Punctuation:  ")"
Name.Builtin:  "NULL"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  "<newline>\t\t\t  "
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "**"
Punctuation:  ")"
Name.Builtin:  "NULL"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  "<newline>\t\t\t  "
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "**"
Punctuation:  ")"
Name.Builtin:  "NULL"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  "<newline>\t\t\t  "
Name.Builtin:  "NULL"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Interpreter main loop */"
Text:  "<newline><newline>"
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  "<newline>"
Name.Function:  "PyEval_EvalFrame"
Punctuation:  "("
Name:  "PyFrameObject"
Text:  " "
Operator:  "*"
Name:  "f"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t"
Comment.Multiline:  "/* This is for backward compatibility with extension modules that<newline>           used this API; core interpreter code should call PyEval_EvalFrameEx() */"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "PyEval_EvalFrameEx"
Punctuation:  "("
Name:  "f"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name:  "PyObject"
Text:  " "
Operator:  "*"
Text:  "<newline>"
Name.Function:  "PyEval_EvalFrameEx"
Punctuation:  "("
Name:  "PyFrameObject"
Text:  " "
Operator:  "*"
Name:  "f"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "throwflag"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>"
Comment.Preproc:  "#ifdef DXPAIRS<newline>"
Text:  "\t"
Keyword.Type:  "int"
Text:  " "
Name:  "lastopcode"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t"
Keyword:  "register"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "**"
Name:  "stack_pointer"
Punctuation:  ";"
Text:  "   "
Comment.Multiline:  "/* Next free slot in value stack */"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Keyword.Type:  "unsigned"
Text:  " "
Keyword.Type:  "char"
Text:  " "
Operator:  "*"
Name:  "next_instr"
Punctuation:  ";"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "opcode"
Punctuation:  ";"
Text:  "\t"
Comment.Multiline:  "/* Current opcode */"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "oparg"
Punctuation:  ";"
Text:  "\t"
Comment.Multiline:  "/* Current opcode argument, if any */"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Keyword:  "enum"
Text:  " "
Name:  "why_code"
Text:  " "
Name:  "why"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* Reason for block stack unwind */"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "err"
Punctuation:  ";"
Text:  "\t"
Comment.Multiline:  "/* Error status -- nonzero if error */"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "x"
Punctuation:  ";"
Text:  "\t"
Comment.Multiline:  "/* Result object -- NULL if error */"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "v"
Punctuation:  ";"
Text:  "\t"
Comment.Multiline:  "/* Temporary objects popped off stack */"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "w"
Punctuation:  ";"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "u"
Punctuation:  ";"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "t"
Punctuation:  ";"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "stream"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "    "
Comment.Multiline:  "/* for PRINT opcodes */"
Text:  "<newline>\t"
Keyword:  "register"
Text:  " "
Name:  "PyObject"
Text:  " "
Operator:  "**"
Name:  "fastlocals"
Punctuation:  ","
Text:  " "
Operator:  "**"
Name:  "freevars"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "retval"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "\t"
Comment.Multiline:  "/* Return value */"
Text:  "<newline>\t"
Name:  "PyThreadState"
Text:  " "
Operator:  "*"
Name:  "tstate"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyThreadState_GET"
Punctuation:  "();"
Text:  "<newline>\t"
Name:  "PyCodeObject"
Text:  " "
Operator:  "*"
Name:  "co"
Punctuation:  ";"
Text:  "<newline><newline>\t"
Comment.Multiline:  "/* when tracing we set things up so that<newline><newline>               not (instr_lb <= current_bytecode_offset < instr_ub)<newline><newline>\t   is true when the line being executed has changed.  The<newline>           initial values are such as to make this false the first<newline>           time it is tested. */"
Text:  "<newline>\t"
Keyword.Type:  "int"
Text:  " "
Name:  "instr_ub"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "instr_lb"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name:  "instr_prev"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline><newline>\t"
Keyword.Type:  "unsigned"
Text:  " "
Keyword.Type:  "char"
Text:  " "
Operator:  "*"
Name:  "first_instr"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "names"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "consts"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#if defined(Py_DEBUG) || defined(LLTRACE)<newline>"
Text:  "\t"
Comment.Multiline:  "/* Make it easier to find out where we are with a debugger */"
Text:  "<newline>\t"
Keyword.Type:  "char"
Text:  " "
Operator:  "*"
Name:  "filename"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* Tuple access macros */"
Text:  "<newline><newline>"
Comment.Preproc:  "#ifndef Py_DEBUG<newline>#define GETITEM(v, i) PyTuple_GET_ITEM((PyTupleObject *)(v), (i))<newline>#else<newline>#define GETITEM(v, i) PyTuple_GetItem((v), (i))<newline>#endif<newline>"
Text:  "<newline>"
Comment.Preproc:  "#ifdef WITH_TSC<newline>"
Comment.Multiline:  "/* Use Pentium timestamp counter to mark certain events:<newline>   inst0 -- beginning of switch statement for opcode dispatch<newline>   inst1 -- end of switch statement (may be skipped)<newline>   loop0 -- the top of the mainloop<newline>   loop1 -- place where control returns again to top of mainloop<newline>            (may be skipped)<newline>   intr1 -- beginning of long interruption<newline>   intr2 -- end of long interruption<newline><newline>   Many opcodes call out to helper C functions.  In some cases, the<newline>   time in those functions should be counted towards the time for the<newline>   opcode, but not in all cases.  For example, a CALL_FUNCTION opcode<newline>   calls another Python function; there's no point in charge all the<newline>   bytecode executed by the called function to the caller.<newline><newline>   It's hard to make a useful judgement statically.  In the presence<newline>   of operator overloading, it's impossible to tell if a call will<newline>   execute new Python code or not.<newline><newline>   It's a case-by-case judgement.  I'll use intr1 for the following<newline>   cases:<newline><newline>   EXEC_STMT<newline>   IMPORT_STAR<newline>   IMPORT_FROM<newline>   CALL_FUNCTION (and friends)<newline><newline> */"
Text:  "<newline>\t"
Name:  "uint64"
Text:  " "
Name:  "inst0"
Punctuation:  ","
Text:  " "
Name:  "inst1"
Punctuation:  ","
Text:  " "
Name:  "loop0"
Punctuation:  ","
Text:  " "
Name:  "loop1"
Punctuation:  ","
Text:  " "
Name:  "intr0"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name:  "intr1"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t"
Keyword.Type:  "int"
Text:  " "
Name:  "ticked"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline><newline>\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "inst0"
Punctuation:  ");"
Text:  "<newline>\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "inst1"
Punctuation:  ");"
Text:  "<newline>\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "loop0"
Punctuation:  ");"
Text:  "<newline>\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "loop1"
Punctuation:  ");"
Text:  "<newline><newline>\t"
Comment.Multiline:  "/* shut up the compiler */"
Text:  "<newline>\t"
Name:  "opcode"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* Code access macros */"
Text:  "<newline><newline>"
Comment.Preproc:  "#define INSTR_OFFSET()\t((int)(next_instr - first_instr))<newline>#define NEXTOP()\t(*next_instr++)<newline>#define NEXTARG()\t(next_instr += 2, (next_instr[-1]<<8) + next_instr[-2])<newline>#define PEEKARG()\t((next_instr[2]<<8) + next_instr[1])<newline>#define JUMPTO(x)\t(next_instr = first_instr + (x))<newline>#define JUMPBY(x)\t(next_instr += (x))<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* OpCode prediction macros<newline>\tSome opcodes tend to come in pairs thus making it possible to predict<newline>\tthe second code when the first is run.  For example, COMPARE_OP is often<newline>\tfollowed by JUMP_IF_FALSE or JUMP_IF_TRUE.  And, those opcodes are often<newline>\tfollowed by a POP_TOP.<newline><newline>\tVerifying the prediction costs a single high-speed test of register<newline>\tvariable against a constant.  If the pairing was good, then the<newline>\tprocessor has a high likelihood of making its own successful branch<newline>\tprediction which results in a nearly zero overhead transition to the<newline>\tnext opcode.<newline><newline>\tA successful prediction saves a trip through the eval-loop including<newline>\tits two unpredictable branches, the HASARG test and the switch-case.<newline><newline>        If collecting opcode statistics, turn off prediction so that<newline>\tstatistics are accurately maintained (the predictions bypass<newline>\tthe opcode frequency counter updates).<newline>*/"
Text:  "<newline><newline>"
Comment.Preproc:  "#ifdef DYNAMIC_EXECUTION_PROFILE<newline>#define PREDICT(op)\t\tif (0) goto PRED_##op<newline>#else<newline>#define PREDICT(op)\t\tif (*next_instr == op) goto PRED_##op<newline>#endif<newline>"
Text:  "<newline>"
Comment.Preproc:  "#define PREDICTED(op)\t\tPRED_##op: next_instr++<newline>#define PREDICTED_WITH_ARG(op)\tPRED_##op: oparg = PEEKARG(); next_instr += 3<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* Stack manipulation macros */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* The stack can grow at most MAXINT deep, as co_nlocals and<newline>   co_stacksize are ints. */"
Text:  "<newline>"
Comment.Preproc:  "#define STACK_LEVEL()\t((int)(stack_pointer - f->f_valuestack))<newline>#define EMPTY()\t\t(STACK_LEVEL() == 0)<newline>#define TOP()\t\t(stack_pointer[-1])<newline>#define SECOND()\t(stack_pointer[-2])<newline>#define THIRD() \t(stack_pointer[-3])<newline>#define FOURTH()\t(stack_pointer[-4])<newline>#define SET_TOP(v)\t(stack_pointer[-1] = (v))<newline>#define SET_SECOND(v)\t(stack_pointer[-2] = (v))<newline>#define SET_THIRD(v)\t(stack_pointer[-3] = (v))<newline>#define SET_FOURTH(v)\t(stack_pointer[-4] = (v))<newline>#define BASIC_STACKADJ(n)\t(stack_pointer += n)<newline>#define BASIC_PUSH(v)\t(*stack_pointer++ = (v))<newline>#define BASIC_POP()\t(*--stack_pointer)<newline>"
Text:  "<newline>"
Comment.Preproc:  "#ifdef LLTRACE<newline>#define PUSH(v)\t\t{ (void)(BASIC_PUSH(v), \\<newline>                               lltrace && prtrace(TOP(), \"push\")); \\<newline>                               assert(STACK_LEVEL() <= co->co_stacksize); }<newline>#define POP()\t\t((void)(lltrace && prtrace(TOP(), \"pop\")), BASIC_POP())<newline>#define STACKADJ(n)\t{ (void)(BASIC_STACKADJ(n), \\<newline>                               lltrace && prtrace(TOP(), \"stackadj\")); \\<newline>                               assert(STACK_LEVEL() <= co->co_stacksize); }<newline>#define EXT_POP(STACK_POINTER) (lltrace && prtrace(*(STACK_POINTER), \"ext_pop\"), *--(STACK_POINTER))<newline>#else<newline>#define PUSH(v)\t\tBASIC_PUSH(v)<newline>#define POP()\t\tBASIC_POP()<newline>#define STACKADJ(n)\tBASIC_STACKADJ(n)<newline>#define EXT_POP(STACK_POINTER) (*--(STACK_POINTER))<newline>#endif<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* Local variable macros */"
Text:  "<newline><newline>"
Comment.Preproc:  "#define GETLOCAL(i)\t(fastlocals[i])<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* The SETLOCAL() macro must not DECREF the local variable in-place and<newline>   then store the new value; it must copy the old value to a temporary<newline>   value, then store the new value, and then DECREF the temporary value.<newline>   This is because it is possible that during the DECREF the frame is<newline>   accessed by other code (e.g. a __del__ method or gc.collect()) and the<newline>   variable would be pointing to already-freed memory. */"
Text:  "<newline>"
Comment.Preproc:  "#define SETLOCAL(i, value)\tdo { PyObject *tmp = GETLOCAL(i); \\<newline>\t\t\t\t     GETLOCAL(i) = value; \\<newline>                                     Py_XDECREF(tmp); } while (0)<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* Start of code */"
Text:  "<newline><newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "f"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline><newline>\t"
Comment.Multiline:  "/* push frame */"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "Py_EnterRecursiveCall"
Punctuation:  "("
Literal.String:  "\"\""
Punctuation:  "))"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline><newline>\t"
Name:  "tstate"
Operator:  "->"
Name:  "frame"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Punctuation:  ";"
Text:  "<newline><newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "use_tracing"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_tracefunc"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* tstate->c_tracefunc, if defined, is a<newline>\t\t\t   function that will be called on *every* entry<newline>\t\t\t   to a code block.  Its return value, if not<newline>\t\t\t   None, is a function that will be called at<newline>\t\t\t   the start of each executed line of code.<newline>\t\t\t   (Actually, the function must return itself<newline>\t\t\t   in order to continue tracing.)  The trace<newline>\t\t\t   functions are called with three arguments:<newline>\t\t\t   a pointer to the current frame, a string<newline>\t\t\t   indicating why the function is called, and<newline>\t\t\t   an argument which depends on the situation.<newline>\t\t\t   The global trace function is also called<newline>\t\t\t   whenever an exception is detected. */"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "call_trace"
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_tracefunc"
Punctuation:  ","
Text:  " "
Name:  "tstate"
Operator:  "->"
Name:  "c_traceobj"
Punctuation:  ","
Text:  "<newline>\t\t\t\t       "
Name:  "f"
Punctuation:  ","
Text:  " "
Name:  "PyTrace_CALL"
Punctuation:  ","
Text:  " "
Name:  "Py_None"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* Trace function raised an error */"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "exit_eval_frame"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_profilefunc"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* Similar for c_profilefunc, except it needn't<newline>\t\t\t   return itself and isn't called for \"line\" events */"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "call_trace"
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_profilefunc"
Punctuation:  ","
Text:  "<newline>\t\t\t\t       "
Name:  "tstate"
Operator:  "->"
Name:  "c_profileobj"
Punctuation:  ","
Text:  "<newline>\t\t\t\t       "
Name:  "f"
Punctuation:  ","
Text:  " "
Name:  "PyTrace_CALL"
Punctuation:  ","
Text:  " "
Name:  "Py_None"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* Profile function raised an error */"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "exit_eval_frame"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Name:  "co"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_code"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "names"
Text:  " "
Operator:  "="
Text:  " "
Name:  "co"
Operator:  "->"
Name:  "co_names"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "consts"
Text:  " "
Operator:  "="
Text:  " "
Name:  "co"
Operator:  "->"
Name:  "co_consts"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "fastlocals"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_localsplus"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "freevars"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_localsplus"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "co"
Operator:  "->"
Name:  "co_nlocals"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "first_instr"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Type:  "unsigned"
Text:  " "
Keyword.Type:  "char"
Operator:  "*"
Punctuation:  ")"
Text:  " "
Name:  "PyString_AS_STRING"
Punctuation:  "("
Name:  "co"
Operator:  "->"
Name:  "co_code"
Punctuation:  ");"
Text:  "<newline>\t"
Comment.Multiline:  "/* An explanation is in order for the next line.<newline><newline>\t   f->f_lasti now refers to the index of the last instruction<newline>\t   executed.  You might think this was obvious from the name, but<newline>\t   this wasn't always true before 2.3!  PyFrame_New now sets<newline>\t   f->f_lasti to -1 (i.e. the index *before* the first instruction)<newline>\t   and YIELD_VALUE doesn't fiddle with f_lasti any more.  So this<newline>\t   does work.  Promise. */"
Text:  "<newline>\t"
Name:  "next_instr"
Text:  " "
Operator:  "="
Text:  " "
Name:  "first_instr"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_lasti"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "stack_pointer"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_stacktop"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "assert"
Punctuation:  "("
Name:  "stack_pointer"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ");"
Text:  "<newline>\t"
Name:  "f"
Operator:  "->"
Name:  "f_stacktop"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "\t"
Comment.Multiline:  "/* remains NULL unless yield suspends frame */"
Text:  "<newline><newline>"
Comment.Preproc:  "#ifdef LLTRACE<newline>"
Text:  "\t"
Name:  "lltrace"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyDict_GetItemString"
Punctuation:  "("
Name:  "f"
Operator:  "->"
Name:  "f_globals"
Punctuation:  ","
Text:  " "
Literal.String:  "\"__lltrace__\""
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>#if defined(Py_DEBUG) || defined(LLTRACE)<newline>"
Text:  "\t"
Name:  "filename"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyString_AsString"
Punctuation:  "("
Name:  "co"
Operator:  "->"
Name:  "co_filename"
Punctuation:  ");"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "<newline>\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_NOT"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Py_None"
Punctuation:  ";"
Text:  "\t"
Comment.Multiline:  "/* Not a reference, just anything non-NULL */"
Text:  "<newline>\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline><newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "throwflag"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Comment.Multiline:  "/* support for generator.throw() */"
Text:  "<newline>\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline>\t\t"
Keyword:  "goto"
Text:  " "
Name:  "on_error"
Punctuation:  ";"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "for"
Text:  " "
Punctuation:  "(;;)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Comment.Preproc:  "#ifdef WITH_TSC<newline>"
Text:  "\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "inst1"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* Almost surely, the opcode executed a break<newline>\t\t\t   or a continue, preventing inst1 from being set<newline>\t\t\t   on the way out of the loop.<newline>\t\t\t*/"
Text:  "<newline>\t\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "inst1"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "loop1"
Text:  " "
Operator:  "="
Text:  " "
Name:  "inst1"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Name:  "dump_tsc"
Punctuation:  "("
Name:  "opcode"
Punctuation:  ","
Text:  " "
Name:  "ticked"
Punctuation:  ","
Text:  " "
Name:  "inst0"
Punctuation:  ","
Text:  " "
Name:  "inst1"
Punctuation:  ","
Text:  " "
Name:  "loop0"
Punctuation:  ","
Text:  " "
Name:  "loop1"
Punctuation:  ","
Text:  "<newline>\t\t\t "
Name:  "intr0"
Punctuation:  ","
Text:  " "
Name:  "intr1"
Punctuation:  ");"
Text:  "<newline>\t\t"
Name:  "ticked"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "inst1"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "intr0"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "intr1"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "loop0"
Punctuation:  ");"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t\t"
Name:  "assert"
Punctuation:  "("
Name:  "stack_pointer"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_valuestack"
Punctuation:  ");"
Text:  " "
Comment.Multiline:  "/* else underflow */"
Text:  "<newline>\t\t"
Name:  "assert"
Punctuation:  "("
Name:  "STACK_LEVEL"
Punctuation:  "()"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "co"
Operator:  "->"
Name:  "co_stacksize"
Punctuation:  ");"
Text:  "  "
Comment.Multiline:  "/* else overflow */"
Text:  "<newline><newline>\t\t"
Comment.Multiline:  "/* Do periodic things.  Doing this every time through<newline>\t\t   the loop would add too much overhead, so we do it<newline>\t\t   only every Nth instruction.  We also do it if<newline>\t\t   ``things_to_do'' is set, i.e. when an asynchronous<newline>\t\t   event needs attention (e.g. a signal handler or<newline>\t\t   async I/O handler); see Py_AddPendingCall() and<newline>\t\t   Py_MakePendingCalls() above. */"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Operator:  "--"
Name:  "_Py_Ticker"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Operator:  "*"
Name:  "next_instr"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "SETUP_FINALLY"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                                "
Comment.Multiline:  "/* Make the last opcode before<newline>                                   a try: finally: block uninterruptable. */"
Text:  "<newline>                                "
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline>                        "
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "_Py_Ticker"
Text:  " "
Operator:  "="
Text:  " "
Name:  "_Py_CheckInterval"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "tstate"
Operator:  "->"
Name:  "tick_counter"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#ifdef WITH_TSC<newline>"
Text:  "\t\t\t"
Name:  "ticked"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "things_to_do"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "Py_MakePendingCalls"
Punctuation:  "()"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "on_error"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "things_to_do"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Comment.Multiline:  "/* MakePendingCalls() didn't succeed.<newline>\t\t\t\t\t   Force early re-execution of this<newline>\t\t\t\t\t   \"periodic\" code, possibly after<newline>\t\t\t\t\t   a thread switch */"
Text:  "<newline>\t\t\t\t\t"
Name:  "_Py_Ticker"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#ifdef WITH_THREAD<newline>"
Text:  "\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* Give another thread a chance */"
Text:  "<newline><newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyThreadState_Swap"
Punctuation:  "("
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "tstate"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Name:  "Py_FatalError"
Punctuation:  "("
Literal.String:  "\"ceval: tstate mix-up\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "PyThread_release_lock"
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ");"
Text:  "<newline><newline>\t\t\t\t"
Comment.Multiline:  "/* Other threads may run now */"
Text:  "<newline><newline>\t\t\t\t"
Name:  "PyThread_acquire_lock"
Punctuation:  "("
Name:  "interpreter_lock"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyThreadState_Swap"
Punctuation:  "("
Name:  "tstate"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Name:  "Py_FatalError"
Punctuation:  "("
Literal.String:  "\"ceval: orphan tstate\""
Punctuation:  ");"
Text:  "<newline><newline>\t\t\t\t"
Comment.Multiline:  "/* Check for thread interrupts */"
Text:  "<newline><newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "async_exc"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "tstate"
Operator:  "->"
Name:  "async_exc"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Name:  "tstate"
Operator:  "->"
Name:  "async_exc"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyErr_SetNone"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "on_error"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Name.Label:  "fast_next_opcode:"
Text:  "<newline>\t\t"
Name:  "f"
Operator:  "->"
Name:  "f_lasti"
Text:  " "
Operator:  "="
Text:  " "
Name:  "INSTR_OFFSET"
Punctuation:  "();"
Text:  "<newline><newline>\t\t"
Comment.Multiline:  "/* line-by-line tracing support */"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_tracefunc"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Text:  " "
Operator:  "&&"
Text:  " "
Operator:  "!"
Name:  "tstate"
Operator:  "->"
Name:  "tracing"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* see maybe_call_line_trace<newline>\t\t\t   for expository comments */"
Text:  "<newline>\t\t\t"
Name:  "f"
Operator:  "->"
Name:  "f_stacktop"
Text:  " "
Operator:  "="
Text:  " "
Name:  "stack_pointer"
Punctuation:  ";"
Text:  "<newline><newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "maybe_call_line_trace"
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_tracefunc"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t    "
Name:  "tstate"
Operator:  "->"
Name:  "c_traceobj"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t    "
Name:  "f"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "instr_lb"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "instr_ub"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t    "
Operator:  "&"
Name:  "instr_prev"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* Reload possibly changed frame fields */"
Text:  "<newline>\t\t\t"
Name:  "JUMPTO"
Punctuation:  "("
Name:  "f"
Operator:  "->"
Name:  "f_lasti"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "f"
Operator:  "->"
Name:  "f_stacktop"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "stack_pointer"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_stacktop"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "f"
Operator:  "->"
Name:  "f_stacktop"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* trace function raised an exception */"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "on_error"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Comment.Multiline:  "/* Extract opcode and argument */"
Text:  "<newline><newline>\t\t"
Name:  "opcode"
Text:  " "
Operator:  "="
Text:  " "
Name:  "NEXTOP"
Punctuation:  "();"
Text:  "<newline>\t\t"
Name:  "oparg"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "   "
Comment.Multiline:  "/* allows oparg to be stored in a register because<newline>\t\t\tit doesn't have to be remembered across a full loop */"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "HAS_ARG"
Punctuation:  "("
Name:  "opcode"
Punctuation:  "))"
Text:  "<newline>\t\t\t"
Name:  "oparg"
Text:  " "
Operator:  "="
Text:  " "
Name:  "NEXTARG"
Punctuation:  "();"
Text:  "<newline>\t  "
Name.Label:  "dispatch_opcode:"
Text:  "<newline>"
Comment.Preproc:  "#ifdef DYNAMIC_EXECUTION_PROFILE<newline>#ifdef DXPAIRS<newline>"
Text:  "\t\t"
Name:  "dxpairs"
Punctuation:  "["
Name:  "lastopcode"
Punctuation:  "]["
Name:  "opcode"
Punctuation:  "]"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "lastopcode"
Text:  " "
Operator:  "="
Text:  " "
Name:  "opcode"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t\t"
Name:  "dxp"
Punctuation:  "["
Name:  "opcode"
Punctuation:  "]"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "<newline>"
Comment.Preproc:  "#ifdef LLTRACE<newline>"
Text:  "\t\t"
Comment.Multiline:  "/* Instruction tracing */"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "lltrace"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "HAS_ARG"
Punctuation:  "("
Name:  "opcode"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "printf"
Punctuation:  "("
Literal.String:  "\"%d: %d, %d"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  "<newline>\t\t\t\t       "
Name:  "f"
Operator:  "->"
Name:  "f_lasti"
Punctuation:  ","
Text:  " "
Name:  "opcode"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "printf"
Punctuation:  "("
Literal.String:  "\"%d: %d"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  "<newline>\t\t\t\t       "
Name:  "f"
Operator:  "->"
Name:  "f_lasti"
Punctuation:  ","
Text:  " "
Name:  "opcode"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "<newline>\t\t"
Comment.Multiline:  "/* Main switch on opcode */"
Text:  "<newline>\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "inst0"
Punctuation:  ");"
Text:  "<newline><newline>\t\t"
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "opcode"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>\t\t"
Comment.Multiline:  "/* BEWARE!<newline>\t\t   It is essential that any operation that fails sets either<newline>\t\t   x to NULL, err to nonzero, or why to anything but WHY_NOT,<newline>\t\t   and that no operation that succeeds does this! */"
Text:  "<newline><newline>\t\t"
Comment.Multiline:  "/* case STOP_CODE: this is an error! */"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "NOP"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "LOAD_FAST"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETLOCAL"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "format_exc_check_arg"
Punctuation:  "("
Name:  "PyExc_UnboundLocalError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t"
Name:  "UNBOUNDLOCAL_ERROR_MSG"
Punctuation:  ","
Text:  "<newline>\t\t\t\t"
Name:  "PyTuple_GetItem"
Punctuation:  "("
Name:  "co"
Operator:  "->"
Name:  "co_varnames"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  "));"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "LOAD_CONST"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "consts"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Name:  "PREDICTED_WITH_ARG"
Punctuation:  "("
Name:  "STORE_FAST"
Punctuation:  ");"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "STORE_FAST"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "SETLOCAL"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Name:  "PREDICTED"
Punctuation:  "("
Name:  "POP_TOP"
Punctuation:  ");"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "POP_TOP"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "ROT_TWO"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "SECOND"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_SECOND"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "ROT_THREE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "SECOND"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "THIRD"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_SECOND"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_THIRD"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "ROT_FOUR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "SECOND"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "THIRD"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "FOURTH"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_SECOND"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_THIRD"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_FOURTH"
Punctuation:  "("
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "DUP_TOP"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "DUP_TOPX"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "oparg"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "SECOND"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "STACKADJ"
Punctuation:  "("
Literal.Number.Integer:  "2"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "SET_SECOND"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "oparg"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "SECOND"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "THIRD"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "STACKADJ"
Punctuation:  "("
Literal.Number.Integer:  "3"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "SET_SECOND"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "SET_THIRD"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_FatalError"
Punctuation:  "("
Literal.String:  "\"invalid argument to DUP_TOPX\""
Text:  "<newline>\t\t\t\t      "
Literal.String:  "\" (bytecode corruption?)\""
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "UNARY_POSITIVE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Positive"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "UNARY_NEGATIVE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Negative"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "UNARY_NOT"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_IsTrue"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "Py_True"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "Py_True"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "Py_False"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "Py_False"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "STACKADJ"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "UNARY_CONVERT"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_Repr"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "UNARY_INVERT"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Invert"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_POWER"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Power"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "Py_None"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_MULTIPLY"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Multiply"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_DIVIDE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "_Py_QnewFlag"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Divide"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* -Qnew is in effect:\tfall through to<newline>\t\t\t   BINARY_TRUE_DIVIDE */"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_TRUE_DIVIDE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_TrueDivide"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_FLOOR_DIVIDE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_FloorDivide"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_MODULO"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Remainder"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_ADD"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyInt_CheckExact"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyInt_CheckExact"
Punctuation:  "("
Name:  "w"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* INLINE: int + int */"
Text:  "<newline>\t\t\t\t"
Keyword:  "register"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Name:  "a"
Punctuation:  ","
Text:  " "
Name:  "b"
Punctuation:  ","
Text:  " "
Name:  "i"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "i"
Operator:  "^"
Name:  "a"
Punctuation:  ")"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "&&"
Text:  " "
Punctuation:  "("
Name:  "i"
Operator:  "^"
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "slow_add"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_FromLong"
Punctuation:  "("
Name:  "i"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyString_CheckExact"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  "<newline>\t\t\t\t "
Name:  "PyString_CheckExact"
Punctuation:  "("
Name:  "w"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "string_concatenate"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "f"
Punctuation:  ","
Text:  " "
Name:  "next_instr"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* string_concatenate consumed the ref to v */"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "skip_decref_vx"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t  "
Name.Label:  "slow_add:"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Add"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t  "
Name.Label:  "skip_decref_vx:"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_SUBTRACT"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyInt_CheckExact"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyInt_CheckExact"
Punctuation:  "("
Name:  "w"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* INLINE: int - int */"
Text:  "<newline>\t\t\t\t"
Keyword:  "register"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Name:  "a"
Punctuation:  ","
Text:  " "
Name:  "b"
Punctuation:  ","
Text:  " "
Name:  "i"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "i"
Operator:  "^"
Name:  "a"
Punctuation:  ")"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "&&"
Text:  " "
Punctuation:  "("
Name:  "i"
Operator:  "^~"
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "slow_sub"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_FromLong"
Punctuation:  "("
Name:  "i"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t  "
Name.Label:  "slow_sub:"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Subtract"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_SUBSCR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyList_CheckExact"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyInt_CheckExact"
Punctuation:  "("
Name:  "w"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* INLINE: list[int] */"
Text:  "<newline>\t\t\t\t"
Name:  "Py_ssize_t"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_AsSsize_t"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  "+="
Text:  " "
Name:  "PyList_GET_SIZE"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "PyList_GET_SIZE"
Punctuation:  "("
Name:  "v"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyList_GET_ITEM"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "i"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "slow_get"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t  "
Name.Label:  "slow_get:"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_GetItem"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_LSHIFT"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Lshift"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_RSHIFT"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Rshift"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_AND"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_And"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_XOR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Xor"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BINARY_OR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_Or"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "LIST_APPEND"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyList_Append"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PREDICT"
Punctuation:  "("
Name:  "JUMP_ABSOLUTE"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_POWER"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlacePower"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "Py_None"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_MULTIPLY"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceMultiply"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_DIVIDE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "_Py_QnewFlag"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceDivide"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* -Qnew is in effect:\tfall through to<newline>\t\t\t   INPLACE_TRUE_DIVIDE */"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_TRUE_DIVIDE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceTrueDivide"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_FLOOR_DIVIDE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceFloorDivide"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_MODULO"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceRemainder"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_ADD"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyInt_CheckExact"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyInt_CheckExact"
Punctuation:  "("
Name:  "w"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* INLINE: int + int */"
Text:  "<newline>\t\t\t\t"
Keyword:  "register"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Name:  "a"
Punctuation:  ","
Text:  " "
Name:  "b"
Punctuation:  ","
Text:  " "
Name:  "i"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "i"
Operator:  "^"
Name:  "a"
Punctuation:  ")"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "&&"
Text:  " "
Punctuation:  "("
Name:  "i"
Operator:  "^"
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "slow_iadd"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_FromLong"
Punctuation:  "("
Name:  "i"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyString_CheckExact"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  "<newline>\t\t\t\t "
Name:  "PyString_CheckExact"
Punctuation:  "("
Name:  "w"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "string_concatenate"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "f"
Punctuation:  ","
Text:  " "
Name:  "next_instr"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* string_concatenate consumed the ref to v */"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "skip_decref_v"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t  "
Name.Label:  "slow_iadd:"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceAdd"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t  "
Name.Label:  "skip_decref_v:"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_SUBTRACT"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyInt_CheckExact"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyInt_CheckExact"
Punctuation:  "("
Name:  "w"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* INLINE: int - int */"
Text:  "<newline>\t\t\t\t"
Keyword:  "register"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Name:  "a"
Punctuation:  ","
Text:  " "
Name:  "b"
Punctuation:  ","
Text:  " "
Name:  "i"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "i"
Operator:  "^"
Name:  "a"
Punctuation:  ")"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "&&"
Text:  " "
Punctuation:  "("
Name:  "i"
Operator:  "^~"
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "slow_isub"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_FromLong"
Punctuation:  "("
Name:  "i"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t  "
Name.Label:  "slow_isub:"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceSubtract"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_LSHIFT"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceLshift"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_RSHIFT"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceRshift"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_AND"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceAnd"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_XOR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceXor"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "INPLACE_OR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyNumber_InPlaceOr"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "SLICE"
Operator:  "+"
Literal.Number.Integer:  "0"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "SLICE"
Operator:  "+"
Literal.Number.Integer:  "1"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "SLICE"
Operator:  "+"
Literal.Number.Integer:  "2"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "SLICE"
Operator:  "+"
Literal.Number.Integer:  "3"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "opcode"
Operator:  "-"
Name:  "SLICE"
Punctuation:  ")"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "opcode"
Operator:  "-"
Name:  "SLICE"
Punctuation:  ")"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "apply_slice"
Punctuation:  "("
Name:  "u"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "STORE_SLICE"
Operator:  "+"
Literal.Number.Integer:  "0"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "STORE_SLICE"
Operator:  "+"
Literal.Number.Integer:  "1"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "STORE_SLICE"
Operator:  "+"
Literal.Number.Integer:  "2"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "STORE_SLICE"
Operator:  "+"
Literal.Number.Integer:  "3"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "opcode"
Operator:  "-"
Name:  "STORE_SLICE"
Punctuation:  ")"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "opcode"
Operator:  "-"
Name:  "STORE_SLICE"
Punctuation:  ")"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "t"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "assign_slice"
Punctuation:  "("
Name:  "u"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "t"
Punctuation:  ");"
Text:  " "
Comment.Multiline:  "/* u[v:w] = t */"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "t"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "DELETE_SLICE"
Operator:  "+"
Literal.Number.Integer:  "0"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "DELETE_SLICE"
Operator:  "+"
Literal.Number.Integer:  "1"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "DELETE_SLICE"
Operator:  "+"
Literal.Number.Integer:  "2"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "DELETE_SLICE"
Operator:  "+"
Literal.Number.Integer:  "3"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "opcode"
Operator:  "-"
Name:  "DELETE_SLICE"
Punctuation:  ")"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "opcode"
Operator:  "-"
Name:  "DELETE_SLICE"
Punctuation:  ")"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "assign_slice"
Punctuation:  "("
Name:  "u"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ")"
Name.Builtin:  "NULL"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Multiline:  "/* del u[v:w] */"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "STORE_SUBSCR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "SECOND"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "THIRD"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "STACKADJ"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "3"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* v[w] = u */"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_SetItem"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "DELETE_SUBSCR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "SECOND"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "STACKADJ"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "2"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* del v[w] */"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_DelItem"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "PRINT_EXPR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PySys_GetObject"
Punctuation:  "("
Literal.String:  "\"displayhook\""
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_RuntimeError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t"
Literal.String:  "\"lost sys.displayhook\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyTuple_Pack"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyEval_CallObject"
Punctuation:  "("
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "PRINT_ITEM_TO"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "stream"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* fall through to PRINT_ITEM */"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "PRINT_ITEM"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "stream"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Text:  " "
Operator:  "||"
Text:  " "
Name:  "stream"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "Py_None"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PySys_GetObject"
Punctuation:  "("
Literal.String:  "\"stdout\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_RuntimeError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t\t"
Literal.String:  "\"lost sys.stdout\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* PyFile_SoftSpace() can exececute arbitrary code<newline>\t\t\t   if sys.stdout is an instance with a __getattr__.<newline>\t\t\t   If __getattr__ raises an exception, w will<newline>\t\t\t   be freed, so we need to prevent that temporarily. */"
Text:  "<newline>\t\t\t"
Name:  "Py_XINCREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyFile_SoftSpace"
Punctuation:  "("
Name:  "w"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyFile_WriteString"
Punctuation:  "("
Literal.String:  "\" \""
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyFile_WriteObject"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "Py_PRINT_RAW"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t    "
Comment.Multiline:  "/* XXX move into writeobject() ? */"
Text:  "<newline>\t\t\t    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyString_Check"
Punctuation:  "("
Name:  "v"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword.Type:  "char"
Text:  " "
Operator:  "*"
Name:  "s"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyString_AS_STRING"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_ssize_t"
Text:  " "
Name:  "len"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyString_GET_SIZE"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "len"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "||"
Text:  "<newline>\t\t\t\t    "
Operator:  "!"
Name:  "isspace"
Punctuation:  "("
Name:  "Py_CHARMASK"
Punctuation:  "("
Name:  "s"
Punctuation:  "["
Name:  "len"
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  "]))"
Text:  " "
Operator:  "||"
Text:  "<newline>\t\t\t\t    "
Name:  "s"
Punctuation:  "["
Name:  "len"
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "=="
Text:  " "
Literal.String.Char:  "' '"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyFile_SoftSpace"
Punctuation:  "("
Name:  "w"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>\t\t\t    "
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#ifdef Py_USING_UNICODE<newline>"
Text:  "\t\t\t    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyUnicode_Check"
Punctuation:  "("
Name:  "v"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "Py_UNICODE"
Text:  " "
Operator:  "*"
Name:  "s"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyUnicode_AS_UNICODE"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_ssize_t"
Text:  " "
Name:  "len"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyUnicode_GET_SIZE"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "len"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "||"
Text:  "<newline>\t\t\t\t    "
Operator:  "!"
Name:  "Py_UNICODE_ISSPACE"
Punctuation:  "("
Name:  "s"
Punctuation:  "["
Name:  "len"
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  "])"
Text:  " "
Operator:  "||"
Text:  "<newline>\t\t\t\t    "
Name:  "s"
Punctuation:  "["
Name:  "len"
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "=="
Text:  " "
Literal.String.Char:  "' '"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t    "
Name:  "PyFile_SoftSpace"
Punctuation:  "("
Name:  "w"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>\t\t\t    "
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t\t\t    "
Keyword:  "else"
Text:  "<newline>\t\t\t    \t"
Name:  "PyFile_SoftSpace"
Punctuation:  "("
Name:  "w"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "stream"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "stream"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "PRINT_NEWLINE_TO"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "stream"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* fall through to PRINT_NEWLINE */"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "PRINT_NEWLINE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "stream"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Text:  " "
Operator:  "||"
Text:  " "
Name:  "stream"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "Py_None"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PySys_GetObject"
Punctuation:  "("
Literal.String:  "\"stdout\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_RuntimeError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t\t"
Literal.String:  "\"lost sys.stdout\""
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyFile_WriteString"
Punctuation:  "("
Literal.String:  "\""
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyFile_SoftSpace"
Punctuation:  "("
Name:  "w"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "stream"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "stream"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline><newline>"
Comment.Preproc:  "#ifdef CASE_TOO_BIG<newline>"
Text:  "\t\t"
Name.Label:  "default:"
Text:  " "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "opcode"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t\t"
Keyword:  "case"
Text:  " "
Name:  "RAISE_VARARGS"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "oparg"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "case"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ":"
Text:  "<newline>\t\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  " "
Comment.Multiline:  "/* traceback */"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* Fallthrough */"
Text:  "<newline>\t\t\t"
Keyword:  "case"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ":"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  " "
Comment.Multiline:  "/* value */"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* Fallthrough */"
Text:  "<newline>\t\t\t"
Keyword:  "case"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ":"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  " "
Comment.Multiline:  "/* exc */"
Text:  "<newline>\t\t\t"
Keyword:  "case"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ":"
Text:  " "
Comment.Multiline:  "/* Fallthrough */"
Text:  "<newline>\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "do_raise"
Punctuation:  "("
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name.Label:  "default:"
Text:  "<newline>\t\t\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_SystemError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t   "
Literal.String:  "\"bad RAISE_VARARGS oparg\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "LOAD_LOCALS"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_locals"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_SystemError"
Punctuation:  ","
Text:  " "
Literal.String:  "\"no locals\""
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "RETURN_VALUE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "retval"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_RETURN"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_block_end"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "YIELD_VALUE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "retval"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "f"
Operator:  "->"
Name:  "f_stacktop"
Text:  " "
Operator:  "="
Text:  " "
Name:  "stack_pointer"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_YIELD"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_yield"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "EXEC_STMT"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "SECOND"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "THIRD"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "STACKADJ"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "3"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "intr0"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "exec_statement"
Punctuation:  "("
Name:  "f"
Punctuation:  ","
Text:  " "
Name:  "u"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "intr1"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "POP_BLOCK"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PyTryBlock"
Text:  " "
Operator:  "*"
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyFrame_BlockPop"
Punctuation:  "("
Name:  "f"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name:  "STACK_LEVEL"
Punctuation:  "()"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Operator:  "->"
Name:  "b_level"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "END_FINALLY"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyInt_Check"
Punctuation:  "("
Name:  "v"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword:  "enum"
Text:  " "
Name:  "why_code"
Punctuation:  ")"
Text:  " "
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "assert"
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "WHY_YIELD"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_RETURN"
Text:  " "
Operator:  "||"
Text:  "<newline>\t\t\t\t    "
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_CONTINUE"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Name:  "retval"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyExceptionClass_Check"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Name:  "PyString_Check"
Punctuation:  "("
Name:  "v"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "PyErr_Restore"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_RERAISE"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "v"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "Py_None"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_SystemError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t"
Literal.String:  "\"'finally' pops bad exception\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BUILD_CLASS"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "SECOND"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "THIRD"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "STACKADJ"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "2"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "build_class"
Punctuation:  "("
Name:  "u"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "STORE_NAME"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_locals"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyDict_CheckExact"
Punctuation:  "("
Name:  "x"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyDict_SetItem"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_SetItem"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "PyErr_Format"
Punctuation:  "("
Name:  "PyExc_SystemError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t     "
Literal.String:  "\"no locals found when storing %s\""
Punctuation:  ","
Text:  "<newline>\t\t\t\t     "
Name:  "PyObject_REPR"
Punctuation:  "("
Name:  "w"
Punctuation:  "));"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "DELETE_NAME"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_locals"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_DelItem"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  "))"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Name:  "format_exc_check_arg"
Punctuation:  "("
Name:  "PyExc_NameError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t\t\t"
Name:  "NAME_ERROR_MSG"
Text:  " "
Punctuation:  ","
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "PyErr_Format"
Punctuation:  "("
Name:  "PyExc_SystemError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t     "
Literal.String:  "\"no locals when deleting %s\""
Punctuation:  ","
Text:  "<newline>\t\t\t\t     "
Name:  "PyObject_REPR"
Punctuation:  "("
Name:  "w"
Punctuation:  "));"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Name:  "PREDICTED_WITH_ARG"
Punctuation:  "("
Name:  "UNPACK_SEQUENCE"
Punctuation:  ");"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "UNPACK_SEQUENCE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyTuple_CheckExact"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyTuple_GET_SIZE"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "oparg"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PyObject"
Text:  " "
Operator:  "**"
Name:  "items"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "(("
Name:  "PyTupleObject"
Text:  " "
Operator:  "*"
Punctuation:  ")"
Name:  "v"
Punctuation:  ")"
Operator:  "->"
Name:  "ob_item"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name:  "oparg"
Operator:  "--"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "items"
Punctuation:  "["
Name:  "oparg"
Punctuation:  "];"
Text:  "<newline>\t\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyList_CheckExact"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyList_GET_SIZE"
Punctuation:  "("
Name:  "v"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "oparg"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PyObject"
Text:  " "
Operator:  "**"
Name:  "items"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "(("
Name:  "PyListObject"
Text:  " "
Operator:  "*"
Punctuation:  ")"
Name:  "v"
Punctuation:  ")"
Operator:  "->"
Name:  "ob_item"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name:  "oparg"
Operator:  "--"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "items"
Punctuation:  "["
Name:  "oparg"
Punctuation:  "];"
Text:  "<newline>\t\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "unpack_iterable"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t "
Name:  "stack_pointer"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "oparg"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t"
Name:  "stack_pointer"
Text:  " "
Operator:  "+="
Text:  " "
Name:  "oparg"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyErr_ExceptionMatches"
Punctuation:  "("
Name:  "PyExc_TypeError"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_TypeError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t"
Literal.String:  "\"unpack non-sequence\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "STORE_ATTR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "SECOND"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "STACKADJ"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "2"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_SetAttr"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "u"
Punctuation:  ");"
Text:  " "
Comment.Multiline:  "/* v.w = u */"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "DELETE_ATTR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_SetAttr"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Punctuation:  "("
Name:  "PyObject"
Text:  " "
Operator:  "*"
Punctuation:  ")"
Name.Builtin:  "NULL"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Multiline:  "/* del v.w */"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "STORE_GLOBAL"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyDict_SetItem"
Punctuation:  "("
Name:  "f"
Operator:  "->"
Name:  "f_globals"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "DELETE_GLOBAL"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyDict_DelItem"
Punctuation:  "("
Name:  "f"
Operator:  "->"
Name:  "f_globals"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  "))"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "format_exc_check_arg"
Punctuation:  "("
Text:  "<newline>\t\t\t\t    "
Name:  "PyExc_NameError"
Punctuation:  ","
Text:  " "
Name:  "GLOBAL_NAME_ERROR_MSG"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "LOAD_NAME"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_locals"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PyErr_Format"
Punctuation:  "("
Name:  "PyExc_SystemError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t     "
Literal.String:  "\"no locals when loading %s\""
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t     "
Name:  "PyObject_REPR"
Punctuation:  "("
Name:  "w"
Punctuation:  "));"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyDict_CheckExact"
Punctuation:  "("
Name:  "v"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyDict_GetItem"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_XINCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_GetItem"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyErr_Occurred"
Punctuation:  "())"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "PyErr_ExceptionMatches"
Punctuation:  "("
Name:  "PyExc_KeyError"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyErr_Clear"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyDict_GetItem"
Punctuation:  "("
Name:  "f"
Operator:  "->"
Name:  "f_globals"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyDict_GetItem"
Punctuation:  "("
Name:  "f"
Operator:  "->"
Name:  "f_builtins"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "format_exc_check_arg"
Punctuation:  "("
Text:  "<newline>\t\t\t\t\t\t\t    "
Name:  "PyExc_NameError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t\t    "
Name:  "NAME_ERROR_MSG"
Text:  " "
Punctuation:  ","
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "LOAD_GLOBAL"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyString_CheckExact"
Punctuation:  "("
Name:  "w"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* Inline the PyDict_GetItem() calls.<newline>\t\t\t\t   WARNING: this is an extreme speed hack.<newline>\t\t\t\t   Do not try this at home. */"
Text:  "<newline>\t\t\t\t"
Keyword.Type:  "long"
Text:  " "
Name:  "hash"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "(("
Name:  "PyStringObject"
Text:  " "
Operator:  "*"
Punctuation:  ")"
Name:  "w"
Punctuation:  ")"
Operator:  "->"
Name:  "ob_shash"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "hash"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyDictObject"
Text:  " "
Operator:  "*"
Name:  "d"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyDictEntry"
Text:  " "
Operator:  "*"
Name:  "e"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Name:  "d"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "PyDictObject"
Text:  " "
Operator:  "*"
Punctuation:  ")("
Name:  "f"
Operator:  "->"
Name:  "f_globals"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "e"
Text:  " "
Operator:  "="
Text:  " "
Name:  "d"
Operator:  "->"
Name:  "ma_lookup"
Punctuation:  "("
Name:  "d"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "hash"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "e"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "e"
Operator:  "->"
Name:  "me_value"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t\t"
Name:  "d"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "PyDictObject"
Text:  " "
Operator:  "*"
Punctuation:  ")("
Name:  "f"
Operator:  "->"
Name:  "f_builtins"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "e"
Text:  " "
Operator:  "="
Text:  " "
Name:  "d"
Operator:  "->"
Name:  "ma_lookup"
Punctuation:  "("
Name:  "d"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name:  "hash"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "e"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "e"
Operator:  "->"
Name:  "me_value"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "load_global_error"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* This is the un-inlined version of the code above */"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyDict_GetItem"
Punctuation:  "("
Name:  "f"
Operator:  "->"
Name:  "f_globals"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyDict_GetItem"
Punctuation:  "("
Name:  "f"
Operator:  "->"
Name:  "f_builtins"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t  "
Name.Label:  "load_global_error:"
Text:  "<newline>\t\t\t\t\t"
Name:  "format_exc_check_arg"
Punctuation:  "("
Text:  "<newline>\t\t\t\t\t\t    "
Name:  "PyExc_NameError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t    "
Name:  "GLOBAL_NAME_ERROR_MSG"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "DELETE_FAST"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETLOCAL"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "SETLOCAL"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ","
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "format_exc_check_arg"
Punctuation:  "("
Text:  "<newline>\t\t\t\t"
Name:  "PyExc_UnboundLocalError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t"
Name:  "UNBOUNDLOCAL_ERROR_MSG"
Punctuation:  ","
Text:  "<newline>\t\t\t\t"
Name:  "PyTuple_GetItem"
Punctuation:  "("
Name:  "co"
Operator:  "->"
Name:  "co_varnames"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "LOAD_CLOSURE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "freevars"
Punctuation:  "["
Name:  "oparg"
Punctuation:  "];"
Text:  "<newline>\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "LOAD_DEREF"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "freevars"
Punctuation:  "["
Name:  "oparg"
Punctuation:  "];"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyCell_Get"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* Don't stomp existing exception */"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyErr_Occurred"
Punctuation:  "())"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "oparg"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "PyTuple_GET_SIZE"
Punctuation:  "("
Name:  "co"
Operator:  "->"
Name:  "co_cellvars"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyTuple_GET_ITEM"
Punctuation:  "("
Name:  "co"
Operator:  "->"
Name:  "co_cellvars"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t       "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t       "
Name:  "format_exc_check_arg"
Punctuation:  "("
Text:  "<newline>\t\t\t\t       "
Name:  "PyExc_UnboundLocalError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t       "
Name:  "UNBOUNDLOCAL_ERROR_MSG"
Punctuation:  ","
Text:  "<newline>\t\t\t\t       "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t       "
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyTuple_GET_ITEM"
Punctuation:  "("
Text:  "<newline>\t\t\t\t\t      "
Name:  "co"
Operator:  "->"
Name:  "co_freevars"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t      "
Name:  "oparg"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "PyTuple_GET_SIZE"
Punctuation:  "("
Name:  "co"
Operator:  "->"
Name:  "co_cellvars"
Punctuation:  "));"
Text:  "<newline>\t\t\t       "
Name:  "format_exc_check_arg"
Punctuation:  "("
Text:  "<newline>\t\t\t\t       "
Name:  "PyExc_NameError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t       "
Name:  "UNBOUNDFREE_ERROR_MSG"
Punctuation:  ","
Text:  "<newline>\t\t\t\t       "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "STORE_DEREF"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "freevars"
Punctuation:  "["
Name:  "oparg"
Punctuation:  "];"
Text:  "<newline>\t\t\t"
Name:  "PyCell_Set"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BUILD_TUPLE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyTuple_New"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " "
Punctuation:  "(;"
Text:  " "
Operator:  "--"
Name:  "oparg"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyTuple_SET_ITEM"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BUILD_LIST"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  "  "
Name:  "PyList_New"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " "
Punctuation:  "(;"
Text:  " "
Operator:  "--"
Name:  "oparg"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyList_SET_ITEM"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BUILD_MAP"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyDict_New"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "LOAD_ATTR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_GetAttr"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "COMPARE_OP"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyInt_CheckExact"
Punctuation:  "("
Name:  "w"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyInt_CheckExact"
Punctuation:  "("
Name:  "v"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* INLINE: cmp(int, int) */"
Text:  "<newline>\t\t\t\t"
Keyword:  "register"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Name:  "a"
Punctuation:  ","
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "register"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "res"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "oparg"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "case"
Text:  " "
Name:  "PyCmp_LT"
Punctuation:  ":"
Text:  " "
Name:  "res"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  "<"
Text:  "  "
Name:  "b"
Punctuation:  ";"
Text:  " "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "case"
Text:  " "
Name:  "PyCmp_LE"
Punctuation:  ":"
Text:  " "
Name:  "res"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  " "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "case"
Text:  " "
Name:  "PyCmp_EQ"
Punctuation:  ":"
Text:  " "
Name:  "res"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  " "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "case"
Text:  " "
Name:  "PyCmp_NE"
Punctuation:  ":"
Text:  " "
Name:  "res"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  " "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "case"
Text:  " "
Name:  "PyCmp_GT"
Punctuation:  ":"
Text:  " "
Name:  "res"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  ">"
Text:  "  "
Name:  "b"
Punctuation:  ";"
Text:  " "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "case"
Text:  " "
Name:  "PyCmp_GE"
Punctuation:  ":"
Text:  " "
Name:  "res"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  " "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "case"
Text:  " "
Name:  "PyCmp_IS"
Punctuation:  ":"
Text:  " "
Name:  "res"
Text:  " "
Operator:  "="
Text:  " "
Name:  "v"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "w"
Punctuation:  ";"
Text:  " "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "case"
Text:  " "
Name:  "PyCmp_IS_NOT"
Punctuation:  ":"
Text:  " "
Name:  "res"
Text:  " "
Operator:  "="
Text:  " "
Name:  "v"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "w"
Punctuation:  ";"
Text:  " "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name.Label:  "default:"
Text:  " "
Keyword:  "goto"
Text:  " "
Name:  "slow_compare"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "res"
Text:  " "
Operator:  "?"
Text:  " "
Name:  "Py_True"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "Py_False"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t  "
Name.Label:  "slow_compare:"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "cmp_outcome"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "PREDICT"
Punctuation:  "("
Name:  "JUMP_IF_FALSE"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "PREDICT"
Punctuation:  "("
Name:  "JUMP_IF_TRUE"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "IMPORT_NAME"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyDict_GetItemString"
Punctuation:  "("
Name:  "f"
Operator:  "->"
Name:  "f_builtins"
Punctuation:  ","
Text:  " "
Literal.String:  "\"__import__\""
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_ImportError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t"
Literal.String:  "\"__import__ not found\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyInt_AsLong"
Punctuation:  "("
Name:  "u"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "||"
Text:  " "
Name:  "PyErr_Occurred"
Punctuation:  "())"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyTuple_Pack"
Punctuation:  "("
Literal.Number.Integer:  "5"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t    "
Name:  "w"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t    "
Name:  "f"
Operator:  "->"
Name:  "f_globals"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t    "
Name:  "f"
Operator:  "->"
Name:  "f_locals"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Text:  " "
Operator:  "?"
Text:  "<newline>\t\t\t\t\t\t  "
Name:  "Py_None"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_locals"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t    "
Name:  "v"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t    "
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyTuple_Pack"
Punctuation:  "("
Literal.Number.Integer:  "4"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t    "
Name:  "w"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t    "
Name:  "f"
Operator:  "->"
Name:  "f_globals"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t    "
Name:  "f"
Operator:  "->"
Name:  "f_locals"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Text:  " "
Operator:  "?"
Text:  "<newline>\t\t\t\t\t\t  "
Name:  "Py_None"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_locals"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t    "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "intr0"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyEval_CallObject"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "intr1"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "IMPORT_STAR"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "PyFrame_FastToLocals"
Punctuation:  "("
Name:  "f"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_locals"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_SystemError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t"
Literal.String:  "\"no locals found during 'import *'\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "intr0"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "import_all_from"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "intr1"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "PyFrame_LocalsToFast"
Punctuation:  "("
Name:  "f"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "IMPORT_FROM"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "GETITEM"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "intr0"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "import_from"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "intr1"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "JUMP_FORWARD"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "JUMPBY"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Name:  "PREDICTED_WITH_ARG"
Punctuation:  "("
Name:  "JUMP_IF_FALSE"
Punctuation:  ");"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "JUMP_IF_FALSE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "Py_True"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PREDICT"
Punctuation:  "("
Name:  "POP_TOP"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "Py_False"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "JUMPBY"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_IsTrue"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "JUMPBY"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Name:  "PREDICTED_WITH_ARG"
Punctuation:  "("
Name:  "JUMP_IF_TRUE"
Punctuation:  ");"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "JUMP_IF_TRUE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "Py_False"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PREDICT"
Punctuation:  "("
Name:  "POP_TOP"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "Py_True"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "JUMPBY"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_next_opcode"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_IsTrue"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "JUMPBY"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Name:  "PREDICTED_WITH_ARG"
Punctuation:  "("
Name:  "JUMP_ABSOLUTE"
Punctuation:  ");"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "JUMP_ABSOLUTE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "JUMPTO"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "GET_ITER"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* before: [obj]; after [getiter(obj)] */"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_GetIter"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "PREDICT"
Punctuation:  "("
Name:  "FOR_ITER"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "STACKADJ"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Name:  "PREDICTED_WITH_ARG"
Punctuation:  "("
Name:  "FOR_ITER"
Punctuation:  ");"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "FOR_ITER"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* before: [iter]; after: [iter, iter()] *or* [] */"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Operator:  "*"
Name:  "v"
Operator:  "->"
Name:  "ob_type"
Operator:  "->"
Name:  "tp_iternext"
Punctuation:  ")("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "PREDICT"
Punctuation:  "("
Name:  "STORE_FAST"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "PREDICT"
Punctuation:  "("
Name:  "UNPACK_SEQUENCE"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyErr_Occurred"
Punctuation:  "())"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "PyErr_ExceptionMatches"
Punctuation:  "("
Name:  "PyExc_StopIteration"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "PyErr_Clear"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* iterator ended normally */"
Text:  "<newline> \t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "JUMPBY"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BREAK_LOOP"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_BREAK"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_block_end"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "CONTINUE_LOOP"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "retval"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_FromLong"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "retval"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_CONTINUE"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "fast_block_end"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "SETUP_LOOP"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "SETUP_EXCEPT"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "SETUP_FINALLY"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* NOTE: If you add any new block-setup opcodes that are not try/except/finally<newline>\t\t\t   handlers, you may need to update the PyGen_NeedsFinalizing() function. */"
Text:  "<newline><newline>\t\t\t"
Name:  "PyFrame_BlockSetup"
Punctuation:  "("
Name:  "f"
Punctuation:  ","
Text:  " "
Name:  "opcode"
Punctuation:  ","
Text:  " "
Name:  "INSTR_OFFSET"
Punctuation:  "()"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "oparg"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t   "
Name:  "STACK_LEVEL"
Punctuation:  "());"
Text:  "<newline>\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "WITH_CLEANUP"
Punctuation:  ":"
Text:  "<newline>\t\t"
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* TOP is the context.__exit__ bound method.<newline>\t\t\t   Below that are 1-3 values indicating how/why<newline>\t\t\t   we entered the finally clause:<newline>\t\t\t   - SECOND = None<newline>\t\t\t   - (SECOND, THIRD) = (WHY_{RETURN,CONTINUE}), retval<newline>\t\t\t   - SECOND = WHY_*; no retval below it<newline>\t\t\t   - (SECOND, THIRD, FOURTH) = exc_info()<newline>\t\t\t   In the last case, we must call<newline>\t\t\t     TOP(SECOND, THIRD, FOURTH)<newline>\t\t\t   otherwise we must call<newline>\t\t\t     TOP(None, None, None)<newline><newline>\t\t\t   In addition, if the stack represents an exception,<newline>\t\t\t   *and* the function call returns a 'true' value, we<newline>\t\t\t   \"zap\" this information, to prevent END_FINALLY from<newline>\t\t\t   re-raising the exception.  (But non-local gotos<newline>\t\t\t   should still be resumed.)<newline>\t\t\t*/"
Text:  "<newline><newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "SECOND"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyInt_Check"
Punctuation:  "("
Name:  "u"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Name:  "u"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "Py_None"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Py_None"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "THIRD"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "FOURTH"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* XXX Not the fastest way to call it... */"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyObject_CallFunctionObjArgs"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "u"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ","
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* Go to error exit */"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "u"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "Py_None"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "PyObject_IsTrue"
Punctuation:  "("
Name:  "x"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* There was an exception and a true return */"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  " "
Comment.Multiline:  "/* Again */"
Text:  "<newline>\t\t\t\t"
Name:  "STACKADJ"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "3"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "Py_None"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "Py_None"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* Let END_FINALLY do its thing */"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "CALL_FUNCTION"
Punctuation:  ":"
Text:  "<newline>\t\t"
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Name:  "PyObject"
Text:  " "
Operator:  "**"
Name:  "sp"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "PCALL"
Punctuation:  "("
Name:  "PCALL_ALL"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "sp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "stack_pointer"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "#ifdef WITH_TSC<newline>"
Text:  "\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "call_function"
Punctuation:  "("
Operator:  "&"
Name:  "sp"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "intr0"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "intr1"
Punctuation:  ");"
Text:  "<newline>"
Comment.Preproc:  "#else<newline>"
Text:  "\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "call_function"
Punctuation:  "("
Operator:  "&"
Name:  "sp"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t\t\t"
Name:  "stack_pointer"
Text:  " "
Operator:  "="
Text:  " "
Name:  "sp"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "CALL_FUNCTION_VAR"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "CALL_FUNCTION_KW"
Punctuation:  ":"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "CALL_FUNCTION_VAR_KW"
Punctuation:  ":"
Text:  "<newline>\t\t"
Punctuation:  "{"
Text:  "<newline>\t\t    "
Keyword.Type:  "int"
Text:  " "
Name:  "na"
Text:  " "
Operator:  "="
Text:  " "
Name:  "oparg"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Hex:  "0xff"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Keyword.Type:  "int"
Text:  " "
Name:  "nk"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "oparg"
Operator:  ">>"
Literal.Number.Integer:  "8"
Punctuation:  ")"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Hex:  "0xff"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Keyword.Type:  "int"
Text:  " "
Name:  "flags"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "opcode"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "CALL_FUNCTION"
Punctuation:  ")"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Keyword.Type:  "int"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  " "
Name:  "na"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "*"
Text:  " "
Name:  "nk"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Name:  "PyObject"
Text:  " "
Operator:  "**"
Name:  "pfunc"
Punctuation:  ","
Text:  " "
Operator:  "*"
Name:  "func"
Punctuation:  ","
Text:  " "
Operator:  "**"
Name:  "sp"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Name:  "PCALL"
Punctuation:  "("
Name:  "PCALL_ALL"
Punctuation:  ");"
Text:  "<newline>\t\t    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "flags"
Text:  " "
Operator:  "&"
Text:  " "
Name:  "CALL_FLAG_VAR"
Punctuation:  ")"
Text:  "<newline>\t\t\t    "
Name:  "n"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "flags"
Text:  " "
Operator:  "&"
Text:  " "
Name:  "CALL_FLAG_KW"
Punctuation:  ")"
Text:  "<newline>\t\t\t    "
Name:  "n"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Name:  "pfunc"
Text:  " "
Operator:  "="
Text:  " "
Name:  "stack_pointer"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Name:  "func"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "*"
Name:  "pfunc"
Punctuation:  ";"
Text:  "<newline><newline>\t\t    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyMethod_Check"
Punctuation:  "("
Name:  "func"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Operator:  "&&"
Text:  " "
Name:  "PyMethod_GET_SELF"
Punctuation:  "("
Name:  "func"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t    "
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "self"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyMethod_GET_SELF"
Punctuation:  "("
Name:  "func"
Punctuation:  ");"
Text:  "<newline>\t\t\t    "
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "self"
Punctuation:  ");"
Text:  "<newline>\t\t\t    "
Name:  "func"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyMethod_GET_FUNCTION"
Punctuation:  "("
Name:  "func"
Punctuation:  ");"
Text:  "<newline>\t\t\t    "
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "func"
Punctuation:  ");"
Text:  "<newline>\t\t\t    "
Name:  "Py_DECREF"
Punctuation:  "("
Operator:  "*"
Name:  "pfunc"
Punctuation:  ");"
Text:  "<newline>\t\t\t    "
Operator:  "*"
Name:  "pfunc"
Text:  " "
Operator:  "="
Text:  " "
Name:  "self"
Punctuation:  ";"
Text:  "<newline>\t\t\t    "
Name:  "na"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline>\t\t\t    "
Name:  "n"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  "<newline>\t\t\t    "
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "func"
Punctuation:  ");"
Text:  "<newline>\t\t    "
Name:  "sp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "stack_pointer"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "intr0"
Punctuation:  ");"
Text:  "<newline>\t\t    "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ext_do_call"
Punctuation:  "("
Name:  "func"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "sp"
Punctuation:  ","
Text:  " "
Name:  "flags"
Punctuation:  ","
Text:  " "
Name:  "na"
Punctuation:  ","
Text:  " "
Name:  "nk"
Punctuation:  ");"
Text:  "<newline>\t\t    "
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "intr1"
Punctuation:  ");"
Text:  "<newline>\t\t    "
Name:  "stack_pointer"
Text:  " "
Operator:  "="
Text:  " "
Name:  "sp"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "func"
Punctuation:  ");"
Text:  "<newline><newline>\t\t    "
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name:  "stack_pointer"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "pfunc"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t    "
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t    "
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t    "
Punctuation:  "}"
Text:  "<newline>\t\t    "
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t\t    "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "MAKE_FUNCTION"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  " "
Comment.Multiline:  "/* code object */"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyFunction_New"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_globals"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* XXX Maybe this should be a separate opcode? */"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "oparg"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyTuple_New"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "v"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Operator:  "--"
Name:  "oparg"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyTuple_SET_ITEM"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyFunction_SetDefaults"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "MAKE_CLOSURE"
Punctuation:  ":"
Text:  "<newline>\t\t"
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  " "
Comment.Multiline:  "/* code object */"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyFunction_New"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_globals"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyFunction_SetClosure"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "oparg"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyTuple_New"
Punctuation:  "("
Name:  "oparg"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "v"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Operator:  "--"
Name:  "oparg"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyTuple_SET_ITEM"
Punctuation:  "("
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "oparg"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyFunction_SetDefaults"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "BUILD_SLICE"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "oparg"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "w"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "u"
Text:  " "
Operator:  "="
Text:  " "
Name:  "TOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PySlice_New"
Punctuation:  "("
Name:  "u"
Punctuation:  ","
Text:  " "
Name:  "v"
Punctuation:  ","
Text:  " "
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "u"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "w"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "SET_TOP"
Punctuation:  "("
Name:  "x"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Keyword:  "continue"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "case"
Text:  " "
Name:  "EXTENDED_ARG"
Punctuation:  ":"
Text:  "<newline>\t\t\t"
Name:  "opcode"
Text:  " "
Operator:  "="
Text:  " "
Name:  "NEXTOP"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Name:  "oparg"
Text:  " "
Operator:  "="
Text:  " "
Name:  "oparg"
Operator:  "<<"
Literal.Number.Integer:  "16"
Text:  " "
Operator:  "|"
Text:  " "
Name:  "NEXTARG"
Punctuation:  "();"
Text:  "<newline>\t\t\t"
Keyword:  "goto"
Text:  " "
Name:  "dispatch_opcode"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Name.Label:  "default:"
Text:  "<newline>\t\t\t"
Name:  "fprintf"
Punctuation:  "("
Name:  "stderr"
Punctuation:  ","
Text:  "<newline>\t\t\t\t"
Literal.String:  "\"XXX lineno: %d, opcode: %d"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  "<newline>\t\t\t\t"
Name:  "PyCode_Addr2Line"
Punctuation:  "("
Name:  "f"
Operator:  "->"
Name:  "f_code"
Punctuation:  ","
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_lasti"
Punctuation:  "),"
Text:  "<newline>\t\t\t\t"
Name:  "opcode"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_SystemError"
Punctuation:  ","
Text:  " "
Literal.String:  "\"unknown opcode\""
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Preproc:  "#ifdef CASE_TOO_BIG<newline>"
Text:  "\t\t"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  " "
Comment.Multiline:  "/* switch */"
Text:  "<newline><newline>\t    "
Name.Label:  "on_error:"
Text:  "<newline><newline>\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "inst1"
Punctuation:  ");"
Text:  "<newline><newline>\t\t"
Comment.Multiline:  "/* Quickly continue if no error occurred */"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_NOT"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "err"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Comment.Preproc:  "#ifdef CHECKEXC<newline>"
Text:  "\t\t\t\t"
Comment.Multiline:  "/* This check is expensive! */"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyErr_Occurred"
Punctuation:  "())"
Text:  "<newline>\t\t\t\t\t"
Name:  "fprintf"
Punctuation:  "("
Name:  "stderr"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t"
Literal.String:  "\"XXX undetected error"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t\t\t\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "loop1"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "continue"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* Normal, fast path */"
Text:  "<newline>"
Comment.Preproc:  "#ifdef CHECKEXC<newline>"
Text:  "\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Py_None"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Name:  "err"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Comment.Multiline:  "/* Double-check exception status */"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_EXCEPTION"
Text:  " "
Operator:  "||"
Text:  " "
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_RERAISE"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "PyErr_Occurred"
Punctuation:  "())"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "PyErr_SetString"
Punctuation:  "("
Name:  "PyExc_SystemError"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t"
Literal.String:  "\"error return without exception set\""
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#ifdef CHECKEXC<newline>"
Text:  "\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Comment.Multiline:  "/* This check is expensive! */"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "PyErr_Occurred"
Punctuation:  "())"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword.Type:  "char"
Text:  " "
Name:  "buf"
Punctuation:  "["
Literal.Number.Integer:  "1024"
Punctuation:  "];"
Text:  "<newline>\t\t\t\t"
Name:  "sprintf"
Punctuation:  "("
Name:  "buf"
Punctuation:  ","
Text:  " "
Literal.String:  "\"Stack unwind with exception \""
Text:  "<newline>\t\t\t\t\t"
Literal.String:  "\"set and why=%d\""
Punctuation:  ","
Text:  " "
Name:  "why"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "Py_FatalError"
Punctuation:  "("
Name:  "buf"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "#endif<newline>"
Text:  "<newline>\t\t"
Comment.Multiline:  "/* Log traceback info if this is a real exception */"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Name:  "PyTraceBack_Here"
Punctuation:  "("
Name:  "f"
Punctuation:  ");"
Text:  "<newline><newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_tracefunc"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "call_exc_trace"
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_tracefunc"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t       "
Name:  "tstate"
Operator:  "->"
Name:  "c_traceobj"
Punctuation:  ","
Text:  " "
Name:  "f"
Punctuation:  ");"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Comment.Multiline:  "/* For the rest, treat WHY_RERAISE as WHY_EXCEPTION */"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_RERAISE"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Comment.Multiline:  "/* Unwind stacks if a (pseudo) exception occurred */"
Text:  "<newline><newline>"
Name.Label:  "fast_block_end:"
Text:  "<newline>\t\t"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "WHY_NOT"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_iblock"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Name:  "PyTryBlock"
Text:  " "
Operator:  "*"
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyFrame_BlockPop"
Punctuation:  "("
Name:  "f"
Punctuation:  ");"
Text:  "<newline><newline>\t\t\t"
Name:  "assert"
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "WHY_YIELD"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "b"
Operator:  "->"
Name:  "b_type"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "SETUP_LOOP"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_CONTINUE"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Comment.Multiline:  "/* For a continue inside a try block,<newline>\t\t\t\t   don't pop the block for the loop. */"
Text:  "<newline>\t\t\t\t"
Name:  "PyFrame_BlockSetup"
Punctuation:  "("
Name:  "f"
Punctuation:  ","
Text:  " "
Name:  "b"
Operator:  "->"
Name:  "b_type"
Punctuation:  ","
Text:  " "
Name:  "b"
Operator:  "->"
Name:  "b_handler"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t   "
Name:  "b"
Operator:  "->"
Name:  "b_level"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_NOT"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "JUMPTO"
Punctuation:  "("
Name:  "PyInt_AS_LONG"
Punctuation:  "("
Name:  "retval"
Punctuation:  "));"
Text:  "<newline>\t\t\t\t"
Name:  "Py_DECREF"
Punctuation:  "("
Name:  "retval"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t\t"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name:  "STACK_LEVEL"
Punctuation:  "()"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Operator:  "->"
Name:  "b_level"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "b"
Operator:  "->"
Name:  "b_type"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "SETUP_LOOP"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_BREAK"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_NOT"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "JUMPTO"
Punctuation:  "("
Name:  "b"
Operator:  "->"
Name:  "b_handler"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "b"
Operator:  "->"
Name:  "b_type"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "SETUP_FINALLY"
Text:  " "
Operator:  "||"
Text:  "<newline>\t\t\t    "
Punctuation:  "("
Name:  "b"
Operator:  "->"
Name:  "b_type"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "SETUP_EXCEPT"
Text:  " "
Operator:  "&&"
Text:  "<newline>\t\t\t     "
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyObject"
Text:  " "
Operator:  "*"
Name:  "exc"
Punctuation:  ","
Text:  " "
Operator:  "*"
Name:  "val"
Punctuation:  ","
Text:  " "
Operator:  "*"
Name:  "tb"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Name:  "PyErr_Fetch"
Punctuation:  "("
Operator:  "&"
Name:  "exc"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "val"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "tb"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "val"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "val"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Py_None"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "val"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t\t"
Comment.Multiline:  "/* Make the raw exception data<newline>\t\t\t\t\t   available to the handler,<newline>\t\t\t\t\t   so a program can emulate the<newline>\t\t\t\t\t   Python main loop.  Don't do<newline>\t\t\t\t\t   this for 'finally'. */"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "b"
Operator:  "->"
Name:  "b_type"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "SETUP_EXCEPT"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "PyErr_NormalizeException"
Punctuation:  "("
Text:  "<newline>\t\t\t\t\t\t\t"
Operator:  "&"
Name:  "exc"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "val"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "tb"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "set_exc_info"
Punctuation:  "("
Name:  "tstate"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t\t     "
Name:  "exc"
Punctuation:  ","
Text:  " "
Name:  "val"
Punctuation:  ","
Text:  " "
Name:  "tb"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tb"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "Py_INCREF"
Punctuation:  "("
Name:  "Py_None"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "Py_None"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "tb"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "val"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "exc"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "&"
Text:  " "
Punctuation:  "("
Name:  "WHY_RETURN"
Text:  " "
Operator:  "|"
Text:  " "
Name:  "WHY_CONTINUE"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "retval"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "PyInt_FromLong"
Punctuation:  "(("
Keyword.Type:  "long"
Punctuation:  ")"
Name:  "why"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "PUSH"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_NOT"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "JUMPTO"
Punctuation:  "("
Name:  "b"
Operator:  "->"
Name:  "b_handler"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  " "
Comment.Multiline:  "/* unwind stack */"
Text:  "<newline><newline>\t\t"
Comment.Multiline:  "/* End the loop if we still have an error (or return) */"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "WHY_NOT"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "READ_TIMESTAMP"
Punctuation:  "("
Name:  "loop1"
Punctuation:  ");"
Text:  "<newline><newline>\t"
Punctuation:  "}"
Text:  " "
Comment.Multiline:  "/* main loop */"
Text:  "<newline><newline>\t"
Name:  "assert"
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "WHY_YIELD"
Punctuation:  ");"
Text:  "<newline>\t"
Comment.Multiline:  "/* Pop remaining stack entries. */"
Text:  "<newline>\t"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "EMPTY"
Punctuation:  "())"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name:  "POP"
Punctuation:  "();"
Text:  "<newline>\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "WHY_RETURN"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "retval"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline><newline>"
Name.Label:  "fast_yield:"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "use_tracing"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_tracefunc"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_RETURN"
Text:  " "
Operator:  "||"
Text:  " "
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_YIELD"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "call_trace"
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_tracefunc"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t       "
Name:  "tstate"
Operator:  "->"
Name:  "c_traceobj"
Punctuation:  ","
Text:  " "
Name:  "f"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t       "
Name:  "PyTrace_RETURN"
Punctuation:  ","
Text:  " "
Name:  "retval"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "retval"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t"
Name:  "retval"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "call_trace_protected"
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_tracefunc"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t     "
Name:  "tstate"
Operator:  "->"
Name:  "c_traceobj"
Punctuation:  ","
Text:  " "
Name:  "f"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t     "
Name:  "PyTrace_RETURN"
Punctuation:  ","
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_profilefunc"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "why"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "call_trace_protected"
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_profilefunc"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t     "
Name:  "tstate"
Operator:  "->"
Name:  "c_profileobj"
Punctuation:  ","
Text:  " "
Name:  "f"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t\t     "
Name:  "PyTrace_RETURN"
Punctuation:  ","
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "call_trace"
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "c_profilefunc"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t    "
Name:  "tstate"
Operator:  "->"
Name:  "c_profileobj"
Punctuation:  ","
Text:  " "
Name:  "f"
Punctuation:  ","
Text:  "<newline>\t\t\t\t\t    "
Name:  "PyTrace_RETURN"
Punctuation:  ","
Text:  " "
Name:  "retval"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "Py_XDECREF"
Punctuation:  "("
Name:  "retval"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "retval"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "why"
Text:  " "
Operator:  "="
Text:  " "
Name:  "WHY_EXCEPTION"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "frame"
Operator:  "->"
Name:  "f_exc_type"
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "reset_exc_info"
Punctuation:  "("
Name:  "tstate"
Punctuation:  ");"
Text:  "<newline>\t"
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "assert"
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "frame"
Operator:  "->"
Name:  "f_exc_value"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ");"
Text:  "<newline>\t\t"
Name:  "assert"
Punctuation:  "("
Name:  "tstate"
Operator:  "->"
Name:  "frame"
Operator:  "->"
Name:  "f_exc_traceback"
Text:  " "
Operator:  "=="
Text:  " "
Name.Builtin:  "NULL"
Punctuation:  ");"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Comment.Multiline:  "/* pop frame */"
Text:  "<newline>    "
Name.Label:  "exit_eval_frame:"
Text:  "<newline>\t"
Name:  "Py_LeaveRecursiveCall"
Punctuation:  "();"
Text:  "<newline>\t"
Name:  "tstate"
Operator:  "->"
Name:  "frame"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Operator:  "->"
Name:  "f_back"
Punctuation:  ";"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "retval"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// Comment at EOF (#796)"
Text:  "<newline>"
