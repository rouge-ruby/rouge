Comment.Single:  "//Most code samples copied or adapted from CFParser"
Text:  "<newline>"
Comment.Single:  "//Copyright (c) 2016 https://github.com/cfparser/cfparser"
Text:  "<newline>"
Comment.Single:  "//The CFParser license is BSD (http://www.opensource.org/licenses/bsd-license.html)."
Text:  "<newline><newline>"
Comment.Single:  "//import (didn't even know CF supported this)"
Text:  "<newline>"
Keyword.Namespace:  "import"
Text:  " "
Name.Namespace:  "my.path.SomeComponent"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "//component"
Text:  "<newline>"
Keyword.Declaration:  "component"
Text:  " "
Name.Other:  "accessors"
Operator:  "="
Literal.String.Double:  "\"true\""
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>  "
Comment.Single:  "//component properties"
Text:  "<newline>  "
Keyword.Declaration:  "property"
Text:  " "
Name.Other:  "type"
Operator:  "="
Literal.String.Double:  "\"string\""
Text:  " "
Name.Other:  "name"
Operator:  "="
Literal.String.Double:  "\"firstName\""
Punctuation:  ";"
Text:  "<newline>  "
Keyword.Declaration:  "property"
Text:  " "
Name.Other:  "name"
Operator:  "="
Literal.String.Double:  "\"lastName\""
Text:  " "
Keyword:  "default"
Operator:  "="
Literal.String.Double:  "\"\""
Punctuation:  ";"
Text:  "<newline>  "
Keyword.Declaration:  "property"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Name.Other:  "username"
Punctuation:  ";"
Text:  "<newline><newline>  "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "init"
Punctuation:  "(){"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Constant:  "this"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Comment.Single:  "//functions with metadata"
Text:  "<newline>  "
Keyword.Declaration:  "private"
Text:  " "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "setStatus"
Punctuation:  "("
Text:  " "
Name.Other:  "rc"
Text:  " "
Punctuation:  ")"
Text:  " "
Name:  "my"
Punctuation:  ":"
Name.Other:  "role"
Operator:  "="
Literal.String.Double:  "\"support:admin\""
Text:  " "
Punctuation:  "{}"
Text:  "<newline>  "
Keyword.Declaration:  "package"
Text:  " "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "setStatus2"
Punctuation:  "("
Text:  " "
Name.Other:  "rc"
Text:  " "
Punctuation:  ")"
Text:  " "
Name.Other:  "role"
Operator:  "="
Literal.String.Double:  "\"support:admin\""
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>  "
Comment.Single:  "//array return"
Text:  "<newline>  "
Keyword.Declaration:  "public"
Text:  " "
Name.Other:  "obj.domain.content.News"
Punctuation:  "[]"
Text:  " "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "findAll"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Function:  "newsService.findAll"
Punctuation:  "();"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Comment.Single:  "//obj return"
Text:  "<newline>  "
Keyword.Declaration:  "public"
Text:  " "
Name.Other:  "obj.domain.content.News"
Text:  " "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "findAll"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Function:  "newsService.findAll"
Punctuation:  "();"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Comment.Single:  "//inline function expressions"
Text:  "<newline>  "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "bar"
Punctuation:  "(){"
Text:  "<newline>    "
Name.Function:  "dotrim"
Punctuation:  "("
Literal.String.Double:  "\"hello world\""
Punctuation:  ","
Text:  " "
Name.Function:  "function"
Punctuation:  "("
Name.Other:  "result"
Punctuation:  "){"
Text:  "<newline>      "
Comment.Single:  "//..."
Text:  "<newline>    "
Punctuation:  "});"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Keyword.Declaration:  "remote"
Text:  " "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "dotrim"
Punctuation:  "("
Name.Other:  "data"
Punctuation:  ","
Text:  " "
Name.Other:  "callback"
Punctuation:  "){"
Text:  "<newline>    "
Name.Function:  "callback"
Punctuation:  "("
Name.Function:  "trim"
Punctuation:  "("
Name.Other:  "data"
Punctuation:  "));"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Comment.Multiline:  "/**<newline>  * Submit an order<newline>  * @product.hint The product object<newline>  * @coupon.hint The Coupon code needed<newline>  * @results.hint The results object<newline>  */"
Text:  "<newline>  "
Keyword.Declaration:  "public"
Text:  " "
Keyword.Type:  "any"
Text:  " "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "submitOrder"
Punctuation:  "("
Text:  " "
Keyword:  "required"
Text:  " "
Name.Other:  "product"
Punctuation:  ","
Text:  " "
Name.Other:  "coupon"
Operator:  "="
Literal.String.Double:  "\"\""
Punctuation:  ","
Text:  " "
Keyword.Type:  "boolean"
Text:  " "
Name.Other:  "results"
Operator:  "="
Keyword.Constant:  "true"
Text:  " "
Punctuation:  "){"
Text:  "<newline><newline>    "
Comment.Single:  "//function variables"
Text:  "<newline>    "
Keyword:  "var"
Text:  " "
Name.Other:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "function"
Punctuation:  "("
Text:  " "
Keyword:  "required"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Name.Other:  "baz"
Punctuation:  ","
Text:  " "
Name.Other:  "x"
Operator:  "="
Keyword.Constant:  "true"
Punctuation:  ","
Text:  " "
Name.Other:  "y"
Operator:  "="
Keyword.Constant:  "false"
Text:  " "
Punctuation:  "){"
Text:  "<newline><newline>    "
Comment.Single:  "//queryexecute"
Text:  "<newline>    "
Keyword:  "var"
Text:  " "
Name.Other:  "result"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "QueryExecute"
Punctuation:  "("
Literal.String.Double:  "\"<newline>        SELECT info_card_id, document_num, revision_nm, title_nm<newline>        FROM tdc_doc_infocard<newline>        WHERE info_card_id = :sourceTemplateNum<newline>        ORDER BY UPPER(document_num) ASC, revision_seq DESC<newline>    \""
Punctuation:  ","
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Other:  "sourceTemplateNum"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Other:  "value"
Operator:  "="
Literal.String.Double:  "\"#sourceTemplateNum#\""
Punctuation:  ","
Text:  " "
Name.Other:  "cfsqltype"
Operator:  "="
Literal.String.Double:  "\"cf_sql_varchar\""
Text:  " "
Punctuation:  "}});"
Text:  "<newline>      "
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\"bar!\""
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline><newline>    "
Keyword:  "return"
Text:  " "
Name.Other:  "foo"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "//structs"
Text:  "<newline>"
Name.Other:  "struABC"
Operator:  "="
Punctuation:  "{"
Literal.Number.Integer:  "0"
Operator:  "="
Literal.Number.Integer:  "0"
Punctuation:  "};"
Text:  "<newline>"
Name.Other:  "struABC.1"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{};"
Text:  "<newline><newline>"
Comment.Single:  "//ternary struct element"
Text:  "<newline>"
Name.Other:  "someStruct"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Other:  "someVariable"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "someExpression"
Text:  " "
Punctuation:  "?"
Text:  " "
Name:  "someExpression2"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "someExpression3"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Single:  "//elvis (cf11)"
Text:  "<newline>"
Name.Other:  "securityNumber"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "securityStruct"
Punctuation:  "["
Literal.String.Single:  "'Joe'"
Punctuation:  "]"
Text:  " "
Punctuation:  "?:"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "  "
Comment.Single:  "// Retrieving from a struct"
Text:  "<newline>"
Name.Other:  "colourCode"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "colourArray"
Punctuation:  "["
Name.Other:  "index"
Punctuation:  "]"
Text:  " "
Punctuation:  "?:"
Text:  " "
Literal.String.Double:  "\"black\""
Punctuation:  ";"
Text:  "   "
Comment.Single:  "// Retrieving from an array"
Text:  "<newline>"
Name.Other:  "employeeName"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "getEmployeeName"
Punctuation:  "("
Name.Other:  "ID"
Punctuation:  ")"
Text:  " "
Punctuation:  "?:"
Text:  " "
Literal.String.Double:  "\"Joe\""
Punctuation:  ";"
Text:  "  "
Comment.Single:  "// A function call"
Text:  "<newline><newline>"
Comment.Single:  "//script custom tags (cf11)"
Text:  "<newline>"
Name.Function:  "Cf_happybirthday"
Punctuation:  "("
Name.Other:  "name"
Operator:  "="
Literal.String.Double:  "\"john\""
Punctuation:  ","
Text:  " "
Name.Other:  "birthdate"
Operator:  "="
Literal.String.Double:  "\"December 5, 1987\""
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Single:  "//script tags (cf11)"
Text:  "<newline>"
Name.Function:  "cfhttp"
Punctuation:  "("
Name.Other:  "url"
Operator:  "="
Literal.String.Double:  "\"www.google.com\""
Punctuation:  ","
Text:  " "
Name.Other:  "method"
Operator:  "="
Literal.String.Double:  "\"GET\""
Punctuation:  ");"
Text:  "<newline>"
Name.Function:  "Cfhttp"
Punctuation:  "("
Name.Other:  "URL"
Operator:  "="
Literal.String.Double:  "\"http://#CGI.SERVER_NAME#.../target.cfm\""
Punctuation:  ","
Text:  " "
Name.Other:  "method"
Operator:  "="
Literal.String.Double:  "\"GET\""
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "cfhttpparam"
Punctuation:  "("
Name.Other:  "type"
Operator:  "="
Literal.String.Double:  "\"url\""
Punctuation:  ","
Text:  " "
Name.Other:  "name"
Operator:  "="
Literal.String.Single:  "'emp_name'"
Punctuation:  ","
Text:  " "
Name.Other:  "value"
Operator:  "="
Literal.String.Double:  "\"Awdhesh\""
Punctuation:  ");"
Text:  "<newline>    "
Name.Function:  "cfhttpparam"
Punctuation:  "("
Name.Other:  "type"
Operator:  "="
Literal.String.Double:  "\"header\""
Punctuation:  ","
Text:  " "
Name.Other:  "name"
Operator:  "="
Literal.String.Single:  "'myheader'"
Punctuation:  ","
Text:  " "
Name.Other:  "value"
Operator:  "="
Literal.String.Double:  "\"My custom header\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Name.Function:  "Writeoutput"
Punctuation:  "("
Name.Other:  "cfhttp.filecontent"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Single:  "//multiple assignment"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "y"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "2"
Operator:  "^"
Literal.Number.Integer:  "2"
Punctuation:  ";"
Text:  "<newline>"
Comment.Single:  "//compound assignment"
Text:  "<newline>"
Name.Other:  "a"
Text:  " "
Operator:  "+="
Text:  " "
Name.Other:  "b"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "//object concat"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Other:  "name"
Punctuation:  ":"
Text:  " "
Name.Function:  "rc.ticket.getShortId"
Punctuation:  "()"
Text:  "<newline>    "
Punctuation:  ","
Name.Other:  "action"
Punctuation:  ":"
Text:  " "
Literal.String.Single:  "'support:tickets/view/id/'"
Text:  " "
Operator:  "&"
Text:  " "
Name.Function:  "rc.ticket.getShortId"
Punctuation:  "()"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Name.Other:  "y"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>  "
Literal.String.Double:  "\"test\""
Punctuation:  ","
Text:  "<newline>  "
Literal.String.Double:  "\"something\""
Punctuation:  ","
Text:  "<newline>  "
Literal.String.Double:  "\"else\""
Text:  "<newline>"
Punctuation:  "];"
Text:  "<newline><newline>"
Name.Other:  "xyz"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Double:  "\"testarray\""
Punctuation:  ":"
Text:  " "
Punctuation:  "["
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>      "
Literal.String.Double:  "\"key\""
Punctuation:  ":"
Text:  " "
Literal.String.Double:  "\"value1\""
Punctuation:  ","
Text:  "<newline>      "
Literal.String.Double:  "\"value\""
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "x.action"
Text:  " "
Operator:  "&="
Text:  " "
Literal.String.Double:  "\"concatme\""
Text:  "<newline>    "
Punctuation:  "},"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>      "
Literal.String.Double:  "\"key\""
Punctuation:  ":"
Text:  " "
Literal.String.Double:  "\"value2\""
Punctuation:  ","
Text:  "<newline>      "
Literal.String.Double:  "\"value\""
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "100"
Text:  "<newline>    "
Punctuation:  "},"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>      "
Literal.String.Double:  "\"key\""
Punctuation:  ":"
Text:  " "
Literal.String.Double:  "\"value3\""
Punctuation:  ","
Text:  "<newline>      "
Literal.String.Double:  "\"value\""
Text:  " "
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Other:  "bar"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "]"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Comment.Single:  "//syntax issue #459 (inherited from JS lexer, related to objects/properties)"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Name.Other:  "doc"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Double:  "\"first\""
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Literal.String.Double:  "\"key\""
Punctuation:  ":"
Text:  " "
Literal.String.Double:  "\"value\""
Text:  "<newline>  "
Punctuation:  "},"
Text:  "<newline>  "
Literal.String.Double:  "\"hello\""
Punctuation:  ":"
Text:  " "
Literal.String.Double:  "\"world\""
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "var"
Text:  " "
Name.Other:  "options"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Other:  "vAxes"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Literal.Number.Integer:  "0"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Other:  "title"
Punctuation:  ":"
Text:  " "
Literal.String.Double:  "\"Rainfall (mm)\""
Text:  " "
Punctuation:  "},"
Text:  "<newline>    "
Literal.Number.Integer:  "1"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Other:  "title"
Punctuation:  ":"
Text:  " "
Literal.String.Double:  "\"Flow Rate (L/s\""
Text:  " "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "},"
Text:  "<newline>  "
Name.Other:  "series"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Literal.Number.Integer:  "0"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Other:  "targetAxisIndex"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "},"
Text:  "<newline>    "
Literal.Number.Integer:  "1"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Other:  "targetAxisIndex"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "},"
Text:  "<newline>    "
Literal.Number.Integer:  "2"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Other:  "targetAxisIndex"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "//struc key plusplus"
Text:  "<newline>"
Name.Other:  "xyz.testarray"
Punctuation:  "["
Literal.Number.Integer:  "3"
Punctuation:  "]."
Name.Other:  "value.bar"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "//railo/lucee script tags"
Text:  "<newline>"
Name.Other:  "log"
Text:  " "
Name.Other:  "text"
Operator:  "="
Literal.String.Double:  "\"Event Gateway #variables.id# started\""
Text:  " "
Name.Other:  "file"
Operator:  "="
Name.Constant:  "this"
Punctuation:  "."
Name.Other:  "logfile"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "log"
Text:  "<newline>    "
Name.Other:  "text"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"text\""
Text:  "<newline>    "
Name.Other:  "type"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"information\""
Text:  "<newline>    "
Name.Constant:  "application"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"yes\""
Text:  "<newline>    "
Name.Other:  "file"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"filename\""
Text:  "<newline>    "
Name.Other:  "log"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"log type\""
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "log"
Text:  " "
Name.Other:  "text"
Operator:  "="
Literal.String.Double:  "\"Event Gateway #variables.id# error: #ex.message#\""
Text:  " "
Name.Other:  "file"
Operator:  "="
Name.Constant:  "this"
Punctuation:  "."
Name.Other:  "logfile"
Text:  " "
Name.Other:  "type"
Operator:  "="
Literal.String.Double:  "\"error\""
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "param"
Text:  " "
Name.Other:  "name"
Operator:  "="
Literal.String.Double:  "\"url.age\""
Text:  " "
Name.Other:  "type"
Operator:  "="
Literal.String.Double:  "\"numeric\""
Text:  " "
Keyword:  "default"
Operator:  "="
Literal.String.Double:  "\"10\""
Text:  " "
Name.Other:  "max"
Operator:  "="
Literal.String.Double:  "\"100\""
Text:  " "
Name.Other:  "min"
Operator:  "="
Literal.String.Double:  "\"18\""
Punctuation:  ";"
Text:  "<newline>"
Comment.Single:  "//How about cfhttp ?"
Text:  "<newline>"
Name.Other:  "http"
Text:  " "
Name.Other:  "method"
Operator:  "="
Literal.String.Double:  "\"GET\""
Text:  " "
Name.Other:  "url"
Operator:  "="
Literal.String.Double:  "\"http://www.google.com\""
Text:  " "
Name.Other:  "result"
Operator:  "="
Literal.String.Double:  "\"webPage\""
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "mail"
Text:  " "
Name.Other:  "from"
Operator:  "="
Literal.String.Double:  "\"Mark@getrailo.com\""
Text:  " "
Name.Other:  "to"
Operator:  "="
Literal.String.Double:  "\"gert@getrailo.com\""
Text:  " "
Name.Other:  "subject"
Operator:  "="
Literal.String.Double:  "\"Awesome! Tags in Script!\""
Punctuation:  "{"
Text:  "<newline>"
Name.Function:  "WriteOutput"
Punctuation:  "("
Literal.String.Double:  "\"Hey Gert!<newline>Check out the code samples here! You can write tags in CFScript<newline>Mark<newline>\""
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Name.Other:  "directory"
Text:  " "
Name.Other:  "name"
Operator:  "="
Literal.String.Double:  "\"dir\""
Text:  " "
Name.Other:  "directory"
Operator:  "="
Name.Other:  "dir"
Text:  " "
Name.Other:  "action"
Operator:  "="
Literal.String.Double:  "\"list\""
Punctuation:  ";"
Text:  "<newline>"
Comment.Single:  "//Query a database"
Text:  "<newline>"
Keyword.Type:  "query"
Text:  " "
Name.Other:  "name"
Operator:  "="
Literal.String.Double:  "\"getUsers\""
Text:  " "
Name.Other:  "dataSource"
Operator:  "="
Literal.String.Double:  "\"myDatasource\""
Punctuation:  "{"
Text:  "<newline>"
Name.Function:  "echo"
Punctuation:  "("
Literal.String.Double:  "\"SELECT * FROM tusers WHERE UserID =\""
Punctuation:  ");"
Text:  "<newline>"
Name.Other:  "queryparam"
Text:  " "
Name.Other:  "cfsqltype"
Operator:  "="
Literal.String.Double:  "\"varchar\""
Text:  " "
Name.Other:  "value"
Operator:  "="
Literal.String.Double:  "\"6300EE15-1320-5CC2-F9F48B9DBBA54D9F\""
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Name.Function:  "dump"
Punctuation:  "("
Name.Other:  "getUsers"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Single:  "//comparison operators"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Text:  " "
Name.Function:  "isDefined"
Punctuation:  "("
Text:  " "
Literal.String.Double:  "\"cgi.http_referrer\""
Text:  " "
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  "<newline>  "
Punctuation:  "("
Text:  " "
Name.Constant:  "cgi"
Punctuation:  "."
Name.Function:  "HTTP_REFERER.len"
Punctuation:  "()"
Text:  " "
Operator:  "and"
Text:  " "
Literal.String.Double:  "\"/\""
Operator:  "&"
Name.Constant:  "cgi"
Punctuation:  "."
Name.Other:  "HTTP_REFERER"
Operator:  "&"
Literal.String.Double:  "\"/\""
Text:  " "
Operator:  "does not contain"
Text:  " "
Literal.String.Double:  "\"/\""
Operator:  "&"
Name.Constant:  "cgi"
Punctuation:  "."
Name.Other:  "HTTP_HOST"
Operator:  "&"
Literal.String.Double:  "\"/\""
Punctuation:  ")"
Text:  " "
Operator:  "OR"
Text:  "<newline>  "
Name.Other:  "x"
Text:  " "
Operator:  "GREATER THAN"
Text:  " "
Name.Other:  "y"
Text:  " "
Operator:  "OR"
Text:  "<newline>  "
Name.Other:  "a"
Text:  " "
Operator:  "LESS than or equal to"
Text:  " "
Name.Other:  "b"
Text:  " "
Punctuation:  "){"
Text:  "<newline><newline>  "
Comment.Single:  "//try/catch"
Text:  "<newline>  "
Keyword:  "try"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "//various loops"
Text:  "<newline>    "
Keyword:  "for"
Punctuation:  "(;"
Text:  " "
Name.Other:  "counter"
Text:  " "
Operator:  "lte"
Text:  " "
Name.Other:  "len"
Punctuation:  ";"
Text:  " "
Name.Other:  "counter"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "counter"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>      "
Name.Other:  "dir"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "directories"
Punctuation:  "["
Name.Other:  "counter"
Punctuation:  "];"
Text:  "<newline>      "
Name.Function:  "$directoryCopy"
Punctuation:  "("
Name.Other:  "dir"
Punctuation:  ","
Text:  " "
Name.Other:  "path"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Function:  "cfloop"
Punctuation:  "("
Keyword.Type:  "query"
Operator:  "="
Name.Other:  "SiteRelatedTables"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name.Function:  "loopy"
Punctuation:  "();"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Function:  "loop"
Punctuation:  "("
Keyword.Type:  "query"
Operator:  "="
Name.Other:  "SiteRelatedTables"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name.Function:  "loopy"
Punctuation:  "();"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "catch"
Text:  " "
Punctuation:  "("
Keyword.Type:  "any"
Text:  " "
Name.Other:  "e"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "directoryExists"
Punctuation:  "("
Name.Other:  "path"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name.Other:  "directory"
Text:  " "
Name.Other:  "action"
Operator:  "="
Literal.String.Double:  "\"delete\""
Text:  " "
Name.Other:  "recurse"
Operator:  "="
Literal.String.Double:  "\"true\""
Text:  " "
Name.Other:  "directory"
Operator:  "="
Literal.String.Double:  "\"#path#\""
Punctuation:  "{};"
Text:  "<newline>      "
Comment.Single:  "//mixed hash and quote"
Text:  "<newline>      "
Name.Other:  "filename"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"#dateformat( Now(), \""
Name.Other:  "YY_MM_DD"
Literal.String.Double:  "\" )#_#TimeFormat( Now(), \""
Name.Other:  "HH_mm"
Literal.String.Double:  "\" )#_Company.xls\""
Punctuation:  ";"
Text:  "<newline><newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Name.Other:  "rethrow"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Comment.Single:  "//throw variations"
Text:  "<newline>  "
Keyword:  "throw"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "throw"
Text:  " "
Literal.String.Double:  "\"some amazing error\""
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "throw"
Punctuation:  "("
Literal.String.Double:  "\"woohoo\""
Punctuation:  ");"
Text:  "<newline>  "
Keyword:  "throw"
Punctuation:  "("
Name.Other:  "type"
Operator:  "="
Literal.String.Double:  "\"wow\""
Punctuation:  ","
Text:  " "
Name.Other:  "message"
Operator:  "="
Literal.String.Double:  "\"that escalated quickly\""
Punctuation:  ");"
Text:  "<newline><newline>"
Punctuation:  "}"
Text:  "<newline>"
