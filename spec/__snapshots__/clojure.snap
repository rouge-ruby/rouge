Comment.Single:  ";;; dommy example"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "->"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "sel1"
Text.Whitespace:  " "
Name.Constant:  ":#my-button"
Punctuation:  ")"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Function:  "remove-attr!"
Text.Whitespace:  " "
Name.Constant:  ":disabled"
Punctuation:  ")"
Text.Whitespace:  "<newline>    "
Name:  "do-something"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Function:  "add-class!"
Text.Whitespace:  " "
Name.Constant:  ":action"
Punctuation:  ")"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Function:  "listen!"
Text.Whitespace:  " "
Name.Constant:  ":click"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "e"
Punctuation:  "]"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "js/console.log"
Text.Whitespace:  " "
Name:  "e"
Punctuation:  ")))))"
Text.Whitespace:  "<newline><newline><newline>"
Name.Constant:  ":reagent-render"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "args"
Text.Whitespace:  " "
Name:  "..."
Punctuation:  "]"
Text.Whitespace:  "<newline> "
Comment.Single:  ";; Necessary for Reagent to see that we depend on the dom-node r/atom."
Text.Whitespace:  "<newline> "
Comment.Single:  ";; Note: we don't actually use any of the args here.  This is because"
Text.Whitespace:  "<newline> "
Comment.Single:  ";; we cannot render D3 at this point.  We have to wait for the update."
Text.Whitespace:  "<newline> "
Operator:  "@"
Name:  "dom-node"
Text.Whitespace:  "<newline> "
Punctuation:  "["
Name.Constant:  ":div.gauge"
Text.Whitespace:  " "
Punctuation:  "["
Name.Constant:  ":svg"
Punctuation:  "]])})))"
Text.Whitespace:  "<newline><newline><newline><newline>"
Punctuation:  "["
Name.Constant:  "::foo/bar"
Text.Whitespace:  " "
Literal.Number.Integer:  "3"
Punctuation:  "]"
Text.Whitespace:  "<newline><newline>"
Literal.String.Symbol:  "'#this-is-a-valid-symbol###"
Text.Whitespace:  "<newline><newline>"
Comment.Single:  ";;; escape_semicolon.clj"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "="
Text.Whitespace:  " "
Name:  "c"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "int"
Text.Whitespace:  " "
Literal.String.Char:  "\\;"
Punctuation:  "))"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "do"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  ".readLine"
Text.Whitespace:  " "
Name:  "s"
Punctuation:  ")"
Text.Whitespace:  " "
Name.Constant:  ":line-start"
Punctuation:  ")"
Text.Whitespace:  "<newline><newline>"
Comment.Single:  ";;; genclass.clj"
Text.Whitespace:  "<newline><newline>"
Comment.Single:  ";   Copyright (c) Rich Hickey. All rights reserved."
Text.Whitespace:  "<newline>"
Comment.Single:  ";   The use and distribution terms for this software are covered by the"
Text.Whitespace:  "<newline>"
Comment.Single:  ";   Common Public License 1.0 (http://opensource.org/licenses/cpl.php)"
Text.Whitespace:  "<newline>"
Comment.Single:  ";   which can be found in the file CPL.TXT at the root of this distribution."
Text.Whitespace:  "<newline>"
Comment.Single:  ";   By using this software in any fashion, you are agreeing to be bound by"
Text.Whitespace:  "<newline>"
Comment.Single:  ";   the terms of this license."
Text.Whitespace:  "<newline>"
Comment.Single:  ";   You must not remove this notice, or any other, from this software."
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "in-ns"
Text.Whitespace:  " "
Literal.String.Symbol:  "'clojure"
Punctuation:  ")"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "import"
Text.Whitespace:  " "
Operator:  "'"
Punctuation:  "("
Name.Function:  "java.lang.reflect"
Text.Whitespace:  " "
Name:  "Modifier"
Text.Whitespace:  " "
Name:  "Constructor"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Operator:  "'"
Punctuation:  "("
Name.Function:  "clojure.asm"
Text.Whitespace:  " "
Name:  "ClassWriter"
Text.Whitespace:  " "
Name:  "ClassVisitor"
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "Type"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Operator:  "'"
Punctuation:  "("
Name.Function:  "clojure.asm.commons"
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Name:  "GeneratorAdapter"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Operator:  "'"
Punctuation:  "("
Name.Function:  "clojure.lang"
Text.Whitespace:  " "
Name:  "IPersistentMap"
Punctuation:  "))"
Text.Whitespace:  "<newline><newline>"
Comment.Single:  ";(defn method-sig [#^java.lang.reflect.Method meth]"
Text.Whitespace:  "<newline>"
Comment.Single:  ";  [(. meth (getName)) (seq (. meth (getParameterTypes)))])"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Keyword:  "defn-"
Text.Whitespace:  " "
Name:  "non-private-methods"
Text.Whitespace:  " "
Punctuation:  "["
Operator:  "#^"
Name:  "Class"
Text.Whitespace:  " "
Name:  "c"
Punctuation:  "]"
Text.Whitespace:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "loop"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "mm"
Text.Whitespace:  " "
Punctuation:  "{}"
Text.Whitespace:  "<newline>         "
Name:  "considered"
Text.Whitespace:  " "
Operator:  "#"
Punctuation:  "{}"
Text.Whitespace:  "<newline>         "
Name:  "c"
Text.Whitespace:  " "
Name:  "c"
Punctuation:  "]"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text.Whitespace:  " "
Name:  "c"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "[["
Name:  "mm"
Text.Whitespace:  " "
Name:  "considered"
Punctuation:  "]"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "loop"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "mm"
Text.Whitespace:  " "
Name:  "mm"
Text.Whitespace:  "<newline>                   "
Name:  "considered"
Text.Whitespace:  " "
Name:  "considered"
Text.Whitespace:  "<newline>                   "
Name:  "meths"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "concat"
Text.Whitespace:  "<newline>                          "
Punctuation:  "("
Name.Builtin:  "seq"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "c"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getDeclaredMethods"
Punctuation:  ")))"
Text.Whitespace:  "<newline>                          "
Punctuation:  "("
Name.Builtin:  "seq"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "c"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getMethods"
Punctuation:  "))))]"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Keyword:  "if"
Text.Whitespace:  " "
Name:  "meths"
Text.Whitespace:  "<newline>                "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Operator:  "#^"
Name:  "Method"
Text.Whitespace:  " "
Name:  "meth"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text.Whitespace:  " "
Name:  "meths"
Punctuation:  ")"
Text.Whitespace:  "<newline>                      "
Name:  "mods"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "meth"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getModifiers"
Punctuation:  "))"
Text.Whitespace:  "<newline>                      "
Name:  "mk"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "method-sig"
Text.Whitespace:  " "
Name:  "meth"
Punctuation:  ")]"
Text.Whitespace:  "<newline>                  "
Punctuation:  "("
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "considered"
Text.Whitespace:  " "
Name:  "mk"
Punctuation:  ")"
Text.Whitespace:  "<newline>                          "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Modifier"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "isPrivate"
Text.Whitespace:  " "
Name:  "mods"
Punctuation:  "))"
Text.Whitespace:  "<newline>                          "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Modifier"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "isStatic"
Text.Whitespace:  " "
Name:  "mods"
Punctuation:  "))"
Text.Whitespace:  "<newline>                          "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Modifier"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "isFinal"
Text.Whitespace:  " "
Name:  "mods"
Punctuation:  ")))"
Text.Whitespace:  "<newline>                    "
Punctuation:  "("
Name.Function:  "recur"
Text.Whitespace:  " "
Name:  "mm"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "conj"
Text.Whitespace:  " "
Name:  "considered"
Text.Whitespace:  " "
Name:  "mk"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text.Whitespace:  " "
Name:  "meths"
Punctuation:  "))"
Text.Whitespace:  "<newline>                    "
Punctuation:  "("
Name.Function:  "recur"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "assoc"
Text.Whitespace:  " "
Name:  "mm"
Text.Whitespace:  " "
Name:  "mk"
Text.Whitespace:  " "
Name:  "meth"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "conj"
Text.Whitespace:  " "
Name:  "considered"
Text.Whitespace:  " "
Name:  "mk"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text.Whitespace:  " "
Name:  "meths"
Punctuation:  "))))"
Text.Whitespace:  "<newline>                "
Punctuation:  "["
Name:  "mm"
Text.Whitespace:  " "
Name:  "considered"
Punctuation:  "]))]"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Function:  "recur"
Text.Whitespace:  " "
Name:  "mm"
Text.Whitespace:  " "
Name:  "considered"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "c"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getSuperclass"
Punctuation:  "))))"
Text.Whitespace:  "<newline>      "
Name:  "mm"
Punctuation:  ")))"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Keyword:  "defn-"
Text.Whitespace:  " "
Name:  "ctor-sigs"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "super"
Punctuation:  "]"
Text.Whitespace:  "<newline>  "
Punctuation:  "("
Keyword:  "for"
Text.Whitespace:  " "
Punctuation:  "["
Operator:  "#^"
Name:  "Constructor"
Text.Whitespace:  " "
Name:  "ctor"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "super"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getDeclaredConstructors"
Punctuation:  "))"
Text.Whitespace:  "<newline>        "
Name.Constant:  ":when"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Modifier"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "isPrivate"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "ctor"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getModifiers"
Punctuation:  ")))))]"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "apply"
Text.Whitespace:  " "
Name.Builtin:  "vector"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "ctor"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getParameterTypes"
Punctuation:  ")))))"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Keyword:  "defn-"
Text.Whitespace:  " "
Name:  "escape-class-name"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "c"
Punctuation:  "]"
Text.Whitespace:  "<newline>  "
Punctuation:  "("
Name.Builtin:  ".."
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  ".getSimpleName"
Text.Whitespace:  " "
Name:  "c"
Punctuation:  ")"
Text.Whitespace:  " <newline>      "
Punctuation:  "("
Name.Builtin:  "replace"
Text.Whitespace:  " "
Literal.String:  "\"[]\""
Text.Whitespace:  " "
Literal.String:  "\"<>\""
Punctuation:  ")))"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Keyword:  "defn-"
Text.Whitespace:  " "
Name:  "overload-name"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "mname"
Text.Whitespace:  " "
Name:  "pclasses"
Punctuation:  "]"
Text.Whitespace:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "seq"
Text.Whitespace:  " "
Name:  "pclasses"
Punctuation:  ")"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "apply"
Text.Whitespace:  " "
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "mname"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "interleave"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "repeat"
Text.Whitespace:  " "
Literal.String.Char:  "\\-"
Punctuation:  ")"
Text.Whitespace:  " <newline>                                 "
Punctuation:  "("
Name.Builtin:  "map"
Text.Whitespace:  " "
Name:  "escape-class-name"
Text.Whitespace:  " "
Name:  "pclasses"
Punctuation:  ")))"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "mname"
Text.Whitespace:  " "
Literal.String:  "\"-void\""
Punctuation:  ")))"
Text.Whitespace:  "<newline><newline>"
Comment.Single:  ";(distinct (map first(keys (mapcat non-private-methods [Object IPersistentMap]))))"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Keyword:  "defn"
Text.Whitespace:  " "
Name:  "gen-class"
Text.Whitespace:  " <newline>  "
Literal.String:  "\"Generates compiled bytecode for a class with the given<newline>  package-qualified cname (which, as all names in these parameters, can<newline>  be a string or symbol). The gen-class construct contains no<newline>  implementation, as the implementation will be dynamically sought by<newline>  the generated class in functions in a corresponding Clojure<newline>  namespace. Given a generated class org.mydomain.MyClass, methods<newline>  will be implemented that look for same-named functions in a Clojure<newline>  namespace called org.domain.MyClass. The init and main<newline>  functions (see below) will be found similarly. The static<newline>  initializer for the generated class will attempt to load the Clojure<newline>  support code for the class as a resource from the claspath, e.g. in<newline>  the example case, org/mydomain/MyClass.clj<newline><newline>  Returns a map containing :name and :bytecode. Most uses will be<newline>  satisfied by the higher-level gen-and-load-class and<newline>  gen-and-store-class functions, which generate and immediately load,<newline>  or generate and store to disk, respectively.<newline><newline>  Options should be a set of key/value pairs, all of which are optional:<newline><newline>  :extends aclass<newline><newline>  Specifies the superclass, the non-private methods of which will be<newline>  overridden by the class. If not provided, defaults to Object.<newline><newline>  :implements [interface ...]<newline><newline>  One or more interfaces, the methods of which will be implemented by the class.<newline><newline>  :init name<newline><newline>  If supplied, names a function that will be called with the arguments<newline>  to the constructor. Must return [[superclass-constructor-args] state] <newline>  If not supplied, the constructor args are passed directly to<newline>  the superclass constructor and the state will be nil<newline><newline>  :constructors {[param-types] [super-param-types], ...}<newline><newline>  By default, constructors are created for the generated class which<newline>  match the signature(s) of the constructors for the superclass. This<newline>  parameter may be used to explicitly specify constructors, each entry<newline>  providing a mapping from a constructor signature to a superclass<newline>  constructor signature. When you supply this, you must supply an :init<newline>  specifier.<newline><newline>  :methods [[name [param-types] return-type], ...]<newline><newline>  The generated class automatically defines all of the non-private<newline>  methods of its superclasses/interfaces. This parameter can be used<newline>  to specify the signatures of additional methods of the generated<newline>  class. Do not repeat superclass/interface signatures here.<newline><newline>  :main boolean<newline><newline>  If supplied and true, a static public main function will be<newline>  generated. It will pass each string of the String[] argument as a<newline>  separate argument to a function called 'main.<newline><newline>  :factory name<newline><newline>  If supplied, a (set of) public static factory function(s) will be<newline>  created with the given name, and the same signature(s) as the<newline>  constructor(s).<newline>  <newline>  :state name<newline><newline>  If supplied, a public final instance field with the given name will be<newline>  created. You must supply an :init function in order to provide a<newline>  value for the state. Note that, though final, the state can be a ref<newline>  or agent, supporting the creation of Java objects with transactional<newline>  or asynchronous mutation semantics.<newline><newline>  :exposes {protected-field-name {:get name :set name}, ...}<newline><newline>  Since the implementations of the methods of the generated class<newline>  occur in Clojure functions, they have no access to the inherited<newline>  protected fields of the superclass. This parameter can be used to<newline>  generate public getter/setter methods exposing the protected field(s)<newline>  for use in the implementation.\""
Text.Whitespace:  "<newline><newline>  "
Punctuation:  "["
Name:  "cname"
Text.Whitespace:  " "
Operator:  "&"
Text.Whitespace:  " "
Name:  "options"
Punctuation:  "]"
Text.Whitespace:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Name.Builtin:  "name"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "cname"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Punctuation:  "{"
Name.Constant:  ":keys"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "extends"
Text.Whitespace:  " "
Name:  "implements"
Text.Whitespace:  " "
Name:  "constructors"
Text.Whitespace:  " "
Name:  "methods"
Text.Whitespace:  " "
Name:  "main"
Text.Whitespace:  " "
Name:  "factory"
Text.Whitespace:  " "
Name:  "state"
Text.Whitespace:  " "
Name:  "init"
Text.Whitespace:  " "
Name:  "exposes"
Punctuation:  "]}"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text.Whitespace:  " "
Name.Builtin:  "hash-map"
Text.Whitespace:  " "
Name:  "options"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "super"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text.Whitespace:  " "
Name:  "extends"
Text.Whitespace:  " "
Name:  "Object"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "interfaces"
Text.Whitespace:  " "
Name:  "implements"
Text.Whitespace:  "<newline>        "
Name:  "supers"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "cons"
Text.Whitespace:  " "
Name:  "super"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "seq"
Text.Whitespace:  " "
Name:  "interfaces"
Punctuation:  "))"
Text.Whitespace:  "<newline>        "
Name:  "ctor-sig-map"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text.Whitespace:  " "
Name:  "constructors"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "zipmap"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "ctor-sigs"
Text.Whitespace:  " "
Name:  "super"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "ctor-sigs"
Text.Whitespace:  " "
Name:  "super"
Punctuation:  ")))"
Text.Whitespace:  "<newline>        "
Name:  "cv"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "ClassWriter"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "ClassWriter"
Text.Whitespace:  " "
Name:  "COMPUTE_MAXS"
Punctuation:  "))"
Text.Whitespace:  "<newline>        "
Name:  "cname"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name.Builtin:  "name"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "replace"
Text.Whitespace:  " "
Literal.String:  "\".\""
Text.Whitespace:  " "
Literal.String:  "\"/\""
Punctuation:  "))"
Text.Whitespace:  "<newline>        "
Name:  "ctype"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getObjectType"
Text.Whitespace:  " "
Name:  "cname"
Punctuation:  "))"
Text.Whitespace:  "<newline>        "
Name:  "iname"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "c"
Punctuation:  "]"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  ".."
Text.Whitespace:  " "
Name:  "Type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getType"
Text.Whitespace:  " "
Name:  "c"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getInternalName"
Punctuation:  ")))"
Text.Whitespace:  "<newline>        "
Name:  "totype"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "c"
Punctuation:  "]"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getType"
Text.Whitespace:  " "
Name:  "c"
Punctuation:  ")))"
Text.Whitespace:  "<newline>        "
Name:  "to-types"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "cs"
Punctuation:  "]"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "pos?"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "count"
Text.Whitespace:  " "
Name:  "cs"
Punctuation:  "))"
Text.Whitespace:  "<newline>                            "
Punctuation:  "("
Name.Builtin:  "into-array"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "map"
Text.Whitespace:  " "
Name:  "totype"
Text.Whitespace:  " "
Name:  "cs"
Punctuation:  "))"
Text.Whitespace:  "<newline>                            "
Punctuation:  "("
Name.Builtin:  "make-array"
Text.Whitespace:  " "
Name:  "Type"
Text.Whitespace:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text.Whitespace:  "<newline>        "
Name:  "obj-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "totype"
Text.Whitespace:  " "
Name:  "Object"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "arg-types"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "n"
Punctuation:  "]"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "pos?"
Text.Whitespace:  " "
Name:  "n"
Punctuation:  ")"
Text.Whitespace:  "<newline>                            "
Punctuation:  "("
Name.Builtin:  "into-array"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "replicate"
Text.Whitespace:  " "
Name:  "n"
Text.Whitespace:  " "
Name:  "obj-type"
Punctuation:  "))"
Text.Whitespace:  "<newline>                            "
Punctuation:  "("
Name.Builtin:  "make-array"
Text.Whitespace:  " "
Name:  "Type"
Text.Whitespace:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text.Whitespace:  "<newline>        "
Name:  "super-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "totype"
Text.Whitespace:  " "
Name:  "super"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "init-name"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "init"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "factory-name"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "factory"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "state-name"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "state"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "main-name"
Text.Whitespace:  " "
Literal.String:  "\"main\""
Text.Whitespace:  "<newline>        "
Name:  "var-name"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "s"
Punctuation:  "]"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "s"
Text.Whitespace:  " "
Literal.String:  "\"__var\""
Punctuation:  "))"
Text.Whitespace:  "<newline>        "
Name:  "rt-type"
Text.Whitespace:  "  "
Punctuation:  "("
Name.Function:  "totype"
Text.Whitespace:  " "
Name:  "clojure.lang.RT"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "var-type"
Text.Whitespace:  "  "
Punctuation:  "("
Name.Function:  "totype"
Text.Whitespace:  " "
Name:  "clojure.lang.Var"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "ifn-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "totype"
Text.Whitespace:  " "
Name:  "clojure.lang.IFn"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "iseq-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "totype"
Text.Whitespace:  " "
Name:  "clojure.lang.ISeq"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "ex-type"
Text.Whitespace:  "  "
Punctuation:  "("
Name.Function:  "totype"
Text.Whitespace:  " "
Name:  "java.lang.UnsupportedOperationException"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "all-sigs"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "distinct"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "concat"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "map"
Text.Whitespace:  " "
Operator:  "#"
Punctuation:  "("
Keyword:  "let"
Punctuation:  "[["
Name:  "m"
Text.Whitespace:  " "
Name:  "p"
Punctuation:  "]"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "key"
Text.Whitespace:  " "
Name:  "%"
Punctuation:  ")]"
Text.Whitespace:  " "
Punctuation:  "{"
Name:  "m"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "p"
Punctuation:  "]})"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "mapcat"
Text.Whitespace:  " "
Name:  "non-private-methods"
Text.Whitespace:  " "
Name:  "supers"
Punctuation:  "))"
Text.Whitespace:  "<newline>                                   "
Punctuation:  "("
Name.Builtin:  "map"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "[["
Name:  "m"
Text.Whitespace:  " "
Name:  "p"
Punctuation:  "]]"
Text.Whitespace:  " "
Punctuation:  "{("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "m"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "p"
Punctuation:  "]})"
Text.Whitespace:  " "
Name:  "methods"
Punctuation:  ")))"
Text.Whitespace:  "<newline>        "
Name:  "sigs-by-name"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text.Whitespace:  " "
Name.Builtin:  "merge-with"
Text.Whitespace:  " "
Name.Builtin:  "concat"
Text.Whitespace:  " "
Punctuation:  "{}"
Text.Whitespace:  " "
Name:  "all-sigs"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "overloads"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "into"
Text.Whitespace:  " "
Punctuation:  "{}"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "filter"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "[["
Name:  "m"
Text.Whitespace:  " "
Name:  "s"
Punctuation:  "]]"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text.Whitespace:  " "
Name:  "s"
Punctuation:  "))"
Text.Whitespace:  " "
Name:  "sigs-by-name"
Punctuation:  "))"
Text.Whitespace:  "<newline>        "
Name:  "var-fields"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "concat"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text.Whitespace:  " "
Name:  "init"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "init-name"
Punctuation:  "])"
Text.Whitespace:  " <newline>                           "
Punctuation:  "("
Name.Builtin:  "and"
Text.Whitespace:  " "
Name:  "main"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "main-name"
Punctuation:  "])"
Text.Whitespace:  "<newline>                           "
Punctuation:  "("
Name.Builtin:  "distinct"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "concat"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "keys"
Text.Whitespace:  " "
Name:  "sigs-by-name"
Punctuation:  ")"
Text.Whitespace:  "<newline>                                             "
Punctuation:  "("
Name.Builtin:  "mapcat"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "[["
Name:  "m"
Text.Whitespace:  " "
Name:  "s"
Punctuation:  "]]"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "map"
Text.Whitespace:  " "
Operator:  "#"
Punctuation:  "("
Name.Function:  "overload-name"
Text.Whitespace:  " "
Name:  "m"
Text.Whitespace:  " "
Name:  "%"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "s"
Punctuation:  "))"
Text.Whitespace:  " "
Name:  "overloads"
Punctuation:  ")"
Text.Whitespace:  "<newline>                                             "
Punctuation:  "("
Name.Builtin:  "mapcat"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "comp"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "partial"
Text.Whitespace:  " "
Name.Builtin:  "map"
Text.Whitespace:  " "
Name.Builtin:  "str"
Punctuation:  ")"
Text.Whitespace:  " "
Name.Builtin:  "vals"
Text.Whitespace:  " "
Name.Builtin:  "val"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "exposes"
Punctuation:  "))))"
Text.Whitespace:  "<newline>        "
Name:  "emit-get-var"
Text.Whitespace:  " "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "gen"
Text.Whitespace:  " "
Name:  "v"
Punctuation:  "]"
Text.Whitespace:  "<newline>                       "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "false-label"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "newLabel"
Punctuation:  ")"
Text.Whitespace:  "<newline>                             "
Name:  "end-label"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "newLabel"
Punctuation:  ")]"
Text.Whitespace:  "<newline>                         "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "getStatic"
Text.Whitespace:  " "
Name:  "ctype"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "var-name"
Text.Whitespace:  " "
Name:  "v"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "var-type"
Punctuation:  ")"
Text.Whitespace:  "<newline>                         "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "dup"
Punctuation:  ")"
Text.Whitespace:  "<newline>                         "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "invokeVirtual"
Text.Whitespace:  " "
Name:  "var-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getMethod"
Text.Whitespace:  " "
Literal.String:  "\"boolean isBound()\""
Punctuation:  ")))"
Text.Whitespace:  "<newline>                         "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "ifZCmp"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "GeneratorAdapter"
Text.Whitespace:  " "
Name:  "EQ"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "false-label"
Punctuation:  ")"
Text.Whitespace:  "<newline>                         "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "invokeVirtual"
Text.Whitespace:  " "
Name:  "var-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getMethod"
Text.Whitespace:  " "
Literal.String:  "\"Object get()\""
Punctuation:  ")))"
Text.Whitespace:  "<newline>                         "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "goTo"
Text.Whitespace:  " "
Name:  "end-label"
Punctuation:  ")"
Text.Whitespace:  "<newline>                         "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "mark"
Text.Whitespace:  " "
Name:  "false-label"
Punctuation:  ")"
Text.Whitespace:  "<newline>                         "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name.Builtin:  "pop"
Punctuation:  ")"
Text.Whitespace:  "<newline>                         "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "visitInsn"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACONST_NULL"
Punctuation:  "))"
Text.Whitespace:  "<newline>                         "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "mark"
Text.Whitespace:  " "
Name:  "end-label"
Punctuation:  ")))"
Text.Whitespace:  "<newline>        "
Name:  "emit-forwarding-method"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "mname"
Text.Whitespace:  " "
Name:  "pclasses"
Text.Whitespace:  " "
Name:  "rclass"
Text.Whitespace:  " "
Name:  "else-gen"
Punctuation:  "]"
Text.Whitespace:  "<newline>          "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "ptypes"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "to-types"
Text.Whitespace:  " "
Name:  "pclasses"
Punctuation:  ")"
Text.Whitespace:  "<newline>                "
Name:  "rtype"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "totype"
Text.Whitespace:  " "
Name:  "rclass"
Punctuation:  ")"
Text.Whitespace:  "<newline>                "
Name:  "m"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Name:  "mname"
Text.Whitespace:  " "
Name:  "rtype"
Text.Whitespace:  " "
Name:  "ptypes"
Punctuation:  ")"
Text.Whitespace:  "<newline>                "
Name:  "is-overload"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "overloads"
Text.Whitespace:  " "
Name:  "mname"
Punctuation:  ")"
Text.Whitespace:  "<newline>                "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "GeneratorAdapter"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_PUBLIC"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "m"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "cv"
Punctuation:  ")"
Text.Whitespace:  "<newline>                "
Name:  "found-label"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "newLabel"
Punctuation:  "))"
Text.Whitespace:  "<newline>                "
Name:  "else-label"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "newLabel"
Punctuation:  "))"
Text.Whitespace:  "<newline>                "
Name:  "end-label"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "newLabel"
Punctuation:  "))]"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visitCode"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text.Whitespace:  " "
Name:  "is-overload"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Function:  "emit-get-var"
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "overload-name"
Text.Whitespace:  " "
Name:  "mname"
Text.Whitespace:  " "
Name:  "pclasses"
Punctuation:  "))"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "dup"
Punctuation:  "))"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "ifNonNull"
Text.Whitespace:  " "
Name:  "found-label"
Punctuation:  "))"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "pop"
Punctuation:  ")))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Function:  "emit-get-var"
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "mname"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "dup"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "ifNull"
Text.Whitespace:  " "
Name:  "else-label"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text.Whitespace:  " "
Name:  "is-overload"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "mark"
Text.Whitespace:  " "
Name:  "found-label"
Punctuation:  ")))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";if found"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "loadThis"
Punctuation:  "))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";box args"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "dotimes"
Text.Whitespace:  " "
Name:  "i"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "count"
Text.Whitespace:  " "
Name:  "ptypes"
Punctuation:  ")"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "loadArg"
Text.Whitespace:  " "
Name:  "i"
Punctuation:  "))"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "clojure.lang.Compiler$HostExpr"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "emitBoxReturn"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "nth"
Text.Whitespace:  " "
Name:  "pclasses"
Text.Whitespace:  " "
Name:  "i"
Punctuation:  "))))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";call fn"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeInterface"
Text.Whitespace:  " "
Name:  "ifn-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Literal.String:  "\"invoke\""
Text.Whitespace:  " "
Name:  "obj-type"
Text.Whitespace:  " <newline>                                                  "
Punctuation:  "("
Name.Builtin:  "into-array"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "cons"
Text.Whitespace:  " "
Name:  "obj-type"
Text.Whitespace:  " <newline>                                                                    "
Punctuation:  "("
Name.Builtin:  "replicate"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "count"
Text.Whitespace:  " "
Name:  "ptypes"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "obj-type"
Punctuation:  "))))))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";unbox return"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "unbox"
Text.Whitespace:  " "
Name:  "rtype"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "="
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "rtype"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getSort"
Punctuation:  "))"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Type"
Text.Whitespace:  " "
Name:  "VOID"
Punctuation:  "))"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "pop"
Punctuation:  ")))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "goTo"
Text.Whitespace:  " "
Name:  "end-label"
Punctuation:  "))"
Text.Whitespace:  "<newline>            <newline>                                        "
Comment.Single:  ";else call supplied alternative generator"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "mark"
Text.Whitespace:  " "
Name:  "else-label"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "pop"
Punctuation:  "))"
Text.Whitespace:  "<newline>            <newline>            "
Punctuation:  "("
Name.Function:  "else-gen"
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "m"
Punctuation:  ")"
Text.Whitespace:  "<newline>            <newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "mark"
Text.Whitespace:  " "
Name:  "end-label"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "returnValue"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "endMethod"
Punctuation:  "))))"
Text.Whitespace:  "<newline>        "
Punctuation:  "]"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";start class definition"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "cv"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visit"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "V1_5"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_PUBLIC"
Punctuation:  ")"
Text.Whitespace:  "<newline>                 "
Name:  "cname"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "iname"
Text.Whitespace:  " "
Name:  "super"
Punctuation:  ")"
Text.Whitespace:  "<newline>                 "
Punctuation:  "("
Name.Builtin:  "when"
Text.Whitespace:  " "
Name:  "interfaces"
Text.Whitespace:  "<newline>                   "
Punctuation:  "("
Name.Builtin:  "into-array"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "map"
Text.Whitespace:  " "
Name:  "iname"
Text.Whitespace:  " "
Name:  "interfaces"
Punctuation:  ")))))"
Text.Whitespace:  "<newline>    <newline>                                        "
Comment.Single:  ";static fields for vars"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "doseq"
Text.Whitespace:  " "
Name:  "v"
Text.Whitespace:  " "
Name:  "var-fields"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "cv"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visitField"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_PUBLIC"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_FINAL"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_STATIC"
Punctuation:  "))"
Text.Whitespace:  "<newline>                        "
Punctuation:  "("
Name.Function:  "var-name"
Text.Whitespace:  " "
Name:  "v"
Punctuation:  ")"
Text.Whitespace:  " <newline>                        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "var-type"
Text.Whitespace:  " "
Name:  "getDescriptor"
Punctuation:  ")"
Text.Whitespace:  "<newline>                        "
Name:  "nil"
Text.Whitespace:  " "
Name:  "nil"
Punctuation:  ")))"
Text.Whitespace:  "<newline>    <newline>                                        "
Comment.Single:  ";instance field for state"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "when"
Text.Whitespace:  " "
Name:  "state"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "cv"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visitField"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_PUBLIC"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_FINAL"
Punctuation:  "))"
Text.Whitespace:  "<newline>                        "
Name:  "state-name"
Text.Whitespace:  " <newline>                        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "obj-type"
Text.Whitespace:  " "
Name:  "getDescriptor"
Punctuation:  ")"
Text.Whitespace:  "<newline>                        "
Name:  "nil"
Text.Whitespace:  " "
Name:  "nil"
Punctuation:  ")))"
Text.Whitespace:  "<newline>    <newline>                                        "
Comment.Single:  ";static init to set up var fields and load clj"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "GeneratorAdapter"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_PUBLIC"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_STATIC"
Punctuation:  "))"
Text.Whitespace:  " <newline>                   "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Name:  "getMethod"
Text.Whitespace:  " "
Literal.String:  "\"void <clinit> ()\""
Punctuation:  ")"
Text.Whitespace:  "<newline>                   "
Name:  "nil"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "cv"
Punctuation:  ")]"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visitCode"
Punctuation:  "))"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "doseq"
Text.Whitespace:  " "
Name:  "v"
Text.Whitespace:  " "
Name:  "var-fields"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "push"
Text.Whitespace:  " "
Name.Builtin:  "name"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "push"
Text.Whitespace:  " "
Name:  "v"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeStatic"
Text.Whitespace:  " "
Name:  "rt-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getMethod"
Text.Whitespace:  " "
Literal.String:  "\"clojure.lang.Var var(String,String)\""
Punctuation:  "))))"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "putStatic"
Text.Whitespace:  " "
Name:  "ctype"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "var-name"
Text.Whitespace:  " "
Name:  "v"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "var-type"
Punctuation:  "))"
Text.Whitespace:  "<newline>      <newline>      "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "push"
Text.Whitespace:  " "
Name:  "ctype"
Punctuation:  ")"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "push"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name.Builtin:  "name"
Text.Whitespace:  " "
Name.Builtin:  "replace"
Text.Whitespace:  " "
Literal.String.Char:  "\\."
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "java.io.File"
Text.Whitespace:  " "
Name:  "separatorChar"
Punctuation:  "))"
Text.Whitespace:  " "
Literal.String:  "\".clj\""
Punctuation:  "))"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeStatic"
Text.Whitespace:  " "
Name:  "rt-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getMethod"
Text.Whitespace:  " "
Literal.String:  "\"void loadResourceScript(Class,String)\""
Punctuation:  "))))"
Text.Whitespace:  "<newline>      <newline>      "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "returnValue"
Punctuation:  "))"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "endMethod"
Punctuation:  ")))"
Text.Whitespace:  "<newline>    <newline>                                        "
Comment.Single:  ";ctors"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "doseq"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "pclasses"
Text.Whitespace:  " "
Name:  "super-pclasses"
Punctuation:  "]"
Text.Whitespace:  " "
Name:  "ctor-sig-map"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "ptypes"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "to-types"
Text.Whitespace:  " "
Name:  "pclasses"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Name:  "super-ptypes"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "to-types"
Text.Whitespace:  " "
Name:  "super-pclasses"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Name:  "m"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Literal.String:  "\"<init>\""
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Type"
Text.Whitespace:  " "
Name:  "VOID_TYPE"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "ptypes"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Name:  "super-m"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Literal.String:  "\"<init>\""
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Type"
Text.Whitespace:  " "
Name:  "VOID_TYPE"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "super-ptypes"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "GeneratorAdapter"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_PUBLIC"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "m"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "cv"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Name:  "no-init-label"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "newLabel"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Name:  "end-label"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "newLabel"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Name:  "nth-method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getMethod"
Text.Whitespace:  " "
Literal.String:  "\"Object nth(Object,int)\""
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Name:  "local"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "newLocal"
Text.Whitespace:  " "
Name:  "obj-type"
Punctuation:  ")]"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visitCode"
Punctuation:  "))"
Text.Whitespace:  "<newline>        <newline>        "
Punctuation:  "("
Keyword:  "if"
Text.Whitespace:  " "
Name:  "init"
Text.Whitespace:  "<newline>          "
Punctuation:  "("
Name.Function:  "do"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Function:  "emit-get-var"
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "init-name"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "dup"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "ifNull"
Text.Whitespace:  " "
Name:  "no-init-label"
Punctuation:  ")"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";box init args"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "dotimes"
Text.Whitespace:  " "
Name:  "i"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "count"
Text.Whitespace:  " "
Name:  "pclasses"
Punctuation:  ")"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "loadArg"
Text.Whitespace:  " "
Name:  "i"
Punctuation:  "))"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "clojure.lang.Compiler$HostExpr"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "emitBoxReturn"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "nth"
Text.Whitespace:  " "
Name:  "pclasses"
Text.Whitespace:  " "
Name:  "i"
Punctuation:  "))))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";call init fn"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeInterface"
Text.Whitespace:  " "
Name:  "ifn-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Literal.String:  "\"invoke\""
Text.Whitespace:  " "
Name:  "obj-type"
Text.Whitespace:  " <newline>                                                  "
Punctuation:  "("
Name.Function:  "arg-types"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "count"
Text.Whitespace:  " "
Name:  "ptypes"
Punctuation:  ")))))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";expecting [[super-ctor-args] state] returned"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "dup"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "push"
Text.Whitespace:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeStatic"
Text.Whitespace:  " "
Name:  "rt-type"
Text.Whitespace:  " "
Name:  "nth-method"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "storeLocal"
Text.Whitespace:  " "
Name:  "local"
Punctuation:  ")"
Text.Whitespace:  "<newline>            <newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "loadThis"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "dupX1"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "dotimes"
Text.Whitespace:  " "
Name:  "i"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "count"
Text.Whitespace:  " "
Name:  "super-pclasses"
Punctuation:  ")"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "loadLocal"
Text.Whitespace:  " "
Name:  "local"
Punctuation:  ")"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "push"
Text.Whitespace:  " "
Name:  "i"
Punctuation:  ")"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeStatic"
Text.Whitespace:  " "
Name:  "rt-type"
Text.Whitespace:  " "
Name:  "nth-method"
Punctuation:  "))"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "clojure.lang.Compiler$HostExpr"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "emitUnboxArg"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "nth"
Text.Whitespace:  " "
Name:  "super-pclasses"
Text.Whitespace:  " "
Name:  "i"
Punctuation:  "))))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeConstructor"
Text.Whitespace:  " "
Name:  "super-type"
Text.Whitespace:  " "
Name:  "super-m"
Punctuation:  "))"
Text.Whitespace:  "<newline>            <newline>            "
Punctuation:  "("
Keyword:  "if"
Text.Whitespace:  " "
Name:  "state"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Function:  "do"
Text.Whitespace:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "push"
Text.Whitespace:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text.Whitespace:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeStatic"
Text.Whitespace:  " "
Name:  "rt-type"
Text.Whitespace:  " "
Name:  "nth-method"
Punctuation:  "))"
Text.Whitespace:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "putField"
Text.Whitespace:  " "
Name:  "ctype"
Text.Whitespace:  " "
Name:  "state-name"
Text.Whitespace:  " "
Name:  "obj-type"
Punctuation:  ")))"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name.Builtin:  "pop"
Punctuation:  "))"
Text.Whitespace:  "<newline>            <newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "goTo"
Text.Whitespace:  " "
Name:  "end-label"
Punctuation:  ")"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";no init found"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "mark"
Text.Whitespace:  " "
Name:  "no-init-label"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "throwException"
Text.Whitespace:  " "
Name:  "ex-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "init-name"
Text.Whitespace:  " "
Literal.String:  "\" not defined\""
Punctuation:  ")))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "mark"
Text.Whitespace:  " "
Name:  "end-label"
Punctuation:  "))"
Text.Whitespace:  "<newline>          "
Punctuation:  "("
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "="
Text.Whitespace:  " "
Name:  "pclasses"
Text.Whitespace:  " "
Name:  "super-pclasses"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Function:  "do"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "loadThis"
Punctuation:  "))"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "loadArgs"
Punctuation:  "))"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeConstructor"
Text.Whitespace:  " "
Name:  "super-type"
Text.Whitespace:  " "
Name:  "super-m"
Punctuation:  ")))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Function:  "throw"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "Exception"
Text.Whitespace:  " "
Literal.String:  "\":init not specified, but ctor and super ctor args differ\""
Punctuation:  "))))"
Text.Whitespace:  "<newline><newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "returnValue"
Punctuation:  "))"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "endMethod"
Punctuation:  "))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";factory"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "when"
Text.Whitespace:  " "
Name:  "factory"
Text.Whitespace:  "<newline>          "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "fm"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Name:  "factory-name"
Text.Whitespace:  " "
Name:  "ctype"
Text.Whitespace:  " "
Name:  "ptypes"
Punctuation:  ")"
Text.Whitespace:  "<newline>                "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "GeneratorAdapter"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_PUBLIC"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_STATIC"
Punctuation:  "))"
Text.Whitespace:  " <newline>                         "
Name:  "fm"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "cv"
Punctuation:  ")]"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visitCode"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "newInstance"
Text.Whitespace:  " "
Name:  "ctype"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "dup"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "loadArgs"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeConstructor"
Text.Whitespace:  " "
Name:  "ctype"
Text.Whitespace:  " "
Name:  "m"
Punctuation:  "))"
Text.Whitespace:  "            <newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "returnValue"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "endMethod"
Punctuation:  "))))))"
Text.Whitespace:  "<newline>    <newline>                                        "
Comment.Single:  ";add methods matching supers', if no fn -> call super"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "mm"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "non-private-methods"
Text.Whitespace:  " "
Name:  "super"
Punctuation:  ")]"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "doseq"
Text.Whitespace:  " "
Operator:  "#^"
Name:  "java.lang.reflect.Method"
Text.Whitespace:  " "
Name:  "meth"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "vals"
Text.Whitespace:  " "
Name:  "mm"
Punctuation:  ")"
Text.Whitespace:  "<newline>             "
Punctuation:  "("
Name.Function:  "emit-forwarding-method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  ".getName"
Text.Whitespace:  " "
Name:  "meth"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  ".getParameterTypes"
Text.Whitespace:  " "
Name:  "meth"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  ".getReturnType"
Text.Whitespace:  " "
Name:  "meth"
Punctuation:  ")"
Text.Whitespace:  " <newline>                                     "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "gen"
Text.Whitespace:  " "
Name:  "m"
Punctuation:  "]"
Text.Whitespace:  "<newline>                                       "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "loadThis"
Punctuation:  "))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";push args"
Text.Whitespace:  "<newline>                                       "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "loadArgs"
Punctuation:  "))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";call super"
Text.Whitespace:  "<newline>                                       "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visitMethodInsn"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "INVOKESPECIAL"
Punctuation:  ")"
Text.Whitespace:  " <newline>                                                               "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "super-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getInternalName"
Punctuation:  "))"
Text.Whitespace:  "<newline>                                                               "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "m"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getName"
Punctuation:  "))"
Text.Whitespace:  "<newline>                                                               "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "m"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getDescriptor"
Punctuation:  ")))))))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";add methods matching interfaces', if no fn -> throw"
Text.Whitespace:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "doseq"
Text.Whitespace:  " "
Operator:  "#^"
Name:  "Class"
Text.Whitespace:  " "
Name:  "iface"
Text.Whitespace:  " "
Name:  "interfaces"
Text.Whitespace:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "doseq"
Text.Whitespace:  " "
Operator:  "#^"
Name:  "java.lang.reflect.Method"
Text.Whitespace:  " "
Name:  "meth"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "iface"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getMethods"
Punctuation:  "))"
Text.Whitespace:  "<newline>                     "
Punctuation:  "("
Name.Builtin:  "when-not"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "contains?"
Text.Whitespace:  " "
Name:  "mm"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "method-sig"
Text.Whitespace:  " "
Name:  "meth"
Punctuation:  "))"
Text.Whitespace:  "<newline>                       "
Punctuation:  "("
Name.Function:  "emit-forwarding-method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  ".getName"
Text.Whitespace:  " "
Name:  "meth"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  ".getParameterTypes"
Text.Whitespace:  " "
Name:  "meth"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  ".getReturnType"
Text.Whitespace:  " "
Name:  "meth"
Punctuation:  ")"
Text.Whitespace:  " <newline>                                               "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "gen"
Text.Whitespace:  " "
Name:  "m"
Punctuation:  "]"
Text.Whitespace:  "<newline>                                                 "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "throwException"
Text.Whitespace:  " "
Name:  "ex-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "m"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getName"
Punctuation:  ")))))))))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";extra methods"
Text.Whitespace:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "doseq"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "mname"
Text.Whitespace:  " "
Name:  "pclasses"
Text.Whitespace:  " "
Name:  "rclass"
Text.Whitespace:  " "
Name.Constant:  ":as"
Text.Whitespace:  " "
Name:  "msig"
Punctuation:  "]"
Text.Whitespace:  " "
Name:  "methods"
Text.Whitespace:  "<newline>         "
Punctuation:  "("
Name.Function:  "emit-forwarding-method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "mname"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "pclasses"
Text.Whitespace:  " "
Name:  "rclass"
Text.Whitespace:  " <newline>                                 "
Punctuation:  "("
Keyword:  "fn"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "gen"
Text.Whitespace:  " "
Name:  "m"
Punctuation:  "]"
Text.Whitespace:  "<newline>                                     "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "throwException"
Text.Whitespace:  " "
Name:  "ex-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "m"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getName"
Punctuation:  "))))))))"
Text.Whitespace:  "<newline><newline>                                        "
Comment.Single:  ";main"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "when"
Text.Whitespace:  " "
Name:  "main"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "m"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Name:  "getMethod"
Text.Whitespace:  " "
Literal.String:  "\"void main (String[])\""
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "GeneratorAdapter"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_PUBLIC"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_STATIC"
Punctuation:  "))"
Text.Whitespace:  " <newline>                     "
Name:  "m"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "cv"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Name:  "no-main-label"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "newLabel"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Name:  "end-label"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "newLabel"
Punctuation:  ")]"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visitCode"
Punctuation:  "))"
Text.Whitespace:  "<newline><newline>        "
Punctuation:  "("
Name.Function:  "emit-get-var"
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "main-name"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "dup"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "ifNull"
Text.Whitespace:  " "
Name:  "no-main-label"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "loadArgs"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeStatic"
Text.Whitespace:  " "
Name:  "rt-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "getMethod"
Text.Whitespace:  " "
Literal.String:  "\"clojure.lang.ISeq seq(Object)\""
Punctuation:  "))))"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "invokeInterface"
Text.Whitespace:  " "
Name:  "ifn-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Literal.String:  "\"applyTo\""
Text.Whitespace:  " "
Name:  "obj-type"
Text.Whitespace:  " <newline>                                              "
Punctuation:  "("
Name.Builtin:  "into-array"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "iseq-type"
Punctuation:  "]))))"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name.Builtin:  "pop"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "goTo"
Text.Whitespace:  " "
Name:  "end-label"
Punctuation:  ")"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";no main found"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "mark"
Text.Whitespace:  " "
Name:  "no-main-label"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "throwException"
Text.Whitespace:  " "
Name:  "ex-type"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "main-name"
Text.Whitespace:  " "
Literal.String:  "\" not defined\""
Punctuation:  ")))"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "mark"
Text.Whitespace:  " "
Name:  "end-label"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "returnValue"
Punctuation:  "))"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "endMethod"
Punctuation:  "))))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";field exposers"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "doseq"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "f"
Text.Whitespace:  " "
Punctuation:  "{"
Name:  "getter"
Text.Whitespace:  " "
Name.Constant:  ":get"
Text.Whitespace:  " "
Name:  "setter"
Text.Whitespace:  " "
Name.Constant:  ":set"
Punctuation:  "}]"
Text.Whitespace:  " "
Name:  "exposes"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "fld"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  ".getField"
Text.Whitespace:  " "
Name:  "super"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "f"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Name:  "ftype"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "totype"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  ".getType"
Text.Whitespace:  " "
Name:  "fld"
Punctuation:  "))]"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "when"
Text.Whitespace:  " "
Name:  "getter"
Text.Whitespace:  "<newline>          "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "m"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "getter"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "ftype"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "to-types"
Text.Whitespace:  " "
Punctuation:  "[]))"
Text.Whitespace:  "<newline>                "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "GeneratorAdapter"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_PUBLIC"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "m"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "cv"
Punctuation:  ")]"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visitCode"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "loadThis"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "getField"
Text.Whitespace:  " "
Name:  "ctype"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "f"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "ftype"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "returnValue"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "endMethod"
Punctuation:  "))))"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "when"
Text.Whitespace:  " "
Name:  "setter"
Text.Whitespace:  "<newline>          "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "m"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "Method"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "setter"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Type"
Text.Whitespace:  " "
Name:  "VOID_TYPE"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "into-array"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "ftype"
Punctuation:  "]))"
Text.Whitespace:  "<newline>                "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "GeneratorAdapter"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "Opcodes"
Text.Whitespace:  " "
Name:  "ACC_PUBLIC"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "m"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "nil"
Text.Whitespace:  " "
Name:  "cv"
Punctuation:  ")]"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visitCode"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "loadThis"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "loadArgs"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Name:  "putField"
Text.Whitespace:  " "
Name:  "ctype"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name:  "f"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "ftype"
Punctuation:  ")"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "returnValue"
Punctuation:  "))"
Text.Whitespace:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "gen"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "endMethod"
Punctuation:  "))))))"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";finish class def"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "cv"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "visitEnd"
Punctuation:  "))"
Text.Whitespace:  "<newline>    "
Punctuation:  "{"
Name.Constant:  ":name"
Text.Whitespace:  " "
Name.Builtin:  "name"
Text.Whitespace:  " "
Name.Constant:  ":bytecode"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "cv"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "toByteArray"
Punctuation:  "))}))"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Keyword:  "defn"
Text.Whitespace:  " "
Name:  "gen-and-load-class"
Text.Whitespace:  " <newline>  "
Literal.String:  "\"Generates and immediately loads the bytecode for the specified<newline>  class. Note that a class generated this way can be loaded only once<newline>  - the JVM supports only one class with a given name per<newline>  classloader. Subsequent to generation you can import it into any<newline>  desired namespaces just like any other class. See gen-class for a<newline>  description of the options.\""
Text.Whitespace:  "<newline><newline>  "
Punctuation:  "["
Name.Builtin:  "name"
Text.Whitespace:  " "
Operator:  "&"
Text.Whitespace:  " "
Name:  "options"
Punctuation:  "]"
Text.Whitespace:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "[{"
Name.Constant:  ":keys"
Text.Whitespace:  " "
Punctuation:  "["
Name.Builtin:  "name"
Text.Whitespace:  " "
Name:  "bytecode"
Punctuation:  "]}"
Text.Whitespace:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "apply"
Text.Whitespace:  " "
Name:  "gen-class"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name.Builtin:  "name"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "options"
Punctuation:  ")]"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  ".."
Text.Whitespace:  " "
Name:  "clojure.lang.RT"
Text.Whitespace:  " "
Name:  "ROOT_CLASSLOADER"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "defineClass"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name.Builtin:  "name"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "bytecode"
Punctuation:  "))))"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Keyword:  "defn"
Text.Whitespace:  " "
Name:  "gen-and-save-class"
Text.Whitespace:  " <newline>  "
Literal.String:  "\"Generates the bytecode for the named class and stores in a .class<newline>  file in a subpath of the supplied path, the directories for which<newline>  must already exist. See gen-class for a description of the options\""
Text.Whitespace:  "<newline><newline>  "
Punctuation:  "["
Name.Builtin:  "path"
Text.Whitespace:  " "
Name.Builtin:  "name"
Text.Whitespace:  " "
Operator:  "&"
Text.Whitespace:  " "
Name:  "options"
Punctuation:  "]"
Text.Whitespace:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Punctuation:  "[{"
Name.Constant:  ":keys"
Text.Whitespace:  " "
Punctuation:  "["
Name.Builtin:  "name"
Text.Whitespace:  " "
Name:  "bytecode"
Punctuation:  "]}"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text.Whitespace:  " "
Name:  "gen-class"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Name.Builtin:  "name"
Punctuation:  ")"
Text.Whitespace:  " "
Name:  "options"
Punctuation:  ")"
Text.Whitespace:  "<newline>        "
Name:  "file"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "java.io.File."
Text.Whitespace:  " "
Name.Builtin:  "path"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "str"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name.Builtin:  "name"
Text.Whitespace:  " "
Name.Builtin:  "replace"
Text.Whitespace:  " "
Literal.String.Char:  "\\."
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "."
Text.Whitespace:  " "
Name:  "java.io.File"
Text.Whitespace:  " "
Name:  "separatorChar"
Punctuation:  "))"
Text.Whitespace:  " "
Literal.String:  "\".class\""
Punctuation:  "))]"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Function:  ".createNewFile"
Text.Whitespace:  " "
Name:  "file"
Punctuation:  ")"
Text.Whitespace:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "with-open"
Text.Whitespace:  " "
Name:  "f"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "java.io.FileOutputStream."
Text.Whitespace:  " "
Name:  "file"
Punctuation:  ")"
Text.Whitespace:  "<newline>      "
Punctuation:  "("
Name.Function:  ".write"
Text.Whitespace:  " "
Name:  "f"
Text.Whitespace:  " "
Name:  "bytecode"
Punctuation:  "))))"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "comment"
Text.Whitespace:  "<newline>"
Comment.Single:  ";usage"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Function:  "gen-class"
Text.Whitespace:  " <newline> "
Name:  "package-qualified-name"
Text.Whitespace:  "<newline>  "
Comment.Single:  ";all below are optional"
Text.Whitespace:  "<newline> "
Name.Constant:  ":extends"
Text.Whitespace:  " "
Name:  "aclass"
Text.Whitespace:  "<newline> "
Name.Constant:  ":implements"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "interface"
Text.Whitespace:  " "
Name:  "..."
Punctuation:  "]"
Text.Whitespace:  "<newline> "
Name.Constant:  ":constructors"
Text.Whitespace:  " "
Punctuation:  "{["
Name:  "param-types"
Punctuation:  "]"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "super-param-types"
Punctuation:  "]"
Name:  ","
Text.Whitespace:  " "
Punctuation:  "}"
Text.Whitespace:  "<newline> "
Name.Constant:  ":methods"
Text.Whitespace:  " "
Punctuation:  "[["
Name.Builtin:  "name"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "param-types"
Punctuation:  "]"
Text.Whitespace:  " "
Name:  "return-type"
Punctuation:  "]"
Name:  ","
Text.Whitespace:  " "
Punctuation:  "]"
Text.Whitespace:  "<newline> "
Name.Constant:  ":main"
Text.Whitespace:  " "
Name.Builtin:  "boolean"
Text.Whitespace:  "<newline> "
Name.Constant:  ":factory"
Text.Whitespace:  " "
Name.Builtin:  "name"
Text.Whitespace:  "<newline> "
Name.Constant:  ":state"
Text.Whitespace:  " "
Name.Builtin:  "name"
Text.Whitespace:  "<newline> "
Name.Constant:  ":init"
Text.Whitespace:  " "
Name.Builtin:  "name"
Text.Whitespace:  "<newline> "
Name.Constant:  ":exposes"
Text.Whitespace:  " "
Punctuation:  "{"
Name:  "protected-field"
Text.Whitespace:  " "
Punctuation:  "{"
Name.Constant:  ":get"
Text.Whitespace:  " "
Name.Builtin:  "name"
Text.Whitespace:  " "
Name.Constant:  ":set"
Text.Whitespace:  " "
Name.Builtin:  "name"
Punctuation:  "}"
Name:  ","
Text.Whitespace:  " "
Punctuation:  "})"
Text.Whitespace:  "<newline> <newline>"
Comment.Single:  ";(gen-and-load-class "
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Function:  "clojure/gen-and-save-class"
Text.Whitespace:  " <newline> "
Literal.String:  "\"/Users/rich/Downloads\""
Text.Whitespace:  "<newline> "
Literal.String.Symbol:  "'fred.lucy.Ethel"
Text.Whitespace:  " <newline> "
Name.Constant:  ":extends"
Text.Whitespace:  " "
Name:  "clojure.lang.Box"
Text.Whitespace:  " "
Comment.Single:  ";APersistentMap"
Text.Whitespace:  "<newline> "
Name.Constant:  ":implements"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "clojure.lang.IPersistentMap"
Punctuation:  "]"
Text.Whitespace:  "<newline> "
Name.Constant:  ":state"
Text.Whitespace:  " "
Literal.String.Symbol:  "'state"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";:constructors {[Object] [Object]}"
Text.Whitespace:  "<newline>                                        "
Comment.Single:  ";:init 'init"
Text.Whitespace:  "<newline> "
Name.Constant:  ":main"
Text.Whitespace:  " "
Name:  "true"
Text.Whitespace:  "<newline> "
Name.Constant:  ":factory"
Text.Whitespace:  " "
Literal.String.Symbol:  "'create"
Text.Whitespace:  "<newline> "
Name.Constant:  ":methods"
Text.Whitespace:  " "
Punctuation:  "[["
Literal.String.Symbol:  "'foo"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "Object"
Punctuation:  "]"
Text.Whitespace:  " "
Name:  "Object"
Punctuation:  "]"
Text.Whitespace:  "<newline>           "
Punctuation:  "["
Literal.String.Symbol:  "'foo"
Text.Whitespace:  " "
Punctuation:  "[]"
Text.Whitespace:  " "
Name:  "Object"
Punctuation:  "]]"
Text.Whitespace:  "<newline> "
Name.Constant:  ":exposes"
Text.Whitespace:  " "
Punctuation:  "{"
Literal.String.Symbol:  "'val"
Text.Whitespace:  " "
Punctuation:  "{"
Name.Constant:  ":get"
Text.Whitespace:  " "
Literal.String.Symbol:  "'getVal"
Text.Whitespace:  " "
Name.Constant:  ":set"
Text.Whitespace:  " "
Literal.String.Symbol:  "'setVal"
Punctuation:  "}})"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "in-ns"
Text.Whitespace:  " "
Literal.String.Symbol:  "'fred.lucy.Ethel__2276"
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Function:  "clojure/refer"
Text.Whitespace:  " "
Literal.String.Symbol:  "'clojure"
Text.Whitespace:  " "
Name.Constant:  ":exclude"
Text.Whitespace:  " "
Operator:  "'"
Punctuation:  "("
Name.Builtin:  "assoc"
Text.Whitespace:  " "
Name.Builtin:  "seq"
Text.Whitespace:  " "
Name.Builtin:  "count"
Text.Whitespace:  " "
Name.Builtin:  "cons"
Punctuation:  "))"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Keyword:  "defn"
Text.Whitespace:  " "
Name:  "init"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "n"
Punctuation:  "]"
Text.Whitespace:  " "
Punctuation:  "[[]"
Text.Whitespace:  " "
Name:  "n"
Punctuation:  "])"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Keyword:  "defn"
Text.Whitespace:  " "
Name:  "foo"
Text.Whitespace:  " <newline>  "
Punctuation:  "(["
Name:  "this"
Punctuation:  "]"
Text.Whitespace:  " "
Name.Constant:  ":foo"
Punctuation:  ")"
Text.Whitespace:  " <newline>  "
Punctuation:  "(["
Name:  "this"
Text.Whitespace:  " "
Name:  "x"
Punctuation:  "]"
Text.Whitespace:  " "
Name:  "x"
Punctuation:  "))"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Keyword:  "defn"
Text.Whitespace:  " "
Name:  "main"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "x"
Text.Whitespace:  " "
Name:  "y"
Punctuation:  "]"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "println"
Text.Whitespace:  " "
Name:  "x"
Text.Whitespace:  " "
Name:  "y"
Punctuation:  "))"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Builtin:  "in-ns"
Text.Whitespace:  " "
Literal.String.Symbol:  "'user"
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Keyword:  "def"
Text.Whitespace:  " "
Name:  "ethel"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "new"
Text.Whitespace:  " "
Name:  "fred.lucy.Ethel__2276"
Text.Whitespace:  " "
Literal.Number.Integer:  "42"
Punctuation:  "))"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Keyword:  "def"
Text.Whitespace:  " "
Name:  "ethel"
Text.Whitespace:  " "
Punctuation:  "("
Name.Function:  "fred.lucy.Ethel__2276.create"
Text.Whitespace:  " "
Literal.Number.Integer:  "21"
Punctuation:  "))"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Function:  "fred.lucy.Ethel__2276.main"
Text.Whitespace:  " "
Punctuation:  "("
Name.Builtin:  "into-array"
Text.Whitespace:  " "
Punctuation:  "["
Literal.String:  "\"lucy\""
Text.Whitespace:  " "
Literal.String:  "\"ricky\""
Punctuation:  "]))"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Function:  ".state"
Text.Whitespace:  " "
Name:  "ethel"
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Function:  ".foo"
Text.Whitespace:  " "
Name:  "ethel"
Text.Whitespace:  " "
Literal.Number.Integer:  "7"
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Function:  ".foo"
Text.Whitespace:  " "
Name:  "ethel"
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Function:  ".getVal"
Text.Whitespace:  " "
Name:  "ethel"
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Function:  ".setVal"
Text.Whitespace:  " "
Name:  "ethel"
Text.Whitespace:  " "
Literal.Number.Integer:  "12"
Punctuation:  ")"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Name.Function:  "gen-class"
Text.Whitespace:  " "
Name:  "org.clojure.MyComparator"
Text.Whitespace:  " "
Name.Constant:  ":implements"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "Comparator"
Punctuation:  "])"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Builtin:  "in-ns"
Text.Whitespace:  " "
Literal.String.Symbol:  "'org.clojure.MyComparator"
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Keyword:  "defn"
Text.Whitespace:  " "
Name:  "compare"
Text.Whitespace:  " "
Punctuation:  "["
Name:  "this"
Text.Whitespace:  " "
Name:  "x"
Text.Whitespace:  " "
Name:  "y"
Punctuation:  "]"
Text.Whitespace:  " "
Name:  "..."
Punctuation:  ")"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "load-file"
Text.Whitespace:  " "
Literal.String:  "\"/Users/rich/dev/clojure/src/genclass.clj\""
Punctuation:  ")"
Text.Whitespace:  "<newline><newline>"
Punctuation:  "("
Name.Function:  "clojure/gen-and-save-class"
Text.Whitespace:  " "
Literal.String:  "\"/Users/rich/dev/clojure/gen/\""
Text.Whitespace:  " <newline> "
Literal.String.Symbol:  "'org.clojure.ClojureServlet"
Text.Whitespace:  " <newline> "
Name.Constant:  ":extends"
Text.Whitespace:  " "
Name:  "javax.servlet.http.HttpServlet"
Punctuation:  ")"
Text.Whitespace:  "<newline><newline>"
Punctuation:  ")"
Text.Whitespace:  "<newline>"
