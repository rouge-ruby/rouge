Comment.Multiline:  "#[[This is a bracket comment.<newline>It runs until the close bracket.]]"
Text:  "<newline>"
Name.Builtin:  "message"
Punctuation:  "("
Literal.String.Double:  "\"First Argument"
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "\""
Text:  " "
Comment.Multiline:  "#[[Bracket Comment]]"
Text:  " "
Literal.String.Double:  "\"Second Argument\""
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Multiline:  "#[==[This is a bracket comment.<newline>[[<newline>It runs until the close bracket.<newline>]]<newline>]=]<newline>]===]<newline>]==]"
Text:  "<newline>"
Name.Builtin:  "message"
Punctuation:  "("
Text:  "FOO"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "# This is a line comment."
Text:  "<newline>"
Name.Builtin:  "message"
Punctuation:  "("
Literal.String.Double:  "\"First Argument"
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# This is a line comment :)"
Text:  "<newline>        "
Literal.String.Double:  "\"Second Argument\""
Punctuation:  ")"
Text:  " "
Comment.Single:  "# This is a line comment."
Text:  "<newline><newline>"
Name.Builtin:  "message"
Punctuation:  "("
Literal.String.Double:  "[=[<newline>This is the first line in a bracket argument with bracket length 1.<newline>No \\-escape sequences or "
Literal.String.Interpol:  "${"
Name.Variable:  "outer_"
Literal.String.Interpol:  "${"
Name.Variable:  "inner_variable"
Literal.String.Interpol:  "}"
Name.Variable:  "_variable"
Literal.String.Interpol:  "}"
Literal.String.Double:  " references are evaluated.<newline>This is always one argument even though it contains a ; character.<newline>The text does not end on a closing bracket of length 0 like ]].<newline>It does end in a closing bracket of length 1.<newline>]=]"
Punctuation:  ")"
Text:  "<newline><newline>"
Name.Builtin:  "message"
Punctuation:  "("
Literal.String.Double:  "\"abc"
Literal.String.Interpol:  "${"
Name.Variable:  "outer_"
Literal.String.Interpol:  "${"
Name.Variable:  "inner_variable"
Literal.String.Interpol:  "}"
Name.Variable:  "_variable"
Literal.String.Interpol:  "}"
Literal.String.Double:  "def\""
Punctuation:  ")"
Text:  "<newline><newline>"
Name.Builtin:  "if"
Text:  " "
Punctuation:  "("
Text:  "FOO"
Punctuation:  ")"
Text:  "<newline>"
Name.Builtin:  "endif"
Punctuation:  "("
Text:  "FOO"
Punctuation:  ")"
Text:  "<newline><newline>"
Name.Builtin:  "list"
Punctuation:  "("
Text:  "APPEND CFLAGS -foo=\\\""
Literal.String.Interpol:  "${"
Name.Variable:  "CMAKE_CURRENT_SOURCE_DIR"
Literal.String.Interpol:  "}"
Text:  "/bar\\\""
Punctuation:  ")"
Text:  "<newline>"
Name.Builtin:  "message"
Punctuation:  "("
Literal.String.Double:  "\"everything else is counted as part of the string\""
Punctuation:  ")"
Text:  "<newline>"
