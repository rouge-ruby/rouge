Comment.Multiline:  "###<newline>a multiline comment<newline>###"
Text:  "<newline><newline>"
Comment.Multiline:  "###*<newline>a multiline comment with extra characters<newline>###"
Text:  "<newline><newline>"
Comment.Single:  "# The following line of hashes does not start a multiline comment"
Text:  "<newline>"
Comment.Single:  "#################"
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Name.Attribute:  "property"
Text:  "         "
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "# these shouldn't be highlighted as constants, since this is"
Text:  "<newline>"
Comment.Single:  "# totally legit in coffeescript"
Text:  "<newline>"
Punctuation:  "{"
Text:  " "
Name.Attribute:  "true"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name.Attribute:  "false"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Other:  "foo"
Punctuation:  "."
Name.Attribute:  "true"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "foo"
Punctuation:  "."
Name.Attribute:  "false"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "undefined"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "null"
Text:  "<newline>"
Punctuation:  "{"
Text:  " "
Name.Attribute:  "if"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name.Attribute:  "try"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Operator:  "in:"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Other:  "foo"
Punctuation:  "."
Name.Attribute:  "instanceof"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "foo"
Punctuation:  "."
Name.Attribute:  "typeof"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "finally"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "super"
Text:  "<newline><newline>"
Comment.Single:  "# these should"
Text:  "<newline>"
Punctuation:  "{"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ":"
Text:  " "
Name.Constant:  "true"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Operator:  ":"
Text:  " "
Name.Constant:  "false"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "instanceof"
Text:  " "
Name.Builtin:  "Number"
Text:  "<newline>"
Keyword:  "typeof"
Text:  " "
Literal.String:  "\"foo\""
Text:  "<newline><newline>"
Comment.Single:  "# these refer to builtins"
Text:  "<newline>"
Name.Builtin:  "window"
Punctuation:  "."
Name.Attribute:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "bar"
Punctuation:  "("
Name.Builtin:  "Array"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "# these are properties"
Text:  "<newline>"
Name.Other:  "foo"
Punctuation:  "."
Name.Attribute:  "window"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "bar"
Punctuation:  "."
Name.Attribute:  "Array"
Text:  "<newline><newline>"
Comment.Single:  "# The CoffeeScript Lexer. Uses a series of token-matching regexes to attempt"
Text:  "<newline>"
Comment.Single:  "# matches against the beginning of the source code. When a match is found,"
Text:  "<newline>"
Comment.Single:  "# a token is produced, we consume the match, and start again. Tokens are in the"
Text:  "<newline>"
Comment.Single:  "# form:"
Text:  "<newline>"
Comment.Single:  "#"
Text:  "<newline>"
Comment.Single:  "#     [tag, value, lineNumber]"
Text:  "<newline>"
Comment.Single:  "#"
Text:  "<newline>"
Comment.Single:  "# Which is a format that can be fed directly into [Jison](http://github.com/zaach/jison)."
Text:  "<newline><newline>"
Punctuation:  "{"
Name.Other:  "Rewriter"
Punctuation:  ","
Text:  " "
Name.Other:  "INVERSES"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "require"
Text:  " "
Literal.String:  "'./rewriter'"
Text:  "<newline><newline>"
Comment.Single:  "# Import the helpers we need."
Text:  "<newline>"
Punctuation:  "{"
Name.Other:  "count"
Punctuation:  ","
Text:  " "
Name.Other:  "starts"
Punctuation:  ","
Text:  " "
Name.Other:  "compact"
Punctuation:  ","
Text:  " "
Name.Other:  "last"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "require"
Text:  " "
Literal.String:  "'./helpers'"
Text:  "<newline><newline>"
Comment.Single:  "# The Lexer Class"
Text:  "<newline>"
Comment.Single:  "# ---------------"
Text:  "<newline><newline>"
Comment.Single:  "# The Lexer class reads a stream of CoffeeScript and divvies it up into tagged"
Text:  "<newline>"
Comment.Single:  "# tokens. Some potential ambiguity in the grammar has been avoided by"
Text:  "<newline>"
Comment.Single:  "# pushing some extra smarts into the Lexer."
Text:  "<newline>"
Name.Other:  "exports"
Punctuation:  "."
Name.Attribute:  "Lexer"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "class"
Text:  " "
Name.Other:  "Lexer"
Text:  "<newline><newline>  "
Comment.Single:  "# **tokenize** is the Lexer's main method. Scan by attempting to match tokens"
Text:  "<newline>  "
Comment.Single:  "# one at a time, using a regular expression anchored at the start of the"
Text:  "<newline>  "
Comment.Single:  "# remaining code, or a custom recursive token-matching method"
Text:  "<newline>  "
Comment.Single:  "# (for interpolations). When the next token has been recorded, we move forward"
Text:  "<newline>  "
Comment.Single:  "# within the code past the token, and begin again."
Text:  "<newline>  "
Comment.Single:  "#"
Text:  "<newline>  "
Comment.Single:  "# Each tokenizing method is responsible for returning the number of characters"
Text:  "<newline>  "
Comment.Single:  "# it has consumed."
Text:  "<newline>  "
Comment.Single:  "#"
Text:  "<newline>  "
Comment.Single:  "# Before returning the token stream, run it through the [Rewriter](rewriter.html)"
Text:  "<newline>  "
Comment.Single:  "# unless explicitly asked not to."
Text:  "<newline>  "
Name.Attribute:  "tokenize"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "code"
Punctuation:  ","
Text:  " "
Name.Other:  "opts"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{})"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Name.Other:  "code"
Text:  "     "
Operator:  "="
Text:  " "
Literal.String:  "\""
Literal.String.Escape:  "<newline>"
Literal.String.Interpol:  "\#{"
Name.Other:  "code"
Literal.String.Interpol:  "}"
Literal.String:  "\""
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "WHITESPACE"
Punctuation:  "."
Name.Attribute:  "test"
Text:  " "
Name.Other:  "code"
Text:  "<newline>    "
Name.Other:  "code"
Text:  "     "
Operator:  "="
Text:  " "
Name.Other:  "code"
Punctuation:  "."
Name.Attribute:  "replace"
Punctuation:  "("
Literal.String.Regex:  "/\\r/g"
Punctuation:  ","
Text:  " "
Literal.String:  "''"
Punctuation:  ")."
Name.Attribute:  "replace"
Text:  " "
Name.Other:  "TRAILING_SPACES"
Punctuation:  ","
Text:  " "
Literal.String:  "''"
Text:  "<newline><newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "code"
Text:  "    "
Operator:  "="
Text:  " "
Name.Other:  "code"
Text:  "           "
Comment.Single:  "# The remainder of the source code."
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Text:  "    "
Operator:  "="
Text:  " "
Name.Other:  "opts"
Punctuation:  "."
Name.Attribute:  "line"
Text:  " "
Operator:  "or"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Comment.Single:  "# The current line."
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "indent"
Text:  "  "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "              "
Comment.Single:  "# The current indentation level."
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "indebt"
Text:  "  "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "              "
Comment.Single:  "# The over-indentation at the current level."
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdebt"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "              "
Comment.Single:  "# The under-outdentation at the current level."
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "indents"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  "             "
Comment.Single:  "# The stack of all current indentation levels."
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "ends"
Text:  "    "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  "             "
Comment.Single:  "# The stack for pairing up tokens."
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Text:  "  "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  "             "
Comment.Single:  "# Stream of parsed tokens in the form `['TYPE', value, line]`."
Text:  "<newline><newline>    "
Comment.Single:  "# At every position, run through this list of attempted matches,"
Text:  "<newline>    "
Comment.Single:  "# short-circuiting if any of them succeed. Their order determines precedence:"
Text:  "<newline>    "
Comment.Single:  "# `@literalToken` is the fallback catch-all."
Text:  "<newline>    "
Name.Other:  "i"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Keyword:  "while"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "code"
Punctuation:  "["
Name.Other:  "i"
Punctuation:  "..]"
Text:  "<newline>      "
Name.Other:  "i"
Text:  " "
Operator:  "+="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "identifierToken"
Punctuation:  "()"
Text:  " "
Operator:  "or"
Text:  "<newline>           "
Name.Variable.Instance:  "@"
Name.Attribute:  "commentToken"
Punctuation:  "()"
Text:  "    "
Operator:  "or"
Text:  "<newline>           "
Name.Variable.Instance:  "@"
Name.Attribute:  "whitespaceToken"
Punctuation:  "()"
Text:  " "
Operator:  "or"
Text:  "<newline>           "
Name.Variable.Instance:  "@"
Name.Attribute:  "lineToken"
Punctuation:  "()"
Text:  "       "
Operator:  "or"
Text:  "<newline>           "
Name.Variable.Instance:  "@"
Name.Attribute:  "heredocToken"
Punctuation:  "()"
Text:  "    "
Operator:  "or"
Text:  "<newline>           "
Name.Variable.Instance:  "@"
Name.Attribute:  "stringToken"
Punctuation:  "()"
Text:  "     "
Operator:  "or"
Text:  "<newline>           "
Name.Variable.Instance:  "@"
Name.Attribute:  "numberToken"
Punctuation:  "()"
Text:  "     "
Operator:  "or"
Text:  "<newline>           "
Name.Variable.Instance:  "@"
Name.Attribute:  "regexToken"
Punctuation:  "()"
Text:  "      "
Operator:  "or"
Text:  "<newline>           "
Name.Variable.Instance:  "@"
Name.Attribute:  "jsToken"
Punctuation:  "()"
Text:  "         "
Operator:  "or"
Text:  "<newline>           "
Name.Variable.Instance:  "@"
Name.Attribute:  "literalToken"
Punctuation:  "()"
Text:  "<newline><newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "closeIndentation"
Punctuation:  "()"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "\"missing "
Literal.String.Interpol:  "\#{"
Name.Other:  "tag"
Literal.String.Interpol:  "}"
Literal.String:  "\""
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "ends"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "opts"
Punctuation:  "."
Name.Attribute:  "rewrite"
Text:  " "
Operator:  "is"
Text:  " "
Name.Constant:  "off"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "new"
Text:  " "
Name.Other:  "Rewriter"
Punctuation:  ")."
Name.Attribute:  "rewrite"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Text:  "<newline><newline>  "
Comment.Single:  "# Tokenizers"
Text:  "<newline>  "
Comment.Single:  "# ----------"
Text:  "<newline><newline>  "
Comment.Single:  "# Matches identifying literals: variables, keywords, method names, etc."
Text:  "<newline>  "
Comment.Single:  "# Check to ensure that JavaScript reserved words aren't being used as"
Text:  "<newline>  "
Comment.Single:  "# identifiers. Because CoffeeScript reserves a handful of keywords that are"
Text:  "<newline>  "
Comment.Single:  "# allowed in JavaScript, we're careful not to tag them as keywords when"
Text:  "<newline>  "
Comment.Single:  "# referenced as property names here, so you can still do `jQuery.is()` even"
Text:  "<newline>  "
Comment.Single:  "# though `is` means `===` otherwise."
Text:  "<newline>  "
Name.Attribute:  "identifierToken"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "IDENTIFIER"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Text:  "<newline>    "
Punctuation:  "["
Name.Other:  "input"
Punctuation:  ","
Text:  " "
Name.Other:  "id"
Punctuation:  ","
Text:  " "
Name.Other:  "colon"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "match"
Text:  "<newline><newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "id"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'own'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tag"
Punctuation:  "()"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'FOR'"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'OWN'"
Punctuation:  ","
Text:  " "
Name.Other:  "id"
Text:  "<newline>      "
Keyword:  "return"
Text:  " "
Name.Other:  "id"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>    "
Name.Other:  "forcedIdentifier"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "colon"
Text:  " "
Operator:  "or"
Text:  "<newline>      "
Punctuation:  "("
Name.Other:  "prev"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "last"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  ")"
Text:  " "
Operator:  "and"
Text:  " "
Punctuation:  "("
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "in"
Text:  " "
Punctuation:  "["
Literal.String:  "'.'"
Punctuation:  ","
Text:  " "
Literal.String:  "'?.'"
Punctuation:  ","
Text:  " "
Literal.String:  "'::'"
Punctuation:  "]"
Text:  " "
Operator:  "or"
Text:  "<newline>      "
Operator:  "not"
Text:  " "
Name.Other:  "prev"
Punctuation:  "."
Name.Attribute:  "spaced"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'@'"
Punctuation:  ")"
Text:  "<newline>    "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'IDENTIFIER'"
Text:  "<newline><newline>    "
Keyword:  "if"
Text:  " "
Operator:  "not"
Text:  " "
Name.Other:  "forcedIdentifier"
Text:  " "
Operator:  "and"
Text:  " "
Punctuation:  "("
Name.Other:  "id"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "JS_KEYWORDS"
Text:  " "
Operator:  "or"
Text:  " "
Name.Other:  "id"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "COFFEE_KEYWORDS"
Punctuation:  ")"
Text:  "<newline>      "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "id"
Punctuation:  "."
Name.Attribute:  "toUpperCase"
Punctuation:  "()"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'WHEN'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tag"
Punctuation:  "()"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "LINE_BREAK"
Text:  "<newline>        "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'LEADING_WHEN'"
Text:  "<newline>      "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'FOR'"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "seenFor"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "yes"
Text:  "<newline>      "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'UNLESS'"
Text:  "<newline>        "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'IF'"
Text:  "<newline>      "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "UNARY"
Text:  "<newline>        "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'UNARY'"
Text:  "<newline>      "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "RELATION"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "isnt"
Text:  " "
Literal.String:  "'INSTANCEOF'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "seenFor"
Text:  "<newline>          "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'FOR'"
Text:  " "
Operator:  "+"
Text:  " "
Name.Other:  "tag"
Text:  "<newline>          "
Name.Variable.Instance:  "@"
Name.Attribute:  "seenFor"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "no"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>          "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'RELATION'"
Text:  "<newline>          "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "value"
Punctuation:  "()"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'!'"
Text:  "<newline>            "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  "<newline>            "
Name.Other:  "id"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'!'"
Text:  " "
Operator:  "+"
Text:  " "
Name.Other:  "id"
Text:  "<newline><newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "id"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "JS_FORBIDDEN"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "forcedIdentifier"
Text:  "<newline>        "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'IDENTIFIER'"
Text:  "<newline>        "
Name.Other:  "id"
Text:  "  "
Operator:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name.Builtin:  "String"
Text:  " "
Name.Other:  "id"
Text:  "<newline>        "
Name.Other:  "id"
Punctuation:  "."
Name.Attribute:  "reserved"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "yes"
Text:  "<newline>      "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "id"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "RESERVED"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "\"reserved word "
Literal.String.Escape:  "\\\""
Literal.String.Interpol:  "\#{"
Name.Other:  "id"
Literal.String.Interpol:  "}"
Literal.String.Escape:  "\\\""
Literal.String:  "\""
Text:  "<newline><newline>    "
Name.Other:  "unless"
Text:  " "
Name.Other:  "forcedIdentifier"
Text:  "<newline>      "
Name.Other:  "id"
Text:  "  "
Operator:  "="
Text:  " "
Name.Other:  "COFFEE_ALIAS_MAP"
Punctuation:  "["
Name.Other:  "id"
Punctuation:  "]"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "id"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "COFFEE_ALIASES"
Text:  "<newline>      "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name.Other:  "id"
Text:  "<newline>        "
Keyword:  "when"
Text:  " "
Literal.String:  "'!'"
Text:  "                 "
Keyword:  "then"
Text:  " "
Literal.String:  "'UNARY'"
Text:  "<newline>        "
Keyword:  "when"
Text:  " "
Literal.String:  "'=='"
Punctuation:  ","
Text:  " "
Literal.String:  "'!='"
Text:  "          "
Keyword:  "then"
Text:  " "
Literal.String:  "'COMPARE'"
Text:  "<newline>        "
Keyword:  "when"
Text:  " "
Literal.String:  "'&&'"
Punctuation:  ","
Text:  " "
Literal.String:  "'||'"
Text:  "          "
Keyword:  "then"
Text:  " "
Literal.String:  "'LOGIC'"
Text:  "<newline>        "
Keyword:  "when"
Text:  " "
Literal.String:  "'true'"
Punctuation:  ","
Text:  " "
Literal.String:  "'false'"
Text:  "     "
Keyword:  "then"
Text:  " "
Literal.String:  "'BOOL'"
Text:  "<newline>        "
Keyword:  "when"
Text:  " "
Literal.String:  "'break'"
Punctuation:  ","
Text:  " "
Literal.String:  "'continue'"
Text:  " "
Keyword:  "then"
Text:  " "
Literal.String:  "'STATEMENT'"
Text:  "<newline>        "
Keyword:  "else"
Text:  "  "
Name.Other:  "tag"
Text:  "<newline><newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Name.Other:  "tag"
Punctuation:  ","
Text:  " "
Name.Other:  "id"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "':'"
Punctuation:  ","
Text:  " "
Literal.String:  "':'"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "colon"
Text:  "<newline>    "
Name.Other:  "input"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline><newline>  "
Comment.Single:  "# Matches numbers, including decimals, hex, and exponential notation."
Text:  "<newline>  "
Comment.Single:  "# Be careful not to interfere with ranges-in-progress."
Text:  "<newline>  "
Name.Attribute:  "numberToken"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "NUMBER"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Text:  "<newline>    "
Name.Other:  "number"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "match"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Literal.String.Regex:  "/^0[BOX]/"
Punctuation:  "."
Name.Attribute:  "test"
Text:  " "
Name.Other:  "number"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "\"radix prefix '"
Literal.String.Interpol:  "\#{"
Name.Other:  "number"
Literal.String.Interpol:  "}"
Literal.String:  "' must be lowercase\""
Text:  "<newline>    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Literal.String.Regex:  "/E/"
Punctuation:  "."
Name.Attribute:  "test"
Punctuation:  "("
Name.Other:  "number"
Punctuation:  ")"
Text:  " "
Operator:  "and"
Text:  " "
Operator:  "not"
Text:  " "
Literal.String.Regex:  "/^0x/"
Punctuation:  "."
Name.Attribute:  "test"
Text:  " "
Name.Other:  "number"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "\"exponential notation '"
Literal.String.Interpol:  "\#{"
Name.Other:  "number"
Literal.String.Interpol:  "}"
Literal.String:  "' must be indicated with a lowercase 'e'\""
Text:  "<newline>    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Literal.String.Regex:  "/^0\\d*[89]/"
Punctuation:  "."
Name.Attribute:  "test"
Text:  " "
Name.Other:  "number"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "\"decimal literal '"
Literal.String.Interpol:  "\#{"
Name.Other:  "number"
Literal.String.Interpol:  "}"
Literal.String:  "' must not be prefixed with '0'\""
Text:  "<newline>    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Literal.String.Regex:  "/^0\\d+/"
Punctuation:  "."
Name.Attribute:  "test"
Text:  " "
Name.Other:  "number"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "\"octal literal '"
Literal.String.Interpol:  "\#{"
Name.Other:  "number"
Literal.String.Interpol:  "}"
Literal.String:  "' must be prefixed with '0o'\""
Text:  "<newline>    "
Name.Other:  "lexedLength"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "number"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "octalLiteral"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/^0o([0-7]+)/"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Other:  "number"
Text:  "<newline>      "
Name.Other:  "number"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'0x'"
Text:  " "
Operator:  "+"
Text:  " "
Punctuation:  "("
Name.Builtin:  "parseInt"
Text:  " "
Name.Other:  "octalLiteral"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "],"
Text:  " "
Literal.Number.Integer:  "8"
Punctuation:  ")."
Name.Attribute:  "toString"
Text:  " "
Literal.Number.Integer:  "16"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "binaryLiteral"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/^0b([01]+)/"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Other:  "number"
Text:  "<newline>      "
Name.Other:  "number"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'0x'"
Text:  " "
Operator:  "+"
Text:  " "
Punctuation:  "("
Name.Builtin:  "parseInt"
Text:  " "
Name.Other:  "binaryLiteral"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "],"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")."
Name.Attribute:  "toString"
Text:  " "
Literal.Number.Integer:  "16"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'NUMBER'"
Punctuation:  ","
Text:  " "
Name.Other:  "number"
Text:  "<newline>    "
Name.Other:  "lexedLength"
Text:  "<newline><newline>  "
Comment.Single:  "# Matches strings, including multi-line strings. Ensures that quotation marks"
Text:  "<newline>  "
Comment.Single:  "# are balanced within the string's contents, and within nested interpolations."
Text:  "<newline>  "
Name.Attribute:  "stringToken"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "switch"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Punctuation:  "."
Name.Attribute:  "charAt"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>      "
Keyword:  "when"
Text:  " "
Literal.String:  "\"'\""
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "SIMPLESTR"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'STRING'"
Punctuation:  ","
Text:  " "
Punctuation:  "("
Name.Other:  "string"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "match"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "])."
Name.Attribute:  "replace"
Text:  " "
Name.Other:  "MULTILINER"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "\\\\<newline>"
Literal.String:  "'"
Text:  "<newline>      "
Keyword:  "when"
Text:  " "
Literal.String:  "'\"'"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "string"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "balancedString"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Punctuation:  ","
Text:  " "
Literal.String:  "'\"'"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "<"
Text:  " "
Name.Other:  "string"
Punctuation:  "."
Name.Attribute:  "indexOf"
Text:  " "
Literal.String:  "'\#{'"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>          "
Name.Variable.Instance:  "@"
Name.Attribute:  "interpolateString"
Text:  " "
Name.Other:  "string"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "..."
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>          "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'STRING'"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "escapeLines"
Text:  " "
Name.Other:  "string"
Text:  "<newline>      "
Keyword:  "else"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "octalEsc"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/^(?:\\\\.|[^\\\\])*\\\\(?:0[0-7]|[1-7])/"
Punctuation:  "."
Name.Attribute:  "test"
Text:  " "
Name.Other:  "string"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "\"octal escape sequences "
Literal.String.Interpol:  "\#{"
Name.Other:  "string"
Literal.String.Interpol:  "}"
Literal.String:  " are not allowed\""
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Text:  " "
Operator:  "+="
Text:  " "
Name.Other:  "count"
Text:  " "
Name.Other:  "string"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  "<newline>    "
Name.Other:  "string"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline><newline>  "
Comment.Single:  "# Matches heredocs, adjusting indentation to the correct level, as heredocs"
Text:  "<newline>  "
Comment.Single:  "# preserve whitespace, but ignore indentation to the left."
Text:  "<newline>  "
Name.Attribute:  "heredocToken"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "HEREDOC"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Text:  "<newline>    "
Name.Other:  "heredoc"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "match"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>    "
Name.Other:  "quote"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "heredoc"
Punctuation:  "."
Name.Attribute:  "charAt"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Name.Other:  "doc"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "sanitizeHeredoc"
Text:  " "
Name.Other:  "match"
Punctuation:  "["
Literal.Number.Integer:  "2"
Punctuation:  "],"
Text:  " "
Name.Attribute:  "quote"
Operator:  ":"
Text:  " "
Name.Other:  "quote"
Punctuation:  ","
Text:  " "
Name.Attribute:  "indent"
Operator:  ":"
Text:  " "
Name.Constant:  "null"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "quote"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'\"'"
Text:  " "
Operator:  "and"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "<="
Text:  " "
Name.Other:  "doc"
Punctuation:  "."
Name.Attribute:  "indexOf"
Text:  " "
Literal.String:  "'\#{'"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "interpolateString"
Text:  " "
Name.Other:  "doc"
Punctuation:  ","
Text:  " "
Name.Attribute:  "heredoc"
Operator:  ":"
Text:  " "
Name.Constant:  "yes"
Text:  "<newline>    "
Keyword:  "else"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'STRING'"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "makeString"
Text:  " "
Name.Other:  "doc"
Punctuation:  ","
Text:  " "
Name.Other:  "quote"
Punctuation:  ","
Text:  " "
Name.Constant:  "yes"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Text:  " "
Operator:  "+="
Text:  " "
Name.Other:  "count"
Text:  " "
Name.Other:  "heredoc"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  "<newline>    "
Name.Other:  "heredoc"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline><newline>  "
Comment.Single:  "# Matches and consumes comments."
Text:  "<newline>  "
Name.Attribute:  "commentToken"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Punctuation:  "."
Name.Attribute:  "match"
Text:  " "
Name.Other:  "COMMENT"
Text:  "<newline>    "
Punctuation:  "["
Name.Other:  "comment"
Punctuation:  ","
Text:  " "
Name.Other:  "here"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "match"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "here"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'HERECOMMENT'"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "sanitizeHeredoc"
Text:  " "
Name.Other:  "here"
Punctuation:  ","
Text:  "<newline>        "
Name.Attribute:  "herecomment"
Operator:  ":"
Text:  " "
Name.Constant:  "true"
Punctuation:  ","
Text:  " "
Name.Attribute:  "indent"
Operator:  ":"
Text:  " "
Name.Builtin:  "Array"
Punctuation:  "("
Name.Variable.Instance:  "@"
Name.Attribute:  "indent"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")."
Name.Attribute:  "join"
Punctuation:  "("
Literal.String:  "' '"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Text:  " "
Operator:  "+="
Text:  " "
Name.Other:  "count"
Text:  " "
Name.Other:  "comment"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  "<newline>    "
Name.Other:  "comment"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline><newline>  "
Comment.Single:  "# Matches JavaScript interpolated directly into the source via backticks."
Text:  "<newline>  "
Name.Attribute:  "jsToken"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Punctuation:  "."
Name.Attribute:  "charAt"
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'`'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "JSTOKEN"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'JS'"
Punctuation:  ","
Text:  " "
Punctuation:  "("
Name.Other:  "script"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "match"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "])["
Literal.Number.Integer:  "1"
Punctuation:  "..."
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Text:  " "
Operator:  "+="
Text:  " "
Name.Other:  "count"
Text:  " "
Name.Other:  "script"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  "<newline>    "
Name.Other:  "script"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline><newline>  "
Comment.Single:  "# Matches regular expression literals. Lexing regular expressions is difficult"
Text:  "<newline>  "
Comment.Single:  "# to distinguish from division, so we borrow some basic heuristics from"
Text:  "<newline>  "
Comment.Single:  "# JavaScript and Ruby."
Text:  "<newline>  "
Name.Attribute:  "regexToken"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Punctuation:  "."
Name.Attribute:  "charAt"
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "isnt"
Text:  " "
Literal.String:  "'/'"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "HEREGEX"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Text:  "<newline>      "
Name.Other:  "length"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "heregexToken"
Text:  " "
Name.Other:  "match"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Text:  " "
Operator:  "+="
Text:  " "
Name.Other:  "count"
Text:  " "
Name.Other:  "match"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "],"
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  "<newline>      "
Keyword:  "return"
Text:  " "
Name.Other:  "length"
Text:  "<newline><newline>    "
Name.Other:  "prev"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "last"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "prev"
Text:  " "
Operator:  "and"
Text:  " "
Punctuation:  "("
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "in"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Other:  "prev"
Punctuation:  "."
Name.Attribute:  "spaced"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Other:  "NOT_REGEX"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Other:  "NOT_SPACED_REGEX"
Punctuation:  "))"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "REGEX"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Text:  "<newline>    "
Punctuation:  "["
Name.Other:  "match"
Punctuation:  ","
Text:  " "
Name.Other:  "regex"
Punctuation:  ","
Text:  " "
Name.Other:  "flags"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "match"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "regex"
Punctuation:  "[.."
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'/*'"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "'regular expressions cannot begin with `*`'"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "regex"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'//'"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Other:  "regex"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'/(?:)/'"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'REGEX'"
Punctuation:  ","
Text:  " "
Literal.String:  "\""
Literal.String.Interpol:  "\#{"
Name.Other:  "regex"
Literal.String.Interpol:  "}\#{"
Name.Other:  "flags"
Literal.String.Interpol:  "}"
Literal.String:  "\""
Text:  "<newline>    "
Name.Other:  "match"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline><newline>  "
Comment.Single:  "# Matches multiline extended regular expressions."
Text:  "<newline>  "
Name.Attribute:  "heregexToken"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "match"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Punctuation:  "["
Name.Other:  "heregex"
Punctuation:  ","
Text:  " "
Name.Other:  "body"
Punctuation:  ","
Text:  " "
Name.Other:  "flags"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "match"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  ">"
Text:  " "
Name.Other:  "body"
Punctuation:  "."
Name.Attribute:  "indexOf"
Text:  " "
Literal.String:  "'\#{'"
Text:  "<newline>      "
Name.Other:  "re"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "body"
Punctuation:  "."
Name.Attribute:  "replace"
Punctuation:  "("
Name.Other:  "HEREGEX_OMIT"
Punctuation:  ","
Text:  " "
Literal.String:  "''"
Punctuation:  ")."
Name.Attribute:  "replace"
Punctuation:  "("
Literal.String.Regex:  "/\\//g"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "\\\\"
Literal.String:  "/'"
Punctuation:  ")"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "re"
Punctuation:  "."
Name.Attribute:  "match"
Text:  " "
Literal.String.Regex:  "/^\\*/"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "'regular expressions cannot begin with `*`'"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'REGEX'"
Punctuation:  ","
Text:  " "
Literal.String:  "\"/"
Literal.String.Interpol:  "\#{"
Text:  " "
Name.Other:  "re"
Text:  " "
Operator:  "or"
Text:  " "
Literal.String:  "'(?:)'"
Text:  " "
Literal.String.Interpol:  "}"
Literal.String:  "/"
Literal.String.Interpol:  "\#{"
Name.Other:  "flags"
Literal.String.Interpol:  "}"
Literal.String:  "\""
Text:  "<newline>      "
Keyword:  "return"
Text:  " "
Name.Other:  "heregex"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'IDENTIFIER'"
Punctuation:  ","
Text:  " "
Literal.String:  "'RegExp'"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Punctuation:  "["
Literal.String:  "'CALL_START'"
Punctuation:  ","
Text:  " "
Literal.String:  "'('"
Punctuation:  "]"
Text:  "<newline>    "
Name.Other:  "tokens"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>    "
Keyword:  "for"
Text:  " "
Punctuation:  "["
Name.Other:  "tag"
Punctuation:  ","
Text:  " "
Name.Other:  "value"
Punctuation:  "]"
Text:  " "
Operator:  "in"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "interpolateString"
Punctuation:  "("
Name.Other:  "body"
Punctuation:  ","
Text:  " "
Name.Attribute:  "regex"
Operator:  ":"
Text:  " "
Name.Constant:  "yes"
Punctuation:  ")"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'TOKENS'"
Text:  "<newline>        "
Name.Other:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Name.Other:  "value"
Punctuation:  "..."
Text:  "<newline>      "
Keyword:  "else"
Text:  "<newline>        "
Keyword:  "continue"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "value"
Punctuation:  "."
Name.Attribute:  "replace"
Text:  " "
Name.Other:  "HEREGEX_OMIT"
Punctuation:  ","
Text:  " "
Literal.String:  "''"
Text:  "<newline>        "
Name.Other:  "value"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "value"
Punctuation:  "."
Name.Attribute:  "replace"
Text:  " "
Literal.String.Regex:  "/\\\\/g"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "\\\\\\\\"
Literal.String:  "'"
Text:  "<newline>        "
Name.Other:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Punctuation:  "["
Literal.String:  "'STRING'"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "makeString"
Punctuation:  "("
Name.Other:  "value"
Punctuation:  ","
Text:  " "
Literal.String:  "'\"'"
Punctuation:  ","
Text:  " "
Name.Constant:  "yes"
Punctuation:  ")]"
Text:  "<newline>      "
Name.Other:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Punctuation:  "["
Literal.String:  "'+'"
Punctuation:  ","
Text:  " "
Literal.String:  "'+'"
Punctuation:  "]"
Text:  "<newline>    "
Name.Other:  "tokens"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Punctuation:  "["
Literal.String:  "'STRING'"
Punctuation:  ","
Text:  " "
Literal.String:  "'\"\"'"
Punctuation:  "],"
Text:  " "
Punctuation:  "["
Literal.String:  "'+'"
Punctuation:  ","
Text:  " "
Literal.String:  "'+'"
Punctuation:  "]"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "tokens"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Operator:  "?"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'STRING'"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Name.Other:  "tokens"
Punctuation:  "..."
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Punctuation:  "["
Literal.String:  "','"
Punctuation:  ","
Text:  " "
Literal.String:  "','"
Punctuation:  "],"
Text:  " "
Punctuation:  "["
Literal.String:  "'STRING'"
Punctuation:  ","
Text:  " "
Literal.String:  "'\"'"
Text:  " "
Operator:  "+"
Text:  " "
Name.Other:  "flags"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String:  "'\"'"
Punctuation:  "]"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "flags"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "')'"
Punctuation:  ","
Text:  " "
Literal.String:  "')'"
Text:  "<newline>    "
Name.Other:  "heregex"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline><newline>  "
Comment.Single:  "# Matches newlines, indents, and outdents, and determines which is which."
Text:  "<newline>  "
Comment.Single:  "# If we can detect that the current line is continued onto the the next line,"
Text:  "<newline>  "
Comment.Single:  "# then the newline is suppressed:"
Text:  "<newline>  "
Comment.Single:  "#"
Text:  "<newline>  "
Comment.Single:  "#     elements"
Text:  "<newline>  "
Comment.Single:  "#       .each( ... )"
Text:  "<newline>  "
Comment.Single:  "#       .map( ... )"
Text:  "<newline>  "
Comment.Single:  "#"
Text:  "<newline>  "
Comment.Single:  "# Keeps track of the level of indentation, because a single outdent token"
Text:  "<newline>  "
Comment.Single:  "# can close multiple indents, so we need to know how far in we happen to be."
Text:  "<newline>  "
Name.Attribute:  "lineToken"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "MULTI_DENT"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Text:  "<newline>    "
Name.Other:  "indent"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "match"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Text:  " "
Operator:  "+="
Text:  " "
Name.Other:  "count"
Text:  " "
Name.Other:  "indent"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "seenFor"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "no"
Text:  "<newline>    "
Name.Other:  "size"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "indent"
Punctuation:  "."
Name.Attribute:  "length"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "-"
Text:  " "
Name.Other:  "indent"
Punctuation:  "."
Name.Attribute:  "lastIndexOf"
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  "<newline>    "
Name.Other:  "noNewlines"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "unfinished"
Punctuation:  "()"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "size"
Text:  " "
Operator:  "-"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indebt"
Text:  " "
Operator:  "is"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indent"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "noNewlines"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "suppressNewlines"
Punctuation:  "()"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "newlineToken"
Punctuation:  "()"
Text:  "<newline>      "
Keyword:  "return"
Text:  " "
Name.Other:  "indent"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "size"
Text:  " "
Operator:  ">"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indent"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "noNewlines"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "indebt"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "size"
Text:  " "
Operator:  "-"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indent"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "suppressNewlines"
Punctuation:  "()"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name.Other:  "indent"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>      "
Name.Other:  "diff"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "size"
Text:  " "
Operator:  "-"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indent"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdebt"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'INDENT'"
Punctuation:  ","
Text:  " "
Name.Other:  "diff"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "indents"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Name.Other:  "diff"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "ends"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Literal.String:  "'OUTDENT'"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdebt"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indebt"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Keyword:  "else"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "indebt"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdentToken"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indent"
Text:  " "
Operator:  "-"
Text:  " "
Name.Other:  "size"
Punctuation:  ","
Text:  " "
Name.Other:  "noNewlines"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "indent"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "size"
Text:  "<newline>    "
Name.Other:  "indent"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline><newline>  "
Comment.Single:  "# Record an outdent token or multiple tokens, if we happen to be moving back"
Text:  "<newline>  "
Comment.Single:  "# inwards past several recorded indents."
Text:  "<newline>  "
Name.Attribute:  "outdentToken"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "moveOut"
Punctuation:  ","
Text:  " "
Name.Other:  "noNewlines"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "while"
Text:  " "
Name.Other:  "moveOut"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>      "
Name.Other:  "len"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indents"
Punctuation:  "."
Name.Attribute:  "length"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indents"
Punctuation:  "["
Name.Other:  "len"
Punctuation:  "]"
Text:  " "
Operator:  "is"
Text:  " "
Name.Constant:  "undefined"
Text:  "<newline>        "
Name.Other:  "moveOut"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>      "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indents"
Punctuation:  "["
Name.Other:  "len"
Punctuation:  "]"
Text:  " "
Operator:  "is"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdebt"
Text:  "<newline>        "
Name.Other:  "moveOut"
Text:  " "
Operator:  "-="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdebt"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdebt"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>      "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indents"
Punctuation:  "["
Name.Other:  "len"
Punctuation:  "]"
Text:  " "
Operator:  "<"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdebt"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdebt"
Text:  " "
Operator:  "-="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indents"
Punctuation:  "["
Name.Other:  "len"
Punctuation:  "]"
Text:  "<newline>        "
Name.Other:  "moveOut"
Text:  "  "
Operator:  "-="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indents"
Punctuation:  "["
Name.Other:  "len"
Punctuation:  "]"
Text:  "<newline>      "
Keyword:  "else"
Text:  "<newline>        "
Name.Other:  "dent"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indents"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  " "
Operator:  "-"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdebt"
Text:  "<newline>        "
Name.Other:  "moveOut"
Text:  " "
Operator:  "-="
Text:  " "
Name.Other:  "dent"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdebt"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "pair"
Text:  " "
Literal.String:  "'OUTDENT'"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'OUTDENT'"
Punctuation:  ","
Text:  " "
Name.Other:  "dent"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdebt"
Text:  " "
Operator:  "-="
Text:  " "
Name.Other:  "moveOut"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "dent"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  " "
Keyword:  "while"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "value"
Punctuation:  "()"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "';'"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'TERMINATOR'"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tag"
Punctuation:  "()"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'TERMINATOR'"
Text:  " "
Operator:  "or"
Text:  " "
Name.Other:  "noNewlines"
Text:  "<newline>    "
Keyword:  "this"
Text:  "<newline><newline>  "
Comment.Single:  "# Matches and consumes non-meaningful whitespace. Tag the previous token"
Text:  "<newline>  "
Comment.Single:  "# as being \"spaced\", because there are some cases where it makes a difference."
Text:  "<newline>  "
Name.Attribute:  "whitespaceToken"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Other:  "unless"
Text:  " "
Punctuation:  "("
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "WHITESPACE"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Punctuation:  ")"
Text:  " "
Operator:  "or"
Text:  "<newline>                    "
Punctuation:  "("
Name.Other:  "nline"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Punctuation:  "."
Name.Attribute:  "charAt"
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Punctuation:  ")"
Text:  "<newline>    "
Name.Other:  "prev"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "last"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Text:  "<newline>    "
Name.Other:  "prev"
Punctuation:  "["
Keyword:  "if"
Text:  " "
Name.Other:  "match"
Text:  " "
Keyword:  "then"
Text:  " "
Literal.String:  "'spaced'"
Text:  " "
Keyword:  "else"
Text:  " "
Literal.String:  "'newLine'"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "true"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "prev"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "match"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Other:  "match"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]."
Name.Attribute:  "length"
Text:  " "
Keyword:  "else"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline><newline>  "
Comment.Single:  "# Generate a newline token. Consecutive newlines get merged together."
Text:  "<newline>  "
Name.Attribute:  "newlineToken"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  " "
Keyword:  "while"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "value"
Punctuation:  "()"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "';'"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'TERMINATOR'"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tag"
Punctuation:  "()"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'TERMINATOR'"
Text:  "<newline>    "
Keyword:  "this"
Text:  "<newline><newline>  "
Comment.Single:  "# Use a `\\` at a line-ending to suppress the newline."
Text:  "<newline>  "
Comment.Single:  "# The slash is removed here once its job is done."
Text:  "<newline>  "
Name.Attribute:  "suppressNewlines"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "value"
Punctuation:  "()"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "\\\\"
Literal.String:  "'"
Text:  "<newline>    "
Keyword:  "this"
Text:  "<newline><newline>  "
Comment.Single:  "# We treat all other single characters as a token. E.g.: `( ) , . !`"
Text:  "<newline>  "
Comment.Single:  "# Multi-character operators are also literal tokens, so that Jison can assign"
Text:  "<newline>  "
Comment.Single:  "# the proper order of operations. There are some symbols that we tag specially"
Text:  "<newline>  "
Comment.Single:  "# here. `;` and newlines are both treated as a `TERMINATOR`, we distinguish"
Text:  "<newline>  "
Comment.Single:  "# parentheses that indicate a method call from regular parentheses, and so on."
Text:  "<newline>  "
Name.Attribute:  "literalToken"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "OPERATOR"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Text:  "<newline>      "
Punctuation:  "["
Name.Other:  "value"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "match"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "tagParameters"
Punctuation:  "()"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "CODE"
Punctuation:  "."
Name.Attribute:  "test"
Text:  " "
Name.Other:  "value"
Text:  "<newline>    "
Keyword:  "else"
Text:  "<newline>      "
Name.Other:  "value"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Punctuation:  "."
Name.Attribute:  "charAt"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Name.Other:  "tag"
Text:  "  "
Operator:  "="
Text:  " "
Name.Other:  "value"
Text:  "<newline>    "
Name.Other:  "prev"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "last"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'='"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "prev"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Operator:  "not"
Text:  " "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]."
Name.Attribute:  "reserved"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "JS_FORBIDDEN"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "\"reserved word "
Literal.String.Escape:  "\\\""
Literal.String.Interpol:  "\#{"
Name.Variable.Instance:  "@"
Name.Attribute:  "value"
Punctuation:  "()"
Literal.String.Interpol:  "}"
Literal.String.Escape:  "\\\""
Literal.String:  " can't be assigned\""
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "in"
Text:  " "
Punctuation:  "["
Literal.String:  "'||'"
Punctuation:  ","
Text:  " "
Literal.String:  "'&&'"
Punctuation:  "]"
Text:  "<newline>        "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'COMPOUND_ASSIGN'"
Text:  "<newline>        "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String:  "'='"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name.Other:  "value"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "';'"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "seenFor"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "no"
Text:  "<newline>      "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'TERMINATOR'"
Text:  "<newline>    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "MATH"
Text:  "            "
Keyword:  "then"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'MATH'"
Text:  "<newline>    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "COMPARE"
Text:  "         "
Keyword:  "then"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'COMPARE'"
Text:  "<newline>    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "COMPOUND_ASSIGN"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'COMPOUND_ASSIGN'"
Text:  "<newline>    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "UNARY"
Text:  "           "
Keyword:  "then"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'UNARY'"
Text:  "<newline>    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "SHIFT"
Text:  "           "
Keyword:  "then"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'SHIFT'"
Text:  "<newline>    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "LOGIC"
Text:  " "
Operator:  "or"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'?'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "prev"
Operator:  "?"
Punctuation:  "."
Name.Attribute:  "spaced"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'LOGIC'"
Text:  "<newline>    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "prev"
Text:  " "
Operator:  "and"
Text:  " "
Operator:  "not"
Text:  " "
Name.Other:  "prev"
Punctuation:  "."
Name.Attribute:  "spaced"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'('"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "CALLABLE"
Text:  "<newline>        "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'FUNC_EXIST'"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'?'"
Text:  "<newline>        "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'CALL_START'"
Text:  "<newline>      "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "value"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'['"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "INDEXABLE"
Text:  "<newline>        "
Name.Other:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'INDEX_START'"
Text:  "<newline>        "
Keyword:  "switch"
Text:  " "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>          "
Keyword:  "when"
Text:  " "
Literal.String:  "'?'"
Text:  "  "
Keyword:  "then"
Text:  " "
Name.Other:  "prev"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'INDEX_SOAK'"
Text:  "<newline>    "
Keyword:  "switch"
Text:  " "
Name.Other:  "value"
Text:  "<newline>      "
Keyword:  "when"
Text:  " "
Literal.String:  "'('"
Punctuation:  ","
Text:  " "
Literal.String:  "'{'"
Punctuation:  ","
Text:  " "
Literal.String:  "'['"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "ends"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Name.Other:  "INVERSES"
Punctuation:  "["
Name.Other:  "value"
Punctuation:  "]"
Text:  "<newline>      "
Keyword:  "when"
Text:  " "
Literal.String:  "')'"
Punctuation:  ","
Text:  " "
Literal.String:  "'}'"
Punctuation:  ","
Text:  " "
Literal.String:  "']'"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "pair"
Text:  " "
Name.Other:  "value"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Name.Other:  "tag"
Punctuation:  ","
Text:  " "
Name.Other:  "value"
Text:  "<newline>    "
Name.Other:  "value"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline><newline>  "
Comment.Single:  "# Token Manipulators"
Text:  "<newline>  "
Comment.Single:  "# ------------------"
Text:  "<newline><newline>  "
Comment.Single:  "# Sanitize a heredoc or herecomment by"
Text:  "<newline>  "
Comment.Single:  "# erasing all external indentation on the left-hand side."
Text:  "<newline>  "
Name.Attribute:  "sanitizeHeredoc"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "doc"
Punctuation:  ","
Text:  " "
Name.Other:  "options"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Punctuation:  "{"
Name.Other:  "indent"
Punctuation:  ","
Text:  " "
Name.Other:  "herecomment"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "options"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Other:  "herecomment"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "HEREDOC_ILLEGAL"
Punctuation:  "."
Name.Attribute:  "test"
Text:  " "
Name.Other:  "doc"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "\"block comment cannot contain "
Literal.String.Escape:  "\\\""
Literal.String:  "*/"
Literal.String.Escape:  "\\\""
Literal.String:  ", starting\""
Text:  "<newline>      "
Keyword:  "return"
Text:  " "
Name.Other:  "doc"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "doc"
Punctuation:  "."
Name.Attribute:  "indexOf"
Punctuation:  "("
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Punctuation:  ")"
Text:  " "
Operator:  "<="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Keyword:  "else"
Text:  "<newline>      "
Keyword:  "while"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "HEREDOC_INDENT"
Punctuation:  "."
Name.Attribute:  "exec"
Text:  " "
Name.Other:  "doc"
Text:  "<newline>        "
Name.Other:  "attempt"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "match"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "<newline>        "
Name.Other:  "indent"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "attempt"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "indent"
Text:  " "
Operator:  "is"
Text:  " "
Name.Constant:  "null"
Text:  " "
Operator:  "or"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "<"
Text:  " "
Name.Other:  "attempt"
Punctuation:  "."
Name.Attribute:  "length"
Text:  " "
Operator:  "<"
Text:  " "
Name.Other:  "indent"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>    "
Name.Other:  "doc"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "doc"
Punctuation:  "."
Name.Attribute:  "replace"
Text:  " "
Literal.String.Regex:  "///"
Text:  " "
Literal.String.Escape:  "<newline>"
Text:  " "
Literal.String.Interpol:  "\#{"
Name.Other:  "indent"
Literal.String.Interpol:  "}"
Text:  " "
Literal.String.Regex:  "///g"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "indent"
Text:  "<newline>    "
Name.Other:  "doc"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "doc"
Punctuation:  "."
Name.Attribute:  "replace"
Text:  " "
Literal.String.Regex:  "/^<newline>/"
Punctuation:  ","
Text:  " "
Literal.String:  "''"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "herecomment"
Text:  "<newline>    "
Name.Other:  "doc"
Text:  "<newline><newline>  "
Comment.Single:  "# A source of ambiguity in our grammar used to be parameter lists in function"
Text:  "<newline>  "
Comment.Single:  "# definitions versus argument lists in function calls. Walk backwards, tagging"
Text:  "<newline>  "
Comment.Single:  "# parameters specially in order to make things easier for the parser."
Text:  "<newline>  "
Name.Attribute:  "tagParameters"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Keyword:  "this"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tag"
Punctuation:  "()"
Text:  " "
Operator:  "isnt"
Text:  " "
Literal.String:  "')'"
Text:  "<newline>    "
Name.Other:  "stack"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>    "
Punctuation:  "{"
Name.Other:  "tokens"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "this"
Text:  "<newline>    "
Name.Other:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "tokens"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>    "
Name.Other:  "tokens"
Punctuation:  "["
Operator:  "--"
Name.Other:  "i"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'PARAM_END'"
Text:  "<newline>    "
Keyword:  "while"
Text:  " "
Name.Other:  "tok"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "tokens"
Punctuation:  "["
Operator:  "--"
Name.Other:  "i"
Punctuation:  "]"
Text:  "<newline>      "
Keyword:  "switch"
Text:  " "
Name.Other:  "tok"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>        "
Keyword:  "when"
Text:  " "
Literal.String:  "')'"
Text:  "<newline>          "
Name.Other:  "stack"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Name.Other:  "tok"
Text:  "<newline>        "
Keyword:  "when"
Text:  " "
Literal.String:  "'('"
Punctuation:  ","
Text:  " "
Literal.String:  "'CALL_START'"
Text:  "<newline>          "
Keyword:  "if"
Text:  " "
Name.Other:  "stack"
Punctuation:  "."
Name.Attribute:  "length"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Other:  "stack"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  "<newline>          "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "tok"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'('"
Text:  "<newline>            "
Name.Other:  "tok"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'PARAM_START'"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Keyword:  "this"
Text:  "<newline>          "
Keyword:  "else"
Text:  " "
Keyword:  "return"
Text:  " "
Keyword:  "this"
Text:  "<newline>    "
Keyword:  "this"
Text:  "<newline><newline>  "
Comment.Single:  "# Close up all remaining open blocks at the end of the file."
Text:  "<newline>  "
Name.Attribute:  "closeIndentation"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdentToken"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indent"
Text:  "<newline><newline>  "
Comment.Single:  "# Matches a balanced group such as a single or double-quoted string. Pass in"
Text:  "<newline>  "
Comment.Single:  "# a series of delimiters, all of which must be nested correctly within the"
Text:  "<newline>  "
Comment.Single:  "# contents of the string. This method allows us to have strings within"
Text:  "<newline>  "
Comment.Single:  "# interpolations within strings, ad infinitum."
Text:  "<newline>  "
Name.Attribute:  "balancedString"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "str"
Punctuation:  ","
Text:  " "
Name.Other:  "end"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Name.Other:  "continueCount"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Name.Other:  "stack"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Name.Other:  "end"
Punctuation:  "]"
Text:  "<newline>    "
Keyword:  "for"
Text:  " "
Name.Other:  "i"
Text:  " "
Operator:  "in"
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "..."
Name.Attribute:  "str"
Punctuation:  "."
Name.Attribute:  "length"
Punctuation:  "]"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "continueCount"
Text:  "<newline>        "
Operator:  "--"
Name.Other:  "continueCount"
Text:  "<newline>        "
Keyword:  "continue"
Text:  "<newline>      "
Keyword:  "switch"
Text:  " "
Name.Other:  "letter"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "str"
Punctuation:  "."
Name.Attribute:  "charAt"
Text:  " "
Name.Other:  "i"
Text:  "<newline>        "
Keyword:  "when"
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "\\\\"
Literal.String:  "'"
Text:  "<newline>          "
Operator:  "++"
Name.Other:  "continueCount"
Text:  "<newline>          "
Keyword:  "continue"
Text:  "<newline>        "
Keyword:  "when"
Text:  " "
Name.Other:  "end"
Text:  "<newline>          "
Name.Other:  "stack"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  "<newline>          "
Name.Other:  "unless"
Text:  " "
Name.Other:  "stack"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name.Other:  "str"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  ".."
Name.Attribute:  "i"
Punctuation:  "]"
Text:  "<newline>          "
Name.Other:  "end"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "stack"
Punctuation:  "["
Name.Other:  "stack"
Punctuation:  "."
Name.Attribute:  "length"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "<newline>          "
Keyword:  "continue"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "end"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'}'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "letter"
Text:  " "
Operator:  "in"
Text:  " "
Punctuation:  "["
Literal.String:  "'\"'"
Punctuation:  ","
Text:  " "
Literal.String:  "\"'\""
Punctuation:  "]"
Text:  "<newline>        "
Name.Other:  "stack"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Name.Other:  "end"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "letter"
Text:  "<newline>      "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "end"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'}'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "letter"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'/'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "match"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name.Other:  "HEREGEX"
Punctuation:  "."
Name.Attribute:  "exec"
Punctuation:  "("
Name.Other:  "str"
Punctuation:  "["
Name.Other:  "i"
Punctuation:  "..])"
Text:  " "
Operator:  "or"
Text:  " "
Name.Other:  "REGEX"
Punctuation:  "."
Name.Attribute:  "exec"
Punctuation:  "("
Name.Other:  "str"
Punctuation:  "["
Name.Other:  "i"
Punctuation:  "..]))"
Text:  "<newline>        "
Name.Other:  "continueCount"
Text:  " "
Operator:  "+="
Text:  " "
Name.Other:  "match"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]."
Name.Attribute:  "length"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>      "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "end"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'}'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "letter"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'{'"
Text:  "<newline>        "
Name.Other:  "stack"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Name.Other:  "end"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'}'"
Text:  "<newline>      "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "end"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'\"'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "prev"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'#'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "letter"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'{'"
Text:  "<newline>        "
Name.Other:  "stack"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Name.Other:  "end"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'}'"
Text:  "<newline>      "
Name.Other:  "prev"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "letter"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "\"missing "
Literal.String.Interpol:  "\#{"
Text:  " "
Name.Other:  "stack"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  " "
Literal.String.Interpol:  "}"
Literal.String:  ", starting\""
Text:  "<newline><newline>  "
Comment.Single:  "# Expand variables and expressions inside double-quoted strings using"
Text:  "<newline>  "
Comment.Single:  "# Ruby-like notation for substitution of arbitrary expressions."
Text:  "<newline>  "
Comment.Single:  "#"
Text:  "<newline>  "
Comment.Single:  "#     \"Hello \#{name.capitalize()}.\""
Text:  "<newline>  "
Comment.Single:  "#"
Text:  "<newline>  "
Comment.Single:  "# If it encounters an interpolation, this method will recursively create a"
Text:  "<newline>  "
Comment.Single:  "# new Lexer, tokenize the interpolated contents, and merge them into the"
Text:  "<newline>  "
Comment.Single:  "# token stream."
Text:  "<newline>  "
Name.Attribute:  "interpolateString"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "str"
Punctuation:  ","
Text:  " "
Name.Other:  "options"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{})"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Punctuation:  "{"
Name.Other:  "heredoc"
Punctuation:  ","
Text:  " "
Name.Other:  "regex"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "options"
Text:  "<newline>    "
Name.Other:  "tokens"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>    "
Name.Other:  "pi"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Name.Other:  "i"
Text:  "  "
Operator:  "="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Text:  "<newline>    "
Keyword:  "while"
Text:  " "
Name.Other:  "letter"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "str"
Punctuation:  "."
Name.Attribute:  "charAt"
Text:  " "
Name.Other:  "i"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "letter"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "\\\\"
Literal.String:  "'"
Text:  "<newline>        "
Name.Other:  "i"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>        "
Keyword:  "continue"
Text:  "<newline>      "
Name.Other:  "unless"
Text:  " "
Name.Other:  "letter"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'#'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Other:  "str"
Punctuation:  "."
Name.Attribute:  "charAt"
Punctuation:  "("
Name.Other:  "i"
Operator:  "+"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'{'"
Text:  " "
Operator:  "and"
Text:  "<newline>             "
Punctuation:  "("
Name.Other:  "expr"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "balancedString"
Text:  " "
Name.Other:  "str"
Punctuation:  "["
Name.Other:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "..],"
Text:  " "
Literal.String:  "'}'"
Punctuation:  ")"
Text:  "<newline>        "
Keyword:  "continue"
Text:  "<newline>      "
Name.Other:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Punctuation:  "["
Literal.String:  "'NEOSTRING'"
Punctuation:  ","
Text:  " "
Name.Other:  "str"
Punctuation:  "["
Name.Other:  "pi"
Punctuation:  "..."
Name.Attribute:  "i"
Punctuation:  "]]"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "pi"
Text:  " "
Operator:  "<"
Text:  " "
Name.Other:  "i"
Text:  "<newline>      "
Name.Other:  "inner"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "expr"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "..."
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "inner"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>        "
Name.Other:  "nested"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name.Other:  "Lexer"
Punctuation:  "()."
Name.Attribute:  "tokenize"
Text:  " "
Name.Other:  "inner"
Punctuation:  ","
Text:  " "
Name.Attribute:  "line"
Operator:  ":"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Punctuation:  ","
Text:  " "
Name.Attribute:  "rewrite"
Operator:  ":"
Text:  " "
Name.Constant:  "off"
Text:  "<newline>        "
Name.Other:  "nested"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  "<newline>        "
Name.Other:  "nested"
Punctuation:  "."
Name.Attribute:  "shift"
Punctuation:  "()"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "nested"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Operator:  "?"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'TERMINATOR'"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name.Other:  "len"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "nested"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>          "
Keyword:  "if"
Text:  " "
Name.Other:  "len"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>            "
Name.Other:  "nested"
Punctuation:  "."
Name.Attribute:  "unshift"
Text:  " "
Punctuation:  "["
Literal.String:  "'('"
Punctuation:  ","
Text:  " "
Literal.String:  "'('"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Punctuation:  "]"
Text:  "<newline>            "
Name.Other:  "nested"
Punctuation:  "."
Name.Attribute:  "push"
Text:  "    "
Punctuation:  "["
Literal.String:  "')'"
Punctuation:  ","
Text:  " "
Literal.String:  "')'"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Punctuation:  "]"
Text:  "<newline>          "
Name.Other:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Punctuation:  "["
Literal.String:  "'TOKENS'"
Punctuation:  ","
Text:  " "
Name.Other:  "nested"
Punctuation:  "]"
Text:  "<newline>      "
Name.Other:  "i"
Text:  " "
Operator:  "+="
Text:  " "
Name.Other:  "expr"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>      "
Name.Other:  "pi"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>    "
Name.Other:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Punctuation:  "["
Literal.String:  "'NEOSTRING'"
Punctuation:  ","
Text:  " "
Name.Other:  "str"
Punctuation:  "["
Name.Other:  "pi"
Punctuation:  "..]]"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Name.Other:  "pi"
Text:  " "
Operator:  "<"
Text:  " "
Name.Other:  "str"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Other:  "tokens"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "regex"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'STRING'"
Punctuation:  ","
Text:  " "
Literal.String:  "'\"\"'"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "tokens"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>    "
Name.Other:  "tokens"
Punctuation:  "."
Name.Attribute:  "unshift"
Text:  " "
Punctuation:  "["
Literal.String:  "''"
Punctuation:  ","
Text:  " "
Literal.String:  "''"
Punctuation:  "]"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "tokens"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'NEOSTRING'"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'('"
Punctuation:  ","
Text:  " "
Literal.String:  "'('"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "interpolated"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "tokens"
Punctuation:  "."
Name.Attribute:  "length"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>    "
Keyword:  "for"
Text:  " "
Punctuation:  "["
Name.Other:  "tag"
Punctuation:  ","
Text:  " "
Name.Other:  "value"
Punctuation:  "],"
Text:  " "
Name.Other:  "i"
Text:  " "
Operator:  "in"
Text:  " "
Name.Other:  "tokens"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'+'"
Punctuation:  ","
Text:  " "
Literal.String:  "'+'"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "i"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'TOKENS'"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Name.Other:  "value"
Punctuation:  "..."
Text:  "<newline>      "
Keyword:  "else"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'STRING'"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "makeString"
Text:  " "
Name.Other:  "value"
Punctuation:  ","
Text:  " "
Literal.String:  "'\"'"
Punctuation:  ","
Text:  " "
Name.Other:  "heredoc"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "')'"
Punctuation:  ","
Text:  " "
Literal.String:  "')'"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "interpolated"
Text:  "<newline>    "
Name.Other:  "tokens"
Text:  "<newline><newline>  "
Comment.Single:  "# Pairs up a closing token, ensuring that all listed pairs of tokens are"
Text:  "<newline>  "
Comment.Single:  "# correctly balanced throughout the course of the token stream."
Text:  "<newline>  "
Name.Attribute:  "pair"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "tag"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Name.Other:  "unless"
Text:  " "
Name.Other:  "tag"
Text:  " "
Operator:  "is"
Text:  " "
Name.Other:  "wanted"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "last"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "ends"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "error"
Text:  " "
Literal.String:  "\"unmatched "
Literal.String.Interpol:  "\#{"
Name.Other:  "tag"
Literal.String.Interpol:  "}"
Literal.String:  "\""
Text:  " "
Name.Other:  "unless"
Text:  " "
Literal.String:  "'OUTDENT'"
Text:  " "
Operator:  "is"
Text:  " "
Name.Other:  "wanted"
Text:  "<newline>      "
Comment.Single:  "# Auto-close INDENT to support syntax like this:"
Text:  "<newline>      "
Comment.Single:  "#"
Text:  "<newline>      "
Comment.Single:  "#     el.click((event) ->"
Text:  "<newline>      "
Comment.Single:  "#       el.hide())"
Text:  "<newline>      "
Comment.Single:  "#"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "indent"
Text:  " "
Operator:  "-="
Text:  " "
Name.Other:  "size"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "last"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indents"
Text:  "<newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "outdentToken"
Text:  " "
Name.Other:  "size"
Punctuation:  ","
Text:  " "
Name.Constant:  "true"
Text:  "<newline>      "
Keyword:  "return"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "pair"
Text:  " "
Name.Other:  "tag"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "ends"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "()"
Text:  "<newline><newline>  "
Comment.Single:  "# Helpers"
Text:  "<newline>  "
Comment.Single:  "# -------"
Text:  "<newline><newline>  "
Comment.Single:  "# Add a token to the results, taking note of the line number."
Text:  "<newline>  "
Name.Attribute:  "token"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "tag"
Punctuation:  ","
Text:  " "
Name.Other:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "push"
Text:  " "
Punctuation:  "["
Name.Other:  "tag"
Punctuation:  ","
Text:  " "
Name.Other:  "value"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Punctuation:  "]"
Text:  "<newline><newline>  "
Comment.Single:  "# Peek at a tag in the current token stream."
Text:  "<newline>  "
Name.Attribute:  "tag"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "index"
Punctuation:  ","
Text:  " "
Name.Other:  "tag"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Punctuation:  "("
Name.Other:  "tok"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "last"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  ","
Text:  " "
Name.Other:  "index"
Punctuation:  ")"
Text:  " "
Operator:  "and"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "tag"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Other:  "tok"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "tag"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Other:  "tok"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline><newline>  "
Comment.Single:  "# Peek at a value in the current token stream."
Text:  "<newline>  "
Name.Attribute:  "value"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "index"
Punctuation:  ","
Text:  " "
Name.Other:  "val"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Punctuation:  "("
Name.Other:  "tok"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "last"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  ","
Text:  " "
Name.Other:  "index"
Punctuation:  ")"
Text:  " "
Operator:  "and"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "val"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Other:  "tok"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "val"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Other:  "tok"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "<newline><newline>  "
Comment.Single:  "# Are we in the midst of an unfinished expression?"
Text:  "<newline>  "
Name.Attribute:  "unfinished"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Name.Other:  "LINE_CONTINUER"
Punctuation:  "."
Name.Attribute:  "test"
Punctuation:  "("
Name.Variable.Instance:  "@"
Name.Attribute:  "chunk"
Punctuation:  ")"
Text:  " "
Operator:  "or"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "tag"
Punctuation:  "()"
Text:  " "
Operator:  "in"
Text:  " "
Punctuation:  "["
Literal.String:  "'"
Literal.String.Escape:  "\\\\"
Literal.String:  "'"
Punctuation:  ","
Text:  " "
Literal.String:  "'.'"
Punctuation:  ","
Text:  " "
Literal.String:  "'?.'"
Punctuation:  ","
Text:  " "
Literal.String:  "'UNARY'"
Punctuation:  ","
Text:  " "
Literal.String:  "'MATH'"
Punctuation:  ","
Text:  " "
Literal.String:  "'+'"
Punctuation:  ","
Text:  " "
Literal.String:  "'-'"
Punctuation:  ","
Text:  " "
Literal.String:  "'SHIFT'"
Punctuation:  ","
Text:  " "
Literal.String:  "'RELATION'"
Text:  "<newline>               "
Literal.String:  "'COMPARE'"
Punctuation:  ","
Text:  " "
Literal.String:  "'LOGIC'"
Punctuation:  ","
Text:  " "
Literal.String:  "'THROW'"
Punctuation:  ","
Text:  " "
Literal.String:  "'EXTENDS'"
Punctuation:  "]"
Text:  "<newline><newline>  "
Comment.Single:  "# Converts newlines for string literals."
Text:  "<newline>  "
Name.Attribute:  "escapeLines"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "str"
Punctuation:  ","
Text:  " "
Name.Other:  "heredoc"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Name.Other:  "str"
Punctuation:  "."
Name.Attribute:  "replace"
Text:  " "
Name.Other:  "MULTILINER"
Punctuation:  ","
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "heredoc"
Text:  " "
Keyword:  "then"
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "\\\\"
Literal.String:  "n'"
Text:  " "
Keyword:  "else"
Text:  " "
Literal.String:  "''"
Text:  "<newline><newline>  "
Comment.Single:  "# Constructs a string token by escaping quotes and newlines."
Text:  "<newline>  "
Name.Attribute:  "makeString"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "body"
Punctuation:  ","
Text:  " "
Name.Other:  "quote"
Punctuation:  ","
Text:  " "
Name.Other:  "heredoc"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Other:  "quote"
Text:  " "
Operator:  "+"
Text:  " "
Name.Other:  "quote"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Other:  "body"
Text:  "<newline>    "
Name.Other:  "body"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "body"
Punctuation:  "."
Name.Attribute:  "replace"
Text:  " "
Literal.String.Regex:  "/\\\\([\\s\\S])/g"
Punctuation:  ","
Text:  " "
Punctuation:  "("
Name.Other:  "match"
Punctuation:  ","
Text:  " "
Name.Other:  "contents"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Other:  "contents"
Text:  " "
Operator:  "in"
Text:  " "
Punctuation:  "["
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Punctuation:  ","
Text:  " "
Name.Other:  "quote"
Punctuation:  "]"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Other:  "contents"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Other:  "match"
Text:  "<newline>    "
Name.Other:  "body"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "body"
Punctuation:  "."
Name.Attribute:  "replace"
Text:  " "
Literal.String.Regex:  "///"
Text:  " "
Literal.String.Interpol:  "\#{"
Name.Other:  "quote"
Literal.String.Interpol:  "}"
Text:  " "
Literal.String.Regex:  "///g"
Punctuation:  ","
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "\\\\"
Literal.String:  "$&'"
Text:  "<newline>    "
Name.Other:  "quote"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "escapeLines"
Punctuation:  "("
Name.Other:  "body"
Punctuation:  ","
Text:  " "
Name.Other:  "heredoc"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name.Other:  "quote"
Text:  "<newline><newline>  "
Comment.Single:  "# Throws a syntax error on the current `@line`."
Text:  "<newline>  "
Name.Attribute:  "error"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "message"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Keyword:  "throw"
Text:  " "
Name.Other:  "SyntaxError"
Text:  " "
Literal.String:  "\""
Literal.String.Interpol:  "\#{"
Name.Other:  "message"
Literal.String.Interpol:  "}"
Literal.String:  " on line "
Literal.String.Interpol:  "\#{"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "line"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Literal.String.Interpol:  "}"
Literal.String:  "\""
Text:  "<newline><newline>"
Comment.Single:  "# Constants"
Text:  "<newline>"
Comment.Single:  "# ---------"
Text:  "<newline><newline>"
Comment.Single:  "# Keywords that CoffeeScript shares in common with JavaScript."
Text:  "<newline>"
Name.Other:  "JS_KEYWORDS"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>  "
Literal.String:  "'true'"
Punctuation:  ","
Text:  " "
Literal.String:  "'false'"
Punctuation:  ","
Text:  " "
Literal.String:  "'null'"
Punctuation:  ","
Text:  " "
Literal.String:  "'this'"
Text:  "<newline>  "
Literal.String:  "'new'"
Punctuation:  ","
Text:  " "
Literal.String:  "'delete'"
Punctuation:  ","
Text:  " "
Literal.String:  "'typeof'"
Punctuation:  ","
Text:  " "
Literal.String:  "'in'"
Punctuation:  ","
Text:  " "
Literal.String:  "'instanceof'"
Text:  "<newline>  "
Literal.String:  "'return'"
Punctuation:  ","
Text:  " "
Literal.String:  "'throw'"
Punctuation:  ","
Text:  " "
Literal.String:  "'break'"
Punctuation:  ","
Text:  " "
Literal.String:  "'continue'"
Punctuation:  ","
Text:  " "
Literal.String:  "'debugger'"
Text:  "<newline>  "
Literal.String:  "'if'"
Punctuation:  ","
Text:  " "
Literal.String:  "'else'"
Punctuation:  ","
Text:  " "
Literal.String:  "'switch'"
Punctuation:  ","
Text:  " "
Literal.String:  "'for'"
Punctuation:  ","
Text:  " "
Literal.String:  "'while'"
Punctuation:  ","
Text:  " "
Literal.String:  "'do'"
Punctuation:  ","
Text:  " "
Literal.String:  "'try'"
Punctuation:  ","
Text:  " "
Literal.String:  "'catch'"
Punctuation:  ","
Text:  " "
Literal.String:  "'finally'"
Text:  "<newline>  "
Literal.String:  "'class'"
Punctuation:  ","
Text:  " "
Literal.String:  "'extends'"
Punctuation:  ","
Text:  " "
Literal.String:  "'super'"
Text:  "<newline>"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# CoffeeScript-only keywords."
Text:  "<newline>"
Name.Other:  "COFFEE_KEYWORDS"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'undefined'"
Punctuation:  ","
Text:  " "
Literal.String:  "'then'"
Punctuation:  ","
Text:  " "
Literal.String:  "'unless'"
Punctuation:  ","
Text:  " "
Literal.String:  "'until'"
Punctuation:  ","
Text:  " "
Literal.String:  "'loop'"
Punctuation:  ","
Text:  " "
Literal.String:  "'of'"
Punctuation:  ","
Text:  " "
Literal.String:  "'by'"
Punctuation:  ","
Text:  " "
Literal.String:  "'when'"
Punctuation:  "]"
Text:  "<newline><newline>"
Name.Other:  "COFFEE_ALIAS_MAP"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Operator:  "and"
Text:  "  "
Operator:  ":"
Text:  " "
Literal.String:  "'&&'"
Text:  "<newline>  "
Operator:  "or"
Text:  "   "
Operator:  ":"
Text:  " "
Literal.String:  "'||'"
Text:  "<newline>  "
Operator:  "is"
Text:  "   "
Operator:  ":"
Text:  " "
Literal.String:  "'=='"
Text:  "<newline>  "
Operator:  "isnt"
Text:  " "
Operator:  ":"
Text:  " "
Literal.String:  "'!='"
Text:  "<newline>  "
Operator:  "not"
Text:  "  "
Operator:  ":"
Text:  " "
Literal.String:  "'!'"
Text:  "<newline>  "
Name.Attribute:  "yes"
Text:  "  "
Operator:  ":"
Text:  " "
Literal.String:  "'true'"
Text:  "<newline>  "
Name.Attribute:  "no"
Text:  "   "
Operator:  ":"
Text:  " "
Literal.String:  "'false'"
Text:  "<newline>  "
Name.Attribute:  "on"
Text:  "   "
Operator:  ":"
Text:  " "
Literal.String:  "'true'"
Text:  "<newline>  "
Name.Attribute:  "off"
Text:  "  "
Operator:  ":"
Text:  " "
Literal.String:  "'false'"
Text:  "<newline><newline>"
Name.Other:  "COFFEE_ALIASES"
Text:  "  "
Operator:  "="
Text:  " "
Punctuation:  "("
Name.Other:  "key"
Text:  " "
Keyword:  "for"
Text:  " "
Name.Other:  "key"
Text:  " "
Operator:  "of"
Text:  " "
Name.Other:  "COFFEE_ALIAS_MAP"
Punctuation:  ")"
Text:  "<newline>"
Name.Other:  "COFFEE_KEYWORDS"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "COFFEE_KEYWORDS"
Punctuation:  "."
Name.Attribute:  "concat"
Text:  " "
Name.Other:  "COFFEE_ALIASES"
Text:  "<newline><newline>"
Comment.Single:  "# The list of keywords that are reserved by JavaScript, but not used, or are"
Text:  "<newline>"
Comment.Single:  "# used by CoffeeScript internally. We throw an error when these are encountered,"
Text:  "<newline>"
Comment.Single:  "# to avoid having a JavaScript error at runtime."
Text:  "<newline>"
Name.Other:  "RESERVED"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>  "
Literal.String:  "'case'"
Punctuation:  ","
Text:  " "
Literal.String:  "'default'"
Punctuation:  ","
Text:  " "
Literal.String:  "'function'"
Punctuation:  ","
Text:  " "
Literal.String:  "'var'"
Punctuation:  ","
Text:  " "
Literal.String:  "'void'"
Punctuation:  ","
Text:  " "
Literal.String:  "'with'"
Punctuation:  ","
Text:  " "
Literal.String:  "'const'"
Punctuation:  ","
Text:  " "
Literal.String:  "'let'"
Punctuation:  ","
Text:  " "
Literal.String:  "'enum'"
Text:  "<newline>  "
Literal.String:  "'export'"
Punctuation:  ","
Text:  " "
Literal.String:  "'import'"
Punctuation:  ","
Text:  " "
Literal.String:  "'native'"
Punctuation:  ","
Text:  " "
Literal.String:  "'__hasProp'"
Punctuation:  ","
Text:  " "
Literal.String:  "'__extends'"
Punctuation:  ","
Text:  " "
Literal.String:  "'__slice'"
Punctuation:  ","
Text:  " "
Literal.String:  "'__bind'"
Text:  "<newline>  "
Literal.String:  "'__indexOf'"
Punctuation:  ","
Text:  " "
Literal.String:  "'implements'"
Punctuation:  ","
Text:  " "
Literal.String:  "'interface'"
Punctuation:  ","
Text:  " "
Literal.String:  "'package'"
Punctuation:  ","
Text:  " "
Literal.String:  "'private'"
Punctuation:  ","
Text:  " "
Literal.String:  "'protected'"
Text:  "<newline>  "
Literal.String:  "'public'"
Punctuation:  ","
Text:  " "
Literal.String:  "'static'"
Punctuation:  ","
Text:  " "
Literal.String:  "'yield'"
Text:  "<newline>"
Punctuation:  "]"
Text:  "<newline><newline>"
Name.Other:  "STRICT_PROSCRIBED"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'arguments'"
Punctuation:  ","
Text:  " "
Literal.String:  "'eval'"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# The superset of both JavaScript keywords and reserved words, none of which may"
Text:  "<newline>"
Comment.Single:  "# be used as identifiers or properties."
Text:  "<newline>"
Name.Other:  "JS_FORBIDDEN"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "JS_KEYWORDS"
Punctuation:  "."
Name.Attribute:  "concat"
Punctuation:  "("
Name.Other:  "RESERVED"
Punctuation:  ")."
Name.Attribute:  "concat"
Punctuation:  "("
Name.Other:  "STRICT_PROSCRIBED"
Punctuation:  ")"
Text:  "<newline><newline>"
Name.Other:  "exports"
Punctuation:  "."
Name.Attribute:  "RESERVED"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "RESERVED"
Punctuation:  "."
Name.Attribute:  "concat"
Punctuation:  "("
Name.Other:  "JS_KEYWORDS"
Punctuation:  ")."
Name.Attribute:  "concat"
Punctuation:  "("
Name.Other:  "COFFEE_KEYWORDS"
Punctuation:  ")."
Name.Attribute:  "concat"
Punctuation:  "("
Name.Other:  "STRICT_PROSCRIBED"
Punctuation:  ")"
Text:  "<newline>"
Name.Other:  "exports"
Punctuation:  "."
Name.Attribute:  "STRICT_PROSCRIBED"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "STRICT_PROSCRIBED"
Text:  "<newline><newline>"
Comment.Single:  "# Token matching regexes."
Text:  "<newline>"
Name.Other:  "IDENTIFIER"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "///"
Text:  " "
Literal.String.Regex:  "^"
Text:  "<newline>  "
Literal.String.Regex:  "("
Text:  " "
Literal.String.Regex:  "[$A-Za-z_"
Literal.String.Escape:  "\\x7f"
Literal.String.Regex:  "-"
Literal.String.Escape:  "\\uffff"
Literal.String.Regex:  "][$"
Literal.String.Escape:  "\\w\\x7f"
Literal.String.Regex:  "-"
Literal.String.Escape:  "\\uffff"
Literal.String.Regex:  "]*"
Text:  " "
Literal.String.Regex:  ")"
Text:  "<newline>  "
Literal.String.Regex:  "("
Text:  " "
Literal.String.Regex:  "[^"
Literal.String.Escape:  "<newline>\\S"
Literal.String.Regex:  "]*"
Text:  " "
Literal.String.Regex:  ":"
Text:  " "
Literal.String.Regex:  "(?!:)"
Text:  " "
Literal.String.Regex:  ")?"
Text:  "  "
Comment.Single:  "# Is this a property name?"
Text:  "<newline>"
Literal.String.Regex:  "///"
Text:  "<newline><newline>"
Name.Other:  "NUMBER"
Text:  "     "
Operator:  "="
Text:  " "
Literal.String.Regex:  "///"
Text:  "<newline>  "
Literal.String.Regex:  "^"
Text:  " "
Literal.String.Regex:  "0b[01]+"
Text:  "    "
Literal.String.Regex:  "|"
Text:  "              "
Comment.Single:  "# binary"
Text:  "<newline>  "
Literal.String.Regex:  "^"
Text:  " "
Literal.String.Regex:  "0o[0-7]+"
Text:  "   "
Literal.String.Regex:  "|"
Text:  "              "
Comment.Single:  "# octal"
Text:  "<newline>  "
Literal.String.Regex:  "^"
Text:  " "
Literal.String.Regex:  "0x["
Literal.String.Escape:  "\\d"
Literal.String.Regex:  "a-f]+"
Text:  " "
Literal.String.Regex:  "|"
Text:  "              "
Comment.Single:  "# hex"
Text:  "<newline>  "
Literal.String.Regex:  "^"
Text:  " "
Literal.String.Escape:  "\\d"
Literal.String.Regex:  "*"
Literal.String.Escape:  "\\."
Literal.String.Regex:  "?"
Literal.String.Escape:  "\\d"
Literal.String.Regex:  "+"
Text:  " "
Literal.String.Regex:  "(?:e[+-]?"
Literal.String.Escape:  "\\d"
Literal.String.Regex:  "+)?"
Text:  "  "
Comment.Single:  "# decimal"
Text:  "<newline>"
Literal.String.Regex:  "///i"
Text:  "<newline><newline>"
Name.Other:  "HEREDOC"
Text:  "    "
Operator:  "="
Text:  " "
Literal.String.Regex:  "///"
Text:  " "
Literal.String.Regex:  "^"
Text:  " "
Literal.String.Regex:  "(\"\"\"|''')"
Text:  " "
Literal.String.Regex:  "(["
Literal.String.Escape:  "\\s\\S"
Literal.String.Regex:  "]*?)"
Text:  " "
Literal.String.Regex:  "(?:"
Literal.String.Escape:  "<newline>"
Literal.String.Regex:  "[^"
Literal.String.Escape:  "<newline>\\S"
Literal.String.Regex:  "]*)?"
Text:  " "
Name.Variable:  "\\1"
Text:  " "
Literal.String.Regex:  "///"
Text:  "<newline><newline>"
Name.Other:  "OPERATOR"
Text:  "   "
Operator:  "="
Text:  " "
Literal.String.Regex:  "///"
Text:  " "
Literal.String.Regex:  "^"
Text:  " "
Literal.String.Regex:  "("
Text:  "<newline>  "
Literal.String.Regex:  "?:"
Text:  " "
Literal.String.Regex:  "[-=]>"
Text:  "             "
Comment.Single:  "# function"
Text:  "<newline>   "
Literal.String.Regex:  "|"
Text:  " "
Literal.String.Regex:  "[-+*/%<>&|^!?=]="
Text:  "  "
Comment.Single:  "# compound assign / compare"
Text:  "<newline>   "
Literal.String.Regex:  "|"
Text:  " "
Literal.String.Regex:  ">>>=?"
Text:  "             "
Comment.Single:  "# zero-fill right shift"
Text:  "<newline>   "
Literal.String.Regex:  "|"
Text:  " "
Literal.String.Regex:  "([-+:])"
Name.Variable:  "\\1"
Text:  "         "
Comment.Single:  "# doubles"
Text:  "<newline>   "
Literal.String.Regex:  "|"
Text:  " "
Literal.String.Regex:  "([&|<>])"
Name.Variable:  "\\2"
Literal.String.Regex:  "=?"
Text:  "      "
Comment.Single:  "# logic / shift"
Text:  "<newline>   "
Literal.String.Regex:  "|"
Text:  " "
Literal.String.Escape:  "\\?\\."
Text:  "              "
Comment.Single:  "# soak access"
Text:  "<newline>   "
Literal.String.Regex:  "|"
Text:  " "
Literal.String.Escape:  "\\."
Literal.String.Regex:  "{2,3}"
Text:  "           "
Comment.Single:  "# range or splat"
Text:  "<newline>"
Literal.String.Regex:  ")"
Text:  " "
Literal.String.Regex:  "///"
Text:  "<newline><newline>"
Name.Other:  "WHITESPACE"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/^[^<newline>\\S]+/"
Text:  "<newline><newline>"
Name.Other:  "COMMENT"
Text:  "    "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/^###([^#][\\s\\S]*?)(?:###[^<newline>\\S]*|(?:###)?$)|^(?:\\s*#(?!##[^#]).*)+/"
Text:  "<newline><newline>"
Name.Other:  "CODE"
Text:  "       "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/^[-=]>/"
Text:  "<newline><newline>"
Name.Other:  "MULTI_DENT"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/^(?:<newline>[^<newline>\\S]*)+/"
Text:  "<newline><newline>"
Name.Other:  "SIMPLESTR"
Text:  "  "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/^'[^\\\\']*(?:\\\\.[^\\\\']*)*'/"
Text:  "<newline><newline>"
Name.Other:  "JSTOKEN"
Text:  "    "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/^`[^\\\\`]*(?:\\\\.[^\\\\`]*)*`/"
Text:  "<newline><newline>"
Comment.Single:  "# Regex-matching-regexes."
Text:  "<newline>"
Name.Other:  "REGEX"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "///"
Text:  " "
Literal.String.Regex:  "^"
Text:  "<newline>  "
Literal.String.Regex:  "(/"
Text:  " "
Literal.String.Regex:  "(?!"
Text:  " "
Literal.String.Regex:  "["
Literal.String.Escape:  "\\s"
Literal.String.Regex:  "=]"
Text:  " "
Literal.String.Regex:  ")"
Text:  "   "
Comment.Single:  "# disallow leading whitespace or equals signs"
Text:  "<newline>  "
Literal.String.Regex:  "[^"
Text:  " "
Literal.String.Regex:  "["
Text:  " "
Literal.String.Regex:  "/"
Text:  " "
Literal.String.Escape:  "<newline>"
Text:  " "
Literal.String.Escape:  "\\\\"
Text:  " "
Literal.String.Regex:  "]*"
Text:  "  "
Comment.Single:  "# every other thing"
Text:  "<newline>  "
Literal.String.Regex:  "(?:"
Text:  "<newline>    "
Literal.String.Regex:  "(?:"
Text:  " "
Literal.String.Escape:  "\\\\"
Literal.String.Regex:  "["
Literal.String.Escape:  "\\s\\S"
Literal.String.Regex:  "]"
Text:  "   "
Comment.Single:  "# anything escaped"
Text:  "<newline>      "
Literal.String.Regex:  "|"
Text:  " "
Literal.String.Escape:  "\\["
Text:  "         "
Comment.Single:  "# character class"
Text:  "<newline>           "
Literal.String.Regex:  "[^"
Text:  " "
Literal.String.Escape:  "\\]"
Text:  " "
Literal.String.Escape:  "<newline>"
Text:  " "
Literal.String.Escape:  "\\\\"
Text:  " "
Literal.String.Regex:  "]*"
Text:  "<newline>           "
Literal.String.Regex:  "(?:"
Text:  " "
Literal.String.Escape:  "\\\\"
Literal.String.Regex:  "["
Literal.String.Escape:  "\\s\\S"
Literal.String.Regex:  "]"
Text:  " "
Literal.String.Regex:  "[^"
Text:  " "
Literal.String.Escape:  "\\]"
Text:  " "
Literal.String.Escape:  "<newline>"
Text:  " "
Literal.String.Escape:  "\\\\"
Text:  " "
Literal.String.Regex:  "]*"
Text:  " "
Literal.String.Regex:  ")*"
Text:  "<newline>         "
Literal.String.Regex:  "]"
Text:  "<newline>    "
Literal.String.Regex:  ")"
Text:  " "
Literal.String.Regex:  "[^"
Text:  " "
Literal.String.Regex:  "["
Text:  " "
Literal.String.Regex:  "/"
Text:  " "
Literal.String.Escape:  "<newline>"
Text:  " "
Literal.String.Escape:  "\\\\"
Text:  " "
Literal.String.Regex:  "]*"
Text:  "<newline>  "
Literal.String.Regex:  ")*"
Text:  "<newline>  "
Literal.String.Regex:  "/)"
Text:  " "
Literal.String.Regex:  "([imgy]{0,4})"
Text:  " "
Literal.String.Regex:  "(?!"
Literal.String.Escape:  "\\w"
Literal.String.Regex:  ")"
Text:  "<newline>"
Literal.String.Regex:  "///"
Text:  "<newline><newline>"
Name.Other:  "HEREGEX"
Text:  "      "
Operator:  "="
Text:  " "
Literal.String.Regex:  "///"
Text:  " "
Literal.String.Regex:  "^"
Text:  " "
Literal.String.Regex:  "/{3}"
Text:  " "
Literal.String.Regex:  "(["
Literal.String.Escape:  "\\s\\S"
Literal.String.Regex:  "]+?)"
Text:  " "
Literal.String.Regex:  "/{3}"
Text:  " "
Literal.String.Regex:  "([imgy]{0,4})"
Text:  " "
Literal.String.Regex:  "(?!"
Literal.String.Escape:  "\\w"
Literal.String.Regex:  ")"
Text:  " "
Literal.String.Regex:  "///"
Text:  "<newline><newline>"
Name.Other:  "HEREGEX_OMIT"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/\\s+(?:#.*)?/g"
Text:  "<newline><newline>"
Comment.Single:  "# Token cleaning regexes."
Text:  "<newline>"
Name.Other:  "MULTILINER"
Text:  "      "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/<newline>/g"
Text:  "<newline><newline>"
Name.Other:  "HEREDOC_INDENT"
Text:  "  "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/<newline>+([^<newline>\\S]*)/g"
Text:  "<newline><newline>"
Name.Other:  "HEREDOC_ILLEGAL"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/\\*\\//"
Text:  "<newline><newline>"
Name.Other:  "LINE_CONTINUER"
Text:  "  "
Operator:  "="
Text:  " "
Literal.String.Regex:  "///"
Text:  " "
Literal.String.Regex:  "^"
Text:  " "
Literal.String.Escape:  "\\s"
Literal.String.Regex:  "*"
Text:  " "
Literal.String.Regex:  "(?:"
Text:  " "
Literal.String.Regex:  ","
Text:  " "
Literal.String.Regex:  "|"
Text:  " "
Literal.String.Escape:  "\\?"
Literal.String.Regex:  "?"
Literal.String.Escape:  "\\."
Literal.String.Regex:  "(?![."
Literal.String.Escape:  "\\d"
Literal.String.Regex:  "])"
Text:  " "
Literal.String.Regex:  "|"
Text:  " "
Literal.String.Regex:  "::"
Text:  " "
Literal.String.Regex:  ")"
Text:  " "
Literal.String.Regex:  "///"
Text:  "<newline><newline>"
Name.Other:  "TRAILING_SPACES"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/\\s+$/"
Text:  "<newline><newline>"
Comment.Single:  "# Compound assignment tokens."
Text:  "<newline>"
Name.Other:  "COMPOUND_ASSIGN"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>  "
Literal.String:  "'-='"
Punctuation:  ","
Text:  " "
Literal.String:  "'+='"
Punctuation:  ","
Text:  " "
Literal.String:  "'/='"
Punctuation:  ","
Text:  " "
Literal.String:  "'*='"
Punctuation:  ","
Text:  " "
Literal.String:  "'%='"
Punctuation:  ","
Text:  " "
Literal.String:  "'||='"
Punctuation:  ","
Text:  " "
Literal.String:  "'&&='"
Punctuation:  ","
Text:  " "
Literal.String:  "'?='"
Punctuation:  ","
Text:  " "
Literal.String:  "'<<='"
Punctuation:  ","
Text:  " "
Literal.String:  "'>>='"
Punctuation:  ","
Text:  " "
Literal.String:  "'>>>='"
Punctuation:  ","
Text:  " "
Literal.String:  "'&='"
Punctuation:  ","
Text:  " "
Literal.String:  "'^='"
Punctuation:  ","
Text:  " "
Literal.String:  "'|='"
Text:  "<newline>"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# Unary tokens."
Text:  "<newline>"
Name.Other:  "UNARY"
Text:  "   "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'!'"
Punctuation:  ","
Text:  " "
Literal.String:  "'~'"
Punctuation:  ","
Text:  " "
Literal.String:  "'NEW'"
Punctuation:  ","
Text:  " "
Literal.String:  "'TYPEOF'"
Punctuation:  ","
Text:  " "
Literal.String:  "'DELETE'"
Punctuation:  ","
Text:  " "
Literal.String:  "'DO'"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# Logical tokens."
Text:  "<newline>"
Name.Other:  "LOGIC"
Text:  "   "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'&&'"
Punctuation:  ","
Text:  " "
Literal.String:  "'||'"
Punctuation:  ","
Text:  " "
Literal.String:  "'&'"
Punctuation:  ","
Text:  " "
Literal.String:  "'|'"
Punctuation:  ","
Text:  " "
Literal.String:  "'^'"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# Bit-shifting tokens."
Text:  "<newline>"
Name.Other:  "SHIFT"
Text:  "   "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'<<'"
Punctuation:  ","
Text:  " "
Literal.String:  "'>>'"
Punctuation:  ","
Text:  " "
Literal.String:  "'>>>'"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# Comparison tokens."
Text:  "<newline>"
Name.Other:  "COMPARE"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'=='"
Punctuation:  ","
Text:  " "
Literal.String:  "'!='"
Punctuation:  ","
Text:  " "
Literal.String:  "'<'"
Punctuation:  ","
Text:  " "
Literal.String:  "'>'"
Punctuation:  ","
Text:  " "
Literal.String:  "'<='"
Punctuation:  ","
Text:  " "
Literal.String:  "'>='"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# Mathematical tokens."
Text:  "<newline>"
Name.Other:  "MATH"
Text:  "    "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'*'"
Punctuation:  ","
Text:  " "
Literal.String:  "'/'"
Punctuation:  ","
Text:  " "
Literal.String:  "'%'"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# Relational tokens that are negatable with `not` prefix."
Text:  "<newline>"
Name.Other:  "RELATION"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'IN'"
Punctuation:  ","
Text:  " "
Literal.String:  "'OF'"
Punctuation:  ","
Text:  " "
Literal.String:  "'INSTANCEOF'"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# Boolean tokens."
Text:  "<newline>"
Name.Other:  "BOOL"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'TRUE'"
Punctuation:  ","
Text:  " "
Literal.String:  "'FALSE'"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# Tokens which a regular expression will never immediately follow, but which"
Text:  "<newline>"
Comment.Single:  "# a division operator might."
Text:  "<newline>"
Comment.Single:  "#"
Text:  "<newline>"
Comment.Single:  "# See: http://www.mozilla.org/js/language/js20-2002-04/rationale/syntax.html#regular-expressions"
Text:  "<newline>"
Comment.Single:  "#"
Text:  "<newline>"
Comment.Single:  "# Our list is shorter, due to sans-parentheses method calls."
Text:  "<newline>"
Name.Other:  "NOT_REGEX"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'NUMBER'"
Punctuation:  ","
Text:  " "
Literal.String:  "'REGEX'"
Punctuation:  ","
Text:  " "
Literal.String:  "'BOOL'"
Punctuation:  ","
Text:  " "
Literal.String:  "'NULL'"
Punctuation:  ","
Text:  " "
Literal.String:  "'UNDEFINED'"
Punctuation:  ","
Text:  " "
Literal.String:  "'++'"
Punctuation:  ","
Text:  " "
Literal.String:  "'--'"
Punctuation:  ","
Text:  " "
Literal.String:  "']'"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# If the previous token is not spaced, there are more preceding tokens that"
Text:  "<newline>"
Comment.Single:  "# force a division parse:"
Text:  "<newline>"
Name.Other:  "NOT_SPACED_REGEX"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "NOT_REGEX"
Punctuation:  "."
Name.Attribute:  "concat"
Text:  " "
Literal.String:  "')'"
Punctuation:  ","
Text:  " "
Literal.String:  "'}'"
Punctuation:  ","
Text:  " "
Literal.String:  "'THIS'"
Punctuation:  ","
Text:  " "
Literal.String:  "'IDENTIFIER'"
Punctuation:  ","
Text:  " "
Literal.String:  "'STRING'"
Text:  "<newline><newline>"
Comment.Single:  "# Tokens which could legitimately be invoked or indexed. An opening"
Text:  "<newline>"
Comment.Single:  "# parentheses or bracket following these tokens will be recorded as the start"
Text:  "<newline>"
Comment.Single:  "# of a function invocation or indexing operation."
Text:  "<newline>"
Name.Other:  "CALLABLE"
Text:  "  "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'IDENTIFIER'"
Punctuation:  ","
Text:  " "
Literal.String:  "'STRING'"
Punctuation:  ","
Text:  " "
Literal.String:  "'REGEX'"
Punctuation:  ","
Text:  " "
Literal.String:  "')'"
Punctuation:  ","
Text:  " "
Literal.String:  "']'"
Punctuation:  ","
Text:  " "
Literal.String:  "'}'"
Punctuation:  ","
Text:  " "
Literal.String:  "'?'"
Punctuation:  ","
Text:  " "
Literal.String:  "'::'"
Punctuation:  ","
Text:  " "
Literal.String:  "'@'"
Punctuation:  ","
Text:  " "
Literal.String:  "'THIS'"
Punctuation:  ","
Text:  " "
Literal.String:  "'SUPER'"
Punctuation:  "]"
Text:  "<newline>"
Name.Other:  "INDEXABLE"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "CALLABLE"
Punctuation:  "."
Name.Attribute:  "concat"
Text:  " "
Literal.String:  "'NUMBER'"
Punctuation:  ","
Text:  " "
Literal.String:  "'BOOL'"
Punctuation:  ","
Text:  " "
Literal.String:  "'NULL'"
Punctuation:  ","
Text:  " "
Literal.String:  "'UNDEFINED'"
Text:  "<newline><newline>"
Comment.Single:  "# Tokens that, when immediately preceding a `WHEN`, indicate that the `WHEN`"
Text:  "<newline>"
Comment.Single:  "# occurs at the start of a line. We disambiguate these from trailing whens to"
Text:  "<newline>"
Comment.Single:  "# avoid an ambiguity in the grammar."
Text:  "<newline>"
Name.Other:  "LINE_BREAK"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "'INDENT'"
Punctuation:  ","
Text:  " "
Literal.String:  "'OUTDENT'"
Punctuation:  ","
Text:  " "
Literal.String:  "'TERMINATOR'"
Punctuation:  "]"
Text:  "<newline>"
