Comment:  "#nil (commented (form ftw))"
Text:  "<newline><newline>"
Comment.Single:  "; Unmatched closing parenthesis"
Text:  "<newline>"
Error:  ")"
Text:  "<newline><newline>"
Comment.Single:  ";;;; TYPEP und Verwandtes"
Text:  "<newline>"
Comment.Single:  ";;;; Michael Stoll, 21. 10. 1988"
Text:  "<newline>"
Comment.Single:  ";;;; Bruno Haible, 10.6.1989"
Text:  "<newline>"
Comment.Single:  ";;;; Sam Steingold 2000-2005"
Text:  "<newline><newline>"
Comment.Single:  ";;; Datenstrukturen f\u00FCr TYPEP:"
Text:  "<newline>"
Comment.Single:  ";;; - Ein Type-Specifier-Symbol hat auf seiner Propertyliste unter dem"
Text:  "<newline>"
Comment.Single:  ";;;   Indikator SYS::TYPE-SYMBOL eine Funktion von einem Argument, die"
Text:  "<newline>"
Comment.Single:  ";;;   testet, ob ein Objekt vom richtigen Typ ist."
Text:  "<newline>"
Comment.Single:  ";;; - Ein Symbol, das eine Type-Specifier-Liste beginnen kann, hat auf seiner"
Text:  "<newline>"
Comment.Single:  ";;;   Propertyliste unter dem Indikator SYS::TYPE-LIST eine Funktion von"
Text:  "<newline>"
Comment.Single:  ";;;   einem Argument f\u00FCr das zu testende Objekt und zus\u00E4tzlichen Argumenten"
Text:  "<newline>"
Comment.Single:  ";;;   f\u00FCr die Listenelemente."
Text:  "<newline>"
Comment.Single:  ";;; - Ein Symbol, das als Typmacro definiert wurde, hat auf seiner Property-"
Text:  "<newline>"
Comment.Single:  ";;;   liste unter dem Indikator SYSTEM::DEFTYPE-EXPANDER den zugeh\u00F6rigen"
Text:  "<newline>"
Comment.Single:  ";;;   Expander: eine Funktion, die den zu expandierenden Type-Specifier (eine"
Text:  "<newline>"
Comment.Single:  ";;;   mindestens einelementige Liste) als Argument bekommt."
Text:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "in-package"
Text:  " "
Literal.String:  "\"EXT\""
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "export"
Text:  " "
Operator:  "'"
Punctuation:  "("
Name.Variable:  "type-expand"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "in-package"
Text:  " "
Literal.String:  "\"SYSTEM\""
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "; vorl\u00E4ufig, solange bis clos.lisp geladen wird:"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "eval-when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eval"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "predefun"
Text:  " "
Name.Variable:  "clos::built-in-class-p"
Text:  " "
Punctuation:  "("
Name.Variable:  "object"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword:  "declare"
Text:  " "
Punctuation:  "("
Keyword:  "ignore"
Text:  " "
Name.Variable:  "object"
Punctuation:  "))"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "fboundp"
Text:  " "
Literal.String.Symbol:  "'clos::class-name"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "clos::class-name"
Text:  " "
Punctuation:  "("
Name.Variable:  "c"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword:  "declare"
Text:  " "
Punctuation:  "("
Keyword:  "ignore"
Text:  " "
Name.Variable:  "c"
Punctuation:  "))"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "typespec-error"
Text:  " "
Punctuation:  "("
Name.Variable:  "fun"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "error-of-type"
Text:  " "
Literal.String.Symbol:  "'error"
Text:  "<newline>    "
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S: invalid type specification ~S\""
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "fun"
Text:  " "
Keyword:  "type"
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  ";; ============================================================================"
Text:  "<newline><newline>"
Comment.Single:  ";; return the CLOS class named by TYPESPEC or NIL"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "clos-class"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "cc"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Name.Variable:  "typespec"
Text:  " "
Literal.String.Symbol:  "'CLOS::CLOSCLASS"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Name.Variable:  "cc"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos::defined-class-p"
Text:  " "
Name.Variable:  "cc"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos:class-name"
Text:  " "
Name.Variable:  "cc"
Punctuation:  ")"
Text:  " "
Name.Variable:  "typespec"
Punctuation:  "))"
Text:  "<newline>      "
Name.Variable:  "cc"
Punctuation:  ")))"
Text:  "<newline><newline>"
Comment.Single:  ";;; TYPEP, CLTL S. 72, S. 42-51"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Builtin:  "typep"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Text:  " "
Name.Variable:  "y"
Text:  " "
Keyword:  "&optional"
Text:  " "
Name.Variable:  "env"
Text:  " "
Keyword:  "&aux"
Text:  " "
Name.Variable:  "f"
Punctuation:  ")"
Text:  " "
Comment.Single:  "; x = Objekt, y = Typ"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "declare"
Text:  " "
Punctuation:  "("
Keyword:  "ignore"
Text:  " "
Name.Variable:  "env"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "y"
Text:  " "
Punctuation:  "("
Name.Variable:  "expand-deftype"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  "<newline>    "
Punctuation:  "(("
Name.Builtin:  "symbolp"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Keyword:  "setq"
Text:  " "
Name.Variable:  "f"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Name.Variable:  "y"
Text:  " "
Literal.String.Symbol:  "'TYPE-SYMBOL"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "f"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "(("
Keyword:  "setq"
Text:  " "
Name.Variable:  "f"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Name.Variable:  "y"
Text:  " "
Literal.String.Symbol:  "'TYPE-LIST"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "f"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "(("
Keyword:  "setq"
Text:  " "
Name.Variable:  "f"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Name.Variable:  "y"
Text:  " "
Literal.String.Symbol:  "'DEFSTRUCT-DESCRIPTION"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "ds-typep"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "y"
Text:  " "
Name.Variable:  "f"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "(("
Keyword:  "setq"
Text:  " "
Name.Variable:  "f"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos-class"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>              "
Comment.Single:  "; It's not worth handling structure classes specially here."
Text:  "<newline>              "
Punctuation:  "("
Name.Variable:  "clos::typep-class"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "f"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'typep"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  ")"
Text:  "  "
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbolp"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")))"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  "<newline>         "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'SATISFIES"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbolp"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Name.Variable:  "error-of-type"
Text:  " "
Literal.String.Symbol:  "'error"
Text:  "<newline>                "
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S: argument to SATISFIES must be a symbol: ~S\""
Punctuation:  ")"
Text:  "<newline>                "
Literal.String.Symbol:  "'typep"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "funcall"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbol-function"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Name.Constant:  "t"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'MEMBER"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "member"
Text:  " "
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  " "
Name.Constant:  "t"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'EQL"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>         "
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'NOT"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")))"
Text:  "<newline>         "
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'AND"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Keyword:  "type"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Name.Constant:  "t"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Name.Variable:  "x"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "return"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>         "
Punctuation:  ")"
Text:  "  "
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'OR"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Keyword:  "type"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Name.Variable:  "x"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "return"
Text:  " "
Name.Constant:  "t"
Punctuation:  "))"
Text:  "<newline>         "
Punctuation:  ")"
Text:  "  "
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "(("
Keyword:  "setq"
Text:  " "
Name.Variable:  "f"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'TYPE-LIST"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "f"
Text:  " "
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")))"
Text:  "<newline>         "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'typep"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  ")"
Text:  "  "
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "(("
Name.Variable:  "clos::defined-class-p"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos::typep-class"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "(("
Name.Variable:  "clos::eql-specializer-p"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos::eql-specializer-singleton"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "(("
Name.Variable:  "encodingp"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "charset-typep"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'typep"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  ";; ----------------------------------------------------------------------------"
Text:  "<newline><newline>"
Comment.Single:  ";; UPGRADED-ARRAY-ELEMENT-TYPE is a lattice homomorphism, see"
Text:  "<newline>"
Comment.Single:  ";; ANSI CL 15.1.2.1."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Builtin:  "upgraded-array-element-type"
Text:  " "
Punctuation:  "("
Keyword:  "type"
Text:  " "
Keyword:  "&optional"
Text:  " "
Name.Variable:  "environment"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "declare"
Text:  " "
Punctuation:  "("
Keyword:  "ignore"
Text:  " "
Name.Variable:  "environment"
Punctuation:  "))"
Text:  "<newline>  "
Comment.Single:  ";; see array.d"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "case"
Text:  " "
Keyword:  "type"
Text:  "<newline>    "
Punctuation:  "(("
Name.Variable:  "BIT"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'BIT"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "(("
Name.Variable:  "CHARACTER"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'CHARACTER"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "(("
Name.Variable:  "T"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'T"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "(("
Name.Variable:  "NIL"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Variable:  "subtypep"
Text:  " "
Keyword:  "type"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")"
Text:  "<newline>         "
Literal.String.Symbol:  "'NIL"
Text:  "<newline>         "
Punctuation:  "("
Name.Builtin:  "multiple-value-bind"
Text:  " "
Punctuation:  "("
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "sys::subtype-integer"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>           "
Comment.Single:  "; Es gilt (or (null low) (subtypep type `(INTEGER ,low ,high)))"
Text:  "<newline>           "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "minusp"
Text:  " "
Name.Variable:  "low"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "high"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "l"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integer-length"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>               "
Comment.Single:  "; Es gilt (subtypep type `(UNSIGNED-BYTE ,l))"
Text:  "<newline>               "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "l"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'BIT"
Punctuation:  ")"
Text:  "<newline>                     "
Punctuation:  "(("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "l"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "("
Name.Variable:  "UNSIGNED-BYTE"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "))"
Text:  "<newline>                     "
Punctuation:  "(("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "l"
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "("
Name.Variable:  "UNSIGNED-BYTE"
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  "))"
Text:  "<newline>                     "
Punctuation:  "(("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "l"
Text:  " "
Literal.Number.Integer:  "8"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "("
Name.Variable:  "UNSIGNED-BYTE"
Text:  " "
Literal.Number.Integer:  "8"
Punctuation:  "))"
Text:  "<newline>                     "
Punctuation:  "(("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "l"
Text:  " "
Literal.Number.Integer:  "16"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "("
Name.Variable:  "UNSIGNED-BYTE"
Text:  " "
Literal.Number.Integer:  "16"
Punctuation:  "))"
Text:  "<newline>                     "
Punctuation:  "(("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "l"
Text:  " "
Literal.Number.Integer:  "32"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "("
Name.Variable:  "UNSIGNED-BYTE"
Text:  " "
Literal.Number.Integer:  "32"
Punctuation:  "))"
Text:  "<newline>                     "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Literal.String.Symbol:  "'T"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Variable:  "subtypep"
Text:  " "
Keyword:  "type"
Text:  " "
Literal.String.Symbol:  "'CHARACTER"
Punctuation:  ")"
Text:  "<newline>               "
Literal.String.Symbol:  "'CHARACTER"
Text:  "<newline>               "
Literal.String.Symbol:  "'T"
Punctuation:  ")))))))"
Text:  "<newline><newline>"
Comment.Single:  ";; ----------------------------------------------------------------------------"
Text:  "<newline><newline>"
Comment.Single:  ";; UPGRADED-COMPLEX-PART-TYPE is a lattice homomorphism, see"
Text:  "<newline>"
Comment.Single:  ";; HyperSpec/Body/fun_complex.html and HyperSpec/Body/syscla_complex.html,"
Text:  "<newline>"
Comment.Single:  ";; and an idempotent. Therefore"
Text:  "<newline>"
Comment.Single:  ";;   (subtypep (upgraded-complex-part-type T1) (upgraded-complex-part-type T2))"
Text:  "<newline>"
Comment.Single:  ";; is equivalent to"
Text:  "<newline>"
Comment.Single:  ";;   (subtypep T1 (upgraded-complex-part-type T2))"
Text:  "<newline>"
Comment.Single:  ";; (Proof: Let U T be an abbreviation for (upgraded-complex-part-type T)."
Text:  "<newline>"
Comment.Single:  ";;  If U T1 <= U T2, then T1 <= U T1 <= U T2."
Text:  "<newline>"
Comment.Single:  ";;  If T1 <= U T2, then by homomorphism U T1 <= U U T2 = U T2.)"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; For _any_ CL implementation, you could define"
Text:  "<newline>"
Comment.Single:  ";;   (defun upgraded-complex-part-type (type) 'REAL)"
Text:  "<newline>"
Comment.Single:  ";; Likewise for _any_ CL implementation, you could define"
Text:  "<newline>"
Comment.Single:  ";;   (defun upgraded-complex-part-type (type) type)"
Text:  "<newline>"
Comment.Single:  ";; or - again for _any_ CL implementation:"
Text:  "<newline>"
Comment.Single:  ";;   (defun upgraded-complex-part-type (type)"
Text:  "<newline>"
Comment.Single:  ";;     (cond ((subtypep type 'NIL) 'NIL)"
Text:  "<newline>"
Comment.Single:  ";;           ((subtypep type 'SHORT-FLOAT) 'SHORT-FLOAT)"
Text:  "<newline>"
Comment.Single:  ";;           ((subtypep type 'SINGLE-FLOAT) 'SINGLE-FLOAT)"
Text:  "<newline>"
Comment.Single:  ";;           ((subtypep type 'DOUBLE-FLOAT) 'DOUBLE-FLOAT)"
Text:  "<newline>"
Comment.Single:  ";;           ((subtypep type 'LONG-FLOAT) 'LONG-FLOAT)"
Text:  "<newline>"
Comment.Single:  ";;           ((subtypep type 'RATIONAL) 'RATIONAL)"
Text:  "<newline>"
Comment.Single:  ";;           ((subtypep type 'REAL) 'REAL)"
Text:  "<newline>"
Comment.Single:  ";;           (t (error ...))))"
Text:  "<newline>"
Comment.Single:  ";; The reason is that a complex number is immutable: no setters for the"
Text:  "<newline>"
Comment.Single:  ";; realpart and imagpart exist."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; We choose the second implementation because it allows the most precise"
Text:  "<newline>"
Comment.Single:  ";; type inference."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Builtin:  "upgraded-complex-part-type"
Text:  " "
Punctuation:  "("
Keyword:  "type"
Text:  " "
Keyword:  "&optional"
Text:  " "
Name.Variable:  "environment"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "declare"
Text:  " "
Punctuation:  "("
Keyword:  "ignore"
Text:  " "
Name.Variable:  "environment"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Variable:  "subtypep"
Text:  " "
Keyword:  "type"
Text:  " "
Literal.String.Symbol:  "'REAL"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "type"
Text:  "<newline>    "
Punctuation:  "("
Name.Variable:  "error-of-type"
Text:  " "
Literal.String.Symbol:  "'error"
Text:  "<newline>      "
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S: type ~S is not a subtype of ~S\""
Punctuation:  ")"
Text:  "<newline>      "
Literal.String.Symbol:  "'upgraded-complex-part-type"
Text:  " "
Keyword:  "type"
Text:  " "
Literal.String.Symbol:  "'real"
Punctuation:  ")))"
Text:  "<newline><newline>"
Comment.Single:  ";; ----------------------------------------------------------------------------"
Text:  "<newline><newline>"
Comment.Single:  ";; Macros for defining the various built-in \"atomic type specifier\"s and"
Text:  "<newline>"
Comment.Single:  ";; \"compound type specifier\"s. The following macros add information for both"
Text:  "<newline>"
Comment.Single:  ";; the TYPEP function above and the c-TYPEP in the compiler."
Text:  "<newline><newline>"
Comment.Single:  "; Alist symbol -> funname, used by the compiler."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defparameter"
Text:  " "
Name.Variable:  "c-typep-alist1"
Text:  " "
Operator:  "'"
Punctuation:  "())"
Text:  "<newline>"
Comment.Single:  "; Alist symbol -> lambdabody, used by the compiler."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defparameter"
Text:  " "
Name.Variable:  "c-typep-alist2"
Text:  " "
Operator:  "'"
Punctuation:  "())"
Text:  "<newline>"
Comment.Single:  "; Alist symbol -> expander function, used by the compiler."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defparameter"
Text:  " "
Name.Variable:  "c-typep-alist3"
Text:  " "
Operator:  "'"
Punctuation:  "())"
Text:  "<newline><newline>"
Comment.Single:  "; (def-atomic-type symbol function-name)"
Text:  "<newline>"
Comment.Single:  "; defines an atomic type. The function-name designates a function taking one"
Text:  "<newline>"
Comment.Single:  "; argument and returning a generalized boolean value. It can be either a"
Text:  "<newline>"
Comment.Single:  "; symbol or a lambda expression."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defmacro"
Text:  " "
Name.Variable:  "def-atomic-type"
Text:  " "
Punctuation:  "("
Name.Class:  "symbol"
Text:  " "
Name.Variable:  "funname"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "lambdap"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "funname"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "funname"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'LAMBDA"
Punctuation:  "))))"
Text:  "<newline>    "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "PROGN"
Text:  "<newline>       "
Punctuation:  "("
Name.Variable:  "SETF"
Text:  " "
Punctuation:  "("
Name.Variable:  "GET"
Text:  " "
Literal.String.Symbol:  "',symbol"
Text:  " "
Literal.String.Symbol:  "'TYPE-SYMBOL"
Punctuation:  ")"
Text:  "<newline>             "
Operator:  ","
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "lambdap"
Text:  "<newline>                "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "FUNCTION"
Text:  " "
Operator:  ","
Punctuation:  "("
Name.Variable:  "concat-pnames"
Text:  " "
Literal.String:  "\"TYPE-SYMBOL-\""
Text:  " "
Name.Class:  "symbol"
Punctuation:  ")"
Text:  " "
Operator:  ","
Name.Variable:  "funname"
Punctuation:  ")"
Text:  "<newline>                "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "FUNCTION"
Text:  " "
Operator:  ","
Name.Variable:  "funname"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  ")"
Text:  "<newline>       "
Operator:  ","
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "lambdap"
Text:  "<newline>          "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "SETQ"
Text:  " "
Name.Variable:  "C-TYPEP-ALIST2"
Text:  "<newline>                 "
Punctuation:  "("
Name.Variable:  "NCONC"
Text:  " "
Name.Variable:  "C-TYPEP-ALIST2"
Text:  " "
Punctuation:  "("
Name.Variable:  "LIST"
Text:  " "
Punctuation:  "("
Name.Variable:  "CONS"
Text:  " "
Literal.String.Symbol:  "',symbol"
Text:  " "
Literal.String.Symbol:  "',"
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "funname"
Punctuation:  "))))"
Text:  "<newline>           "
Punctuation:  ")"
Text:  "<newline>          "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "SETQ"
Text:  " "
Name.Variable:  "C-TYPEP-ALIST1"
Text:  "<newline>                 "
Punctuation:  "("
Name.Variable:  "NCONC"
Text:  " "
Name.Variable:  "C-TYPEP-ALIST1"
Text:  " "
Punctuation:  "("
Name.Variable:  "LIST"
Text:  " "
Punctuation:  "("
Name.Variable:  "CONS"
Text:  " "
Literal.String.Symbol:  "',symbol"
Text:  " "
Literal.String.Symbol:  "',funname"
Punctuation:  ")))"
Text:  "<newline>           "
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  ")"
Text:  "<newline>       "
Literal.String.Symbol:  "',symbol"
Text:  "<newline>     "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "; (def-compound-type symbol lambda-list (x) check-form typep-form c-typep-form)"
Text:  "<newline>"
Comment.Single:  "; defines a compound type. The lambda-list is of the form (&optional ...)"
Text:  "<newline>"
Comment.Single:  "; where the arguments come from the CDR of the type specifier."
Text:  "<newline>"
Comment.Single:  "; For typep-form, x is an object."
Text:  "<newline>"
Comment.Single:  "; For c-typep-form, x is a multiply evaluatable form (actually a gensym)."
Text:  "<newline>"
Comment.Single:  "; check-form is a form performing error checking, may call `error'."
Text:  "<newline>"
Comment.Single:  "; typep-form should return a generalized boolean value."
Text:  "<newline>"
Comment.Single:  "; c-typep-form should produce a form returning a generalized boolean value."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defmacro"
Text:  " "
Name.Variable:  "def-compound-type"
Text:  " "
Punctuation:  "("
Name.Class:  "symbol"
Text:  " "
Name.Variable:  "lambdalist"
Text:  " "
Punctuation:  "("
Name.Variable:  "var"
Punctuation:  ")"
Text:  " "
Name.Variable:  "check-form"
Text:  " "
Name.Variable:  "typep-form"
Text:  " "
Name.Variable:  "c-typep-form"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "PROGN"
Text:  "<newline>     "
Punctuation:  "("
Name.Variable:  "SETF"
Text:  " "
Punctuation:  "("
Name.Variable:  "GET"
Text:  " "
Literal.String.Symbol:  "',symbol"
Text:  " "
Literal.String.Symbol:  "'TYPE-LIST"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Variable:  "FUNCTION"
Text:  " "
Operator:  ","
Punctuation:  "("
Name.Variable:  "concat-pnames"
Text:  " "
Literal.String:  "\"TYPE-LIST-\""
Text:  " "
Name.Class:  "symbol"
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "LAMBDA"
Text:  " "
Punctuation:  "("
Operator:  ","
Name.Variable:  "var"
Text:  " "
Operator:  ",@"
Name.Variable:  "lambdalist"
Punctuation:  ")"
Text:  "<newline>               "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "check-form"
Text:  "<newline>                   "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "MACROLET"
Text:  " "
Punctuation:  "(("
Name.Variable:  "ERROR"
Text:  " "
Punctuation:  "("
Name.Variable:  "&REST"
Text:  " "
Name.Variable:  "ERROR-ARGS"
Punctuation:  ")"
Text:  "<newline>                                  "
Punctuation:  "("
Name.Variable:  "LIST*"
Text:  " "
Literal.String.Symbol:  "'ERROR-OF-TYPE"
Text:  " "
Operator:  "'"
Literal.String.Symbol:  "'ERROR"
Text:  " "
Name.Variable:  "ERROR-ARGS"
Punctuation:  ")"
Text:  "<newline>                               "
Punctuation:  "))"
Text:  "<newline>                       "
Operator:  ","
Name.Variable:  "check-form"
Text:  "<newline>                    "
Punctuation:  "))"
Text:  "<newline>                 "
Punctuation:  ")"
Text:  "<newline>               "
Operator:  ","
Name.Variable:  "typep-form"
Text:  "<newline>     "
Punctuation:  ")"
Text:  "     "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline>     "
Punctuation:  "("
Name.Variable:  "SETQ"
Text:  " "
Name.Variable:  "C-TYPEP-ALIST3"
Text:  "<newline>           "
Punctuation:  "("
Name.Variable:  "NCONC"
Text:  " "
Name.Variable:  "C-TYPEP-ALIST3"
Text:  "<newline>                  "
Punctuation:  "("
Name.Variable:  "LIST"
Text:  " "
Punctuation:  "("
Name.Variable:  "CONS"
Text:  " "
Literal.String.Symbol:  "',symbol"
Text:  "<newline>                              "
Name.Function:  "#'"
Punctuation:  "("
Name.Variable:  "LAMBDA"
Text:  " "
Punctuation:  "("
Operator:  ","
Name.Variable:  "var"
Text:  " "
Operator:  ",@"
Name.Variable:  "lambdalist"
Text:  " "
Name.Variable:  "&REST"
Text:  " "
Name.Variable:  "ILLEGAL-ARGS"
Punctuation:  ")"
Text:  "<newline>                                  "
Punctuation:  "("
Name.Variable:  "DECLARE"
Text:  " "
Punctuation:  "("
Name.Variable:  "IGNORE"
Text:  " "
Name.Variable:  "ILLEGAL-ARGS"
Punctuation:  "))"
Text:  "<newline>                                  "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "check-form"
Text:  "<newline>                                      "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "MACROLET"
Text:  " "
Punctuation:  "(("
Name.Variable:  "ERROR"
Text:  " "
Punctuation:  "("
Name.Variable:  "&REST"
Text:  " "
Name.Variable:  "ERROR-ARGS"
Punctuation:  ")"
Text:  "<newline>                                                     "
Punctuation:  "("
Name.Variable:  "LIST"
Text:  " "
Literal.String.Symbol:  "'PROGN"
Text:  "<newline>                                                           "
Punctuation:  "("
Name.Variable:  "LIST*"
Text:  " "
Literal.String.Symbol:  "'C-WARN"
Text:  " "
Name.Variable:  "ERROR-ARGS"
Punctuation:  ")"
Text:  "<newline>                                                           "
Operator:  "'"
Punctuation:  "("
Name.Variable:  "THROW"
Text:  " "
Literal.String.Symbol:  "'C-TYPEP"
Text:  " "
Name.Variable:  "NIL"
Punctuation:  ")"
Text:  "<newline>                                                  "
Punctuation:  "))"
Text:  " "
Punctuation:  ")"
Text:  "<newline>                                          "
Operator:  ","
Name.Variable:  "check-form"
Text:  "<newline>                                       "
Punctuation:  "))"
Text:  "<newline>                                    "
Punctuation:  ")"
Text:  "<newline>                                  "
Operator:  ","
Name.Variable:  "c-typep-form"
Text:  "<newline>                                "
Punctuation:  ")"
Text:  "<newline>     "
Punctuation:  ")"
Text:  "     "
Punctuation:  ")"
Text:  "      "
Punctuation:  ")"
Text:  "     "
Punctuation:  ")"
Text:  "<newline>     "
Literal.String.Symbol:  "',symbol"
Text:  "<newline>   "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "; CLtL1 p. 43"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "ARRAY"
Text:  " "
Name.Builtin:  "arrayp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "ATOM"
Text:  " "
Name.Builtin:  "atom"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "BASE-CHAR"
Text:  "<newline>  "
Operator:  "#+"
Name.Variable:  "BASE-CHAR=CHARACTER"
Text:  "<newline>  "
Name.Builtin:  "characterp"
Text:  "<newline>  "
Operator:  "#-"
Name.Variable:  "BASE-CHAR=CHARACTER"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "characterp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "base-char-p"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")))"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "BASE-STRING"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "stringp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-element-type"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>             "
Operator:  "#+"
Name.Variable:  "BASE-CHAR=CHARACTER"
Text:  " "
Literal.String.Symbol:  "'CHARACTER"
Text:  " "
Operator:  "#-"
Name.Variable:  "BASE-CHAR=CHARACTER"
Text:  " "
Literal.String.Symbol:  "'BASE-CHAR"
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "    "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "BIGNUM"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Variable:  "fixnump"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))))"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "BIT"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")))"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "BIT-VECTOR"
Text:  " "
Name.Builtin:  "bit-vector-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "BOOLEAN"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.String.Symbol:  "'nil"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.String.Symbol:  "'t"
Punctuation:  ")))"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "CHARACTER"
Text:  " "
Name.Builtin:  "characterp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "COMPILED-FUNCTION"
Text:  " "
Name.Builtin:  "compiled-function-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "COMPLEX"
Text:  " "
Name.Builtin:  "complexp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "CONS"
Text:  " "
Name.Builtin:  "consp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "DOUBLE-FLOAT"
Text:  " "
Name.Variable:  "double-float-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "ENCODING"
Text:  " "
Name.Variable:  "encodingp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "EXTENDED-CHAR"
Text:  "<newline>  "
Operator:  "#+"
Name.Variable:  "BASE-CHAR=CHARACTER"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword:  "declare"
Text:  " "
Punctuation:  "("
Keyword:  "ignore"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "#-"
Name.Variable:  "BASE-CHAR=CHARACTER"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "characterp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Variable:  "base-char-p"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))))"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "FIXNUM"
Text:  " "
Name.Variable:  "fixnump"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "FLOAT"
Text:  " "
Name.Builtin:  "floatp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "FUNCTION"
Text:  " "
Name.Builtin:  "functionp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "HASH-TABLE"
Text:  " "
Name.Builtin:  "hash-table-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "INTEGER"
Text:  " "
Name.Builtin:  "integerp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "KEYWORD"
Text:  " "
Name.Builtin:  "keywordp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "LIST"
Text:  " "
Name.Builtin:  "listp"
Punctuation:  ")"
Text:  "<newline>"
Operator:  "#+"
Name.Variable:  "LOGICAL-PATHNAMES"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "LOGICAL-PATHNAME"
Text:  " "
Name.Variable:  "logical-pathname-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "LONG-FLOAT"
Text:  " "
Name.Variable:  "long-float-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "NIL"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword:  "declare"
Text:  " "
Punctuation:  "("
Keyword:  "ignore"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "NULL"
Text:  " "
Name.Builtin:  "null"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "NUMBER"
Text:  " "
Name.Builtin:  "numberp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "PACKAGE"
Text:  " "
Name.Builtin:  "packagep"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "PATHNAME"
Text:  " "
Name.Builtin:  "pathnamep"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "RANDOM-STATE"
Text:  " "
Name.Builtin:  "random-state-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "RATIO"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rationalp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))))"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "RATIONAL"
Text:  " "
Name.Builtin:  "rationalp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "READTABLE"
Text:  " "
Name.Builtin:  "readtablep"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "REAL"
Text:  " "
Name.Builtin:  "realp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "SEQUENCE"
Text:  " "
Name.Variable:  "sequencep"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "SHORT-FLOAT"
Text:  " "
Name.Variable:  "short-float-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "SIMPLE-ARRAY"
Text:  " "
Name.Variable:  "simple-array-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "SIMPLE-BASE-STRING"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "simple-string-p"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-element-type"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>             "
Operator:  "#+"
Name.Variable:  "BASE-CHAR=CHARACTER"
Text:  " "
Literal.String.Symbol:  "'CHARACTER"
Text:  " "
Operator:  "#-"
Name.Variable:  "BASE-CHAR=CHARACTER"
Text:  " "
Literal.String.Symbol:  "'BASE-CHAR"
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "    "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "SIMPLE-BIT-VECTOR"
Text:  " "
Name.Builtin:  "simple-bit-vector-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "SIMPLE-STRING"
Text:  " "
Name.Builtin:  "simple-string-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "SIMPLE-VECTOR"
Text:  " "
Name.Builtin:  "simple-vector-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "SINGLE-FLOAT"
Text:  " "
Name.Variable:  "single-float-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "%standard-char-p"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "characterp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "standard-char-p"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")))"
Text:  " "
Comment.Single:  "; ABI"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "STANDARD-CHAR"
Text:  " "
Name.Variable:  "%standard-char-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "CLOS:STANDARD-OBJECT"
Text:  " "
Name.Variable:  "clos::std-instance-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "STREAM"
Text:  " "
Name.Builtin:  "streamp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "FILE-STREAM"
Text:  " "
Name.Variable:  "file-stream-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "SYNONYM-STREAM"
Text:  " "
Name.Variable:  "synonym-stream-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "BROADCAST-STREAM"
Text:  " "
Name.Variable:  "broadcast-stream-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "CONCATENATED-STREAM"
Text:  " "
Name.Variable:  "concatenated-stream-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "TWO-WAY-STREAM"
Text:  " "
Name.Variable:  "two-way-stream-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "ECHO-STREAM"
Text:  " "
Name.Variable:  "echo-stream-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "STRING-STREAM"
Text:  " "
Name.Variable:  "string-stream-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "STRING"
Text:  " "
Name.Builtin:  "stringp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "STRING-CHAR"
Text:  " "
Name.Builtin:  "characterp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "CLOS:STRUCTURE-OBJECT"
Text:  " "
Name.Variable:  "clos::structure-object-p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "SYMBOL"
Text:  " "
Name.Builtin:  "symbolp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "T"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword:  "declare"
Text:  " "
Punctuation:  "("
Keyword:  "ignore"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Name.Constant:  "t"
Punctuation:  "))"
Text:  "<newline>"
Comment.Single:  ";; foreign1.lisp is loaded after this file,"
Text:  "<newline>"
Comment.Single:  ";; so these symbols are not external yet"
Text:  "<newline>"
Operator:  "#+"
Name.Variable:  "ffi"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "ffi::foreign-function"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Literal.String.Symbol:  "'ffi::foreign-function"
Text:  " "
Punctuation:  "("
Name.Builtin:  "type-of"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))))"
Text:  "<newline>"
Operator:  "#+"
Name.Variable:  "ffi"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "ffi::foreign-variable"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Literal.String.Symbol:  "'ffi::foreign-variable"
Text:  " "
Punctuation:  "("
Name.Builtin:  "type-of"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))))"
Text:  "<newline>"
Operator:  "#+"
Name.Variable:  "ffi"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "ffi::foreign-address"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Literal.String.Symbol:  "'ffi::foreign-address"
Text:  " "
Punctuation:  "("
Name.Builtin:  "type-of"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))))"
Text:  "<newline>"
Comment.Single:  ";; see lispbibl.d (#define FOREIGN) and predtype.d (TYPE-OF):"
Text:  "<newline>"
Operator:  "#+"
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Name.Variable:  "unix"
Text:  " "
Name.Variable:  "ffi"
Text:  " "
Name.Variable:  "affi"
Text:  " "
Name.Variable:  "win32"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "foreign-pointer"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Literal.String.Symbol:  "'foreign-pointer"
Text:  " "
Punctuation:  "("
Name.Builtin:  "type-of"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))))"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "VECTOR"
Text:  " "
Name.Builtin:  "vectorp"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-atomic-type"
Text:  " "
Name.Variable:  "PLIST"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "multiple-value-bind"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Name.Variable:  "tail"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "list-length-dotted"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null"
Text:  " "
Name.Variable:  "tail"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "evenp"
Text:  " "
Name.Builtin:  "length"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "defmacro"
Text:  " "
Name.Variable:  "ensure-dim"
Text:  " "
Punctuation:  "("
Keyword:  "type"
Text:  " "
Name.Variable:  "dim"
Punctuation:  ")"
Text:  "<newline>  "
Comment.Single:  ";; make sure DIM is a valid dimension"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Operator:  ","
Name.Variable:  "dim"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Operator:  ","
Name.Variable:  "dim"
Text:  " "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "INTEGER"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "("
Operator:  ","
Name.Variable:  "ARRAY-DIMENSION-LIMIT"
Punctuation:  "))))"
Text:  "<newline>     "
Punctuation:  "("
Name.Builtin:  "error"
Text:  " "
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S: dimension ~S is invalid\""
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "',type"
Text:  " "
Operator:  ","
Name.Variable:  "dim"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "defmacro"
Text:  " "
Name.Variable:  "ensure-rank"
Text:  " "
Punctuation:  "("
Keyword:  "type"
Text:  " "
Name.Variable:  "rank"
Punctuation:  ")"
Text:  "<newline>  "
Comment.Single:  ";; make sure RANK is a valid rank"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Operator:  ","
Name.Variable:  "rank"
Text:  " "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "INTEGER"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "("
Operator:  ","
Name.Variable:  "ARRAY-RANK-LIMIT"
Punctuation:  ")))"
Text:  "<newline>     "
Punctuation:  "("
Name.Builtin:  "error"
Text:  " "
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S: rank ~S is invalid\""
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "',type"
Text:  " "
Operator:  ","
Name.Variable:  "rank"
Punctuation:  ")))"
Text:  "<newline><newline>"
Comment.Single:  "; CLtL1 p. 46-50"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "c-typep-array"
Text:  " "
Punctuation:  "("
Name.Variable:  "tester"
Text:  " "
Name.Variable:  "el-type"
Text:  " "
Name.Variable:  "dims"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Punctuation:  "("
Operator:  ","
Name.Variable:  "tester"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "el-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "'"
Punctuation:  "()"
Text:  "<newline>            "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "EQUAL"
Text:  " "
Punctuation:  "("
Name.Variable:  "ARRAY-ELEMENT-TYPE"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "',"
Punctuation:  "("
Name.Builtin:  "upgraded-array-element-type"
Text:  " "
Name.Variable:  "el-type"
Punctuation:  ")))"
Text:  "<newline>          "
Punctuation:  ")"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "dims"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "'"
Punctuation:  "()"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  "<newline>              "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "EQL"
Text:  " "
Operator:  ","
Name.Variable:  "dims"
Text:  " "
Punctuation:  "("
Name.Variable:  "ARRAY-RANK"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")))"
Text:  "<newline>              "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "EQL"
Text:  " "
Operator:  ","
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "ARRAY-RANK"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>                "
Operator:  ",@"
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "i"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Variable:  "mapcap"
Text:  " "
Name.Function:  "#'"
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "dim"
Punctuation:  ")"
Text:  "<newline>                                "
Punctuation:  "("
Name.Builtin:  "prog1"
Text:  "<newline>                                  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "dim"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>                                    "
Operator:  "'"
Punctuation:  "()"
Text:  "<newline>                                    "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "EQL"
Text:  " "
Literal.String.Symbol:  "',dim"
Text:  " "
Punctuation:  "("
Name.Variable:  "ARRAY-DIMENSION"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Text:  " "
Operator:  ","
Name.Variable:  "i"
Punctuation:  ")))"
Text:  "<newline>                                  "
Punctuation:  ")"
Text:  "<newline>                                  "
Punctuation:  "("
Name.Builtin:  "incf"
Text:  " "
Name.Variable:  "i"
Punctuation:  ")"
Text:  "<newline>                              "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline>                            "
Name.Variable:  "dims"
Text:  "<newline>                  "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline>               "
Punctuation:  ")"
Text:  "<newline>          "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "c-typep-vector"
Text:  " "
Punctuation:  "("
Name.Variable:  "tester"
Text:  " "
Name.Variable:  "size"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Punctuation:  "("
Operator:  ","
Name.Variable:  "tester"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "'"
Punctuation:  "()"
Text:  "<newline>            "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "EQL"
Text:  " "
Literal.String.Symbol:  "',size"
Text:  " "
Punctuation:  "("
Name.Variable:  "ARRAY-DIMENSION"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline>          "
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "typep-number-test"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "test"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "test"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "(("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "test"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Name.Variable:  "low"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "test"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "<"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "error-of-type"
Text:  " "
Literal.String.Symbol:  "'error"
Text:  "<newline>                  "
Operator:  "#1="
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S: argument to ~S must be *, ~S or a list of ~S: ~S\""
Punctuation:  ")"
Text:  "<newline>                  "
Literal.String.Symbol:  "'typep"
Text:  " "
Keyword:  "type"
Text:  " "
Keyword:  "type"
Text:  " "
Keyword:  "type"
Text:  " "
Name.Variable:  "low"
Text:  "<newline>       "
Punctuation:  ")"
Text:  "     "
Punctuation:  ")"
Text:  "  "
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "(("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "test"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">="
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Name.Variable:  "high"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "test"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  ">"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "error-of-type"
Text:  " "
Literal.String.Symbol:  "'error"
Text:  "<newline>                  "
Operator:  "#1#"
Text:  " "
Literal.String.Symbol:  "'typep"
Text:  " "
Keyword:  "type"
Text:  " "
Keyword:  "type"
Text:  " "
Keyword:  "type"
Text:  " "
Name.Variable:  "high"
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "    "
Punctuation:  ")"
Text:  "     "
Punctuation:  ")"
Text:  "  "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "c-typep-number"
Text:  " "
Punctuation:  "("
Name.Variable:  "caller"
Text:  " "
Name.Variable:  "tester"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Punctuation:  "("
Operator:  ","
Name.Variable:  "tester"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "())"
Text:  "<newline>                "
Punctuation:  "(("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "tester"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Operator:  "`"
Punctuation:  "(("
Name.Builtin:  "<="
Text:  " "
Operator:  ","
Name.Variable:  "low"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Name.Variable:  "low"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "tester"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")))"
Text:  "<newline>                 "
Operator:  "`"
Punctuation:  "(("
Name.Builtin:  "<"
Text:  " "
Operator:  ","
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "c-warn"
Text:  " "
Operator:  "#1="
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S: argument to ~S must be *, ~S or a list of ~S: ~S\""
Punctuation:  ")"
Text:  "<newline>                           "
Literal.String.Symbol:  "'typep"
Text:  " "
Name.Variable:  "caller"
Text:  " "
Name.Variable:  "caller"
Text:  " "
Name.Variable:  "caller"
Text:  " "
Name.Variable:  "low"
Text:  "<newline>                   "
Punctuation:  ")"
Text:  "<newline>                   "
Punctuation:  "("
Keyword:  "throw"
Text:  " "
Literal.String.Symbol:  "'c-TYPEP"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  "<newline>          "
Punctuation:  ")"
Text:  "     "
Punctuation:  ")"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "())"
Text:  "<newline>                "
Punctuation:  "(("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "tester"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Operator:  "`"
Punctuation:  "(("
Name.Builtin:  ">="
Text:  " "
Operator:  ","
Name.Variable:  "high"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Name.Variable:  "high"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "tester"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>                 "
Operator:  "`"
Punctuation:  "(("
Name.Builtin:  ">"
Text:  " "
Operator:  ","
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "c-warn"
Text:  " "
Operator:  "#1#"
Text:  " "
Literal.String.Symbol:  "'typep"
Text:  " "
Name.Variable:  "caller"
Text:  " "
Name.Variable:  "caller"
Text:  " "
Name.Variable:  "caller"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  "<newline>                   "
Punctuation:  "("
Keyword:  "throw"
Text:  " "
Literal.String.Symbol:  "'c-TYPEP"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  "<newline>          "
Punctuation:  ")"
Text:  "     "
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "ARRAY"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "el-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "dims"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "dims"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Variable:  "ensure-rank"
Text:  " "
Name.Variable:  "ARRAY"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Name.Variable:  "dim"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "ensure-dim"
Text:  " "
Name.Variable:  "ARRAY"
Text:  " "
Name.Variable:  "dim"
Punctuation:  "))))"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "arrayp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "el-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "equal"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-element-type"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "upgraded-array-element-type"
Text:  " "
Name.Variable:  "el-type"
Punctuation:  "))"
Text:  "<newline>       "
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "dims"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "dims"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-rank"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-rank"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "every"
Text:  " "
Name.Function:  "#'"
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "a"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "a"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "a"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")))"
Text:  "<newline>                         "
Name.Variable:  "dims"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-dimensions"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "    "
Punctuation:  ")"
Text:  "   "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "    "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-array"
Text:  " "
Literal.String.Symbol:  "'ARRAYP"
Text:  " "
Name.Variable:  "el-type"
Text:  " "
Name.Variable:  "dims"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "SIMPLE-ARRAY"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "el-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "dims"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "dims"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Variable:  "ensure-rank"
Text:  " "
Name.Variable:  "SIMPLE-ARRAY"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Name.Variable:  "dim"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "ensure-dim"
Text:  " "
Name.Variable:  "SIMPLE-ARRAY"
Text:  " "
Name.Variable:  "dim"
Punctuation:  "))))"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Variable:  "simple-array-p"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "el-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "equal"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-element-type"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "upgraded-array-element-type"
Text:  " "
Name.Variable:  "el-type"
Punctuation:  "))"
Text:  "<newline>       "
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "dims"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "dims"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-rank"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Name.Variable:  "dims"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-rank"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "every"
Text:  " "
Name.Function:  "#'"
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "a"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "a"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "a"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")))"
Text:  "<newline>                         "
Name.Variable:  "dims"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-dimensions"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "    "
Punctuation:  ")"
Text:  "   "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "    "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-array"
Text:  " "
Literal.String.Symbol:  "'SIMPLE-ARRAY-P"
Text:  " "
Name.Variable:  "el-type"
Text:  " "
Name.Variable:  "dims"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "VECTOR"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "el-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "ensure-dim"
Text:  " "
Name.Variable:  "VECTOR"
Text:  " "
Name.Variable:  "size"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vectorp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "el-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "equal"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-element-type"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "upgraded-array-element-type"
Text:  " "
Name.Variable:  "el-type"
Punctuation:  "))"
Text:  "<newline>       "
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-dimension"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Name.Variable:  "size"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Punctuation:  "("
Name.Variable:  "VECTORP"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "el-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "'"
Punctuation:  "()"
Text:  "<newline>            "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "EQUAL"
Text:  " "
Punctuation:  "("
Name.Variable:  "ARRAY-ELEMENT-TYPE"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "',"
Punctuation:  "("
Name.Builtin:  "upgraded-array-element-type"
Text:  " "
Name.Variable:  "el-type"
Punctuation:  ")))"
Text:  "<newline>          "
Punctuation:  ")"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "'"
Punctuation:  "()"
Text:  "<newline>            "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "EQL"
Text:  " "
Punctuation:  "("
Name.Variable:  "ARRAY-DIMENSION"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "',size"
Punctuation:  "))"
Text:  "<newline>          "
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "SIMPLE-VECTOR"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "ensure-dim"
Text:  " "
Name.Variable:  "SIMLPE-VECTOR"
Text:  " "
Name.Variable:  "size"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "simple-vector-p"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "size"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-dimension"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-vector"
Text:  " "
Literal.String.Symbol:  "'SIMPLE-VECTOR-P"
Text:  " "
Name.Variable:  "size"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "COMPLEX"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "rtype"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "itype"
Text:  " "
Name.Variable:  "rtype"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Name.Constant:  "nil"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "complexp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "rtype"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Punctuation:  "("
Name.Builtin:  "realpart"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "upgraded-complex-part-type"
Text:  " "
Name.Variable:  "rtype"
Punctuation:  ")))"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "itype"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Punctuation:  "("
Name.Builtin:  "imagpart"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "upgraded-complex-part-type"
Text:  " "
Name.Variable:  "itype"
Punctuation:  "))))"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Punctuation:  "("
Name.Variable:  "COMPLEXP"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "rtype"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "'"
Punctuation:  "()"
Text:  "<newline>            "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "TYPEP"
Text:  " "
Punctuation:  "("
Name.Variable:  "REALPART"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "',"
Punctuation:  "("
Name.Builtin:  "upgraded-complex-part-type"
Text:  " "
Name.Variable:  "rtype"
Punctuation:  "))))"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "itype"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "'"
Punctuation:  "()"
Text:  "<newline>            "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "TYPEP"
Text:  " "
Punctuation:  "("
Name.Variable:  "IMAGPART"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "',"
Punctuation:  "("
Name.Builtin:  "upgraded-complex-part-type"
Text:  " "
Name.Variable:  "itype"
Punctuation:  "))))))"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "INTEGER"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Name.Constant:  "nil"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "typep-number-test"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Function:  "#'"
Name.Builtin:  "integerp"
Text:  " "
Literal.String.Symbol:  "'INTEGER"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-number"
Text:  " "
Literal.String.Symbol:  "'INTEGER"
Text:  " "
Literal.String.Symbol:  "'INTEGERP"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "MOD"
Text:  " "
Punctuation:  "("
Name.Variable:  "n"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "n"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "error"
Text:  " "
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S: argument to MOD must be an integer: ~S\""
Punctuation:  ")"
Text:  "<newline>           "
Literal.String.Symbol:  "'typep"
Text:  " "
Name.Variable:  "n"
Text:  "<newline>  "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "n"
Punctuation:  "))"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Punctuation:  "("
Name.Variable:  "INTEGERP"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "NOT"
Text:  " "
Punctuation:  "("
Name.Variable:  "MINUSP"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Text:  " "
Operator:  ","
Name.Variable:  "n"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "SIGNED-BYTE"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "n"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "n"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "error"
Text:  " "
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S: argument to SIGNED-BYTE must be an integer or * : ~S\""
Punctuation:  ")"
Text:  "<newline>           "
Literal.String.Symbol:  "'typep"
Text:  " "
Name.Variable:  "n"
Text:  "<newline>  "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integer-length"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Name.Variable:  "n"
Punctuation:  ")))"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Punctuation:  "("
Name.Variable:  "INTEGERP"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "()"
Text:  " "
Operator:  "`"
Punctuation:  "(("
Name.Builtin:  "<"
Text:  " "
Punctuation:  "("
Name.Variable:  "INTEGER-LENGTH"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Operator:  ","
Name.Variable:  "n"
Punctuation:  ")))"
Text:  "<newline>   "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "UNSIGNED-BYTE"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "n"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "n"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "error"
Text:  " "
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S: argument to UNSIGNED-BYTE must be an integer or * : ~S\""
Punctuation:  ")"
Text:  "<newline>           "
Literal.String.Symbol:  "'typep"
Text:  " "
Name.Variable:  "n"
Text:  "<newline>  "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "minusp"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<="
Text:  " "
Punctuation:  "("
Name.Builtin:  "integer-length"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Name.Variable:  "n"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Punctuation:  "("
Name.Variable:  "INTEGERP"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "NOT"
Text:  " "
Punctuation:  "("
Name.Variable:  "MINUSP"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "()"
Text:  " "
Operator:  "`"
Punctuation:  "(("
Name.Builtin:  "<="
Text:  " "
Punctuation:  "("
Name.Variable:  "INTEGER-LENGTH"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Operator:  ","
Name.Variable:  "n"
Punctuation:  ")))"
Text:  "<newline>   "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "REAL"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Name.Constant:  "nil"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "typep-number-test"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Function:  "#'"
Name.Builtin:  "realp"
Text:  " "
Literal.String.Symbol:  "'REAL"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-number"
Text:  " "
Literal.String.Symbol:  "'REAL"
Text:  " "
Literal.String.Symbol:  "'REALP"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "RATIONAL"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Name.Constant:  "nil"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "typep-number-test"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Function:  "#'"
Name.Builtin:  "rationalp"
Text:  " "
Literal.String.Symbol:  "'RATIONAL"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-number"
Text:  " "
Literal.String.Symbol:  "'RATIONAL"
Text:  " "
Literal.String.Symbol:  "'RATIONALP"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "FLOAT"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Name.Constant:  "nil"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "typep-number-test"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Function:  "#'"
Name.Builtin:  "floatp"
Text:  " "
Literal.String.Symbol:  "'FLOAT"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-number"
Text:  " "
Literal.String.Symbol:  "'FLOAT"
Text:  " "
Literal.String.Symbol:  "'FLOATP"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "SHORT-FLOAT"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Name.Constant:  "nil"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "typep-number-test"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Function:  "#'"
Name.Variable:  "short-float-p"
Text:  " "
Literal.String.Symbol:  "'SHORT-FLOAT"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-number"
Text:  " "
Literal.String.Symbol:  "'SHORT-FLOAT"
Text:  " "
Literal.String.Symbol:  "'SHORT-FLOAT-P"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "SINGLE-FLOAT"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Name.Constant:  "nil"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "typep-number-test"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Function:  "#'"
Name.Variable:  "single-float-p"
Text:  " "
Literal.String.Symbol:  "'SINGLE-FLOAT"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-number"
Text:  " "
Literal.String.Symbol:  "'SINGLE-FLOAT"
Text:  " "
Literal.String.Symbol:  "'SINGLE-FLOAT-P"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "DOUBLE-FLOAT"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Name.Constant:  "nil"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "typep-number-test"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Function:  "#'"
Name.Variable:  "double-float-p"
Text:  " "
Literal.String.Symbol:  "'DOUBLE-FLOAT"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-number"
Text:  " "
Literal.String.Symbol:  "'DOUBLE-FLOAT"
Text:  " "
Literal.String.Symbol:  "'DOUBLE-FLOAT-P"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "LONG-FLOAT"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Name.Constant:  "nil"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "typep-number-test"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Function:  "#'"
Name.Variable:  "long-float-p"
Text:  " "
Literal.String.Symbol:  "'LONG-FLOAT"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-number"
Text:  " "
Literal.String.Symbol:  "'LONG-FLOAT"
Text:  " "
Literal.String.Symbol:  "'LONG-FLOAT-P"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "STRING"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "ensure-dim"
Text:  " "
Name.Variable:  "STRING"
Text:  " "
Name.Variable:  "size"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "stringp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "size"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-dimension"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-vector"
Text:  " "
Literal.String.Symbol:  "'STRINGP"
Text:  " "
Name.Variable:  "size"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "SIMPLE-STRING"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "ensure-dim"
Text:  " "
Name.Variable:  "SIMPLE-STRING"
Text:  " "
Name.Variable:  "size"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "simple-string-p"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "size"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-dimension"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-vector"
Text:  " "
Literal.String.Symbol:  "'SIMPLE-STRING-P"
Text:  " "
Name.Variable:  "size"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "BASE-STRING"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "ensure-dim"
Text:  " "
Name.Variable:  "BASE-STRING"
Text:  " "
Name.Variable:  "size"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "stringp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "size"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-dimension"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-vector"
Text:  " "
Literal.String.Symbol:  "'STRINGP"
Text:  " "
Name.Variable:  "size"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "SIMPLE-BASE-STRING"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "ensure-dim"
Text:  " "
Name.Variable:  "SIMPLE-BASE-STRING"
Text:  " "
Name.Variable:  "size"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "simple-string-p"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "size"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-dimension"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-vector"
Text:  " "
Literal.String.Symbol:  "'SIMPLE-STRING-P"
Text:  " "
Name.Variable:  "size"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "BIT-VECTOR"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "ensure-dim"
Text:  " "
Name.Variable:  "BIT-VECTOR"
Text:  " "
Name.Variable:  "size"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "bit-vector-p"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "size"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-dimension"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-vector"
Text:  " "
Literal.String.Symbol:  "'BIT-VECTOR-P"
Text:  " "
Name.Variable:  "size"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "SIMPLE-BIT-VECTOR"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "ensure-dim"
Text:  " "
Name.Variable:  "SIMPLE-BIT-VECTOR"
Text:  " "
Name.Variable:  "size"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "simple-bit-vector-p"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "size"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "size"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-dimension"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Variable:  "c-typep-vector"
Text:  " "
Literal.String.Symbol:  "'SIMPLE-BIT-VECTOR-P"
Text:  " "
Name.Variable:  "size"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Variable:  "def-compound-type"
Text:  " "
Name.Variable:  "CONS"
Text:  " "
Punctuation:  "("
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "car-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "cdr-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Name.Constant:  "nil"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "car-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Name.Variable:  "car-type"
Punctuation:  "))"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "cdr-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Name.Variable:  "cdr-type"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Punctuation:  "("
Name.Variable:  "CONSP"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "car-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "()"
Text:  " "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "TYPEP"
Text:  " "
Punctuation:  "("
Name.Variable:  "CAR"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "',car-type"
Punctuation:  ")))"
Text:  "<newline>        "
Operator:  ",@"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "cdr-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "()"
Text:  " "
Operator:  "`"
Punctuation:  "(("
Name.Variable:  "TYPEP"
Text:  " "
Punctuation:  "("
Name.Variable:  "CDR"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "',cdr-type"
Punctuation:  ")))"
Text:  "<newline>   "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "fmakunbound"
Text:  " "
Literal.String.Symbol:  "'def-compound-type"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  ";; ----------------------------------------------------------------------------"
Text:  "<newline><newline>"
Comment.Single:  "; Typtest ohne Gefahr einer Fehlermeldung. F\u00FCr SIGNAL und HANDLER-BIND."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "safe-typep"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Text:  " "
Name.Variable:  "y"
Text:  " "
Keyword:  "&optional"
Text:  " "
Name.Variable:  "env"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable.Global:  "*error-handler*"
Text:  "<newline>          "
Name.Function:  "#'"
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Keyword:  "&rest"
Text:  " "
Name.Variable:  "error-args"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "declare"
Text:  " "
Punctuation:  "("
Keyword:  "ignore"
Text:  " "
Name.Variable:  "error-args"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "safe-typep"
Text:  " "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Name.Constant:  "nil"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>       "
Punctuation:  "))"
Text:  "   "
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "y"
Text:  " "
Name.Variable:  "env"
Punctuation:  ")"
Text:  " "
Name.Constant:  "t"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "; Umwandlung eines \"type for declaration\" in einen \"type for discrimination\"."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "type-for-discrimination"
Text:  " "
Punctuation:  "("
Name.Variable:  "y"
Text:  " "
Keyword:  "&optional"
Text:  " "
Punctuation:  "("
Name.Variable:  "notp"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  " "
Keyword:  "&aux"
Text:  " "
Name.Variable:  "f"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "symbolp"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "get"
Text:  " "
Name.Variable:  "y"
Text:  " "
Literal.String.Symbol:  "'TYPE-SYMBOL"
Punctuation:  ")"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>                 "
Punctuation:  "(("
Name.Builtin:  "get"
Text:  " "
Name.Variable:  "y"
Text:  " "
Literal.String.Symbol:  "'TYPE-LIST"
Punctuation:  ")"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>                 "
Punctuation:  "(("
Keyword:  "setq"
Text:  " "
Name.Variable:  "f"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Name.Variable:  "y"
Text:  " "
Literal.String.Symbol:  "'DEFTYPE-EXPANDER"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Variable:  "z"
Text:  " "
Punctuation:  "("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "f"
Text:  " "
Punctuation:  "("
Name.Builtin:  "list"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")))"
Text:  "<newline>                         "
Punctuation:  "("
Name.Variable:  "zx"
Text:  " "
Punctuation:  "("
Name.Variable:  "type-for-discrimination"
Text:  " "
Name.Variable:  "z"
Text:  " "
Name.Variable:  "notp"
Punctuation:  ")))"
Text:  "<newline>                    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "zx"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Name.Variable:  "y"
Text:  " "
Name.Variable:  "zx"
Punctuation:  ")"
Text:  "<newline>                 "
Punctuation:  "))"
Text:  "<newline>                 "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  ")"
Text:  "  "
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbolp"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")))"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "case"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  "(("
Name.Variable:  "SATISFIES"
Text:  " "
Name.Variable:  "MEMBER"
Text:  " "
Name.Variable:  "EQL"
Punctuation:  ")"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "NOT"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Variable:  "z"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>                     "
Punctuation:  "("
Name.Variable:  "zx"
Text:  " "
Punctuation:  "("
Name.Variable:  "type-for-discrimination"
Text:  " "
Name.Variable:  "z"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Name.Variable:  "notp"
Punctuation:  "))))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "zx"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Name.Variable:  "y"
Text:  " "
Operator:  "`"
Punctuation:  "("
Name.Variable:  "NOT"
Text:  " "
Operator:  ","
Name.Variable:  "zx"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "(("
Name.Variable:  "AND"
Text:  " "
Name.Variable:  "OR"
Text:  " "
Name.Variable:  "COMPLEX"
Text:  " "
Name.Variable:  "VALUES"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Variable:  "z"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>                     "
Punctuation:  "("
Name.Variable:  "zx"
Text:  " "
Punctuation:  "("
Name.Builtin:  "mapcar"
Text:  " "
Name.Function:  "#'"
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "type-for-discrimination"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "notp"
Punctuation:  "))"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "every"
Text:  " "
Name.Function:  "#'"
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "z"
Text:  " "
Name.Variable:  "zx"
Punctuation:  ")"
Text:  " "
Name.Variable:  "y"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cons"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Name.Variable:  "zx"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "FUNCTION"
Text:  "<newline>              "
Comment.Single:  ";; (FUNCTION arg-types res-type) is somewhere between"
Text:  "<newline>              "
Comment.Single:  ";; NIL and FUNCTION, but undecidable."
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "notp"
Text:  " "
Literal.String.Symbol:  "'NIL"
Text:  " "
Literal.String.Symbol:  "'FUNCTION"
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "get"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'TYPE-LIST"
Punctuation:  ")"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>                      "
Punctuation:  "(("
Keyword:  "setq"
Text:  " "
Name.Variable:  "f"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'DEFTYPE-EXPANDER"
Punctuation:  "))"
Text:  "<newline>                       "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Variable:  "z"
Text:  " "
Punctuation:  "("
Name.Builtin:  "funcall"
Text:  " "
Name.Variable:  "f"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>                              "
Punctuation:  "("
Name.Variable:  "zx"
Text:  " "
Punctuation:  "("
Name.Variable:  "type-for-discrimination"
Text:  " "
Name.Variable:  "z"
Text:  " "
Name.Variable:  "notp"
Punctuation:  ")))"
Text:  "<newline>                         "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "zx"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Name.Variable:  "y"
Text:  " "
Name.Variable:  "zx"
Punctuation:  ")"
Text:  "<newline>                      "
Punctuation:  "))"
Text:  "<newline>                      "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  ")"
Text:  "  "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "  "
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "; Testet eine Liste von Werten auf Erf\u00FCllen eines Type-Specifiers. F\u00FCr THE."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "%the"
Text:  " "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Comment.Single:  "; ABI"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "macrolet"
Text:  " "
Punctuation:  "(("
Name.Variable:  "near-typep"
Text:  " "
Punctuation:  "("
Name.Variable:  "objform"
Text:  " "
Name.Variable:  "typform"
Punctuation:  ")"
Text:  "<newline>               "
Comment.Single:  ";; near-typep ist wie typep, nur dass das Objekt auch ein"
Text:  "<newline>               "
Comment.Single:  ";; Read-Label sein darf. Das tritt z.B. auf bei"
Text:  "<newline>               "
Comment.Single:  ";; (read-from-string \"#1=#S(FOO :X #1#)\")"
Text:  "<newline>               "
Comment.Single:  ";; im Konstruktor MAKE-FOO. Die Implementation ist aber"
Text:  "<newline>               "
Comment.Single:  ";; nicht gezwungen, bei fehlerhaftem THE zwingend einen"
Text:  "<newline>               "
Comment.Single:  ";; Fehler zu melden, darum ist ein lascherer Typcheck hier"
Text:  "<newline>               "
Comment.Single:  ";; erlaubt."
Text:  "<newline>               "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "g"
Text:  " "
Punctuation:  "("
Name.Builtin:  "gensym"
Punctuation:  ")))"
Text:  "<newline>                 "
Operator:  "`"
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Operator:  ","
Name.Variable:  "g"
Text:  " "
Operator:  ","
Name.Variable:  "objform"
Punctuation:  "))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Operator:  ","
Name.Variable:  "g"
Text:  " "
Operator:  ","
Name.Variable:  "typform"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "type-of"
Text:  " "
Operator:  ","
Name.Variable:  "g"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'READ-LABEL"
Punctuation:  "))))))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'VALUES"
Punctuation:  "))"
Text:  "<newline>      "
Comment.Single:  ";; The VALUES type specifier is ill-defined in ANSI CL."
Text:  "<newline>      "
Comment.Single:  ";;"
Text:  "<newline>      "
Comment.Single:  ";; There are two possibilities to define a VALUES type specifier in a"
Text:  "<newline>      "
Comment.Single:  ";; sane way:"
Text:  "<newline>      "
Comment.Single:  ";; - (EXACT-VALUES type1 ... [&optional ...]) describes the exact shape"
Text:  "<newline>      "
Comment.Single:  ";;   of the values list, as received by MULTIPLE-VALUE-LIST."
Text:  "<newline>      "
Comment.Single:  ";;   For example, (EXACT-VALUES SYMBOL) is matched by (values 'a) but not"
Text:  "<newline>      "
Comment.Single:  ";;   by (values 'a 'b) or (values)."
Text:  "<newline>      "
Comment.Single:  ";; - (ASSIGNABLE-VALUES type1 ... [&optional ...]) describes the values"
Text:  "<newline>      "
Comment.Single:  ";;   as received by a set of variables through MULTIPLE-VALUE-BIND or"
Text:  "<newline>      "
Comment.Single:  ";;   MULTIPLE-VALUE-SETQ. For example, (ASSIGNABLE-VALUES SYMBOL) is"
Text:  "<newline>      "
Comment.Single:  ";;   defined by whether"
Text:  "<newline>      "
Comment.Single:  ";;     (MULTIPLE-VALUE-BIND (var1) values (DECLARE (TYPE SYMBOL var1)) ...)"
Text:  "<newline>      "
Comment.Single:  ";;   is valid or not; therefore (ASSIGNABLE-VALUES SYMBOL) is matched by"
Text:  "<newline>      "
Comment.Single:  ";;   (values 'a) and (values 'a 'b) and (values)."
Text:  "<newline>      "
Comment.Single:  ";;   Note that &OPTIONAL is actually redundant here:"
Text:  "<newline>      "
Comment.Single:  ";;     (ASSIGNABLE-VALUES type1 ... &optional otype1 ...)"
Text:  "<newline>      "
Comment.Single:  ";;   is equivalent to"
Text:  "<newline>      "
Comment.Single:  ";;     (ASSIGNABLE-VALUES type1 ... (OR NULL otype1) ...)"
Text:  "<newline>      "
Comment.Single:  ";; HyperSpec/Body/typspe_values.html indicates that VALUES means"
Text:  "<newline>      "
Comment.Single:  ";; EXACT-VALUES; however, HyperSpec/Body/speope_the.html indicates that"
Text:  "<newline>      "
Comment.Single:  ";; VALUES means ASSIGNABLE-VALUES."
Text:  "<newline>      "
Comment.Single:  ";;"
Text:  "<newline>      "
Comment.Single:  ";; SBCL interprets the VALUES type specifier to mean EXACT-VALUES when"
Text:  "<newline>      "
Comment.Single:  ";; it contains &OPTIONAL or &REST, but ASSIGNABLE-VALUES when it has"
Text:  "<newline>      "
Comment.Single:  ";; only a tuple of type specifiers. This is utter nonsense, in particular"
Text:  "<newline>      "
Comment.Single:  ";; because it makes (VALUES type1 ... typek &OPTIONAL)"
Text:  "<newline>      "
Comment.Single:  ";; different from   (VALUES type1 ... typek)."
Text:  "<newline>      "
Comment.Single:  ";;"
Text:  "<newline>      "
Comment.Single:  ";; Here we use the ASSIGNABLE-VALUES interpretation."
Text:  "<newline>      "
Comment.Single:  ";; In SUBTYPEP we just punt and don't assume any interpretation."
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "vals"
Text:  " "
Name.Builtin:  "values"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "types"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>        "
Comment.Single:  ";; required:"
Text:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "loop"
Text:  "<newline>          "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "atom"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "atom"
Text:  " "
Name.Variable:  "vals"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "%the"
Text:  " "
Name.Constant:  "t"
Punctuation:  "))"
Text:  "<newline>          "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Variable:  "memq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Name.Variable:  "lambda-list-keywords"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "return"
Punctuation:  "))"
Text:  "<newline>          "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Variable:  "near-typep"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pop"
Text:  " "
Name.Variable:  "vals"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pop"
Text:  " "
Name.Variable:  "types"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "%the"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")))"
Text:  "<newline>        "
Comment.Single:  ";; &optional:"
Text:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'&optional"
Punctuation:  "))"
Text:  "<newline>          "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "types"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "types"
Punctuation:  "))"
Text:  "<newline>          "
Punctuation:  "("
Name.Builtin:  "loop"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "atom"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "atom"
Text:  " "
Name.Variable:  "vals"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "%the"
Text:  " "
Name.Constant:  "t"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Variable:  "memq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Name.Variable:  "lambda-list-keywords"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "return"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Variable:  "near-typep"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pop"
Text:  " "
Name.Variable:  "vals"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pop"
Text:  " "
Name.Variable:  "types"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "%the"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))))"
Text:  "<newline>        "
Comment.Single:  ";; &rest &key:"
Text:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "case"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  "<newline>          "
Punctuation:  "("
Keyword:  "&rest"
Text:  "<newline>           "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "types"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "types"
Punctuation:  "))"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "atom"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'the"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Variable:  "near-typep"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pop"
Text:  " "
Name.Variable:  "vals"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pop"
Text:  " "
Name.Variable:  "types"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "%the"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")))"
Text:  "<newline>          "
Punctuation:  "("
Keyword:  "&key"
Punctuation:  ")"
Text:  "<newline>          "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'the"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>        "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'&key"
Punctuation:  ")"
Text:  "<newline>          "
Punctuation:  "("
Keyword:  "progn"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "types"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "types"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "oddp"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Name.Variable:  "vals"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "%the"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "keywords"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "loop"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "atom"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "atom"
Text:  " "
Name.Variable:  "vals"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "%the"
Text:  " "
Name.Constant:  "t"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Variable:  "memq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Name.Variable:  "lambda-list-keywords"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "return"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "item"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pop"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "listp"
Text:  " "
Name.Variable:  "item"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Name.Variable:  "item"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>                               "
Punctuation:  "("
Name.Builtin:  "symbolp"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "item"
Punctuation:  ")))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'the"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "kw"
Text:  " "
Punctuation:  "("
Name.Variable:  "symbol-to-keyword"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "item"
Punctuation:  "))))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Variable:  "near-typep"
Text:  " "
Punctuation:  "("
Name.Builtin:  "getf"
Text:  " "
Name.Variable:  "vals"
Text:  " "
Name.Variable:  "kw"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Name.Variable:  "item"
Punctuation:  "))"
Text:  "<newline>                      "
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "%the"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "push"
Text:  " "
Name.Variable:  "kw"
Text:  " "
Name.Variable:  "keywords"
Punctuation:  "))))"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'&allow-other-keys"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "types"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "types"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "getf"
Text:  " "
Name.Variable:  "vals"
Text:  " "
Operator:  "'"
Literal.String.Symbol:  ":allow-other-keys"
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "do"
Text:  " "
Punctuation:  "(("
Name.Variable:  "L"
Text:  " "
Name.Variable:  "vals"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cddr"
Text:  " "
Name.Variable:  "L"
Punctuation:  ")))"
Text:  "<newline>                      "
Punctuation:  "(("
Name.Builtin:  "atom"
Text:  " "
Name.Variable:  "L"
Punctuation:  "))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Variable:  "memq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "L"
Punctuation:  ")"
Text:  " "
Name.Variable:  "keywords"
Punctuation:  ")"
Text:  "<newline>                      "
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "%the"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")))))))"
Text:  "<newline>          "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "types"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'the"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>        "
Name.Constant:  "t"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Variable:  "near-typep"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Builtin:  "values"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Builtin:  "values"
Punctuation:  ")"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  " "
Keyword:  "type"
Punctuation:  "))))"
Text:  "<newline><newline>"
Comment.Single:  ";;; ==========================================================================="
Text:  "<newline><newline>"
Comment.Single:  ";; SUBTYPEP"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "load"
Text:  " "
Literal.String:  "\"subtypep\""
Punctuation:  ")"
Text:  "<newline><newline><newline>"
Comment.Single:  ";; Returns the number of bytes that are needed to represent #\\Null in a"
Text:  "<newline>"
Comment.Single:  ";; given encoding."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "encoding-zeroes"
Text:  " "
Punctuation:  "("
Name.Variable:  "encoding"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "#+"
Name.Variable:  "UNICODE"
Text:  "<newline>  "
Comment.Single:  ";; this should use min_bytes_per_char for cache, not the hash table"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "name"
Text:  " "
Punctuation:  "("
Name.Variable:  "ext:encoding-charset"
Text:  " "
Name.Variable:  "encoding"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "("
Name.Variable:  "table"
Text:  " "
Operator:  "#."
Punctuation:  "("
Name.Builtin:  "make-hash-table"
Text:  " "
Literal.String.Symbol:  ":key-type"
Text:  " "
Operator:  "'"
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Name.Builtin:  "string"
Text:  " "
Name.Class:  "symbol"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  ":value-type"
Text:  " "
Literal.String.Symbol:  "'fixnum"
Text:  "<newline>                                  "
Literal.String.Symbol:  ":test"
Text:  " "
Literal.String.Symbol:  "'stablehash-equal"
Text:  " "
Literal.String.Symbol:  ":warn-if-needs-rehash-after-gc"
Text:  " "
Name.Constant:  "t"
Text:  "<newline>                                  "
Literal.String.Symbol:  ":initial-contents"
Text:  " "
Operator:  "'"
Punctuation:  "(("
Literal.String:  "\"UTF-7\""
Text:  " "
Operator:  "."
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))))"
Text:  "<newline>        "
Punctuation:  "("
Name.Variable:  "tester"
Text:  " "
Operator:  "#."
Punctuation:  "("
Name.Builtin:  "make-string"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Literal.String.Symbol:  ":initial-element"
Text:  " "
Punctuation:  "("
Name.Builtin:  "code-char"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))))"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "gethash"
Text:  " "
Name.Variable:  "name"
Text:  " "
Name.Variable:  "table"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "setf"
Text:  " "
Punctuation:  "("
Name.Builtin:  "gethash"
Text:  " "
Name.Variable:  "name"
Text:  " "
Name.Variable:  "table"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Punctuation:  "("
Name.Variable:  "ext:convert-string-to-bytes"
Text:  " "
Name.Variable:  "tester"
Text:  " "
Name.Variable:  "encoding"
Punctuation:  "))"
Text:  "<newline>                 "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Punctuation:  "("
Name.Variable:  "ext:convert-string-to-bytes"
Text:  " "
Name.Variable:  "tester"
Text:  " "
Name.Variable:  "encoding"
Text:  "<newline>                                                      "
Literal.String.Symbol:  ":end"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))))))"
Text:  "<newline>  "
Operator:  "#-"
Name.Variable:  "UNICODE"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  ";; Determines two values low,high such that"
Text:  "<newline>"
Comment.Single:  ";;   (subtypep type `(INTEGER ,low ,high))"
Text:  "<newline>"
Comment.Single:  ";; holds and low is as large as possible and high is as small as possible."
Text:  "<newline>"
Comment.Single:  ";; low = * means -infinity, high = * means infinity."
Text:  "<newline>"
Comment.Single:  ";; When (subtypep type 'INTEGER) is false, the values NIL,NIL are returned."
Text:  "<newline>"
Comment.Single:  ";; We need this function only for MAKE-ARRAY, UPGRADED-ARRAY-ELEMENT-TYPE and"
Text:  "<newline>"
Comment.Single:  ";; OPEN and can therefore w.l.o.g. replace"
Text:  "<newline>"
Comment.Single:  ";;   type  with  `(OR ,type (MEMBER 0))"
Text:  "<newline>"
Comment.Single:  ";; The original implementation calls canonicalize-type and then applies"
Text:  "<newline>"
Comment.Single:  ";; a particular SUBTYPE variant:"
Text:  "<newline> "
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "subtype-integer"
Text:  " "
Punctuation:  "("
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "macrolet"
Text:  " "
Punctuation:  "(("
Name.Variable:  "yes"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "'"
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "subtype-integer"
Text:  " "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "no"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "'"
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "subtype-integer"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "unknown"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "'"
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "subtype-integer"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Keyword:  "type"
Text:  " "
Punctuation:  "("
Name.Variable:  "canonicalize-type"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "case"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "("
Name.Variable:  "MEMBER"
Text:  " "
Comment.Single:  "; (MEMBER &rest objects)"
Text:  "<newline>          "
Comment.Single:  ";; All elements must be of type INTEGER."
Text:  "<newline>          "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  " "
Comment.Single:  "; wlog!"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.String.Symbol:  "'INTEGER"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "return"
Text:  " "
Punctuation:  "("
Name.Variable:  "no"
Punctuation:  ")))"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "min"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "max"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")))))"
Text:  "<newline>        "
Punctuation:  "("
Name.Variable:  "OR"
Text:  " "
Comment.Single:  "; (OR type*)"
Text:  "<newline>          "
Comment.Single:  ";; Every type must be subtype of INTEGER."
Text:  "<newline>          "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  " "
Comment.Single:  "; wlog!"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Name.Variable:  "type1"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "multiple-value-bind"
Text:  " "
Punctuation:  "("
Name.Variable:  "low1"
Text:  " "
Name.Variable:  "high1"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "subtype-integer"
Text:  " "
Name.Variable:  "type1"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Name.Variable:  "low1"
Text:  " "
Punctuation:  "("
Name.Builtin:  "return"
Text:  " "
Punctuation:  "("
Name.Variable:  "no"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "low1"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Literal.String.Symbol:  "'*"
Text:  " "
Punctuation:  "("
Name.Builtin:  "min"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "low1"
Punctuation:  "))"
Text:  "<newline>                      "
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "high1"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  "<newline>                               "
Literal.String.Symbol:  "'*"
Text:  " "
Punctuation:  "("
Name.Builtin:  "max"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "high1"
Punctuation:  ")))))))"
Text:  "<newline>        "
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Comment.Single:  "; (AND type*)"
Text:  "<newline>          "
Comment.Single:  ";; If one of the types is subtype of INTEGER, then yes,"
Text:  "<newline>          "
Comment.Single:  ";; otherwise unknown."
Text:  "<newline>          "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Name.Variable:  "type1"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "multiple-value-bind"
Text:  " "
Punctuation:  "("
Name.Variable:  "low1"
Text:  " "
Name.Variable:  "high1"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "subtype-integer"
Text:  " "
Name.Variable:  "type1"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Name.Variable:  "low1"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "low"
Text:  "<newline>                    "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "low1"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "low1"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "max"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "low1"
Punctuation:  ")))"
Text:  "<newline>                          "
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "high1"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "high1"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "min"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "high1"
Punctuation:  "))))"
Text:  "<newline>                    "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "low1"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "high1"
Punctuation:  ")))))"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "low"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "progn"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Variable:  "high"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Comment.Single:  "; type equivalent to NIL)"
Text:  "<newline>                "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Name.Variable:  "unknown"
Punctuation:  ")))))"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Keyword:  "type"
Text:  " "
Punctuation:  "("
Name.Builtin:  "list"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'INTEGER"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cddr"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "third"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")))"
Text:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  "<newline>          "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "low"
Punctuation:  "))"
Text:  "<newline>          "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "incf"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")))"
Text:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  "<newline>          "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "high"
Punctuation:  "))"
Text:  "<newline>          "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "decf"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>        "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  " "
Comment.Single:  "; type leer?"
Text:  "<newline>          "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Variable:  "high"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'INTERVALS"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'INTEGER"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "third"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Punctuation:  "("
Name.Builtin:  "last"
Text:  " "
Keyword:  "type"
Punctuation:  "))))"
Text:  "<newline>          "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "low"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "incf"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")))"
Text:  "<newline>          "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "high"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "decf"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>          "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "("
Name.Variable:  "unknown"
Punctuation:  ")))))"
Text:  "<newline>   "
Comment.Single:  ";; This implementation inlines the (tail-recursive) canonicalize-type"
Text:  "<newline>   "
Comment.Single:  ";; function. Its advantage is that it doesn't cons as much."
Text:  "<newline>   "
Comment.Single:  ";; (For example, (subtype-integer '(UNSIGNED-BYTE 8)) doesn't cons.)"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "subtype-integer"
Text:  " "
Punctuation:  "("
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "macrolet"
Text:  " "
Punctuation:  "(("
Name.Variable:  "yes"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "'"
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "subtype-integer"
Text:  " "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "no"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "'"
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "subtype-integer"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "unknown"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "'"
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "subtype-integer"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Keyword:  "type"
Text:  " "
Punctuation:  "("
Name.Variable:  "expand-deftype"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "symbolp"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "case"
Text:  " "
Keyword:  "type"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "BIT"
Text:  " "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "FIXNUM"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Operator:  "'#,"
Name.Variable:  "most-negative-fixnum"
Punctuation:  ")"
Text:  "<newline>                    "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Operator:  "'#,"
Name.Variable:  "most-positive-fixnum"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "(("
Name.Variable:  "INTEGER"
Text:  " "
Name.Variable:  "BIGNUM"
Text:  " "
Name.Variable:  "SIGNED-BYTE"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "UNSIGNED-BYTE"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "(("
Name.Variable:  "NIL"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  ")))"
Text:  " "
Comment.Single:  "; wlog!"
Text:  "<newline>             "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "no"
Punctuation:  "))))"
Text:  "<newline>          "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbolp"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "list-length"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Punctuation:  "("
Name.Builtin:  "last"
Text:  " "
Keyword:  "type"
Punctuation:  "))))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "case"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "MEMBER"
Text:  " "
Comment.Single:  "; (MEMBER &rest objects)"
Text:  "<newline>              "
Comment.Single:  ";; All elements must be of type INTEGER."
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  " "
Comment.Single:  "; wlog!"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.String.Symbol:  "'INTEGER"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "return"
Text:  " "
Punctuation:  "("
Name.Variable:  "no"
Punctuation:  ")))"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "min"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "max"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")))))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "EQL"
Text:  " "
Comment.Single:  "; (EQL object)"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.String.Symbol:  "'INTEGER"
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "min"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "max"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")))"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Variable:  "no"
Punctuation:  "))))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "OR"
Text:  " "
Comment.Single:  "; (OR type*)"
Text:  "<newline>              "
Comment.Single:  ";; Every type must be subtype of INTEGER."
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  " "
Comment.Single:  "; wlog!"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Name.Variable:  "type1"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "multiple-value-bind"
Text:  " "
Punctuation:  "("
Name.Variable:  "low1"
Text:  " "
Name.Variable:  "high1"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "subtype-integer"
Text:  " "
Name.Variable:  "type1"
Punctuation:  ")"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Name.Variable:  "low1"
Text:  " "
Punctuation:  "("
Name.Builtin:  "return"
Text:  " "
Punctuation:  "("
Name.Variable:  "no"
Punctuation:  ")))"
Text:  "<newline>                    "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "low1"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  "<newline>                                  "
Literal.String.Symbol:  "'*"
Text:  " "
Punctuation:  "("
Name.Builtin:  "min"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "low1"
Punctuation:  "))"
Text:  "<newline>                          "
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "high1"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  "<newline>                                   "
Literal.String.Symbol:  "'*"
Text:  " "
Punctuation:  "("
Name.Builtin:  "max"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "high1"
Punctuation:  ")))))))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Comment.Single:  "; (AND type*)"
Text:  "<newline>              "
Comment.Single:  ";; If one of the types is subtype of INTEGER, then yes,"
Text:  "<newline>              "
Comment.Single:  ";; otherwise unknown."
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Name.Constant:  "nil"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Name.Variable:  "type1"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "multiple-value-bind"
Text:  " "
Punctuation:  "("
Name.Variable:  "low1"
Text:  " "
Name.Variable:  "high1"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "subtype-integer"
Text:  " "
Name.Variable:  "type1"
Punctuation:  ")"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Name.Variable:  "low1"
Text:  "<newline>                      "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "low"
Text:  "<newline>                        "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "low1"
Text:  "<newline>                                      "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "low1"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "low"
Text:  "<newline>                                          "
Punctuation:  "("
Name.Builtin:  "max"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "low1"
Punctuation:  ")))"
Text:  "<newline>                              "
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "high1"
Text:  "<newline>                                       "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "high1"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "high"
Text:  "<newline>                                           "
Punctuation:  "("
Name.Builtin:  "min"
Text:  " "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "high1"
Punctuation:  "))))"
Text:  "<newline>                        "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "low1"
Text:  "<newline>                              "
Name.Variable:  "high"
Text:  " "
Name.Variable:  "high1"
Punctuation:  ")))))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "low"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "progn"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  "<newline>                               "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>                      "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Variable:  "high"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  " "
Comment.Single:  "; type equivalent to NIL"
Text:  "<newline>                    "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Variable:  "unknown"
Punctuation:  "))))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "INTEGER"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cddr"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "third"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "low"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "incf"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "high"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "decf"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "low"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Variable:  "high"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  " "
Comment.Single:  "; type equivalent to NIL"
Text:  "<newline>                "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "INTERVALS"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'INTEGER"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "third"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>                      "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Punctuation:  "("
Name.Builtin:  "last"
Text:  " "
Keyword:  "type"
Punctuation:  "))))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  "<newline>                    "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "low"
Punctuation:  "))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "incf"
Text:  " "
Name.Variable:  "low"
Punctuation:  ")))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  "<newline>                    "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "high"
Punctuation:  "))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "numberp"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "decf"
Text:  " "
Name.Variable:  "high"
Punctuation:  ")))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "("
Name.Variable:  "unknown"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "MOD"
Text:  " "
Comment.Single:  "; (MOD n)"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "n"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "n"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">="
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Name.Variable:  "no"
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "1-"
Text:  " "
Name.Variable:  "n"
Punctuation:  ")))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  ")))))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "SIGNED-BYTE"
Text:  " "
Comment.Single:  "; (SIGNED-BYTE &optional s)"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "s"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "s"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "progn"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "s"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "plusp"
Text:  " "
Name.Variable:  "s"
Punctuation:  "))"
Text:  "<newline>                      "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>                    "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "n"
Text:  " "
Punctuation:  "("
Name.Builtin:  "ash"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "("
Name.Builtin:  "1-"
Text:  " "
Name.Variable:  "s"
Punctuation:  "))))"
Text:  " "
Comment.Single:  "; (ash 1 *) == (expt 2 *)"
Text:  "<newline>                      "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Name.Variable:  "n"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "1-"
Text:  " "
Name.Variable:  "n"
Punctuation:  ")))"
Text:  "<newline>                        "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  ")))))))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "UNSIGNED-BYTE"
Text:  " "
Comment.Single:  "; (UNSIGNED-BYTE &optional s)"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "s"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "s"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>                    "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>                    "
Punctuation:  "("
Keyword:  "progn"
Text:  "<newline>                      "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integerp"
Text:  " "
Name.Variable:  "s"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">="
Text:  " "
Name.Variable:  "s"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>                        "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>                      "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "n"
Text:  " "
Punctuation:  "("
Name.Builtin:  "ash"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name.Variable:  "s"
Punctuation:  ")))"
Text:  " "
Comment.Single:  "; (ash 1 *) == (expt 2 *)"
Text:  "<newline>                        "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "1-"
Text:  " "
Name.Variable:  "n"
Punctuation:  ")))"
Text:  "<newline>                          "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  ")))))))"
Text:  "<newline>             "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "no"
Punctuation:  "))))"
Text:  "<newline>          "
Punctuation:  "(("
Name.Variable:  "clos::defined-class-p"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos::built-in-class-p"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos:class-name"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'CLOS::CLOSCLASS"
Punctuation:  ")"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>             "
Punctuation:  "("
Keyword:  "return-from"
Text:  " "
Name.Variable:  "subtype-integer"
Text:  "<newline>               "
Punctuation:  "("
Name.Variable:  "subtype-integer"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos:class-name"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "("
Name.Variable:  "no"
Punctuation:  ")))"
Text:  "<newline>          "
Punctuation:  "(("
Name.Variable:  "clos::eql-specializer-p"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos::eql-specializer-singleton"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Name.Variable:  "x"
Text:  " "
Literal.String.Symbol:  "'INTEGER"
Punctuation:  ")"
Text:  "<newline>               "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "low"
Text:  " "
Punctuation:  "("
Name.Builtin:  "min"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Variable:  "high"
Text:  " "
Punctuation:  "("
Name.Builtin:  "max"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")))"
Text:  " "
Punctuation:  "("
Name.Variable:  "yes"
Punctuation:  "))"
Text:  "<newline>               "
Punctuation:  "("
Name.Variable:  "no"
Punctuation:  "))))"
Text:  "<newline>          "
Punctuation:  "(("
Name.Variable:  "encodingp"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Variable:  "no"
Punctuation:  "))"
Text:  "<newline>          "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  ")))))"
Text:  "<newline><newline> "
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "type-null"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Literal.String.Symbol:  "'bit"
Text:  " "
Punctuation:  "("
Name.Builtin:  "upgraded-array-element-type"
Text:  " "
Operator:  "`"
Punctuation:  "("
Name.Builtin:  "or"
Text:  " "
Name.Builtin:  "bit"
Text:  " "
Operator:  ","
Name.Variable:  "x"
Punctuation:  ")))"
Text:  "<newline>               "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>               "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "typep"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")))"
Text:  "<newline>          "
Name.Constant:  "t"
Punctuation:  "))"
Text:  "<newline> "
Punctuation:  "("
Name.Variable:  "type-null"
Text:  " "
Operator:  "'"
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Name.Class:  "symbol"
Text:  " "
Name.Class:  "number"
Punctuation:  "))"
Text:  "<newline> "
Punctuation:  "("
Name.Variable:  "type-null"
Text:  " "
Operator:  "'"
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Name.Class:  "integer"
Text:  " "
Name.Class:  "symbol"
Punctuation:  "))"
Text:  "<newline> "
Punctuation:  "("
Name.Variable:  "type-null"
Text:  " "
Operator:  "'"
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Name.Class:  "integer"
Text:  " "
Name.Builtin:  "character"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";; Determines a sequence kind (an atom, as defined in defseq.lisp: one of"
Text:  "<newline>"
Comment.Single:  ";;   LIST - stands for LIST"
Text:  "<newline>"
Comment.Single:  ";;   VECTOR - stands for (VECTOR T)"
Text:  "<newline>"
Comment.Single:  ";;   STRING - stands for (VECTOR CHARACTER)"
Text:  "<newline>"
Comment.Single:  ";;   1, 2, 4, 8, 16, 32 - stands for (VECTOR (UNSIGNED-BYTE n))"
Text:  "<newline>"
Comment.Single:  ";;   0 - stands for (VECTOR NIL))"
Text:  "<newline>"
Comment.Single:  ";; that indicates the sequence type meant by the given type. Other possible"
Text:  "<newline>"
Comment.Single:  ";; return values are"
Text:  "<newline>"
Comment.Single:  ";;   SEQUENCE - denoting a type whose intersection with (OR LIST VECTOR) is not"
Text:  "<newline>"
Comment.Single:  ";;              subtype of LIST or VECTOR, or"
Text:  "<newline>"
Comment.Single:  ";;   NIL - indicating a type whose intersection with (OR LIST VECTOR) is empty."
Text:  "<newline>"
Comment.Single:  ";; When the type is (OR (VECTOR eltype1) ... (VECTOR eltypeN)), the chosen"
Text:  "<newline>"
Comment.Single:  ";; element type is the smallest element type that contains all of eltype1 ..."
Text:  "<newline>"
Comment.Single:  ";; eltypeN."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; User-defined sequence types are not supported here."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; This implementation inlines the (tail-recursive) canonicalize-type"
Text:  "<newline>"
Comment.Single:  ";; function. Its advantage is that it doesn't cons as much. Also it employs"
Text:  "<newline>"
Comment.Single:  ";; some heuristics and does not have the full power of SUBTYPEP."
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "subtype-sequence"
Text:  " "
Punctuation:  "("
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Keyword:  "type"
Text:  " "
Punctuation:  "("
Name.Variable:  "expand-deftype"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "symbolp"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "("
Name.Builtin:  "case"
Text:  " "
Keyword:  "type"
Text:  "<newline>           "
Punctuation:  "(("
Name.Variable:  "LIST"
Text:  " "
Name.Variable:  "CONS"
Text:  " "
Name.Variable:  "NULL"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'LIST"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "(("
Name.Variable:  "NIL"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "(("
Name.Variable:  "BIT-VECTOR"
Text:  " "
Name.Variable:  "SIMPLE-BIT-VECTOR"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'1"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "(("
Name.Variable:  "STRING"
Text:  " "
Name.Variable:  "SIMPLE-STRING"
Text:  " "
Name.Variable:  "BASE-STRING"
Text:  " "
Name.Variable:  "SIMPLE-BASE-STRING"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'STRING"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "(("
Name.Variable:  "VECTOR"
Text:  " "
Name.Variable:  "SIMPLE-VECTOR"
Text:  " "
Name.Variable:  "ARRAY"
Text:  " "
Name.Variable:  "SIMPLE-ARRAY"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'VECTOR"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "(("
Name.Variable:  "SEQUENCE"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'SEQUENCE"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")))"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbolp"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>         "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "list-length"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Punctuation:  "("
Name.Builtin:  "last"
Text:  " "
Keyword:  "type"
Punctuation:  "))))"
Text:  "<newline>           "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>         "
Punctuation:  "("
Name.Builtin:  "case"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Variable:  "MEMBER"
Text:  " "
Comment.Single:  "; (MEMBER &rest objects)"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "kind"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "kind"
Text:  " "
Punctuation:  "("
Name.Variable:  "sequence-type-union"
Text:  " "
Name.Variable:  "kind"
Text:  " "
Punctuation:  "("
Name.Variable:  "type-of-sequence"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))))"
Text:  "<newline>              "
Name.Variable:  "kind"
Punctuation:  "))"
Text:  "<newline>           "
Punctuation:  "("
Name.Variable:  "EQL"
Text:  " "
Comment.Single:  "; (EQL object)"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Variable:  "type-of-sequence"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>           "
Punctuation:  "("
Name.Variable:  "OR"
Text:  " "
Comment.Single:  "; (OR type*)"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "kind"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "kind"
Text:  " "
Punctuation:  "("
Name.Variable:  "sequence-type-union"
Text:  " "
Name.Variable:  "kind"
Text:  " "
Punctuation:  "("
Name.Variable:  "subtype-sequence"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))))"
Text:  "<newline>              "
Name.Variable:  "kind"
Punctuation:  "))"
Text:  "<newline>           "
Punctuation:  "("
Name.Variable:  "AND"
Text:  " "
Comment.Single:  "; (AND type*)"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "kind"
Text:  " "
Literal.String.Symbol:  "'SEQUENCE"
Punctuation:  "))"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "dolist"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "rest"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "setq"
Text:  " "
Name.Variable:  "kind"
Text:  " "
Punctuation:  "("
Name.Variable:  "sequence-type-intersection"
Text:  " "
Name.Variable:  "kind"
Text:  " "
Punctuation:  "("
Name.Variable:  "subtype-sequence"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))))"
Text:  "<newline>              "
Name.Variable:  "kind"
Punctuation:  "))"
Text:  "<newline>           "
Punctuation:  "(("
Name.Variable:  "SIMPLE-BIT-VECTOR"
Text:  " "
Name.Variable:  "BIT-VECTOR"
Punctuation:  ")"
Text:  " "
Comment.Single:  "; (SIMPLE-BIT-VECTOR &optional size)"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cddr"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>            "
Literal.String.Symbol:  "'1"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "(("
Name.Variable:  "SIMPLE-STRING"
Text:  " "
Name.Variable:  "STRING"
Text:  " "
Name.Variable:  "SIMPLE-BASE-STRING"
Text:  " "
Name.Variable:  "BASE-STRING"
Punctuation:  ")"
Text:  " "
Comment.Single:  "; (SIMPLE-STRING &optional size)"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cddr"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>            "
Literal.String.Symbol:  "'STRING"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Variable:  "SIMPLE-VECTOR"
Text:  " "
Comment.Single:  "; (SIMPLE-VECTOR &optional size)"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cddr"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>            "
Literal.String.Symbol:  "'VECTOR"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "(("
Name.Variable:  "VECTOR"
Text:  " "
Name.Variable:  "ARRAY"
Text:  " "
Name.Variable:  "SIMPLE-ARRAY"
Punctuation:  ")"
Text:  " "
Comment.Single:  "; (VECTOR &optional el-type size), (ARRAY &optional el-type dimensions)"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdddr"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "el-type"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")))"
Text:  "<newline>              "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "el-type"
Text:  " "
Literal.String.Symbol:  "'*"
Punctuation:  ")"
Text:  "<newline>                "
Literal.String.Symbol:  "'VECTOR"
Text:  "<newline>                "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "eltype"
Text:  " "
Punctuation:  "("
Name.Builtin:  "upgraded-array-element-type"
Text:  " "
Name.Variable:  "el-type"
Punctuation:  ")))"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "eltype"
Text:  " "
Literal.String.Symbol:  "'T"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'VECTOR"
Punctuation:  ")"
Text:  "<newline>                        "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "eltype"
Text:  " "
Literal.String.Symbol:  "'CHARACTER"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'STRING"
Punctuation:  ")"
Text:  "<newline>                        "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "eltype"
Text:  " "
Literal.String.Symbol:  "'BIT"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'1"
Punctuation:  ")"
Text:  "<newline>                        "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "eltype"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "eltype"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'UNSIGNED-BYTE"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Name.Variable:  "eltype"
Punctuation:  "))"
Text:  "<newline>                        "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "eltype"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'0"
Punctuation:  ")"
Text:  "<newline>                        "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Builtin:  "error"
Text:  " "
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S is not up-to-date with ~S for element type ~S\""
Punctuation:  ")"
Text:  "<newline>                                  "
Literal.String.Symbol:  "'subtypep-sequence"
Text:  " "
Literal.String.Symbol:  "'upgraded-array-element-type"
Text:  " "
Name.Variable:  "eltype"
Punctuation:  ")))))))"
Text:  "<newline>           "
Punctuation:  "(("
Name.Variable:  "CONS"
Punctuation:  ")"
Text:  " "
Comment.Single:  "; (CONS &optional cartype cdrtype)"
Text:  "<newline>            "
Punctuation:  "("
Name.Builtin:  "when"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdddr"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'subtypep"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>            "
Literal.String.Symbol:  "'LIST"
Punctuation:  ")"
Text:  "<newline>           "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")))"
Text:  "<newline>        "
Punctuation:  "(("
Name.Variable:  "clos::defined-class-p"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos::built-in-class-p"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos:class-name"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'CLOS::CLOSCLASS"
Punctuation:  ")"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>           "
Punctuation:  "("
Name.Variable:  "subtype-sequence"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos:class-name"
Text:  " "
Keyword:  "type"
Punctuation:  "))"
Text:  "<newline>           "
Literal.String.Symbol:  "'NIL"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "(("
Name.Variable:  "clos::eql-specializer-p"
Text:  " "
Keyword:  "type"
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "("
Name.Variable:  "type-of-sequence"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos::eql-specializer-singleton"
Text:  " "
Keyword:  "type"
Punctuation:  ")))"
Text:  "<newline>        "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")))"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "type-of-sequence"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "listp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'LIST"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "vectorp"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>         "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Variable:  "eltype"
Text:  " "
Punctuation:  "("
Name.Builtin:  "array-element-type"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")))"
Text:  "<newline>           "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "eltype"
Text:  " "
Literal.String.Symbol:  "'T"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'VECTOR"
Punctuation:  ")"
Text:  "<newline>                 "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "eltype"
Text:  " "
Literal.String.Symbol:  "'CHARACTER"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'STRING"
Punctuation:  ")"
Text:  "<newline>                 "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "eltype"
Text:  " "
Literal.String.Symbol:  "'BIT"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'1"
Punctuation:  ")"
Text:  "<newline>                 "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "eltype"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "eltype"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'UNSIGNED-BYTE"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "second"
Text:  " "
Name.Variable:  "eltype"
Punctuation:  "))"
Text:  "<newline>                 "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "eltype"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'0"
Punctuation:  ")"
Text:  "<newline>                 "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Builtin:  "error"
Text:  " "
Punctuation:  "("
Name.Variable:  "TEXT"
Text:  " "
Literal.String:  "\"~S is not up-to-date with ~S for element type ~S\""
Punctuation:  ")"
Text:  "<newline>                           "
Literal.String.Symbol:  "'type-of-sequence"
Text:  " "
Literal.String.Symbol:  "'array-element-type"
Text:  " "
Name.Variable:  "eltype"
Punctuation:  ")))))"
Text:  "<newline>        "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")))"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "sequence-type-union"
Text:  " "
Punctuation:  "("
Name.Variable:  "t1"
Text:  " "
Name.Variable:  "t2"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Comment.Single:  "; Simple general rules."
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Name.Variable:  "t2"
Punctuation:  ")"
Text:  " "
Name.Variable:  "t1"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")"
Text:  " "
Name.Variable:  "t2"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")"
Text:  " "
Name.Variable:  "t1"
Punctuation:  ")"
Text:  "<newline>        "
Comment.Single:  "; Now the union of two different types."
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.String.Symbol:  "'SEQUENCE"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.String.Symbol:  "'SEQUENCE"
Punctuation:  "))"
Text:  " "
Literal.String.Symbol:  "'SEQUENCE"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.String.Symbol:  "'LIST"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.String.Symbol:  "'LIST"
Punctuation:  "))"
Text:  "<newline>         "
Comment.Single:  "; union of LIST and a vector type"
Text:  "<newline>         "
Literal.String.Symbol:  "'SEQUENCE"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.String.Symbol:  "'VECTOR"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.String.Symbol:  "'VECTOR"
Punctuation:  "))"
Text:  " "
Literal.String.Symbol:  "'VECTOR"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Name.Variable:  "t2"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Name.Variable:  "t1"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.String.Symbol:  "'STRING"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.String.Symbol:  "'STRING"
Punctuation:  "))"
Text:  "<newline>         "
Comment.Single:  "; union of STRING and an integer-vector type"
Text:  "<newline>         "
Literal.String.Symbol:  "'VECTOR"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Builtin:  "max"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Name.Variable:  "t2"
Punctuation:  "))))"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "sequence-type-intersection"
Text:  " "
Punctuation:  "("
Name.Variable:  "t1"
Text:  " "
Name.Variable:  "t2"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Comment.Single:  "; Simple general rules."
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Name.Variable:  "t2"
Punctuation:  ")"
Text:  " "
Name.Variable:  "t1"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  "))"
Text:  " "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")"
Text:  "<newline>        "
Comment.Single:  "; Now the intersection of two different types."
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.String.Symbol:  "'SEQUENCE"
Punctuation:  ")"
Text:  " "
Name.Variable:  "t2"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.String.Symbol:  "'SEQUENCE"
Punctuation:  ")"
Text:  " "
Name.Variable:  "t1"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.String.Symbol:  "'LIST"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.String.Symbol:  "'LIST"
Punctuation:  "))"
Text:  "<newline>         "
Comment.Single:  "; intersection of LIST and a vector type"
Text:  "<newline>         "
Literal.String.Symbol:  "'NIL"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.String.Symbol:  "'VECTOR"
Punctuation:  ")"
Text:  " "
Name.Variable:  "t2"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.String.Symbol:  "'VECTOR"
Punctuation:  ")"
Text:  " "
Name.Variable:  "t1"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eql"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  " "
Literal.String.Symbol:  "'0"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "(("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Literal.String.Symbol:  "'STRING"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq"
Text:  " "
Name.Variable:  "t2"
Text:  " "
Literal.String.Symbol:  "'STRING"
Punctuation:  "))"
Text:  "<newline>         "
Comment.Single:  "; intersection of STRING and an integer-vector type"
Text:  "<newline>         "
Literal.String.Symbol:  "'0"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Builtin:  "min"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Name.Variable:  "t2"
Punctuation:  "))))"
Text:  "<newline><newline>"
Comment.Single:  ";; ============================================================================"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "defun"
Text:  " "
Name.Variable:  "type-expand"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec"
Text:  " "
Keyword:  "&optional"
Text:  " "
Name.Variable:  "once-p"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "multiple-value-bind"
Text:  " "
Punctuation:  "("
Name.Variable:  "expanded"
Text:  " "
Name.Variable:  "user-defined-p"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Variable:  "expand-deftype"
Text:  " "
Name.Variable:  "typespec"
Text:  " "
Name.Variable:  "once-p"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "user-defined-p"
Text:  " "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Name.Variable:  "expanded"
Text:  " "
Name.Variable:  "user-defined-p"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "symbolp"
Text:  " "
Name.Variable:  "typespec"
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Name.Variable:  "typespec"
Text:  " "
Literal.String.Symbol:  "'TYPE-SYMBOL"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Name.Variable:  "typespec"
Text:  " "
Literal.String.Symbol:  "'TYPE-LIST"
Punctuation:  "))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Name.Variable:  "typespec"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>                   "
Punctuation:  "(("
Name.Builtin:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "get"
Text:  " "
Name.Variable:  "typespec"
Text:  " "
Literal.String.Symbol:  "'DEFSTRUCT-DESCRIPTION"
Punctuation:  ")"
Text:  "<newline>                        "
Punctuation:  "("
Name.Variable:  "clos-class"
Text:  " "
Name.Variable:  "typespec"
Punctuation:  "))"
Text:  "<newline>                    "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Name.Variable:  "typespec"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>                   "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'type-expand"
Text:  " "
Name.Variable:  "typespec"
Punctuation:  "))))"
Text:  "<newline>            "
Punctuation:  "(("
Name.Builtin:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "consp"
Text:  " "
Name.Variable:  "typespec"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbolp"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "typespec"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "("
Name.Builtin:  "case"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "typespec"
Punctuation:  ")"
Text:  "<newline>               "
Punctuation:  "(("
Name.Variable:  "SATISFIES"
Text:  " "
Name.Variable:  "MEMBER"
Text:  " "
Name.Variable:  "EQL"
Text:  " "
Name.Variable:  "NOT"
Text:  " "
Name.Variable:  "AND"
Text:  " "
Name.Variable:  "OR"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Name.Variable:  "typespec"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>               "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "get"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Name.Variable:  "typespec"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'TYPE-LIST"
Punctuation:  ")"
Text:  "<newline>                         "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Name.Variable:  "typespec"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>                        "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'type-expand"
Text:  " "
Name.Variable:  "typespec"
Punctuation:  "))))))"
Text:  "<newline>            "
Punctuation:  "(("
Name.Variable:  "clos::defined-class-p"
Text:  " "
Name.Variable:  "typespec"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "values"
Text:  " "
Name.Variable:  "typespec"
Text:  " "
Name.Constant:  "nil"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "("
Name.Constant:  "t"
Text:  " "
Punctuation:  "("
Name.Variable:  "typespec-error"
Text:  " "
Literal.String.Symbol:  "'type-expand"
Text:  " "
Name.Variable:  "typespec"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Comment.Single:  ";; ============================================================================"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Builtin:  "unless"
Text:  " "
Punctuation:  "("
Name.Variable:  "clos::funcallable-instance-p"
Text:  " "
Name.Function:  "#'"
Name.Variable:  "clos::class-name"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "fmakunbound"
Text:  " "
Literal.String.Symbol:  "'clos::class-name"
Punctuation:  "))"
Text:  "<newline><newline>"
Literal.String:  "\"CONSP\""
Text:  " "
Name.Variable:  "XXX:"
Text:  " "
Punctuation:  "("
Name.Variable:  "SINGLE-FLOAT-VALUE"
Text:  " "
Operator:  "#."
Name.Variable:  "ext::single-float-negative-infinity"
Text:  " "
Literal.String.Other:  "#S"
Punctuation:  "("
Name.Variable:  "C::VV"
Text:  " "
Literal.String.Symbol:  ":EXT:LOCATION"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Literal.String.Symbol:  ":C::USED-P"
Text:  " "
Name.Variable:  "NIL"
Text:  " "
Literal.String.Symbol:  ":C::PERMANENT-P"
Text:  " "
Name.Variable:  "T"
Text:  " "
Literal.String.Symbol:  ":C::VALUE"
Text:  " "
Operator:  "#."
Name.Variable:  "ext::single-float-negative-infinity"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";; ============================================================================"
Text:  "<newline><newline>"
Comment.Single:  ";;; ASDF examples"
Text:  "<newline>"
Punctuation:  "("
Name.Builtin:  "defsystem"
Text:  " "
Literal.String:  "\"foo\""
Text:  "<newline>  "
Literal.String.Symbol:  ":version"
Text:  " "
Punctuation:  "("
Literal.String.Symbol:  ":read-file-form"
Text:  " "
Literal.String:  "\"variables\""
Text:  " "
Literal.String.Symbol:  ":at"
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "3"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "))"
Text:  "<newline>  "
Literal.String.Symbol:  ":components"
Text:  "<newline>  "
Punctuation:  "(("
Literal.String.Symbol:  ":file"
Text:  " "
Literal.String:  "\"package\""
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Literal.String.Symbol:  ":file"
Text:  " "
Literal.String:  "\"variables\""
Text:  " "
Literal.String.Symbol:  ":depends-on"
Text:  " "
Punctuation:  "("
Literal.String:  "\"package\""
Punctuation:  "))"
Text:  "<newline>   "
Punctuation:  "("
Literal.String.Symbol:  ":module"
Text:  " "
Literal.String:  "\"mod\""
Text:  "<newline>     "
Literal.String.Symbol:  ":depends-on"
Text:  " "
Punctuation:  "("
Literal.String:  "\"package\""
Punctuation:  ")"
Text:  "<newline>     "
Literal.String.Symbol:  ":serial"
Text:  " "
Name.Constant:  "t"
Text:  "<newline>     "
Literal.String.Symbol:  ":components"
Text:  " "
Punctuation:  "(("
Literal.String.Symbol:  ":file"
Text:  " "
Literal.String:  "\"utils\""
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Literal.String.Symbol:  ":file"
Text:  " "
Literal.String:  "\"reader\""
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Literal.String.Symbol:  ":file"
Text:  " "
Literal.String:  "\"cooker\""
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Literal.String.Symbol:  ":static-file"
Text:  " "
Literal.String:  "\"data.raw\""
Punctuation:  "))"
Text:  "<newline>     "
Literal.String.Symbol:  ":output-files"
Text:  " "
Punctuation:  "("
Name.Variable:  "compile-op"
Text:  " "
Punctuation:  "("
Name.Variable:  "o"
Text:  " "
Name.Variable:  "c"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "list"
Text:  " "
Literal.String:  "\"data.cooked\""
Punctuation:  "))"
Text:  "<newline>     "
Literal.String.Symbol:  ":perform"
Text:  " "
Punctuation:  "("
Name.Variable:  "compile-op"
Text:  " "
Literal.String.Symbol:  ":after"
Text:  " "
Punctuation:  "("
Name.Variable:  "o"
Text:  " "
Name.Variable:  "c"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "("
Name.Variable:  "cook-data"
Text:  "<newline>         "
Literal.String.Symbol:  ":in"
Text:  " "
Punctuation:  "("
Name.Variable:  "component-pathname"
Text:  " "
Punctuation:  "("
Name.Variable:  "find-component"
Text:  " "
Name.Variable:  "c"
Text:  " "
Literal.String:  "\"data.raw\""
Punctuation:  "))"
Text:  "<newline>         "
Literal.String.Symbol:  ":out"
Text:  " "
Punctuation:  "("
Name.Builtin:  "first"
Text:  " "
Punctuation:  "("
Name.Variable:  "output-files"
Text:  " "
Name.Variable:  "o"
Text:  " "
Name.Variable:  "c"
Punctuation:  ")))))"
Text:  "<newline>   "
Punctuation:  "("
Literal.String.Symbol:  ":file"
Text:  " "
Literal.String:  "\"foo\""
Text:  " "
Literal.String.Symbol:  ":depends-on"
Text:  " "
Punctuation:  "("
Literal.String:  "\"mod\""
Punctuation:  "))))"
Text:  "<newline>"
