Keyword.Type:  "int"
Text:  " "
Name:  "quote_delims"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "100'000'000"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Type:  "int"
Text:  " "
Name:  "float_delims"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "100.00'00"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Type:  "int"
Text:  " "
Name:  "hex_delims"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Hex:  "0xFF'Fa12"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Type:  "int"
Text:  " "
Name:  "bin_delims"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Bin:  "0b10'1000"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// string literal with encoding-prefix"
Text:  "<newline>"
Keyword.Type:  "char"
Text:  " "
Name:  "str1"
Punctuation:  "[]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "u8\"UTF-8 string\""
Punctuation:  ";"
Text:  "<newline>"
Keyword.Type:  "char16_t"
Text:  " "
Name:  "str2"
Punctuation:  "[]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "u\"UTF-16 string\""
Punctuation:  ";"
Text:  "<newline>"
Keyword.Type:  "char32_t"
Text:  " "
Name:  "str3"
Punctuation:  "[]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "U\"UTF-32 string\""
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// Raw string literal"
Text:  "<newline>"
Keyword.Type:  "char"
Text:  " "
Name:  "raw_str1"
Punctuation:  "[]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "R\"(foo<newline>bar<newline>baz)\""
Punctuation:  ";"
Text:  "<newline>"
Keyword.Type:  "char"
Text:  " "
Name:  "raw_str2"
Punctuation:  "[]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "R\"delim(\\w+ \\d+)delim\""
Punctuation:  ";"
Text:  "<newline>"
Keyword.Type:  "char16_t"
Text:  " "
Name:  "raw_str3"
Punctuation:  "[]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "uR\"(\\w+ \\d+)\""
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// time literal"
Text:  "<newline>"
Comment.Preproc:  "#include"
Text:  " "
Comment.PreprocFile:  "<chrono>"
Comment.Preproc:  "<newline>"
Keyword:  "using"
Text:  " "
Keyword:  "namespace"
Text:  " "
Name:  "std"
Operator:  "::"
Name:  "chrono_literals"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "oneDecade"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Other:  "10y"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "oneYear"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Other:  "365.2'425d"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "oneDay"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Other:  "24h"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "halfAnHour"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Other:  "30min"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "oneYearInMins"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Other:  "525'949.2min"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "halfAnHour"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Other:  "0.5h"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "oneMin"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Other:  "60s"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "oneSec"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Other:  "1000ms"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "oneMilliSec"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Other:  "1000us"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "oneMicroSec"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Other:  "1000ns"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// complex literal"
Text:  "<newline>"
Comment.Preproc:  "#include"
Text:  " "
Comment.PreprocFile:  "<complex>"
Comment.Preproc:  "<newline>"
Keyword:  "using"
Text:  " "
Keyword:  "namespace"
Text:  " "
Name:  "std"
Operator:  "::"
Name:  "complex_literals"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "complexNumber"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Other:  "1i"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "complexNumberl"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Other:  "1il"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "complexNumberf"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Other:  "1if"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// null pointer"
Text:  "<newline>"
Keyword.Type:  "int"
Text:  " "
Operator:  "*"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "nullptr"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// bit field"
Text:  "<newline>"
Keyword:  "struct"
Text:  " "
Name.Class:  "S"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// will usually occupy 2 bytes:"
Text:  "<newline>    "
Comment.Single:  "// 3 bits: value of b1"
Text:  "<newline>    "
Comment.Single:  "// 2 bits: unused"
Text:  "<newline>    "
Comment.Single:  "// 6 bits: value of b2"
Text:  "<newline>    "
Comment.Single:  "// 2 bits: value of b3"
Text:  "<newline>    "
Comment.Single:  "// 3 bits: unused"
Text:  "<newline>    "
Keyword.Type:  "unsigned"
Text:  " "
Keyword.Type:  "char"
Text:  " "
Name:  "b1"
Text:  " "
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  " "
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Name:  "b2"
Text:  " "
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "6"
Punctuation:  ","
Text:  " "
Name:  "b3"
Text:  " "
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline>"
Name:  "std"
Operator:  "::"
Name:  "cout"
Text:  " "
Operator:  "<<"
Text:  " "
Keyword:  "sizeof"
Punctuation:  "("
Name:  "S"
Punctuation:  ")"
Text:  " "
Operator:  "<<"
Text:  " "
Literal.String.Char:  "'<newline>'"
Punctuation:  ";"
Text:  " "
Comment.Single:  "// usually prints 2"
Text:  "<newline><newline>"
Comment.Single:  "// loops"
Text:  "<newline>"
Keyword.Type:  "int"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name:  "n"
Text:  " "
Operator:  "-->"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "std"
Operator:  "::"
Name:  "cout"
Text:  " "
Operator:  "<<"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "<<"
Text:  " "
Literal.String.Char:  "'<newline>'"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Operator:  "&"
Name:  "i"
Text:  " "
Operator:  ":"
Text:  " "
Punctuation:  "{"
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  "})"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "std"
Operator:  "::"
Name:  "cout"
Text:  " "
Operator:  "<<"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "<<"
Text:  " "
Literal.String.Char:  "'<newline>'"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// decltype"
Text:  "<newline>"
Keyword.Type:  "int"
Text:  " "
Name:  "num"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "decltype"
Punctuation:  "("
Name:  "num"
Punctuation:  ")"
Text:  " "
Name:  "total"
Text:  " "
Operator:  "="
Text:  " "
Name:  "num"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "struct"
Text:  " "
Name.Class:  "A"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword.Type:  "double"
Text:  " "
Name:  "x"
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "const"
Text:  " "
Name:  "A"
Text:  " "
Operator:  "*"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name:  "A"
Text:  " "
Punctuation:  "{"
Literal.Number.Integer:  "0"
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "decltype"
Punctuation:  "("
Name:  "a"
Operator:  "->"
Name:  "x"
Punctuation:  ")"
Text:  " "
Name:  "ax"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Operator:  "->"
Name:  "x"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// strongly typed enums"
Text:  "<newline>"
Keyword:  "enum"
Text:  " "
Keyword:  "class"
Text:  " "
Name.Class:  "Day"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "Mon"
Punctuation:  ","
Text:  " "
Name:  "Tue"
Punctuation:  ","
Text:  " "
Name:  "Wed"
Punctuation:  ","
Text:  " "
Name:  "Thur"
Punctuation:  ","
Text:  " "
Name:  "Fri"
Punctuation:  ","
Text:  " "
Name:  "Sat"
Punctuation:  ","
Text:  " "
Name:  "Sun"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline>"
Name:  "Day"
Text:  " "
Name:  "today"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Day"
Operator:  "::"
Name:  "Mon"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// lambda function"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "add"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]("
Keyword.Type:  "int"
Text:  " "
Name:  "x"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "y"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "y"
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "noParam"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "invokeNow"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]("
Keyword.Type:  "int"
Text:  " "
Name:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "*"
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  ";"
Text:  " "
Punctuation:  "}("
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>"
Keyword.Type:  "int"
Text:  " "
Name:  "captureMe"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "byCopy"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Name:  "captureMe"
Punctuation:  "]"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "captureMe"
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "byRef"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Operator:  "&"
Name:  "captureMe"
Punctuation:  "]"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "captureMe"
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "allByCopy"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Operator:  "="
Punctuation:  "]"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "captureMe"
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "allByRef"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Operator:  "&"
Punctuation:  "]"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "captureMe"
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "auto"
Text:  " "
Name:  "increment"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Name:  "y"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "]("
Keyword.Type:  "int"
Text:  " "
Name:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "y"
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword.Type:  "double"
Text:  " "
Name:  "distance"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]("
Keyword.Type:  "double"
Text:  " "
Name:  "x"
Punctuation:  ","
Text:  " "
Keyword.Type:  "double"
Text:  " "
Name:  "y"
Punctuation:  ","
Text:  " "
Keyword.Type:  "double"
Text:  " "
Name:  "xx"
Punctuation:  ","
Text:  " "
Keyword.Type:  "double"
Text:  " "
Name:  "yy"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "double"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "return"
Text:  " "
Name:  "abs"
Punctuation:  "("
Name:  "x"
Operator:  "-"
Name:  "xx"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "abs"
Punctuation:  "("
Name:  "y"
Operator:  "-"
Name:  "yy"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Single:  "// templates"
Text:  "<newline>"
Keyword:  "namespace"
Text:  " "
Name:  "N"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "template"
Operator:  "<"
Keyword:  "class"
Text:  " "
Name.Class:  "T"
Punctuation:  ">"
Text:  "<newline>    "
Keyword:  "class"
Text:  " "
Name.Class:  "Y"
Text:  " "
Comment.Single:  "// template definition"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword.Type:  "void"
Text:  " "
Name:  "mf"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "template"
Text:  " "
Keyword:  "class"
Text:  " "
Name.Class:  "N"
Operator:  "::"
Name:  "Y"
Operator:  "<"
Keyword.Type:  "char"
Operator:  "*"
Punctuation:  ">;"
Text:  "<newline>"
Keyword:  "template"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name:  "N"
Operator:  "::"
Name:  "Y"
Operator:  "<"
Keyword.Type:  "double"
Punctuation:  ">"
Operator:  "::"
Name:  "mf"
Punctuation:  "();"
Text:  "<newline>"
Keyword:  "template"
Text:  " "
Keyword:  "struct"
Text:  " "
Name.Class:  "Z"
Operator:  "<"
Keyword.Type:  "double"
Punctuation:  ">;"
Text:  "<newline>"
Keyword:  "template"
Operator:  "<"
Keyword:  "typename"
Text:  " "
Name.Class:  "T"
Punctuation:  ">"
Text:  " "
Keyword:  "concept"
Text:  " "
Name:  "C1"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "sizeof"
Punctuation:  "("
Name:  "T"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Keyword:  "sizeof"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "template"
Operator:  "<"
Name:  "C1"
Text:  " "
Name:  "T"
Punctuation:  ">"
Text:  " "
Keyword:  "struct"
Text:  " "
Name.Class:  "S1"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "template"
Operator:  "<"
Name:  "C1"
Text:  " "
Name:  "T"
Punctuation:  ">"
Text:  " "
Keyword:  "using"
Text:  " "
Name:  "Ptr"
Text:  " "
Operator:  "="
Text:  " "
Name:  "T"
Operator:  "*"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "template"
Text:  " "
Operator:  "<"
Keyword:  "typename"
Punctuation:  ","
Text:  " "
Keyword:  "typename"
Operator:  "..."
Punctuation:  ">"
Text:  "<newline>"
Keyword:  "template"
Operator:  "<"
Keyword:  "class"
Operator:  "..."
Punctuation:  ">"
Text:  " "
Keyword:  "struct"
Text:  " "
Name.Class:  "Tuple"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "template"
Operator:  "<"
Keyword:  "typename"
Text:  " "
Operator:  "..."
Name.Class:  "Ts"
Punctuation:  ">"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "f"
Punctuation:  "("
Name:  "Ts"
Punctuation:  "...)"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>"
Comment.Single:  "// variadic template"
Text:  "<newline>"
Keyword:  "template"
Operator:  "<"
Keyword:  "class"
Text:  " "
Name.Class:  "F"
Punctuation:  ","
Text:  " "
Keyword:  "class"
Operator:  "..."
Text:  " "
Name.Class:  "Args"
Punctuation:  ">"
Text:  "<newline>"
Keyword.Type:  "void"
Text:  " "
Name.Function:  "forward_args"
Punctuation:  "("
Name:  "F"
Text:  " "
Name:  "f"
Punctuation:  ","
Text:  " "
Name:  "Args"
Punctuation:  "..."
Text:  " "
Name:  "args"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "f"
Punctuation:  "("
Name:  "std"
Operator:  "::"
Name:  "forward"
Operator:  "<"
Name:  "Args"
Operator:  ">"
Punctuation:  "("
Name:  "args"
Punctuation:  ")...);"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// using auto"
Text:  "<newline>"
Keyword:  "template"
Operator:  "<"
Keyword:  "auto"
Text:  " "
Name:  "F"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "requires"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "foo"
Punctuation:  "();"
Text:  " "
Punctuation:  "}"
Operator:  ">"
Text:  "<newline>"
Keyword.Type:  "void"
Text:  " "
Name.Function:  "func"
Punctuation:  "();"
Text:  "<newline><newline>"
Keyword:  "template"
Operator:  "<"
Keyword:  "auto"
Text:  " "
Name:  "F"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]{}>"
Text:  "<newline>"
Keyword.Type:  "void"
Text:  " "
Name.Function:  "func"
Punctuation:  "();"
Text:  "<newline><newline>"
Comment.Single:  "// namespace"
Text:  "<newline>"
Keyword:  "namespace"
Text:  " "
Name:  "printing"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Reserved:  "inline"
Text:  " "
Keyword:  "namespace"
Text:  " "
Name:  "latest"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "using"
Text:  " "
Name:  "std"
Operator:  "::"
Name:  "cout"
Punctuation:  ";"
Text:  "<newline>        "
Keyword.Type:  "void"
Text:  " "
Name:  "print"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "cout"
Text:  " "
Operator:  "<<"
Text:  " "
Literal.String:  "\"Latest print"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>     "
Punctuation:  "}"
Text:  "<newline>     "
Keyword:  "namespace"
Text:  " "
Name:  "old"
Text:  " "
Punctuation:  "{"
Text:  "<newline>          "
Keyword.Type:  "void"
Text:  " "
Name:  "print"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>              "
Operator:  "::"
Name:  "printf"
Punctuation:  "("
Literal.String:  "\"Old print"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ");"
Text:  "<newline>          "
Punctuation:  "}"
Text:  "<newline>     "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Name:  "printing"
Operator:  "::"
Name:  "print"
Punctuation:  "();"
Text:  "<newline>"
Name:  "printing"
Operator:  "::"
Name:  "latest"
Operator:  "::"
Name:  "print"
Punctuation:  "();"
Text:  "<newline>"
Name:  "printing"
Operator:  "::"
Name:  "old"
Operator:  "::"
Name:  "print"
Punctuation:  "();"
Text:  "<newline>"
Keyword:  "namespace"
Text:  " "
Name:  "oldPrint"
Text:  " "
Operator:  "="
Text:  " "
Name:  "printing"
Operator:  "::"
Name:  "old"
Punctuation:  ";"
Text:  "<newline>"
Name:  "oldPrint"
Operator:  "::"
Name:  "print"
Punctuation:  "();"
Text:  "<newline><newline>"
Comment.Single:  "// attribute"
Text:  "<newline>"
Punctuation:  "[["
Name:  "noreturn"
Punctuation:  "]]"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "throwError"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "throw"
Text:  " "
Literal.String:  "\"error\""
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "[["
Name:  "deprecated"
Punctuation:  "("
Literal.String:  "\"useless\""
Punctuation:  ")]]"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "doNothing"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>"
Keyword:  "namespace"
Text:  " "
Name:  "std"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "class"
Text:  " "
Name.Class:  "thread"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Label:  "public:"
Text:  "<newline>        "
Comment.Single:  "// types:"
Text:  "<newline>        "
Keyword:  "class"
Text:  " "
Name.Class:  "id"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "typedef"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Operator:  "*"
Name:  "native_handle_type"
Punctuation:  ";"
Text:  "<newline><newline>        "
Comment.Single:  "// construct/copy/destroy:"
Text:  "<newline>        "
Keyword.Reserved:  "thread"
Punctuation:  "()"
Text:  " "
Keyword:  "noexcept"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "template"
Text:  " "
Operator:  "<"
Keyword:  "class"
Text:  " "
Name.Class:  "F"
Punctuation:  ","
Text:  " "
Keyword:  "class"
Text:  " "
Operator:  "..."
Name.Class:  "Args"
Punctuation:  ">"
Text:  " "
Keyword:  "explicit"
Text:  " "
Keyword.Reserved:  "thread"
Punctuation:  "("
Name:  "F"
Operator:  "&&"
Text:  " "
Name:  "f"
Punctuation:  ","
Text:  " "
Name:  "Args"
Operator:  "&&"
Punctuation:  "..."
Text:  " "
Name:  "args"
Punctuation:  ");"
Text:  "<newline>        "
Operator:  "~"
Keyword.Reserved:  "thread"
Punctuation:  "();"
Text:  "<newline>        "
Keyword.Reserved:  "thread"
Punctuation:  "("
Keyword:  "const"
Text:  " "
Keyword.Reserved:  "thread"
Operator:  "&"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "delete"
Punctuation:  ";"
Text:  "<newline>        "
Keyword.Reserved:  "thread"
Punctuation:  "("
Keyword.Reserved:  "thread"
Operator:  "&&"
Punctuation:  ")"
Text:  " "
Keyword:  "noexcept"
Punctuation:  ";"
Text:  "<newline>        "
Keyword.Reserved:  "thread"
Operator:  "&"
Text:  " "
Keyword:  "operator"
Operator:  "="
Punctuation:  "("
Keyword:  "const"
Text:  " "
Keyword.Reserved:  "thread"
Operator:  "&"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "delete"
Punctuation:  ";"
Text:  "<newline>        "
Keyword.Reserved:  "thread"
Operator:  "&"
Text:  " "
Keyword:  "operator"
Operator:  "="
Punctuation:  "("
Keyword.Reserved:  "thread"
Operator:  "&&"
Punctuation:  ")"
Text:  " "
Keyword:  "noexcept"
Punctuation:  ";"
Text:  "<newline><newline>        "
Comment.Single:  "// members:"
Text:  "<newline>        "
Keyword.Type:  "void"
Text:  " "
Name:  "swap"
Punctuation:  "("
Keyword.Reserved:  "thread"
Operator:  "&"
Punctuation:  ")"
Text:  " "
Keyword:  "noexcept"
Punctuation:  ";"
Text:  "<newline>        "
Keyword.Type:  "bool"
Text:  " "
Name:  "joinable"
Punctuation:  "()"
Text:  " "
Keyword:  "const"
Text:  " "
Keyword:  "noexcept"
Punctuation:  ";"
Text:  "<newline>        "
Keyword.Type:  "void"
Text:  " "
Name:  "join"
Punctuation:  "();"
Text:  "<newline>        "
Keyword.Type:  "void"
Text:  " "
Name:  "detach"
Punctuation:  "();"
Text:  "<newline>        "
Name:  "id"
Text:  " "
Name:  "get_id"
Punctuation:  "()"
Text:  " "
Keyword:  "const"
Text:  " "
Keyword:  "noexcept"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "native_handle_type"
Text:  " "
Name:  "native_handle"
Punctuation:  "();"
Text:  "<newline><newline>        "
Comment.Single:  "// static members:"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword.Type:  "unsigned"
Text:  " "
Name:  "hardware_concurrency"
Punctuation:  "()"
Text:  " "
Keyword:  "noexcept"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// try-block"
Text:  "<newline>"
Keyword:  "try"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "throw"
Text:  " "
Name:  "std"
Operator:  "::"
Name:  "runtime_error"
Punctuation:  "("
Literal.String:  "\"Runtime error!\""
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "catch"
Text:  " "
Punctuation:  "("
Name:  "std"
Operator:  "::"
Name:  "exception"
Operator:  "&"
Text:  " "
Name:  "e"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "std"
Operator:  "::"
Name:  "cerr"
Text:  " "
Operator:  "<<"
Text:  " "
Name:  "e"
Punctuation:  "."
Name:  "what"
Punctuation:  "()"
Text:  " "
Operator:  "<<"
Text:  " "
Name:  "std"
Operator:  "::"
Name:  "endl"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "constexpr"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Function:  "factorial"
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "n"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "n"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "?"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "*"
Text:  " "
Name:  "factorial"
Punctuation:  "("
Name:  "n"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* foo */"
Text:  " "
Comment:  "#if 0<newline>    this is commented<newline>#endif<newline>"
Text:  "<newline>"
Comment.Multiline:  "/* it shouldn't hang */"
Text:  "        "
Comment.Multiline:  "/* trying to lex this */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"ahg/awn/xan?\",     HB_TAG('A','G','W',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Agaw */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"gsw?/gsw-FR?\",     HB_TAG('A','L','S',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Alsatian */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"krc\",      HB_TAG('B','A','L',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Balkar */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"??\",       HB_TAG('B','C','R',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Bible Cree */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"sgw?\",     HB_TAG('C','H','G',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Chaha Gurage */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"acf/gcf?\", HB_TAG('F','A','N',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* French Antillean */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"vls/nl-be\",        HB_TAG('F','L','E',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Flemish */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"enf?/yrk?\",        HB_TAG('F','N','E',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Forest Nenets */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"fuf?\",     HB_TAG('F','T','A',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Futa */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"ar-Syrc?\", HB_TAG('G','A','R',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Garshuni */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"cfm/rnl?\", HB_TAG('H','A','L',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Halam */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"ga-Latg?/Latg?\",   HB_TAG('I','R','T',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Irish Traditional */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"krc\",      HB_TAG('K','A','R',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Karachay */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"alw?/ktb?\",        HB_TAG('K','E','B',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Kebena */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"Geok\",     HB_TAG('K','G','E',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Khutsuri Georgian */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"kca\",      HB_TAG('K','H','K',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Khanty-Kazim */"
Text:  "<newline>"
Comment.Multiline:  "/*{\"kca\",      HB_TAG('K','H','S',' ')},*/"
Text:  "     "
Comment.Multiline:  "/* Khanty-Shurishkar */"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Base"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>"
Name.Label:  "public:"
Text:  "<newline>    "
Name:  "Base"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "default"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "virtual"
Text:  " "
Operator:  "~"
Name:  "Base"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "default"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "virtual"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name:  "foo"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Derived"
Text:  " "
Keyword:  "final"
Text:  " "
Operator:  ":"
Text:  " "
Keyword:  "public"
Text:  " "
Name:  "Base"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>"
Name.Label:  "public:"
Text:  "<newline>    "
Name:  "Derived"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "default"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "virtual"
Text:  " "
Operator:  "~"
Name:  "Derived"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "default"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "virtual"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name:  "foo"
Text:  " "
Punctuation:  "()"
Text:  " "
Keyword:  "override"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "auto"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Preproc:  "#define foo bar<newline>#define baz zot<newline>"
Text:  "<newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Highlighter"
Text:  " "
Operator:  ":"
Text:  " "
Keyword:  "public"
Text:  " "
Name:  "QSyntaxHighlighter"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "class"
Text:  " "
Name.Class:  "InnerClass"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>    "
Name:  "Q_OBJECT"
Text:  "<newline><newline>"
Keyword:  "public"
Operator:  ":"
Text:  "<newline>    "
Name:  "Highlighter"
Punctuation:  "("
Name:  "QTextDocument"
Text:  " "
Operator:  "*"
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "protected"
Operator:  ":"
Text:  "<newline>    "
Keyword.Type:  "void"
Text:  " "
Name.Function:  "highlightBlock"
Punctuation:  "("
Keyword:  "const"
Text:  " "
Name:  "QString"
Text:  " "
Operator:  "&"
Name:  "text"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "private"
Operator:  ":"
Text:  "<newline>    "
Keyword:  "struct"
Text:  " "
Name.Class:  "HighlightingRule"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "QRegExp"
Text:  " "
Name:  "pattern"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "QTextCharFormat"
Text:  " "
Name:  "format"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline>    "
Name:  "QVector"
Operator:  "<"
Name:  "HighlightingRule"
Operator:  ">"
Text:  " "
Name:  "highlightingRules"
Punctuation:  ";"
Text:  "<newline><newline>    "
Name:  "QRegExp"
Text:  " "
Name:  "commentStartExpression"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "QRegExp"
Text:  " "
Name:  "commentEndExpression"
Punctuation:  ";"
Text:  "<newline><newline>    "
Name:  "QTextCharFormat"
Text:  " "
Name:  "keywordFormat"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "QTextCharFormat"
Text:  " "
Name:  "classFormat"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "QTextCharFormat"
Text:  " "
Name:  "singleLineCommentFormat"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "QTextCharFormat"
Text:  " "
Name:  "multiLineCommentFormat"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "QTextCharFormat"
Text:  " "
Name:  "quotationFormat"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "QTextCharFormat"
Text:  " "
Name:  "functionFormat"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "foo"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Name:  "Foo"
Operator:  "::"
Name:  "kBar"
Punctuation:  ":"
Text:  "<newline>        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
