Comment.Single:  "# Examples taken from http://crystal-lang.org/docs/"
Text:  "<newline>"
Comment.Single:  "# Copyright 2012-2018 Manas Technology Solutions."
Text:  "<newline>"
Comment.Single:  "# Based on the sample in the Pygments project (github.com/pygments/pygments)"
Text:  "<newline><newline>"
Comment.Single:  "## Constants"
Text:  "<newline><newline>"
Name.Constant:  "LUCKY_NUMBERS"
Text:  "     "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "7"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "11"
Punctuation:  "]"
Text:  "<newline>"
Name.Constant:  "DOCUMENTATION_URL"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"http://crystal-lang.org/docs\""
Text:  "<newline><newline>"
Comment.Single:  "## Assignments"
Text:  "<newline><newline>"
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>"
Name:  "items"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Items"
Punctuation:  "."
Name.Function:  "new"
Text:  "<newline>"
Name:  "channel"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Channel"
Punctuation:  "("
Name.Constant:  "Int32"
Punctuation:  ")."
Name.Function:  "new"
Punctuation:  "("
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  " "
Keyword:  "of"
Text:  " "
Name.Constant:  "Person"
Text:  "<newline>"
Name.Builtin:  "hash"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{}"
Text:  " "
Keyword:  "of"
Text:  " "
Name.Constant:  "Int32"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Constant:  "String"
Text:  "<newline>"
Name:  "nest"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Punctuation:  "["
Literal.String.Double:  "\"b\""
Punctuation:  ","
Text:  " "
Punctuation:  "["
Literal.String.Symbol:  ":c"
Punctuation:  ","
Text:  " "
Punctuation:  "["
Literal.String.Single:  "'d'"
Punctuation:  "]]]]"
Text:  "<newline><newline>"
Comment.Single:  "## Require statements"
Text:  "<newline><newline>"
Name.Builtin:  "require"
Text:  " "
Literal.String.Double:  "\"http/server\""
Text:  "<newline><newline>"
Comment.Single:  "## Blocks"
Text:  "<newline><newline>"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Punctuation:  "."
Name.Function:  "map"
Text:  " "
Punctuation:  "{"
Text:  " "
Operator:  "|"
Name:  "f"
Operator:  "|"
Text:  " "
Name:  "f"
Punctuation:  "."
Name.Function:  "name"
Text:  " "
Punctuation:  "}"
Text:  " "
Comment.Single:  "# Error: can't infer block return type"
Text:  "<newline><newline>"
Name:  "spawn"
Text:  " "
Keyword:  "do"
Text:  "<newline>  "
Name:  "channel"
Punctuation:  "."
Name.Function:  "send"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "channel"
Punctuation:  "."
Name.Function:  "send"
Punctuation:  "("
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "channel"
Punctuation:  "."
Name.Function:  "send"
Punctuation:  "("
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Literal.Number.Integer:  "3"
Punctuation:  "."
Name.Function:  "times"
Text:  " "
Keyword:  "do"
Text:  " "
Operator:  "|"
Name:  "i"
Operator:  "|"
Text:  "<newline>  "
Name.Builtin:  "puts"
Text:  " "
Name:  "channel"
Punctuation:  "."
Name.Function:  "receive"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name:  "server"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "HTTP"
Operator:  "::"
Name.Constant:  "Server"
Punctuation:  "."
Name.Function:  "new"
Punctuation:  "("
Literal.Number.Integer:  "8080"
Punctuation:  ")"
Text:  " "
Keyword:  "do"
Text:  " "
Operator:  "|"
Name:  "context"
Operator:  "|"
Text:  "<newline>  "
Name:  "context"
Punctuation:  "."
Name.Function:  "response"
Punctuation:  "."
Name.Function:  "content_type"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"text/plain\""
Text:  "<newline>  "
Name:  "context"
Punctuation:  "."
Name.Function:  "response"
Punctuation:  "."
Name.Function:  "print"
Text:  " "
Literal.String.Double:  "\"Hello world! The time is "
Literal.String.Interpol:  "\#{"
Name.Constant:  "Time"
Punctuation:  "."
Name.Function:  "now"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "## Loops"
Text:  "<newline><newline>"
Keyword:  "while"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>  "
Name.Builtin:  "proc"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "->"
Punctuation:  "("
Name:  "x"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Int32"
Punctuation:  ")"
Text:  " "
Keyword:  "do"
Text:  "<newline>    "
Name:  "spawn"
Text:  " "
Keyword:  "do"
Text:  "<newline>      "
Name.Builtin:  "puts"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "end"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>  "
Name.Builtin:  "proc"
Punctuation:  "."
Name.Function:  "call"
Punctuation:  "("
Name:  "i"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "i"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "until"
Text:  " "
Name:  "some_condition"
Text:  "<newline>  "
Name:  "do_this"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "## Module definitions"
Text:  "<newline><newline>"
Keyword:  "module"
Text:  " "
Name.Namespace:  "HTTP"
Text:  "<newline>  "
Keyword:  "class"
Text:  " "
Name.Class:  "RequestHandler"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "module"
Text:  " "
Name.Namespace:  "Base64"
Text:  "<newline>  "
Keyword.Pseudo:  "extend"
Text:  " "
Name.Builtin:  "self"
Text:  "<newline><newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "encode64"
Punctuation:  "("
Name:  "string"
Punctuation:  ")"
Text:  "<newline>    "
Comment.Single:  "# ..."
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "module"
Text:  " "
Name.Namespace:  "Moo"
Punctuation:  "("
Name.Constant:  "T"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "t"
Text:  "<newline>    "
Name.Constant:  "T"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "module"
Text:  " "
Name.Namespace:  "Money"
Text:  "<newline>  "
Name.Constant:  "CURRENCIES"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Literal.String.Double:  "\"EUR\""
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Float:  "1.0"
Punctuation:  ","
Text:  "<newline>    "
Literal.String.Double:  "\"ARS\""
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Float:  "10.55"
Punctuation:  ","
Text:  "<newline>    "
Literal.String.Double:  "\"USD\""
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Float:  "1.12"
Punctuation:  ","
Text:  "<newline>    "
Literal.String.Double:  "\"JPY\""
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Float:  "134.15"
Punctuation:  ","
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Keyword:  "class"
Text:  " "
Name.Class:  "Amount"
Text:  "<newline>    "
Keyword.Pseudo:  "getter"
Text:  " "
Literal.String.Symbol:  ":currency"
Punctuation:  ","
Text:  " "
Literal.String.Symbol:  ":value"
Text:  "<newline><newline>    "
Keyword:  "def"
Text:  " "
Name.Function:  "initialize"
Punctuation:  "("
Name.Variable.Instance:  "@currency"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@value"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "end"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline><newline>  "
Keyword:  "class"
Text:  " "
Name.Class:  "CurrencyConversion"
Text:  "<newline>    "
Keyword:  "def"
Text:  " "
Name.Function:  "initialize"
Punctuation:  "("
Name.Variable.Instance:  "@amount"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@target_currency"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "end"
Text:  "<newline><newline>    "
Keyword:  "def"
Text:  " "
Name.Function:  "amount"
Text:  "<newline>      "
Comment.Single:  "# implement conversion ..."
Text:  "<newline>    "
Keyword:  "end"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "## Class definitions"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Greeting"
Text:  "<newline>  "
Name:  "class_property"
Text:  " "
Name:  "global_greeting"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Hello world\""
Text:  "<newline><newline>  "
Name.Variable.Class:  "@@default_greeting"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Hello world\""
Text:  "<newline><newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "initialize"
Punctuation:  "("
Name.Variable.Instance:  "@custom_greeting"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Pseudo:  "nil"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline><newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "print_greeting"
Text:  "<newline>    "
Name:  "greeting"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@custom_greeting"
Text:  " "
Operator:  "||"
Text:  " "
Name.Variable.Class:  "@@default_greeting"
Text:  "<newline>    "
Name.Builtin:  "puts"
Text:  " "
Name:  "greeting"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "MyArray"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "[]"
Punctuation:  "("
Name:  "index"
Punctuation:  ")"
Text:  "<newline>    "
Comment.Single:  "# ..."
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline><newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "[]"
Punctuation:  "("
Name:  "index1"
Punctuation:  ","
Text:  " "
Name:  "index2"
Punctuation:  ","
Text:  " "
Name:  "index3"
Punctuation:  ")"
Text:  "<newline>    "
Comment.Single:  "# ..."
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline><newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "[]="
Punctuation:  "("
Name:  "index"
Punctuation:  ","
Text:  " "
Name:  "value"
Punctuation:  ")"
Text:  "<newline>    "
Comment.Single:  "# ..."
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "MyDictionary"
Punctuation:  "("
Name.Constant:  "K"
Punctuation:  ","
Text:  " "
Name.Constant:  "V"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Foo"
Punctuation:  "("
Name.Constant:  "U"
Punctuation:  ")"
Text:  "<newline>  "
Keyword.Pseudo:  "include"
Text:  " "
Name.Constant:  "Moo"
Punctuation:  "("
Name.Constant:  "U"
Punctuation:  ")"
Text:  "<newline><newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "initialize"
Punctuation:  "("
Name.Variable.Instance:  "@value"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "U"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Int32Child"
Text:  " "
Operator:  "<"
Text:  " "
Name.Constant:  "Parent"
Punctuation:  "("
Name.Constant:  "Int32"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Global"
Text:  "<newline>  "
Name:  "class_property"
Text:  " "
Name:  "global1"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>  "
Name:  "class_getter"
Text:  " "
Name:  "global2"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "2"
Text:  "<newline>  "
Name:  "class_setter"
Text:  " "
Name:  "global3"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "3"
Text:  "<newline><newline>  "
Comment.Single:  "# Fails on nil"
Text:  "<newline>  "
Name:  "class_property!"
Text:  " "
Name:  "global4"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "4"
Text:  "<newline>  "
Name:  "class_getter!"
Text:  " "
Name:  "global5"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "5"
Text:  "<newline>  "
Name:  "class_setter!"
Text:  " "
Name:  "global6"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "6"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Testing"
Text:  "<newline>  "
Comment.Single:  "# Assigns to an instance variable"
Text:  "<newline>  "
Name.Variable.Instance:  "@instance"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "2"
Text:  "<newline><newline>  "
Comment.Single:  "# Assigns to a class variable"
Text:  "<newline>  "
Name.Variable.Class:  "@@class"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "3"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name:  "abstract"
Text:  " "
Keyword:  "class"
Text:  " "
Name.Class:  "Animal"
Text:  "<newline>  "
Comment.Single:  "# Makes this animal talk"
Text:  "<newline>  "
Name:  "abstract"
Text:  " "
Keyword:  "def"
Text:  " "
Name.Function:  "talk"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "## Struct definitions"
Text:  "<newline><newline>"
Keyword.Pseudo:  "struct"
Text:  " "
Name.Constant:  "Vector2"
Text:  "<newline>  "
Keyword.Pseudo:  "getter"
Text:  " "
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "y"
Text:  "<newline><newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "initialize"
Punctuation:  "("
Name.Variable.Instance:  "@x"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@y"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline><newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "+"
Punctuation:  "("
Name:  "other"
Punctuation:  ")"
Text:  "<newline>    "
Name.Constant:  "Vector2"
Punctuation:  "."
Name.Function:  "new"
Punctuation:  "("
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "other"
Punctuation:  "."
Name.Function:  "x"
Punctuation:  ","
Text:  " "
Name:  "y"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "other"
Punctuation:  "."
Name.Function:  "y"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword.Pseudo:  "struct"
Text:  " "
Name.Constant:  "Vector2"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "-"
Text:  "<newline>    "
Name.Constant:  "Vector2"
Punctuation:  "."
Name.Function:  "new"
Punctuation:  "("
Operator:  "-"
Name:  "x"
Punctuation:  ","
Text:  " "
Operator:  "-"
Name:  "y"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "## Library definitions"
Text:  "<newline><newline>"
Keyword:  "lib"
Text:  " "
Name.Constant:  "C"
Text:  "<newline>  "
Comment.Single:  "# In C: double cos(double x)"
Text:  "<newline>  "
Keyword:  "fun"
Text:  " "
Name:  "cos"
Punctuation:  "("
Name:  "value"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Float64"
Punctuation:  ")"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Float64"
Text:  "<newline><newline>  "
Keyword:  "fun"
Text:  " "
Name:  "getch"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Int32"
Text:  "<newline><newline>  "
Keyword:  "fun"
Text:  " "
Name.Builtin:  "srand"
Punctuation:  "("
Name:  "seed"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "UInt32"
Punctuation:  ")"
Text:  "<newline><newline>  "
Keyword:  "fun"
Text:  " "
Name.Builtin:  "exit"
Punctuation:  "("
Name:  "status"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Int32"
Punctuation:  ")"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "NoReturn"
Text:  "<newline><newline>  "
Keyword:  "fun"
Text:  " "
Name.Builtin:  "printf"
Punctuation:  "("
Name.Builtin:  "format"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "UInt8"
Operator:  "*"
Punctuation:  ","
Text:  " "
Operator:  "..."
Punctuation:  ")"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Int32"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name.Decorator:  "@[Link(\"pcre\")]"
Text:  "<newline>"
Keyword:  "lib"
Text:  " "
Name.Constant:  "LibPCRE"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "lib"
Text:  " "
Name.Constant:  "LibFoo"
Text:  "<newline>  "
Keyword:  "fun"
Text:  " "
Name:  "store_callback"
Punctuation:  "("
Name:  "callback"
Text:  " "
Punctuation:  ":"
Text:  " "
Operator:  "->"
Punctuation:  ")"
Text:  "<newline><newline>  "
Name.Decorator:  "@[Raises]"
Text:  "<newline>  "
Keyword:  "fun"
Text:  " "
Name:  "execute_callback"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "lib"
Text:  " "
Name.Constant:  "C"
Text:  "<newline>  "
Punctuation:  "{%"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "flag?"
Punctuation:  "("
Literal.String.Symbol:  ":x86_64"
Punctuation:  ")"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>    "
Keyword:  "alias"
Text:  " "
Name.Constant:  "SizeT"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "UInt64"
Text:  "<newline>  "
Punctuation:  "{%"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>    "
Keyword:  "alias"
Text:  " "
Name.Constant:  "SizeT"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "UInt32"
Text:  "<newline>  "
Punctuation:  "{%"
Text:  " "
Keyword:  "end"
Text:  " "
Punctuation:  "%}"
Text:  "<newline><newline>  "
Keyword:  "fun"
Text:  " "
Name:  "memcmp"
Punctuation:  "("
Name:  "p1"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Void"
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "p2"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Void"
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "size"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "C"
Operator:  "::"
Name.Constant:  "SizeT"
Punctuation:  ")"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Int32"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "lib"
Text:  " "
Name.Constant:  "U"
Text:  "<newline>  "
Name:  "union"
Text:  " "
Name.Constant:  "IntOrFloat"
Text:  "<newline>    "
Name:  "some_int"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Int32"
Text:  "<newline>    "
Name:  "some_float"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Float64"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "## Aliase declarations"
Text:  "<newline><newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "NumericValue"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Float32"
Text:  " "
Operator:  "|"
Text:  " "
Name.Constant:  "Float64"
Text:  " "
Operator:  "|"
Text:  " "
Name.Constant:  "Int32"
Text:  " "
Operator:  "|"
Text:  " "
Name.Constant:  "Int64"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "Int32OrNil"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Int32"
Punctuation:  "?"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "Int32OrNil_"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Int32"
Text:  " "
Operator:  "|"
Text:  " "
Operator:  "::"
Name.Constant:  "Nil"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "Int32Ptr"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Int32"
Operator:  "*"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "Int32Ptr_"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Pointer"
Punctuation:  "("
Name.Constant:  "Int32"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "Int32_8"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Int32"
Punctuation:  "["
Literal.Number.Integer:  "8"
Punctuation:  "]"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "Int32_8_"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "StaticArray"
Punctuation:  "("
Name.Constant:  "Int32"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "8"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "Int32StringTuple"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name.Constant:  "Int32"
Punctuation:  ","
Text:  " "
Name.Constant:  "String"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "Int32StringTuple_"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Tuple"
Punctuation:  "("
Name.Constant:  "Int32"
Punctuation:  ","
Text:  " "
Name.Constant:  "String"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "Int32ToString"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Int32"
Text:  " "
Operator:  "->"
Text:  " "
Name.Constant:  "String"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "Int32ToString_"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Proc"
Punctuation:  "("
Name.Constant:  "Int32"
Punctuation:  ","
Text:  " "
Name.Constant:  "String"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "ProcThatReturnsInt32"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "->"
Text:  " "
Name.Constant:  "Int32"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "Int32AndCharToString"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Int32"
Punctuation:  ","
Text:  " "
Name.Constant:  "Char"
Text:  " "
Operator:  "->"
Text:  " "
Name.Constant:  "String"
Text:  "<newline>"
Keyword:  "alias"
Text:  " "
Name.Constant:  "ComplexProc"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name.Constant:  "Int32"
Text:  " "
Operator:  "->"
Text:  " "
Name.Constant:  "Int32"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Name.Constant:  "String"
Text:  "<newline><newline>"
Comment.Single:  "## Enum declarations"
Text:  "<newline><newline>"
Name:  "enum"
Text:  " "
Name.Constant:  "Time"
Operator:  "::"
Name.Constant:  "DayOfWeek"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name:  "enum"
Text:  " "
Name.Constant:  "Color"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "UInt8"
Text:  "<newline>  "
Name.Constant:  "Red"
Text:  "        "
Comment.Single:  "# 0"
Text:  "<newline>  "
Name.Constant:  "Green"
Text:  "      "
Comment.Single:  "# 1"
Text:  "<newline>  "
Name.Constant:  "Blue"
Text:  "   "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Comment.Single:  "# overwritten to 5"
Text:  "<newline>  "
Name.Constant:  "Yellow"
Text:  "     "
Comment.Single:  "# 6 (5 + 1)"
Text:  "<newline><newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "red?"
Text:  "<newline>    "
Name.Builtin:  "self"
Text:  " "
Operator:  "=="
Text:  " "
Name.Constant:  "Color"
Operator:  "::"
Name.Constant:  "Red"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name.Decorator:  "@[Flags]"
Text:  "<newline>"
Name:  "enum"
Text:  " "
Name.Constant:  "IOMode"
Text:  "<newline>  "
Name.Constant:  "Read"
Text:  "  "
Comment.Single:  "# 1"
Text:  "<newline>  "
Name.Constant:  "Write"
Text:  " "
Comment.Single:  "# 2"
Text:  "<newline>  "
Name.Constant:  "Async"
Text:  " "
Comment.Single:  "# 4"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "## Method definitions"
Text:  "<newline><newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "foo"
Punctuation:  "("
Name:  "x"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Int32"
Punctuation:  ")"
Text:  "<newline>  "
Literal.String.Double:  "\"instance\""
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "foo"
Punctuation:  "("
Name:  "x"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Int32"
Punctuation:  "."
Name.Function:  "class"
Punctuation:  ")"
Text:  "<newline>  "
Literal.String.Double:  "\"class\""
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "foo"
Punctuation:  "("
Name:  "x"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "_"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "foo"
Punctuation:  "("
Name:  "x"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "_"
Punctuation:  ","
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name.Constant:  "Int32"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "some_proc"
Punctuation:  "("
Operator:  "&"
Name:  "block"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Int32"
Text:  " "
Operator:  "->"
Text:  " "
Name.Constant:  "Int32"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "block"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "twice"
Punctuation:  "("
Operator:  "&"
Name:  "block"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "yield"
Text:  "<newline>  "
Keyword:  "yield"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline><newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "paint"
Punctuation:  "("
Name:  "color"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Color"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "case"
Text:  " "
Name:  "color"
Text:  "<newline>  "
Keyword:  "when"
Text:  " "
Name.Constant:  "Color"
Operator:  "::"
Name.Constant:  "Red"
Text:  "<newline>    "
Comment.Single:  "# ..."
Text:  "<newline>  "
Keyword:  "else"
Text:  "<newline>    "
Comment.Single:  "# Unusual, but still can happen"
Text:  "<newline>    "
Keyword:  "raise"
Text:  " "
Literal.String.Double:  "\"unknown color: "
Literal.String.Interpol:  "\#{"
Name:  "color"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "counter"
Text:  "<newline>  "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>  "
Operator:  "->"
Punctuation:  "{"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  " "
Name:  "x"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "## Method calls"
Text:  "<newline><newline>"
Name.Builtin:  "puts"
Text:  " "
Literal.String.Double:  "\"Listening on http://0.0.0.0:8080\""
Text:  "<newline>"
Name:  "server"
Punctuation:  "."
Name.Function:  "listen"
Text:  "<newline>"
Name.Constant:  "Fiber"
Punctuation:  "."
Name.Function:  "yield"
Text:  "<newline>"
Name.Constant:  "Curses"
Operator:  "::"
Name.Constant:  "Window"
Punctuation:  "."
Name.Function:  "new"
Text:  "<newline>"
Name:  "foo"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "     "
Comment.Single:  "# \"instance\""
Text:  "<newline>"
Name:  "foo"
Text:  " "
Name.Constant:  "Int32"
Text:  " "
Comment.Single:  "# \"class\""
Text:  "<newline>"
Name:  "a"
Punctuation:  "."
Name.Function:  "+"
Punctuation:  "("
Name:  "b"
Punctuation:  ")"
Text:  "<newline>"
Name.Constant:  "C"
Punctuation:  "."
Name.Function:  "printf"
Text:  " "
Literal.String.Double:  "\"%d + %d = %d"
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "a"
Punctuation:  ","
Text:  " "
Name:  "b"
Punctuation:  ","
Text:  " "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Text:  "<newline><newline>"
Name:  "array"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "       "
Comment.Single:  "# invokes the first method"
Text:  "<newline>"
Name:  "array"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "]"
Text:  " "
Comment.Single:  "# invokes the second method"
Text:  "<newline>"
Name:  "array"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "2"
Text:  "   "
Comment.Single:  "# invokes the third method"
Text:  "<newline>"
Name:  "array"
Punctuation:  "["
Literal.Number.Integer:  "4"
Punctuation:  "]?"
Text:  " "
Comment.Single:  "# returns nil because of index out of bounds"
Text:  "<newline>"
Name:  "array"
Punctuation:  "."
Name.Function:  "["
Punctuation:  "]("
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "       "
Comment.Single:  "# invokes the first method"
Text:  "<newline>"
Name:  "array"
Punctuation:  "."
Name.Function:  "["
Punctuation:  "]("
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  " "
Comment.Single:  "# invokes the second method"
Text:  "<newline>"
Name:  "array"
Punctuation:  "."
Name.Function:  "["
Punctuation:  "]"
Operator:  "="
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "   "
Comment.Single:  "# invokes the third method"
Text:  "<newline><newline>"
Comment.Single:  "## Operators"
Text:  "<newline><newline>"
Name:  "john"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "another_john"
Text:  " "
Comment.Single:  "# => true"
Text:  "<newline><newline>"
Name:  "ary"
Text:  " "
Operator:  "<<"
Text:  " "
Name.Constant:  "Child1"
Text:  "<newline>"
Name:  "ary"
Text:  " "
Operator:  "<<"
Text:  " "
Name.Constant:  "Child2"
Text:  "<newline><newline>"
Name:  "local"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment.Single:  "# same as: local = local + 1"
Text:  "<newline>"
Name:  "local"
Text:  " "
Operator:  "||="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment.Single:  "# same as: local || (local = 1)"
Text:  "<newline>"
Name:  "local"
Text:  " "
Operator:  "&&="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment.Single:  "# same as: local && (local = 1)"
Text:  "<newline><newline>"
Name:  "x"
Operator:  ".."
Name:  "y"
Text:  "  "
Comment.Single:  "# an inclusive range, in mathematics: [x, y]"
Text:  "<newline>"
Name:  "x"
Operator:  "..."
Name:  "y"
Text:  " "
Comment.Single:  "# an exclusive range, in mathematics: [x, y)"
Text:  "<newline><newline>"
Comment.Single:  "## Conditionals"
Text:  "<newline><newline>"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name:  "some_condition"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String.Double:  "\"hello\""
Text:  "<newline>"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "4"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Name:  "some_condition"
Text:  "<newline>  "
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>"
Keyword:  "else"
Text:  "<newline>  "
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"hello\""
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Name:  "a"
Punctuation:  "."
Name.Function:  "is_a?"
Punctuation:  "("
Name.Constant:  "String"
Punctuation:  ")"
Text:  "<newline>  "
Comment.Single:  "# here a is a String"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Name:  "a"
Punctuation:  "."
Name.Function:  "is_a?"
Punctuation:  "("
Name.Constant:  "Number"
Punctuation:  ")"
Text:  "<newline>  "
Comment.Single:  "# a : Int32"
Text:  "<newline>"
Keyword:  "else"
Text:  "<newline>  "
Comment.Single:  "# a : String"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Name:  "some_condition"
Text:  "<newline>  "
Name:  "do_something"
Text:  "<newline>"
Keyword:  "elsif"
Text:  " "
Name:  "some_other_condition"
Text:  "<newline>  "
Name:  "do_something_else"
Text:  "<newline>"
Keyword:  "else"
Text:  "<newline>  "
Name:  "do_that"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Name:  "a"
Punctuation:  "."
Name.Function:  "is_a?"
Punctuation:  "("
Name.Constant:  "String"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "b"
Punctuation:  "."
Name.Function:  "is_a?"
Punctuation:  "("
Name.Constant:  "Number"
Punctuation:  ")"
Text:  "<newline>  "
Comment.Single:  "# here a is a String and b is a Number"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "unless"
Text:  " "
Name:  "some_condition"
Text:  "<newline>  "
Name:  "then_expression"
Text:  "<newline>"
Keyword:  "else"
Text:  "<newline>  "
Name:  "else_expression"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "some_condition"
Text:  "<newline>"
Name:  "close_door"
Text:  " "
Keyword:  "unless"
Text:  " "
Name:  "door_closed?"
Text:  "<newline><newline>"
Keyword:  "case"
Text:  " "
Name:  "exp"
Text:  "<newline>"
Keyword:  "when"
Text:  " "
Name:  "value1"
Punctuation:  ","
Text:  " "
Name:  "value2"
Text:  "<newline>  "
Name:  "do_something"
Text:  "<newline>"
Keyword:  "when"
Text:  " "
Name:  "value3"
Text:  "<newline>  "
Name:  "do_something_else"
Text:  "<newline>"
Keyword:  "else"
Text:  "<newline>  "
Name:  "do_another_thing"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "## Exceptions"
Text:  "<newline><newline>"
Keyword:  "raise"
Text:  " "
Literal.String.Double:  "\"OH NO!\""
Text:  "<newline>"
Keyword:  "raise"
Text:  " "
Name.Constant:  "Exception"
Punctuation:  "."
Name.Function:  "new"
Punctuation:  "("
Literal.String.Double:  "\"Some error\""
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "begin"
Text:  "<newline>  "
Keyword:  "raise"
Text:  " "
Name.Constant:  "MyException"
Punctuation:  "."
Name.Function:  "new"
Punctuation:  "("
Literal.String.Double:  "\"OH NO!\""
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "rescue"
Text:  " "
Name:  "ex"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "MyException"
Text:  "<newline>  "
Name.Builtin:  "puts"
Text:  " "
Literal.String.Double:  "\"Rescued MyException: "
Literal.String.Interpol:  "\#{"
Name:  "ex"
Punctuation:  "."
Name.Function:  "message"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "begin"
Text:  "<newline>  "
Comment.Single:  "# ..."
Text:  "<newline>"
Keyword:  "rescue"
Text:  " "
Name:  "ex"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "MyException"
Text:  " "
Operator:  "|"
Text:  " "
Name.Constant:  "MyOtherException"
Text:  "<newline>  "
Comment.Single:  "# only MyException or MyOtherException"
Text:  "<newline>"
Keyword:  "rescue"
Text:  "<newline>  "
Comment.Single:  "# any other kind of exception"
Text:  "<newline>"
Keyword:  "ensure"
Text:  "<newline>  "
Name.Builtin:  "puts"
Text:  " "
Literal.String.Double:  "\"Cleanup...\""
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "some_method"
Text:  "<newline>  "
Name:  "something_dangerous"
Text:  "<newline>"
Keyword:  "rescue"
Text:  "<newline>  "
Comment.Single:  "# execute if an exception is raised"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "## Procs"
Text:  "<newline><newline>"
Name.Builtin:  "proc"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "->"
Punctuation:  "("
Name:  "i"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Constant:  "Int32"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "+="
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Builtin:  "proc"
Text:  " "
Operator:  "="
Text:  " "
Name:  "some_proc"
Punctuation:  "("
Operator:  "&"
Name.Builtin:  "proc"
Punctuation:  ")"
Text:  "<newline>"
Name.Builtin:  "proc"
Punctuation:  "."
Name.Function:  "call"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "  "
Comment.Single:  "# => 1"
Text:  "<newline>"
Name:  "adder"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "->"
Name:  "add"
Punctuation:  "("
Name.Constant:  "Int32"
Punctuation:  ","
Text:  " "
Name.Constant:  "Int32"
Punctuation:  ")"
Text:  "<newline>"
Name:  "adder"
Punctuation:  "."
Name.Function:  "call"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  " "
Comment.Single:  "# => 3"
Text:  "<newline>"
Name:  "twice"
Text:  " "
Operator:  "&"
Name.Builtin:  "proc"
Text:  "<newline>"
Name:  "twice"
Text:  " "
Operator:  "&->"
Punctuation:  "{"
Text:  " "
Name.Builtin:  "puts"
Text:  " "
Literal.String.Double:  "\"Hello\""
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "## Macros"
Text:  "<newline><newline>"
Punctuation:  "{%"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "flag?"
Punctuation:  "("
Literal.String.Symbol:  ":x86_64"
Punctuation:  ")"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>  "
Comment.Single:  "# some specific code for 64 bits platforms"
Text:  "<newline>"
Punctuation:  "{%"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>  "
Comment.Single:  "# some specific code for non-64 bits platforms"
Text:  "<newline>"
Punctuation:  "{%"
Text:  " "
Keyword:  "end"
Text:  " "
Punctuation:  "%}"
Text:  "<newline><newline>"
Punctuation:  "{%"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "flag?"
Punctuation:  "("
Literal.String.Symbol:  ":linux"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "flag?"
Punctuation:  "("
Literal.String.Symbol:  ":x86_64"
Punctuation:  ")"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>  "
Comment.Single:  "# some specific code for linux 64 bits"
Text:  "<newline>"
Punctuation:  "{%"
Text:  " "
Keyword:  "end"
Text:  " "
Punctuation:  "%}"
Text:  "<newline><newline>"
Punctuation:  "{%"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "env"
Punctuation:  "("
Literal.String.Double:  "\"TEST\""
Punctuation:  ")"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>  "
Name.Builtin:  "puts"
Text:  " "
Literal.String.Double:  "\"We are in test mode\""
Text:  "<newline>"
Punctuation:  "{%"
Text:  " "
Keyword:  "end"
Text:  " "
Punctuation:  "%}"
Text:  "<newline><newline>"
Keyword:  "macro"
Text:  " "
Name.Function:  "fresh_vars_sample"
Punctuation:  "("
Operator:  "*"
Name:  "names"
Punctuation:  ")"
Text:  "<newline>  "
Comment.Single:  "# First declare vars"
Text:  "<newline>  "
Punctuation:  "{%"
Text:  " "
Keyword:  "for"
Text:  " "
Name.Builtin:  "name"
Punctuation:  ","
Text:  " "
Name:  "index"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "names"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>    "
Name.Builtin:  "print"
Text:  " "
Literal.String.Double:  "\"Declaring: \""
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\"%name{index}\""
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'"
Literal.String.Escape:  "<newline>"
Literal.String.Single:  "'"
Text:  "<newline>    "
Operator:  "%"
Name.Builtin:  "name"
Punctuation:  "{"
Name:  "index"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{{"
Name:  "index"
Punctuation:  "}}"
Text:  "<newline>  "
Punctuation:  "{%"
Text:  " "
Keyword:  "end"
Text:  " "
Punctuation:  "%}"
Text:  "<newline><newline>  "
Comment.Single:  "# Then print them"
Text:  "<newline>  "
Punctuation:  "{%"
Text:  " "
Keyword:  "for"
Text:  " "
Name.Builtin:  "name"
Punctuation:  ","
Text:  " "
Name:  "index"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "names"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>    "
Name.Builtin:  "print"
Text:  " "
Literal.String.Double:  "\"%name{index}: \""
Punctuation:  ","
Text:  " "
Operator:  "%"
Name.Builtin:  "name"
Punctuation:  "{"
Name:  "index"
Punctuation:  "},"
Text:  " "
Literal.String.Single:  "'"
Literal.String.Escape:  "<newline>"
Literal.String.Single:  "'"
Text:  "<newline>  "
Punctuation:  "{%"
Text:  " "
Keyword:  "end"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "macro"
Text:  " "
Name.Function:  "method_missing"
Punctuation:  "("
Name.Builtin:  "name"
Punctuation:  ","
Text:  " "
Name:  "args"
Punctuation:  ","
Text:  " "
Name:  "block"
Punctuation:  ")"
Text:  "<newline>  "
Name.Builtin:  "print"
Text:  " "
Literal.String.Double:  "\"Got \""
Punctuation:  ","
Text:  " "
Punctuation:  "{{"
Name.Builtin:  "name"
Punctuation:  "."
Name.Function:  "id"
Punctuation:  "."
Name.Function:  "stringify"
Punctuation:  "}},"
Text:  " "
Literal.String.Double:  "\" with \""
Punctuation:  ","
Text:  " "
Punctuation:  "{{"
Name:  "args"
Punctuation:  "."
Name.Function:  "size"
Punctuation:  "}},"
Text:  " "
Literal.String.Double:  "\" arguments\""
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'"
Literal.String.Escape:  "<newline>"
Literal.String.Single:  "'"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "macro"
Text:  " "
Name.Function:  "define_method"
Punctuation:  "("
Name.Builtin:  "name"
Punctuation:  ","
Text:  " "
Name:  "content"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Punctuation:  "{{"
Name.Builtin:  "name"
Punctuation:  "}}"
Text:  "<newline>    "
Punctuation:  "{%"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "content"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>      "
Literal.String.Double:  "\"one\""
Text:  "<newline>    "
Punctuation:  "{%"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>      "
Punctuation:  "{{"
Name:  "content"
Punctuation:  "}}"
Text:  "<newline>    "
Punctuation:  "{%"
Text:  " "
Keyword:  "end"
Text:  " "
Punctuation:  "%}"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "## Numbers"
Text:  "<newline><newline>"
Literal.Number.Float:  "1.0"
Text:  "     "
Comment.Single:  "# Float64"
Text:  "<newline>"
Literal.Number.Float:  "1.0_f32"
Text:  " "
Comment.Single:  "# Float32"
Text:  "<newline>"
Literal.Number.Float:  "1_f32"
Text:  "   "
Comment.Single:  "# Float32"
Text:  "<newline><newline>"
Literal.Number.Float:  "1e10"
Text:  "   "
Comment.Single:  "# Float64"
Text:  "<newline>"
Literal.Number.Float:  "1.5e10"
Text:  " "
Comment.Single:  "# Float64"
Text:  "<newline>"
Literal.Number.Float:  "1.5e-7"
Text:  " "
Comment.Single:  "# Float64"
Text:  "<newline><newline>"
Operator:  "+"
Literal.Number.Float:  "1.3"
Text:  " "
Comment.Single:  "# Float64"
Text:  "<newline>"
Operator:  "-"
Literal.Number.Float:  "0.5"
Text:  " "
Comment.Single:  "# Float64"
Text:  "<newline><newline>"
Literal.Number.Integer:  "1_000_000"
Operator:  "."
Literal.Number.Integer:  "111_111"
Text:  " "
Comment.Single:  "# better than 1000000.111111"
Text:  "<newline><newline>"
Literal.Number.Integer:  "1"
Text:  " "
Comment.Single:  "# Int32"
Text:  "<newline><newline>"
Literal.Number.Integer:  "1_i8"
Text:  "  "
Comment.Single:  "# Int8"
Text:  "<newline>"
Literal.Number.Integer:  "1_i16"
Text:  " "
Comment.Single:  "# Int16"
Text:  "<newline>"
Literal.Number.Integer:  "1_i32"
Text:  " "
Comment.Single:  "# Int32"
Text:  "<newline>"
Literal.Number.Integer:  "1_i64"
Text:  " "
Comment.Single:  "# Int64"
Text:  "<newline><newline>"
Literal.Number.Integer:  "1_u8"
Text:  "  "
Comment.Single:  "# UInt8"
Text:  "<newline>"
Literal.Number.Integer:  "1_u16"
Text:  " "
Comment.Single:  "# UInt16"
Text:  "<newline>"
Literal.Number.Integer:  "1_u32"
Text:  " "
Comment.Single:  "# UInt32"
Text:  "<newline>"
Literal.Number.Integer:  "1_u64"
Text:  " "
Comment.Single:  "# UInt64"
Text:  "<newline><newline>"
Operator:  "+"
Literal.Number.Integer:  "10"
Text:  " "
Comment.Single:  "# Int32"
Text:  "<newline>"
Operator:  "-"
Literal.Number.Integer:  "20"
Text:  " "
Comment.Single:  "# Int32"
Text:  "<newline><newline>"
Literal.Number.Integer:  "2147483648"
Text:  "          "
Comment.Single:  "# Int64"
Text:  "<newline>"
Literal.Number.Integer:  "9223372036854775808"
Text:  " "
Comment.Single:  "# UInt64"
Text:  "<newline><newline>"
Literal.Number.Integer:  "1_000_000"
Text:  " "
Comment.Single:  "# better than 1000000"
Text:  "<newline><newline>"
Literal.Number.Bin:  "0b1101"
Text:  " "
Comment.Single:  "# == 13"
Text:  "<newline><newline>"
Literal.Number.Oct:  "0o123"
Text:  " "
Comment.Single:  "# == 83"
Text:  "<newline><newline>"
Literal.Number.Hex:  "0xFE012D"
Text:  " "
Comment.Single:  "# == 16646445"
Text:  "<newline>"
Literal.Number.Hex:  "0xfe012d"
Text:  " "
Comment.Single:  "# == 16646445"
Text:  "<newline><newline>"
Comment.Single:  "## Regular expressions"
Text:  "<newline><newline>"
Name:  "foo_or_bar"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/foo|bar/"
Text:  "<newline>"
Name:  "heeello"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/h(e+)llo/"
Text:  "<newline>"
Name:  "integer"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/\\d+/"
Text:  "<newline>"
Name:  "r"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/foo/imx"
Text:  "<newline>"
Name:  "slash"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/\\//"
Text:  "<newline>"
Name:  "r"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "%r(regex with slash: /)"
Text:  "<newline><newline>"
Comment.Single:  "## Strings"
Text:  "<newline><newline>"
Literal.String.Double:  "\"hello world\""
Text:  "<newline><newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# double quote"
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\\"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# backslash"
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\e"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# escape"
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\f"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# form feed"
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# newline"
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\r"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# carriage return"
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\t"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# tab"
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\v"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# vertical tab"
Text:  "<newline><newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\101"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# == \"A\""
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\123"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# == \"S\""
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\12"
Literal.String.Double:  "\""
Text:  "  "
Comment.Single:  "# == \"<newline>\""
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\1"
Literal.String.Double:  "\""
Text:  "   "
Comment.Single:  "# string with one character with code point 1"
Text:  "<newline><newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\u0041"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# == \"A\""
Text:  "<newline><newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\u{41}"
Literal.String.Double:  "\""
Text:  "    "
Comment.Single:  "# == \"A\""
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\u{1F52E}"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# == \"\u{1F52E}\""
Text:  "<newline>"
Literal.String.Double:  "\"\u00E3\u0081\u201A\""
Text:  "<newline><newline>"
Literal.String.Double:  "\"hello<newline>      world\""
Text:  " "
Comment.Single:  "# same as \"hello<newline>      world\""
Text:  "<newline><newline>"
Literal.String.Double:  "\"hello \""
Text:  " "
Punctuation:  "\\"
Text:  "<newline>"
Literal.String.Double:  "\"world, \""
Text:  " "
Punctuation:  "\\"
Text:  "<newline>"
Literal.String.Double:  "\"no newlines\""
Text:  " "
Comment.Single:  "# same as \"hello world, no newlines\""
Text:  "<newline><newline>"
Literal.String.Double:  "\"hello \\<newline>     world, \\<newline>     no newlines\""
Text:  " "
Comment.Single:  "# same as \"hello world, no newlines\""
Text:  "<newline><newline>"
Comment.Single:  "# Supports double quotes and nested parenthesis"
Text:  "<newline>"
Literal.String.Other:  "%(hello (\"world\"))"
Text:  " "
Comment.Single:  "# same as \"hello (\\\"world\\\")\""
Text:  "<newline><newline>"
Comment.Single:  "# Supports double quotes and nested brackets"
Text:  "<newline>"
Literal.String.Other:  "%[hello [\"world\"]]"
Text:  " "
Comment.Single:  "# same as \"hello [\\\"world\\\"]\""
Text:  "<newline><newline>"
Comment.Single:  "# Supports double quotes and nested curlies"
Text:  "<newline>"
Literal.String.Other:  "%{hello {\"world\"}}"
Text:  " "
Comment.Single:  "# same as \"hello {\\\"world\\\"}\""
Text:  "<newline><newline>"
Comment.Single:  "# Supports double quotes and nested angles"
Text:  "<newline>"
Literal.String.Other:  "%<hello <\"world\">>"
Text:  " "
Comment.Single:  "# same as \"hello <\\\"world\\\">\""
Text:  "<newline><newline>"
Comment.Single:  "## Heredoc strings"
Text:  "<newline><newline>"
Operator:  "<<-"
Name.Constant:  "XML"
Literal.String.Heredoc:  "<newline><parent><newline>  <child /><newline></parent><newline>"
Name.Constant:  "XML"
Text:  "<newline><newline>"
Operator:  "<<-"
Name.Constant:  "STRING"
Literal.String.Heredoc:  "<newline>  Hello<newline>    world<newline>"
Name.Constant:  "  STRING"
Text:  "<newline><newline>"
Comment.Single:  "## Characters"
Text:  "<newline><newline>"
Literal.String.Single:  "'a'"
Text:  "<newline>"
Literal.String.Single:  "'z'"
Text:  "<newline>"
Literal.String.Single:  "'0'"
Text:  "<newline>"
Literal.String.Single:  "'_'"
Text:  "<newline><newline>"
Literal.String.Single:  "'\\''"
Text:  " "
Comment.Single:  "# single quote"
Text:  "<newline>"
Literal.String.Single:  "'\\\\'"
Text:  " "
Comment.Single:  "# backslash"
Text:  "<newline>"
Literal.String.Single:  "'"
Literal.String.Escape:  "\\e"
Literal.String.Single:  "'"
Text:  " "
Comment.Single:  "# escape"
Text:  "<newline>"
Literal.String.Single:  "'"
Literal.String.Escape:  "\\f"
Literal.String.Single:  "'"
Text:  " "
Comment.Single:  "# form feed"
Text:  "<newline>"
Literal.String.Single:  "'"
Literal.String.Escape:  "<newline>"
Literal.String.Single:  "'"
Text:  " "
Comment.Single:  "# newline"
Text:  "<newline>"
Literal.String.Single:  "'"
Literal.String.Escape:  "\\r"
Literal.String.Single:  "'"
Text:  " "
Comment.Single:  "# carriage return"
Text:  "<newline>"
Literal.String.Single:  "'"
Literal.String.Escape:  "\\t"
Literal.String.Single:  "'"
Text:  " "
Comment.Single:  "# tab"
Text:  "<newline>"
Literal.String.Single:  "'"
Literal.String.Escape:  "\\v"
Literal.String.Single:  "'"
Text:  " "
Comment.Single:  "# vertical tab"
Text:  "<newline><newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\101"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# == 'A'"
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\123"
Literal.String.Double:  "\""
Text:  " "
Comment.Single:  "# == 'S'"
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\12"
Literal.String.Double:  "\""
Text:  "  "
Comment.Single:  "# == '<newline>'"
Text:  "<newline>"
Literal.String.Double:  "\""
Literal.String.Escape:  "\\1"
Literal.String.Double:  "\""
Text:  "   "
Comment.Single:  "# code point 1"
Text:  "<newline><newline>"
Literal.String.Single:  "'"
Literal.String.Escape:  "\\u0041"
Literal.String.Single:  "'"
Text:  " "
Comment.Single:  "# == 'A'"
Text:  "<newline><newline>"
Literal.String.Single:  "'"
Literal.String.Escape:  "\\u{41}"
Literal.String.Single:  "'"
Text:  "    "
Comment.Single:  "# == 'A'"
Text:  "<newline>"
Literal.String.Single:  "'"
Literal.String.Escape:  "\\u{1F52E}"
Literal.String.Single:  "'"
Text:  " "
Comment.Single:  "# == '\u{1F52E}'"
Text:  "<newline><newline>"
Comment.Single:  "## Symbols"
Text:  "<newline><newline>"
Literal.String.Symbol:  ":hello"
Text:  "<newline>"
Literal.String.Symbol:  ":good_bye"
Text:  "<newline><newline>"
Comment.Single:  "# With spaces and symbols"
Text:  "<newline>"
Literal.String.Symbol:  ":\"symbol with spaces\""
Text:  "<newline><newline>"
Comment.Single:  "# Ending with question and exclamation marks"
Text:  "<newline>"
Literal.String.Symbol:  ":question?"
Text:  "<newline>"
Literal.String.Symbol:  ":exclamation!"
Text:  "<newline><newline>"
Comment.Single:  "# For the operators"
Text:  "<newline>"
Literal.String.Symbol:  ":+"
Text:  "<newline>"
Literal.String.Symbol:  ":-"
Text:  "<newline>"
Literal.String.Symbol:  ":*"
Text:  "<newline>"
Literal.String.Symbol:  ":/"
Text:  "<newline>"
Literal.String.Symbol:  ":=="
Text:  "<newline>"
Literal.String.Symbol:  ":<"
Text:  "<newline>"
Literal.String.Symbol:  ":<="
Text:  "<newline>"
Literal.String.Symbol:  ":>"
Text:  "<newline>"
Literal.String.Symbol:  ":>="
Text:  "<newline>"
Literal.String.Symbol:  ":!"
Text:  "<newline>"
Literal.String.Symbol:  ":!="
Text:  "<newline>"
Literal.String.Symbol:  ":=~"
Text:  "<newline>"
Literal.String.Symbol:  ":!~"
Text:  "<newline>"
Literal.String.Symbol:  ":&"
Text:  "<newline>"
Literal.String.Symbol:  ":|"
Text:  "<newline>"
Literal.String.Symbol:  ":^"
Text:  "<newline>"
Literal.String.Symbol:  ":~"
Text:  "<newline>"
Literal.String.Symbol:  ":**"
Text:  "<newline>"
Literal.String.Symbol:  ":>>"
Text:  "<newline>"
Literal.String.Symbol:  ":<<"
Text:  "<newline>"
Literal.String.Symbol:  ":%"
Text:  "<newline>"
Literal.String.Symbol:  ":[]"
Text:  "<newline>"
Literal.String.Symbol:  ":[]?"
Text:  "<newline>"
Literal.String.Symbol:  ":[]="
Text:  "<newline>"
Literal.String.Symbol:  ":<=>"
Text:  "<newline>"
Literal.String.Symbol:  ":==="
Text:  "<newline><newline>"
Comment.Single:  "## Hashes"
Text:  "<newline><newline>"
Punctuation:  "{"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  "}"
Text:  "   "
Comment.Single:  "# Hash(Int32, Int32)"
Text:  "<newline>"
Punctuation:  "{"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'a'"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "}"
Text:  " "
Comment.Single:  "# Hash(Int32 | Char, Int32)"
Text:  "<newline>"
Punctuation:  "{}"
Text:  " "
Keyword:  "of"
Text:  " "
Name.Constant:  "Int32"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Constant:  "Int32"
Text:  " "
Comment.Single:  "# same as Hash(Int32, Int32).new"
Text:  "<newline>"
Punctuation:  "{"
Literal.String.Symbol:  "key1: "
Literal.String.Single:  "'a'"
Punctuation:  ","
Text:  " "
Literal.String.Symbol:  "key2: "
Literal.String.Single:  "'b'"
Punctuation:  "}"
Text:  " "
Comment.Single:  "# Hash(Symbol, Char)"
Text:  "<newline>"
Punctuation:  "{"
Literal.String.Double:  "\"key1\""
Punctuation:  ":"
Text:  " "
Literal.String.Single:  "'a'"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\"key2\""
Punctuation:  ":"
Text:  " "
Literal.String.Single:  "'b'"
Punctuation:  "}"
Text:  " "
Comment.Single:  "# Hash(String, Char)"
Text:  "<newline><newline>"
Name.Constant:  "MyType"
Punctuation:  "{"
Literal.String.Double:  "\"foo\""
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"bar\""
Punctuation:  "}"
Text:  "<newline>"
Name.Constant:  "MyType"
Punctuation:  "("
Name.Constant:  "String"
Punctuation:  ","
Text:  " "
Name.Constant:  "String"
Punctuation:  "){"
Literal.String.Double:  "\"foo\""
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"bar\""
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "## Tuples"
Text:  "<newline><newline>"
Name:  "tuple"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\"hello\""
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'x'"
Punctuation:  "}"
Text:  " "
Comment.Single:  "# Tuple(Int32, String, Char)"
Text:  "<newline>"
Name:  "tuple"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "                  "
Comment.Single:  "# => 1       (Int32)"
Text:  "<newline>"
Name:  "tuple"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "                  "
Comment.Single:  "# => \"hello\" (String)"
Text:  "<newline>"
Name:  "tuple"
Punctuation:  "["
Literal.Number.Integer:  "2"
Punctuation:  "]"
Text:  "                  "
Comment.Single:  "# => 'x'     (Char)"
Text:  "<newline><newline>"
Comment.Single:  "## Arrays"
Text:  "<newline><newline>"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "]"
Text:  "         "
Comment.Single:  "# Array(Int32)"
Text:  "<newline>"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\"hello\""
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'x'"
Punctuation:  "]"
Text:  " "
Comment.Single:  "# Array(Int32 | String | Char)"
Text:  "<newline><newline>"
Punctuation:  "[]"
Text:  " "
Keyword:  "of"
Text:  " "
Name.Constant:  "Int32"
Text:  " "
Comment.Single:  "# same as Array(Int32).new"
Text:  "<newline><newline>"
Literal.String.Other:  "%w(one two three)"
Text:  " "
Comment.Single:  "# [\"one\", \"two\", \"three\"]"
Text:  "<newline>"
Literal.String.Other:  "%i(one two three)"
Text:  " "
Comment.Single:  "# [:one, :two, :three]"
Text:  "<newline><newline>"
Comment.Single:  "## Keywords"
Text:  "<newline><newline>"
Keyword.Pseudo:  "nil"
Text:  "<newline>"
Keyword.Pseudo:  "true"
Text:  "  "
Comment.Single:  "# A Bool that is true"
Text:  "<newline>"
Keyword.Pseudo:  "false"
Text:  " "
Comment.Single:  "# A Bool that is false"
Text:  "<newline>"
