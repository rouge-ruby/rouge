Keyword:  "interface"
Text:  " "
Name.Class:  "IFoo"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Single:  "// stuff"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Punctuation:  "["
Name.Function:  "Bar"
Punctuation:  "("
Literal.String:  "\"foo/[bar]\""
Punctuation:  ")]"
Text:  "<newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Foo"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Single:  "// stuff"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "////////////////////////////////////////////////////////////////////////////////"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "// MIT X11 license, Copyright (c) 2005-2006 by:                               //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "// Authors:                                                                   //"
Text:  "<newline>"
Comment.Single:  "//      Michael Dominic K. <michaldominik@gmail.com>                          //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "// Permission is hereby granted, free of charge, to any person obtaining a    //"
Text:  "<newline>"
Comment.Single:  "// copy of this software and associated documentation files (the \"Software\"), //"
Text:  "<newline>"
Comment.Single:  "// to deal in the Software without restriction, including without limitation  //"
Text:  "<newline>"
Comment.Single:  "// the rights to use, copy, modify, merge, publish, distribute, sublicense,   //"
Text:  "<newline>"
Comment.Single:  "// and/or sell copies of the Software, and to permit persons to whom the      //"
Text:  "<newline>"
Comment.Single:  "// Software is furnished to do so, subject to the following conditions:       //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "// The above copyright notice and this permission notice shall be included    //"
Text:  "<newline>"
Comment.Single:  "// in all copies or substantial portions of the Software.                     //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS    //"
Text:  "<newline>"
Comment.Single:  "// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                 //"
Text:  "<newline>"
Comment.Single:  "// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN  //"
Text:  "<newline>"
Comment.Single:  "// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   //"
Text:  "<newline>"
Comment.Single:  "// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR      //"
Text:  "<newline>"
Comment.Single:  "// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE  //"
Text:  "<newline>"
Comment.Single:  "// USE OR OTHER DEALINGS IN THE SOFTWARE.                                     //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "////////////////////////////////////////////////////////////////////////////////"
Text:  "<newline><newline>"
Keyword:  "namespace"
Text:  " "
Name.Namespace:  "Diva.Core"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        <newline>        "
Keyword:  "using"
Text:  " "
Name.Namespace:  "System"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "using"
Text:  " "
Name.Namespace:  "Widgets"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "using"
Text:  " "
Name.Namespace:  "System.Xml"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "using"
Text:  " "
Name.Namespace:  "Util"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "using"
Text:  " "
Name.Namespace:  "System.Collections.Generic"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "using"
Text:  " "
Name.Namespace:  "System.Collections"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "using"
Text:  " "
Name.Namespace:  "Basics"
Punctuation:  ";"
Text:  "<newline><newline>        "
Keyword:  "public"
Text:  " "
Keyword:  "class"
Text:  " "
Name.Class:  "OpenerTask"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "Task"
Punctuation:  ","
Text:  " "
Name:  "IBoilProvider"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>                "
Comment.Single:  "// Private structs ////////////////////////////////////////////"
Text:  "<newline>                <newline>                "
Keyword:  "struct"
Text:  " "
Name.Class:  "ObjectInfo"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>                        "
Keyword:  "public"
Text:  " "
Name:  "ObjectContainer"
Text:  " "
Name:  "Container"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword:  "public"
Text:  " "
Keyword.Type:  "int"
Punctuation:  "[]"
Text:  " "
Name:  "Depends"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword:  "public"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Name:  "SystemType"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword:  "public"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "RefId"
Punctuation:  ";"
Text:  "<newline>                        <newline>                        "
Comment.Multiline:  "/* CONSTRUCTOR */"
Text:  "<newline>                        "
Keyword:  "public"
Text:  " "
Name.Function:  "ObjectInfo"
Text:  " "
Punctuation:  "("
Name:  "ObjectContainer"
Text:  " "
Name:  "container"
Punctuation:  ")"
Text:  "<newline>                        "
Punctuation:  "{"
Text:  "<newline>                                "
Name:  "Container"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "container"
Punctuation:  ";"
Text:  "<newline>                                "
Name:  "Depends"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "container"
Punctuation:  "."
Name:  "Depends"
Punctuation:  "."
Name.Function:  "ToArray"
Text:  " "
Punctuation:  "();"
Text:  "<newline>                                "
Name:  "SystemType"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "container"
Punctuation:  "."
Name:  "SystemType"
Punctuation:  ";"
Text:  "<newline>                                "
Name:  "RefId"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "container"
Punctuation:  "."
Name:  "RefId"
Punctuation:  ";"
Text:  "<newline>                        "
Punctuation:  "}"
Text:  "<newline>                        <newline>                        "
Keyword:  "public"
Text:  " "
Keyword:  "override"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Name.Function:  "ToString"
Text:  " "
Punctuation:  "()"
Text:  "<newline>                        "
Punctuation:  "{"
Text:  "<newline>                                "
Keyword:  "return"
Text:  " "
Name:  "String"
Punctuation:  "."
Name.Function:  "Format"
Text:  " "
Punctuation:  "("
Literal.String:  "\"Type: {0} Deps count: {1} Id: {2}\""
Punctuation:  ","
Text:  "<newline>                                                      "
Name:  "SystemType"
Punctuation:  ","
Text:  " "
Name:  "Depends"
Punctuation:  "."
Name:  "Length"
Punctuation:  ","
Text:  " "
Name:  "RefId"
Punctuation:  ");"
Text:  "<newline>                        "
Punctuation:  "}"
Text:  "<newline>                        <newline>                        "
Keyword:  "public"
Text:  " "
Keyword.Type:  "bool"
Text:  " "
Name.Function:  "IsUnBoilable"
Text:  " "
Punctuation:  "("
Name:  "IBoilProvider"
Text:  " "
Name:  "provider"
Punctuation:  ")"
Text:  "<newline>                        "
Punctuation:  "{"
Text:  "<newline>                                "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "Depends"
Punctuation:  "."
Name:  "Length"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number:  "0"
Punctuation:  ")"
Text:  "<newline>                                        "
Keyword:  "return"
Text:  " "
Keyword:  "true"
Punctuation:  ";"
Text:  "<newline>                                <newline>                                "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "id"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "Depends"
Punctuation:  ")"
Text:  "<newline>                                        "
Keyword:  "if"
Text:  " "
Punctuation:  "(!"
Text:  " "
Punctuation:  "("
Name:  "provider"
Punctuation:  "."
Name.Function:  "Contains"
Text:  " "
Punctuation:  "("
Name:  "id"
Punctuation:  ")))"
Text:  "<newline>                                                "
Keyword:  "return"
Text:  " "
Keyword:  "false"
Punctuation:  ";"
Text:  "<newline>                                <newline>                                "
Keyword:  "return"
Text:  " "
Keyword:  "true"
Punctuation:  ";"
Text:  "<newline>                        "
Punctuation:  "}"
Text:  "<newline>                        <newline>                "
Punctuation:  "}"
Text:  "<newline>                                 <newline>                "
Comment.Single:  "// Enums //////////////////////////////////////////////////////"
Text:  "<newline>                <newline>                "
Keyword:  "enum"
Text:  " "
Name:  "OpenerTaskStep"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "Init"
Punctuation:  ","
Text:  " "
Name:  "Header"
Punctuation:  ","
Text:  " "
Name:  "ProjectInfoRead"
Punctuation:  ","
Text:  " "
Name:  "ObjectListRead"
Punctuation:  ","
Text:  "<newline>                                      "
Name:  "ObjectListParse"
Punctuation:  ","
Text:  " "
Name:  "ObjectListUnBoil"
Punctuation:  ","
Text:  " "
Name:  "FindRoots"
Punctuation:  ","
Text:  "<newline>                                      "
Name:  "Finished"
Text:  " "
Punctuation:  "};"
Text:  "<newline>                <newline>                "
Comment.Single:  "// Fields /////////////////////////////////////////////////////"
Text:  "<newline>                <newline>                "
Keyword.Type:  "string"
Text:  " "
Name:  "fileName"
Punctuation:  ";"
Text:  "                         "
Comment.Single:  "// Filename we're reading"
Text:  "<newline>                "
Name:  "XmlDocument"
Text:  " "
Name:  "xmlDocument"
Punctuation:  ";"
Text:  "                 "
Comment.Single:  "// Our document"
Text:  "<newline>                "
Comment.Single:  "//XmlNode projectInfoNode;               // <projectinfo> node"
Text:  "<newline>                "
Name:  "IEnumerator"
Text:  " "
Name:  "objectsEnumerator"
Punctuation:  ";"
Text:  "           "
Comment.Single:  "// Enumerator"
Text:  "<newline>                "
Name:  "List"
Text:  " "
Punctuation:  "<"
Name:  "ObjectInfo"
Punctuation:  ">"
Text:  " "
Name:  "objectsList"
Punctuation:  ";"
Text:  "           "
Comment.Single:  "// Objects list"
Text:  "<newline>                "
Name:  "ObjectListContainer"
Text:  " "
Name:  "objectListContainer"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "OpenerTaskStep"
Text:  " "
Name:  "currentStep"
Punctuation:  ";"
Text:  "              "
Comment.Single:  "// Our current step"
Text:  "<newline>                <newline>                "
Name:  "Dictionary"
Text:  " "
Punctuation:  "<"
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Keyword.Type:  "object"
Punctuation:  ">"
Text:  " "
Name:  "idToObject"
Punctuation:  ";"
Text:  "     "
Comment.Single:  "// Id -> object"
Text:  "<newline>                "
Name:  "Dictionary"
Text:  " "
Punctuation:  "<"
Keyword.Type:  "object"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ">"
Text:  " "
Name:  "objectToId"
Punctuation:  ";"
Text:  "     "
Comment.Single:  "// Object -> Id"
Text:  "<newline><newline>                "
Keyword.Type:  "string"
Text:  " "
Name:  "projectName"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "String"
Punctuation:  "."
Name:  "Empty"
Punctuation:  ";"
Text:  "<newline>                "
Keyword.Type:  "string"
Text:  " "
Name:  "projectDirectory"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "String"
Punctuation:  "."
Name:  "Empty"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "TagList"
Text:  " "
Name:  "projectTagList"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "StuffList"
Text:  " "
Name:  "projectStuffList"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "TrackList"
Text:  " "
Name:  "projectTrackList"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "ClipList"
Text:  " "
Name:  "projectClipList"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "MediaItemList"
Text:  " "
Name:  "projectMediaItemList"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "Commander"
Text:  " "
Name:  "projectCommander"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "Gdv"
Punctuation:  "."
Name:  "Pipeline"
Text:  " "
Name:  "projectPipeline"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "Gdv"
Punctuation:  "."
Name:  "ProjectFormat"
Text:  " "
Name:  "projectFormat"
Punctuation:  ";"
Text:  "<newline>                <newline>                "
Comment.Single:  "// Properties /////////////////////////////////////////////////"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Name:  "ProjectName"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "get"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "projectName"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Name:  "ProjectDirectory"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "get"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "projectDirectory"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Name:  "TagList"
Text:  " "
Name:  "ProjectTagList"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "get"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "projectTagList"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Name:  "StuffList"
Text:  " "
Name:  "ProjectStuffList"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "get"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "projectStuffList"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Name:  "TrackList"
Text:  " "
Name:  "ProjectTrackList"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "get"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "projectTrackList"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Keyword:  "public"
Text:  " "
Name:  "ClipList"
Text:  " "
Name:  "ProjectClipList"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "get"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "projectClipList"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Name:  "MediaItemList"
Text:  " "
Name:  "ProjectMediaItemList"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "get"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "projectMediaItemList"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Name:  "Commander"
Text:  " "
Name:  "ProjectCommander"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "get"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "projectCommander"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Name:  "Gdv"
Punctuation:  "."
Name:  "Pipeline"
Text:  " "
Name:  "ProjectPipeline"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "get"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "projectPipeline"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Keyword:  "public"
Text:  " "
Name:  "Gdv"
Punctuation:  "."
Name:  "ProjectFormat"
Text:  " "
Name:  "ProjectFormat"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "get"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "projectFormat"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Comment.Single:  "// Public methods /////////////////////////////////////////////"
Text:  "<newline>                <newline>                "
Comment.Multiline:  "/* CONSTRUCTOR */"
Text:  "<newline>                "
Keyword:  "public"
Text:  " "
Name.Function:  "OpenerTask"
Text:  " "
Punctuation:  "("
Keyword.Type:  "string"
Text:  " "
Name:  "fileName"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "this"
Punctuation:  "."
Name:  "fileName"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "fileName"
Punctuation:  ";"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Keyword:  "override"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "Reset"
Text:  " "
Punctuation:  "()"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Name:  "objectToId"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "Dictionary"
Text:  " "
Punctuation:  "<"
Keyword.Type:  "object"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ">"
Text:  " "
Punctuation:  "();"
Text:  "<newline>                        "
Name:  "idToObject"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "Dictionary"
Text:  " "
Punctuation:  "<"
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Keyword.Type:  "object"
Punctuation:  ">"
Text:  " "
Punctuation:  "();"
Text:  "<newline>                        <newline>                        "
Name:  "xmlDocument"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "null"
Punctuation:  ";"
Text:  "<newline>                        "
Comment.Single:  "//projectInfoNode = null;"
Text:  "<newline>                        <newline>                        "
Name:  "currentStep"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "Init"
Punctuation:  ";"
Text:  "<newline>                        <newline>                        "
Keyword:  "base"
Punctuation:  "."
Name.Function:  "Reset"
Text:  " "
Punctuation:  "();"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Function:  "GetIdForObject"
Text:  " "
Punctuation:  "("
Keyword.Type:  "object"
Text:  " "
Name:  "o"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "return"
Text:  " "
Name:  "objectToId"
Text:  " "
Punctuation:  "["
Name:  "o"
Punctuation:  "];"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Keyword.Type:  "object"
Text:  " "
Name.Function:  "GetObjectForId"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "id"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "return"
Text:  " "
Name:  "idToObject"
Text:  " "
Punctuation:  "["
Name:  "id"
Punctuation:  "];"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "public"
Text:  " "
Keyword.Type:  "bool"
Text:  " "
Name.Function:  "Contains"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "id"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "return"
Text:  " "
Name:  "idToObject"
Punctuation:  "."
Name.Function:  "ContainsKey"
Text:  " "
Punctuation:  "("
Name:  "id"
Punctuation:  ");"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Comment.Single:  "// Private methods ////////////////////////////////////////////"
Text:  "<newline>                <newline>                "
Keyword:  "protected"
Text:  " "
Keyword:  "override"
Text:  " "
Name:  "TaskStatus"
Text:  " "
Name.Function:  "ExecuteStep"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "s"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword.Type:  "bool"
Text:  " "
Name:  "cont"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "true"
Punctuation:  ";"
Text:  "<newline>                        <newline>                        "
Comment.Single:  "// Main"
Text:  "<newline>                        "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "currentStep"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                                        <newline>                                "
Keyword:  "case"
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "Init"
Punctuation:  ":"
Text:  "<newline>                                        "
Name:  "objectsList"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "List"
Text:  " "
Punctuation:  "<"
Name:  "ObjectInfo"
Punctuation:  ">"
Text:  " "
Punctuation:  "();"
Text:  "<newline>                                        "
Name:  "xmlDocument"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name.Function:  "XmlDocument"
Text:  " "
Punctuation:  "();"
Text:  "<newline>                                        "
Name:  "xmlDocument"
Punctuation:  "."
Name.Function:  "Load"
Text:  " "
Punctuation:  "("
Name:  "fileName"
Punctuation:  ");"
Text:  "<newline>                                        "
Name:  "currentStep"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "Header"
Punctuation:  ";"
Text:  "<newline>                                        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                                        <newline>                                "
Keyword:  "case"
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "Header"
Punctuation:  ":"
Text:  "<newline>                                        "
Comment.Single:  "//ReadHeader ();"
Text:  "<newline>                                        "
Name:  "currentStep"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "ProjectInfoRead"
Punctuation:  ";"
Text:  "<newline>                                        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>                                "
Keyword:  "case"
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "ProjectInfoRead"
Punctuation:  ":"
Text:  "<newline>                                        "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "XmlNode"
Text:  " "
Name:  "node"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "xmlDocument"
Punctuation:  "."
Name:  "DocumentElement"
Punctuation:  "."
Name:  "ChildNodes"
Punctuation:  ")"
Text:  "<newline>                                                "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "node"
Punctuation:  "."
Name:  "Name"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"projectinfo\""
Punctuation:  ")"
Text:  " <newline>                                                        "
Name.Function:  "ResolveProjectInfoNode"
Text:  " "
Punctuation:  "("
Name:  "node"
Punctuation:  ");"
Text:  "<newline><newline>                                        "
Comment.Single:  "// FIXME: Fail if not found/not resolved"
Text:  "<newline>                                        "
Name:  "currentStep"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "ObjectListRead"
Punctuation:  ";"
Text:  "<newline>                                        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                                        <newline>                                "
Keyword:  "case"
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "ObjectListRead"
Punctuation:  ":"
Text:  "<newline>                                        "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "XmlNode"
Text:  " "
Name:  "node"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "xmlDocument"
Punctuation:  "."
Name:  "DocumentElement"
Punctuation:  "."
Name:  "ChildNodes"
Punctuation:  ")"
Text:  "<newline>                                                "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "node"
Punctuation:  "."
Name:  "Name"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"objectlist\""
Punctuation:  ")"
Text:  " <newline>                                                        "
Name:  "objectListContainer"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "ObjectListContainer"
Punctuation:  ")"
Text:  "<newline>                                                                "
Name:  "DataFactory"
Punctuation:  "."
Name.Function:  "MakeDataElement"
Text:  "  "
Punctuation:  "("
Name:  "node"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "XmlElement"
Punctuation:  ");"
Text:  "<newline>                                                        <newline>                                        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "objectListContainer"
Text:  " "
Punctuation:  "=="
Text:  " "
Keyword:  "null"
Punctuation:  ")"
Text:  "<newline>                                                "
Keyword:  "throw"
Text:  " "
Keyword:  "new"
Text:  " "
Name.Function:  "Exception"
Text:  " "
Punctuation:  "("
Literal.String:  "\"ObjectListContainer not found!\""
Punctuation:  ");"
Text:  "<newline><newline>                                        "
Name:  "currentStep"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "ObjectListParse"
Punctuation:  ";"
Text:  "<newline>                                        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>                                "
Keyword:  "case"
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "ObjectListParse"
Punctuation:  ":"
Text:  "<newline>                                        "
Keyword.Type:  "bool"
Text:  " "
Name:  "flush"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Function:  "EnumerateSomeObjects"
Text:  " "
Punctuation:  "();"
Text:  "<newline>                                        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "flush"
Punctuation:  ")"
Text:  "<newline>                                                "
Name:  "currentStep"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "ObjectListUnBoil"
Punctuation:  ";"
Text:  "<newline>                                        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>                                "
Keyword:  "case"
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "ObjectListUnBoil"
Punctuation:  ":"
Text:  "<newline>                                        "
Keyword.Type:  "bool"
Text:  " "
Name:  "done"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Function:  "UnBoilSomeObjects"
Text:  " "
Punctuation:  "();"
Text:  "<newline>                                        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "done"
Punctuation:  ")"
Text:  "<newline>                                                "
Name:  "currentStep"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "FindRoots"
Punctuation:  ";"
Text:  "<newline>                                        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                                        <newline>                                        <newline>                                "
Keyword:  "case"
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "FindRoots"
Punctuation:  ":"
Text:  "<newline>                                        "
Name:  "projectTrackList"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "TrackList"
Punctuation:  ")"
Text:  " "
Name.Function:  "FindRoot"
Text:  " "
Punctuation:  "("
Literal.String:  "\"tracklist\""
Punctuation:  ");"
Text:  "<newline>                                        "
Name:  "projectTagList"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "TagList"
Punctuation:  ")"
Text:  " "
Name.Function:  "FindRoot"
Text:  " "
Punctuation:  "("
Literal.String:  "\"taglist\""
Punctuation:  ");"
Text:  "<newline>                                        "
Name:  "projectStuffList"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "StuffList"
Punctuation:  ")"
Text:  " "
Name.Function:  "FindRoot"
Text:  " "
Punctuation:  "("
Literal.String:  "\"stufflist\""
Punctuation:  ");"
Text:  "<newline>                                        "
Name:  "projectClipList"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "ClipList"
Punctuation:  ")"
Text:  " "
Name.Function:  "FindRoot"
Text:  " "
Punctuation:  "("
Literal.String:  "\"cliplist\""
Punctuation:  ");"
Text:  "<newline>                                        "
Name:  "projectMediaItemList"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "MediaItemList"
Punctuation:  ")"
Text:  " "
Name.Function:  "FindRoot"
Text:  " "
Punctuation:  "("
Literal.String:  "\"mediaitemlist\""
Punctuation:  ");"
Text:  "<newline>                                        "
Name:  "projectPipeline"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "Gdv"
Punctuation:  "."
Name:  "Pipeline"
Punctuation:  ")"
Text:  " "
Name.Function:  "FindRoot"
Text:  " "
Punctuation:  "("
Literal.String:  "\"pipeline\""
Punctuation:  ");"
Text:  "<newline>                                        "
Name:  "projectCommander"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "Commander"
Punctuation:  ")"
Text:  " "
Name.Function:  "FindRoot"
Text:  " "
Punctuation:  "("
Literal.String:  "\"commander\""
Punctuation:  ");"
Text:  "<newline>                                        "
Name:  "projectFormat"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "Gdv"
Punctuation:  "."
Name:  "ProjectFormat"
Punctuation:  ")"
Text:  " "
Name.Function:  "FindRoot"
Text:  " "
Punctuation:  "("
Literal.String:  "\"projectformat\""
Punctuation:  ");"
Text:  "<newline>                                        <newline>                                        "
Name:  "currentStep"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "Finished"
Punctuation:  ";"
Text:  "<newline>                                        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                                        <newline>                                "
Keyword:  "case"
Text:  " "
Name:  "OpenerTaskStep"
Punctuation:  "."
Name:  "Finished"
Punctuation:  ":"
Text:  "<newline>                                        "
Name:  "cont"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "false"
Punctuation:  ";"
Text:  "<newline>                                        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                                        <newline>                                "
Keyword:  "default"
Punctuation:  ":"
Text:  "<newline>                                        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                        "
Punctuation:  "}"
Text:  "<newline>                                                <newline>                        "
Comment.Single:  "// Post "
Text:  "<newline>                        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "cont"
Punctuation:  ")"
Text:  " <newline>                                "
Keyword:  "return"
Text:  " "
Name:  "TaskStatus"
Punctuation:  "."
Name:  "Running"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword:  "else"
Text:  "<newline>                                "
Keyword:  "return"
Text:  " "
Name:  "TaskStatus"
Punctuation:  "."
Name:  "Done"
Punctuation:  ";"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Comment.Multiline:  "/*<newline>                void ReadHeader ()<newline>                {<newline>                        // FIXME: Read all the attributes from the <divaproject> element<newline>                        }*/"
Text:  "<newline><newline>                "
Keyword:  "void"
Text:  " "
Name.Function:  "ResolveProjectInfoNode"
Text:  " "
Punctuation:  "("
Name:  "XmlNode"
Text:  " "
Name:  "node"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "XmlNode"
Text:  " "
Name:  "childNode"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "node"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                                <newline>                                "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "childNode"
Punctuation:  "."
Name:  "Name"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                                        <newline>                                        "
Keyword:  "case"
Text:  " "
Literal.String:  "\"name\""
Punctuation:  ":"
Text:  "<newline>                                                "
Name:  "projectName"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "childNode"
Punctuation:  "."
Name:  "FirstChild"
Punctuation:  "."
Name:  "Value"
Punctuation:  ";"
Text:  "<newline>                                                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                                        <newline>                                        "
Keyword:  "case"
Text:  " "
Literal.String:  "\"directory\""
Punctuation:  ":"
Text:  "<newline>                                                "
Name:  "projectDirectory"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "childNode"
Punctuation:  "."
Name:  "FirstChild"
Punctuation:  "."
Name:  "Value"
Punctuation:  ";"
Text:  "<newline>                                                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>                                                "
Comment.Single:  "// FIXME: Duration etc."
Text:  "<newline>                                "
Punctuation:  "}"
Text:  "<newline>                        "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword.Type:  "bool"
Text:  " "
Name.Function:  "EnumerateSomeObjects"
Text:  " "
Punctuation:  "()"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "objectsEnumerator"
Text:  " "
Punctuation:  "=="
Text:  " "
Keyword:  "null"
Punctuation:  ")"
Text:  "<newline>                                "
Name:  "objectsEnumerator"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "objectListContainer"
Punctuation:  "."
Name.Function:  "FindAllObjects"
Text:  " "
Punctuation:  "()."
Name.Function:  "GetEnumerator"
Text:  " "
Punctuation:  "();"
Text:  "<newline>                        <newline>                        "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "<"
Text:  " "
Literal.Number:  "10"
Punctuation:  ";"
Text:  " "
Name:  "i"
Punctuation:  "++)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                                "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "objectsEnumerator"
Punctuation:  "."
Name.Function:  "MoveNext"
Text:  " "
Punctuation:  "()"
Text:  " "
Punctuation:  "=="
Text:  " "
Keyword:  "false"
Punctuation:  ")"
Text:  "<newline>                                        "
Keyword:  "return"
Text:  " "
Keyword:  "true"
Punctuation:  ";"
Text:  "<newline><newline>                                "
Name:  "ObjectContainer"
Text:  " "
Name:  "container"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "ObjectContainer"
Punctuation:  ")"
Text:  "<newline>                                        "
Name:  "objectsEnumerator"
Punctuation:  "."
Name:  "Current"
Punctuation:  ";"
Text:  "<newline>                                <newline>                                "
Name:  "ObjectInfo"
Text:  " "
Name:  "newInfo"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name.Function:  "ObjectInfo"
Text:  " "
Punctuation:  "("
Name:  "container"
Punctuation:  ");"
Text:  "<newline>                                "
Name:  "objectsList"
Punctuation:  "."
Name.Function:  "Add"
Text:  " "
Punctuation:  "("
Name:  "newInfo"
Punctuation:  ");"
Text:  "<newline>                        "
Punctuation:  "}"
Text:  "<newline>                        <newline>                        "
Keyword:  "return"
Text:  " "
Keyword:  "false"
Punctuation:  ";"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Name:  "ObjectInfo"
Text:  " "
Name.Function:  "GetNextCandidate"
Text:  " "
Punctuation:  "()"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "ObjectInfo"
Text:  " "
Name:  "objInfo"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "objectsList"
Punctuation:  ")"
Text:  "<newline>                                "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "objInfo"
Punctuation:  "."
Name.Function:  "IsUnBoilable"
Text:  " "
Punctuation:  "("
Keyword:  "this"
Punctuation:  "))"
Text:  "<newline>                                        "
Keyword:  "return"
Text:  " "
Name:  "objInfo"
Punctuation:  ";"
Text:  "<newline>                        <newline>                        "
Keyword:  "throw"
Text:  " "
Keyword:  "new"
Text:  " "
Name.Function:  "Exception"
Text:  " "
Punctuation:  "("
Literal.String:  "\"FIXME: No more unboilable objects found. Recursive?\""
Punctuation:  ");"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword.Type:  "bool"
Text:  " "
Name.Function:  "UnBoilSomeObjects"
Text:  " "
Punctuation:  "()"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "<"
Text:  " "
Literal.Number:  "5"
Punctuation:  ";"
Text:  " "
Name:  "i"
Punctuation:  "++)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                                "
Comment.Single:  "// All unboiled"
Text:  "<newline>                                "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "objectsList"
Punctuation:  "."
Name:  "Count"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number:  "0"
Punctuation:  ")"
Text:  "<newline>                                        "
Keyword:  "return"
Text:  " "
Keyword:  "true"
Punctuation:  ";"
Text:  "<newline>                                <newline>                                "
Name:  "ObjectInfo"
Text:  " "
Name:  "objInfo"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Function:  "GetNextCandidate"
Text:  " "
Punctuation:  "();"
Text:  "<newline><newline>                                "
Keyword.Type:  "object"
Text:  " "
Name:  "o"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "BoilFactory"
Punctuation:  "."
Name.Function:  "UnBoil"
Text:  " "
Punctuation:  "("
Name:  "objInfo"
Punctuation:  "."
Name:  "Container"
Punctuation:  ","
Text:  " "
Keyword:  "this"
Punctuation:  ");"
Text:  "<newline>                                "
Name:  "objectsList"
Punctuation:  "."
Name.Function:  "Remove"
Text:  " "
Punctuation:  "("
Name:  "objInfo"
Punctuation:  ");"
Text:  "<newline><newline>                                "
Comment.Single:  "// Add"
Text:  "<newline>                                "
Name:  "idToObject"
Text:  " "
Punctuation:  "["
Name:  "objInfo"
Punctuation:  "."
Name:  "RefId"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "o"
Punctuation:  ";"
Text:  "<newline>                                "
Name:  "objectToId"
Text:  " "
Punctuation:  "["
Name:  "o"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "objInfo"
Punctuation:  "."
Name:  "RefId"
Punctuation:  ";"
Text:  "<newline><newline>                        "
Punctuation:  "}"
Text:  "<newline>                        <newline>                        "
Keyword:  "return"
Text:  " "
Keyword:  "false"
Punctuation:  ";"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Keyword.Type:  "object"
Text:  " "
Name.Function:  "FindRoot"
Text:  " "
Punctuation:  "("
Keyword.Type:  "string"
Text:  " "
Name:  "rootString"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Name:  "ObjectContainer"
Text:  " "
Name:  "container"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "objectListContainer"
Punctuation:  "."
Name.Function:  "FindObjectContainer"
Text:  " "
Punctuation:  "("
Name:  "rootString"
Punctuation:  ");"
Text:  "<newline>                        "
Keyword:  "return"
Text:  " "
Name:  "idToObject"
Text:  " "
Punctuation:  "["
Name:  "container"
Punctuation:  "."
Name:  "RefId"
Punctuation:  "];"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                <newline>                "
Keyword:  "void"
Text:  " "
Name.Function:  "FunWithStrings"
Text:  " "
Punctuation:  "()"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "a"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"some string<newline>with a newl\\\"ine\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "@\"some literal string\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "@\"some literal string<newline>                          with a newline\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "d"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "@\"literal string with \\backslashes\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "e"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "@\"literal string ending with a backslash\\\""
Punctuation:  "."
Name:  "Length"
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "f"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "@\"literal string with \"\" a quote in the middle and a backslash \\\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "g"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "$\"some interpolated string with no interpolations\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "h"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "$\"interpolation: two and two make "
Punctuation:  "{"
Text:  " "
Literal.Number:  "2"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number:  "2"
Text:  " "
Punctuation:  "}"
Literal.String:  "\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "$@\"interpolation with"
Error:  "<newline>"
Literal.String:  "                          "
Punctuation:  "{"
Name:  "a"
Punctuation:  "}"
Literal.String:  " newline\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "$@\"interpolation "
Punctuation:  "{"
Literal.Number:  "1"
Punctuation:  "}"
Error:  "<newline>"
Literal.String:  "                          with multiple "
Punctuation:  "{"
Literal.Number:  "2"
Punctuation:  "}"
Error:  "<newline>"
Literal.String:  "                          newlines and a backslash\\\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "k"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "$@\"interp"
Punctuation:  "{"
Literal.Number:  "1"
Punctuation:  "}"
Literal.String:  "olation \"\" and "
Punctuation:  "{"
Literal.Number:  "3"
Punctuation:  "}"
Literal.String:  " quotes\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "l"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "$\"interpolation with nested braces: "
Punctuation:  "{"
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Punctuation:  "=>"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Literal.Number:  "3"
Text:  " "
Punctuation:  "})("
Literal.Number:  "5"
Punctuation:  ")"
Text:  " "
Punctuation:  "}"
Literal.String:  "\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword.Type:  "var"
Text:  " "
Name:  "m"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "$\"interpolation with nested strings: "
Punctuation:  "{"
Text:  " "
Literal.String:  "@\"Ooga\\\""
Text:  " "
Punctuation:  "}"
Literal.String:  " and "
Punctuation:  "{"
Text:  " "
Literal.String:  "\"booga\\\"\""
Text:  " "
Punctuation:  "}"
Literal.String:  "\""
Punctuation:  "."
Name:  "Length"
Punctuation:  ";"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline><newline>        "
Keyword:  "public"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "class"
Text:  " "
Name.Class:  "Csharp7And8And9Tests"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>                "
Keyword:  "const"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "BinaryConstant"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "0b0100_1101"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "const"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "HexadecimalConstant"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "0x1245_78ab"
Punctuation:  ";"
Text:  "<newline><newline>                "
Keyword:  "public"
Text:  " "
Keyword:  "const"
Text:  " "
Keyword.Type:  "double"
Text:  " "
Name:  "AvogadroConstant"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "6.022_140_857_747_474e23"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "public"
Text:  " "
Keyword:  "const"
Text:  " "
Keyword.Type:  "decimal"
Text:  " "
Name:  "GoldenRatio"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "1.618_033_988_749_894_848_204_586_834_365_638_117_720_309_179M"
Punctuation:  ";"
Text:  "<newline><newline>                "
Keyword:  "record"
Text:  " "
Name.Class:  "NamedEntity"
Punctuation:  "("
Keyword.Type:  "string"
Text:  " "
Name:  "Name"
Punctuation:  ");"
Text:  "<newline><newline>                "
Keyword:  "record"
Text:  " "
Name.Class:  "Person"
Punctuation:  "("
Keyword.Type:  "string"
Text:  " "
Name:  "Name"
Punctuation:  ")"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Function:  "NamedEntity"
Punctuation:  "("
Literal.String:  "\"Mr \""
Text:  " "
Punctuation:  "+"
Text:  " "
Name:  "Name"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "public"
Text:  " "
Keyword.Type:  "nint"
Text:  " "
Name:  "Age"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "get"
Punctuation:  ";"
Text:  " "
Keyword:  "init"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>                        "
Keyword:  "public"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "WeaveSomeBobbins"
Punctuation:  "()"
Text:  "<newline>                        "
Punctuation:  "{"
Text:  "<newline>                                "
Name:  "Person"
Text:  " "
Name:  "bob"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Punctuation:  "("
Literal.String:  "\"Bob\""
Punctuation:  ");"
Text:  "<newline>                                "
Keyword.Type:  "var"
Text:  " "
Name:  "bobbin"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "bob"
Text:  " "
Keyword:  "with"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "Name"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"Bobbin\""
Text:  " "
Punctuation:  "};"
Text:  "<newline>                                "
Keyword.Type:  "var"
Text:  " "
Name:  "birthdayBobbin"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "bobbin"
Punctuation:  "."
Name.Function:  "OneYearOlder"
Punctuation:  "();"
Text:  "<newline>                        "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Keyword:  "static"
Text:  " "
Name:  "Person"
Text:  " "
Name:  "OneYearOlder"
Punctuation:  "<"
Name:  "T"
Punctuation:  ">("
Keyword:  "this"
Text:  " "
Name:  "T"
Text:  " "
Name:  "person"
Punctuation:  ")"
Text:  "<newline>                        "
Keyword:  "where"
Text:  " "
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword:  "notnull"
Punctuation:  ","
Text:  " "
Name:  "Person"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "return"
Text:  " "
Name:  "person"
Text:  " "
Keyword:  "switch"
Text:  "<newline>                        "
Punctuation:  "{"
Text:  "<newline>                                "
Name:  "Person"
Text:  " "
Name:  "p"
Text:  " "
Keyword:  "when"
Text:  " "
Name:  "p"
Punctuation:  "."
Name:  "Age"
Text:  " "
Keyword:  "is"
Text:  " "
Punctuation:  ">"
Text:  " "
Literal.Number:  "5"
Text:  " "
Keyword:  "and"
Text:  " "
Punctuation:  "<"
Text:  " "
Literal.Number:  "10"
Text:  " "
Punctuation:  "=>"
Text:  " "
Name:  "p"
Text:  " "
Keyword:  "with"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "Age"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "p"
Punctuation:  "."
Name:  "Age"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number:  "1"
Text:  " "
Punctuation:  "},"
Text:  "<newline>                                "
Name:  "_"
Text:  "                                   "
Punctuation:  "=>"
Text:  " "
Name:  "person"
Punctuation:  ","
Text:  "<newline>                        "
Punctuation:  "};"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
