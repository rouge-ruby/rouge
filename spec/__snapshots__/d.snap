Comment.Single:  "// Written in the D programming language."
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline>JavaScript Object Notation<newline><newline>Synopsis:<newline>----<newline>    //parse a file or string of json into a usable structure<newline>    string s = \"{ \\\"language\\\": \\\"D\\\", \\\"rating\\\": 3.14, \\\"code\\\": \\\"42\\\" }\";<newline>    JSONValue j = parseJSON(s);<newline>    writeln(\"Language: \", j[\"language\"].str(),<newline>            \" Rating: \", j[\"rating\"].floating()<newline>    );<newline><newline>    // j and j[\"language\"] return JSONValue,<newline>    // j[\"language\"].str returns a string<newline><newline>    //check a type<newline>    long x;<newline>    if (const(JSONValue)* code = \"code\" in j)<newline>    {<newline>        if (code.type() == JSON_TYPE.INTEGER)<newline>            x = code.integer;<newline>        else<newline>            x = to!int(code.str);<newline>    }<newline><newline>    // create a json struct<newline>    JSONValue jj = [ \"language\": \"D\" ];<newline>    // rating doesnt exist yet, so use .object to assign<newline>    jj.object[\"rating\"] = JSONValue(3.14);<newline>    // create an array to assign to list<newline>    jj.object[\"list\"] = JSONValue( [\"a\", \"b\", \"c\"] );<newline>    // list already exists, so .object optional<newline>    jj[\"list\"].array ~= JSONValue(\"D\");<newline><newline>    s = j.toString();<newline>    writeln(s);<newline>----<newline><newline>Copyright: Copyright Jeremie Pelletier 2008 - 2009.<newline>License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).<newline>Authors:   Jeremie Pelletier, David Herberth<newline>References: $(LINK http://json.org/)<newline>Source:    $(PHOBOSSRC std/_json.d)<newline>*/"
Text:  "<newline>"
Comment.Multiline:  "/*<newline>         Copyright Jeremie Pelletier 2008 - 2009.<newline>Distributed under the Boost Software License, Version 1.0.<newline>   (See accompanying file LICENSE_1_0.txt or copy at<newline>         http://www.boost.org/LICENSE_1_0.txt)<newline>*/"
Text:  "<newline>"
Keyword:  "module"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "json"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "conv"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "range"
Punctuation:  "."
Name:  "primitives"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "array"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "traits"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline>String literals used to represent special float values within JSON strings.<newline>*/"
Text:  "<newline>"
Keyword:  "enum"
Text:  " "
Name:  "JSONFloatLiteral"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Builtin:  "string"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Name:  "nan"
Text:  "         "
Punctuation:  "="
Text:  " "
Literal.String:  "\"NaN\""
Punctuation:  ","
Text:  "       "
Comment.Single:  "/// string representation of floating-point NaN"
Text:  "<newline>    "
Name:  "inf"
Text:  "         "
Punctuation:  "="
Text:  " "
Literal.String:  "\"Infinite\""
Punctuation:  ","
Text:  "  "
Comment.Single:  "/// string representation of floating-point Infinity"
Text:  "<newline>    "
Name:  "negativeInf"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"-Infinite\""
Punctuation:  ","
Text:  " "
Comment.Single:  "/// string representation of floating-point negative Infinity"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline>Flags that control how json is encoded and parsed.<newline>*/"
Text:  "<newline>"
Keyword:  "enum"
Text:  " "
Name:  "JSONOptions"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "none"
Punctuation:  ","
Text:  "                       "
Comment.Single:  "/// standard parsing"
Text:  "<newline>    "
Name:  "specialFloatLiterals"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Hex:  "0x1"
Punctuation:  ","
Text:  " "
Comment.Single:  "/// encode NaN and Inf float values as strings"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline>JSON type enumeration<newline>*/"
Text:  "<newline>"
Keyword:  "enum"
Text:  " "
Name:  "JSON_TYPE"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword.Type:  "byte"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "/// Indicates the type of a $(D JSONValue)."
Text:  "<newline>    "
Name:  "NULL"
Punctuation:  ","
Text:  "<newline>    "
Name:  "STRING"
Punctuation:  ","
Text:  "  "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name:  "INTEGER"
Punctuation:  ","
Text:  " "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name:  "UINTEGER"
Punctuation:  ","
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name:  "FLOAT"
Punctuation:  ","
Text:  "   "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name:  "OBJECT"
Punctuation:  ","
Text:  "  "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name:  "ARRAY"
Punctuation:  ","
Text:  "   "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name:  "TRUE"
Punctuation:  ","
Text:  "    "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name:  "FALSE"
Text:  "    "
Comment.Single:  "/// ditto"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline>JSON value node<newline>*/"
Text:  "<newline>"
Keyword:  "struct"
Text:  " "
Name:  "JSONValue"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "exception"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "enforceEx"
Punctuation:  ","
Text:  " "
Name:  "enforce"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "union"
Text:  " "
Name:  "Store"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name.Builtin:  "string"
Text:  "                          "
Name:  "str"
Punctuation:  ";"
Text:  "<newline>        "
Keyword.Type:  "long"
Text:  "                            "
Name:  "integer"
Punctuation:  ";"
Text:  "<newline>        "
Keyword.Type:  "ulong"
Text:  "                           "
Name:  "uinteger"
Punctuation:  ";"
Text:  "<newline>        "
Keyword.Type:  "double"
Text:  "                          "
Name:  "floating"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "JSONValue"
Punctuation:  "["
Name.Builtin:  "string"
Punctuation:  "]"
Text:  "               "
Name:  "object"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "JSONValue"
Punctuation:  "[]"
Text:  "                     "
Name:  "array"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Keyword:  "private"
Text:  " "
Name:  "Store"
Text:  " "
Name:  "store"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "private"
Text:  " "
Name:  "JSON_TYPE"
Text:  " "
Name:  "type_tag"
Punctuation:  ";"
Text:  "<newline><newline>    "
Comment.Multiline:  "/**<newline>      Returns the JSON_TYPE of the value stored in this structure.<newline>    */"
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Name:  "JSON_TYPE"
Text:  " "
Name:  "type"
Punctuation:  "()"
Text:  " "
Keyword:  "const"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@safe"
Text:  " "
Name.Decorator:  "@nogc"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "type_tag"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Keyword:  "unittest"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>          "
Name.Builtin:  "string"
Text:  " "
Name:  "s"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"{ \\\"language\\\": \\\"D\\\" }\""
Punctuation:  ";"
Text:  "<newline>          "
Name:  "JSONValue"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Name:  "s"
Punctuation:  ");"
Text:  "<newline>          "
Keyword:  "assert"
Punctuation:  "("
Name:  "j"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ");"
Text:  "<newline>          "
Keyword:  "assert"
Punctuation:  "("
Name:  "j"
Punctuation:  "["
Literal.String:  "\"language\""
Punctuation:  "]."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "// Explicitly undocumented. It will be removed in June 2016. @@@DEPRECATED_2016-06@@@"
Text:  "<newline>    "
Keyword:  "deprecated"
Punctuation:  "("
Literal.String:  "\"Please assign the value with the adequate type to JSONValue directly.\""
Punctuation:  ")"
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Name:  "JSON_TYPE"
Text:  " "
Name:  "type"
Punctuation:  "("
Name:  "JSON_TYPE"
Text:  " "
Name:  "newType"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "type_tag"
Text:  " "
Punctuation:  "!="
Text:  " "
Name:  "newType"
Text:  "<newline>         "
Punctuation:  "&&"
Text:  " "
Punctuation:  "(("
Name:  "type_tag"
Text:  " "
Punctuation:  "!="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Text:  " "
Punctuation:  "&&"
Text:  " "
Name:  "type_tag"
Text:  " "
Punctuation:  "!="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "UINTEGER"
Punctuation:  ")"
Text:  "<newline>          "
Punctuation:  "||"
Text:  " "
Punctuation:  "("
Name:  "newType"
Text:  "  "
Punctuation:  "!="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Text:  " "
Punctuation:  "&&"
Text:  " "
Name:  "newType"
Text:  "  "
Punctuation:  "!="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "UINTEGER"
Punctuation:  ")))"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "final"
Text:  " "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "newType"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "{"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ":"
Text:  "<newline>                    "
Name:  "store"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "str"
Punctuation:  "."
Name:  "init"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ":"
Text:  "<newline>                    "
Name:  "store"
Punctuation:  "."
Name:  "integer"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "integer"
Punctuation:  "."
Name:  "init"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "UINTEGER"
Punctuation:  ":"
Text:  "<newline>                    "
Name:  "store"
Punctuation:  "."
Name:  "uinteger"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "uinteger"
Punctuation:  "."
Name:  "init"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FLOAT"
Punctuation:  ":"
Text:  "<newline>                    "
Name:  "store"
Punctuation:  "."
Name:  "floating"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "floating"
Punctuation:  "."
Name:  "init"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ":"
Text:  "<newline>                    "
Name:  "store"
Punctuation:  "."
Name:  "object"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  "."
Name:  "init"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ":"
Text:  "<newline>                    "
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  "."
Name:  "init"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "TRUE"
Punctuation:  ":"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FALSE"
Punctuation:  ":"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "NULL"
Punctuation:  ":"
Text:  "<newline>                    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "newType"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Value getter/setter for $(D JSON_TYPE.STRING)."
Text:  "<newline>    "
Comment.Single:  "/// Throws: $(D JSONException) for read access if $(D type) is not"
Text:  "<newline>    "
Comment.Single:  "/// $(D JSON_TYPE.STRING)."
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Keyword:  "inout"
Punctuation:  "("
Name.Builtin:  "string"
Punctuation:  ")"
Text:  " "
Name:  "str"
Punctuation:  "()"
Text:  " "
Keyword:  "inout"
Text:  " "
Keyword:  "pure"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not a string\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "str"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Name.Builtin:  "string"
Text:  " "
Name:  "str"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "v"
Punctuation:  ")"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@nogc"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "assign"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "str"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Keyword:  "unittest"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "JSONValue"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "["
Text:  " "
Literal.String:  "\"language\""
Punctuation:  ":"
Text:  " "
Literal.String:  "\"D\""
Text:  " "
Punctuation:  "];"
Text:  "<newline><newline>        "
Comment.Single:  "// get value"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Name:  "j"
Punctuation:  "["
Literal.String:  "\"language\""
Punctuation:  "]."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"D\""
Punctuation:  ");"
Text:  "<newline><newline>        "
Comment.Single:  "// change existing key to new string"
Text:  "<newline>        "
Name:  "j"
Punctuation:  "["
Literal.String:  "\"language\""
Punctuation:  "]."
Name:  "str"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"Perl\""
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Name:  "j"
Punctuation:  "["
Literal.String:  "\"language\""
Punctuation:  "]."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"Perl\""
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Value getter/setter for $(D JSON_TYPE.INTEGER)."
Text:  "<newline>    "
Comment.Single:  "/// Throws: $(D JSONException) for read access if $(D type) is not"
Text:  "<newline>    "
Comment.Single:  "/// $(D JSON_TYPE.INTEGER)."
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Keyword:  "inout"
Punctuation:  "("
Keyword.Type:  "long"
Punctuation:  ")"
Text:  " "
Name:  "integer"
Punctuation:  "()"
Text:  " "
Keyword:  "inout"
Text:  " "
Keyword:  "pure"
Text:  " "
Name.Decorator:  "@safe"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an integer\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "integer"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Keyword.Type:  "long"
Text:  " "
Name:  "integer"
Punctuation:  "("
Keyword.Type:  "long"
Text:  " "
Name:  "v"
Punctuation:  ")"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@safe"
Text:  " "
Name.Decorator:  "@nogc"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "assign"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "integer"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Value getter/setter for $(D JSON_TYPE.UINTEGER)."
Text:  "<newline>    "
Comment.Single:  "/// Throws: $(D JSONException) for read access if $(D type) is not"
Text:  "<newline>    "
Comment.Single:  "/// $(D JSON_TYPE.UINTEGER)."
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Keyword:  "inout"
Punctuation:  "("
Keyword.Type:  "ulong"
Punctuation:  ")"
Text:  " "
Name:  "uinteger"
Punctuation:  "()"
Text:  " "
Keyword:  "inout"
Text:  " "
Keyword:  "pure"
Text:  " "
Name.Decorator:  "@safe"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "UINTEGER"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an unsigned integer\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "uinteger"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Keyword.Type:  "ulong"
Text:  " "
Name:  "uinteger"
Punctuation:  "("
Keyword.Type:  "ulong"
Text:  " "
Name:  "v"
Punctuation:  ")"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@safe"
Text:  " "
Name.Decorator:  "@nogc"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "assign"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "uinteger"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Value getter/setter for $(D JSON_TYPE.FLOAT)."
Text:  "<newline>    "
Comment.Single:  "/// Throws: $(D JSONException) for read access if $(D type) is not"
Text:  "<newline>    "
Comment.Single:  "/// $(D JSON_TYPE.FLOAT)."
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Keyword:  "inout"
Punctuation:  "("
Keyword.Type:  "double"
Punctuation:  ")"
Text:  " "
Name:  "floating"
Punctuation:  "()"
Text:  " "
Keyword:  "inout"
Text:  " "
Keyword:  "pure"
Text:  " "
Name.Decorator:  "@safe"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FLOAT"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not a floating type\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "floating"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Keyword.Type:  "double"
Text:  " "
Name:  "floating"
Punctuation:  "("
Keyword.Type:  "double"
Text:  " "
Name:  "v"
Punctuation:  ")"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@safe"
Text:  " "
Name.Decorator:  "@nogc"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "assign"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "floating"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Value getter/setter for $(D JSON_TYPE.OBJECT)."
Text:  "<newline>    "
Comment.Single:  "/// Throws: $(D JSONException) for read access if $(D type) is not"
Text:  "<newline>    "
Comment.Single:  "/// $(D JSON_TYPE.OBJECT)."
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Keyword:  "ref"
Text:  " "
Keyword:  "inout"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "["
Name.Builtin:  "string"
Punctuation:  "])"
Text:  " "
Name:  "object"
Punctuation:  "()"
Text:  " "
Keyword:  "inout"
Text:  " "
Keyword:  "pure"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an object\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Name:  "JSONValue"
Punctuation:  "["
Name.Builtin:  "string"
Punctuation:  "]"
Text:  " "
Name:  "object"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "["
Name.Builtin:  "string"
Punctuation:  "]"
Text:  " "
Name:  "v"
Punctuation:  ")"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@nogc"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "assign"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Value getter/setter for $(D JSON_TYPE.ARRAY)."
Text:  "<newline>    "
Comment.Single:  "/// Throws: $(D JSONException) for read access if $(D type) is not"
Text:  "<newline>    "
Comment.Single:  "/// $(D JSON_TYPE.ARRAY)."
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Keyword:  "ref"
Text:  " "
Keyword:  "inout"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "[])"
Text:  " "
Name:  "array"
Punctuation:  "()"
Text:  " "
Keyword:  "inout"
Text:  " "
Keyword:  "pure"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an array\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "/// ditto"
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Name:  "JSONValue"
Punctuation:  "[]"
Text:  " "
Name:  "array"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "[]"
Text:  " "
Name:  "v"
Punctuation:  ")"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@nogc"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "assign"
Punctuation:  "("
Name:  "v"
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Test whether the type is $(D JSON_TYPE.NULL)"
Text:  "<newline>    "
Name.Decorator:  "@property"
Text:  " "
Keyword.Type:  "bool"
Text:  " "
Name:  "isNull"
Punctuation:  "()"
Text:  " "
Keyword:  "const"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@safe"
Text:  " "
Name.Decorator:  "@nogc"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "NULL"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword:  "private"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name:  "assign"
Punctuation:  "("
Name:  "T"
Punctuation:  ")("
Name:  "T"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword:  "typeof"
Punctuation:  "("
Keyword.Constant:  "null"
Punctuation:  ")))"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "NULL"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Builtin:  "string"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "store"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword.Type:  "bool"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Text:  " "
Punctuation:  "?"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "TRUE"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FALSE"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword.Type:  "ulong"
Punctuation:  ")"
Text:  " "
Punctuation:  "&&"
Text:  " "
Name:  "isUnsigned"
Punctuation:  "!"
Name:  "T"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "UINTEGER"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "store"
Punctuation:  "."
Name:  "uinteger"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword.Type:  "long"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "store"
Punctuation:  "."
Name:  "integer"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "isFloatingPoint"
Punctuation:  "!"
Name:  "T"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FLOAT"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "store"
Punctuation:  "."
Name:  "floating"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "Value"
Punctuation:  "["
Name:  "Key"
Punctuation:  "],"
Text:  " "
Name:  "Key"
Punctuation:  ","
Text:  " "
Name:  "Value"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "static"
Text:  " "
Keyword:  "assert"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "Key"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Builtin:  "string"
Punctuation:  "),"
Text:  " "
Literal.String:  "\"AA key must be string\""
Punctuation:  ");"
Text:  "<newline>            "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "Value"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                "
Name:  "store"
Punctuation:  "."
Name:  "object"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>            "
Keyword:  "else"
Text:  "<newline>            "
Punctuation:  "{"
Text:  "<newline>                "
Name:  "JSONValue"
Punctuation:  "["
Name.Builtin:  "string"
Punctuation:  "]"
Text:  " "
Name:  "aa"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "foreach"
Punctuation:  "("
Name:  "key"
Punctuation:  ","
Text:  " "
Name:  "value"
Punctuation:  ";"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  "<newline>                    "
Name:  "aa"
Punctuation:  "["
Name:  "key"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Name:  "value"
Punctuation:  ");"
Text:  "<newline>                "
Name:  "store"
Punctuation:  "."
Name:  "object"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "aa"
Punctuation:  ";"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "isArray"
Punctuation:  "!"
Name:  "T"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "ElementEncodingType"
Punctuation:  "!"
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  "))"
Text:  "<newline>            "
Punctuation:  "{"
Text:  "<newline>                "
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>            "
Keyword:  "else"
Text:  "<newline>            "
Punctuation:  "{"
Text:  "<newline>                "
Name:  "JSONValue"
Punctuation:  "[]"
Text:  " "
Name:  "new_arg"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "JSONValue"
Punctuation:  "["
Name:  "arg"
Punctuation:  "."
Name:  "length"
Punctuation:  "];"
Text:  "<newline>                "
Keyword:  "foreach"
Punctuation:  "("
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "e"
Punctuation:  ";"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  "<newline>                    "
Name:  "new_arg"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Name:  "e"
Punctuation:  ");"
Text:  "<newline>                "
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "new_arg"
Punctuation:  ";"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  "."
Name:  "type"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "store"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  "."
Name:  "store"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "static"
Text:  " "
Keyword:  "assert"
Punctuation:  "("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Name:  "text"
Punctuation:  "("
Literal.String:  "`unable to convert type \"`"
Punctuation:  ","
Text:  " "
Name:  "T"
Punctuation:  "."
Name:  "stringof"
Punctuation:  ","
Text:  " "
Literal.String:  "`\" to json`"
Punctuation:  "));"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword:  "private"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name:  "assignRef"
Punctuation:  "("
Name:  "T"
Punctuation:  ")("
Keyword:  "ref"
Text:  " "
Name:  "T"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "isStaticArray"
Punctuation:  "!"
Name:  "T"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "ElementEncodingType"
Punctuation:  "!"
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "JSONValue"
Punctuation:  "[]"
Text:  " "
Name:  "new_arg"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "JSONValue"
Punctuation:  "["
Name:  "arg"
Punctuation:  "."
Name:  "length"
Punctuation:  "];"
Text:  "<newline>            "
Keyword:  "foreach"
Punctuation:  "("
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "e"
Punctuation:  ";"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  "<newline>                "
Name:  "new_arg"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Name:  "e"
Punctuation:  ");"
Text:  "<newline>            "
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "new_arg"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Multiline:  "/**<newline>     * Constructor for $(D JSONValue). If $(D arg) is a $(D JSONValue)<newline>     * its value and type will be copied to the new $(D JSONValue).<newline>     * Note that this is a shallow copy: if type is $(D JSON_TYPE.OBJECT)<newline>     * or $(D JSON_TYPE.ARRAY) then only the reference to the data will<newline>     * be copied.<newline>     * Otherwise, $(D arg) must be implicitly convertible to one of the<newline>     * following types: $(D typeof(null)), $(D string), $(D ulong),<newline>     * $(D long), $(D double), an associative array $(D V[K]) for any $(D V)<newline>     * and $(D K) i.e. a JSON object, any array or $(D bool). The type will<newline>     * be set accordingly.<newline>    */"
Text:  "<newline>    "
Keyword:  "this"
Punctuation:  "("
Name:  "T"
Punctuation:  ")("
Name:  "T"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  " "
Keyword:  "if"
Punctuation:  "(!"
Name:  "isStaticArray"
Punctuation:  "!"
Name:  "T"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "assign"
Punctuation:  "("
Name:  "arg"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "/// Ditto"
Text:  "<newline>    "
Keyword:  "this"
Punctuation:  "("
Name:  "T"
Punctuation:  ")("
Keyword:  "ref"
Text:  " "
Name:  "T"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "isStaticArray"
Punctuation:  "!"
Name:  "T"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "assignRef"
Punctuation:  "("
Name:  "arg"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "/// Ditto"
Text:  "<newline>    "
Keyword:  "this"
Punctuation:  "("
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  ")("
Keyword:  "inout"
Text:  " "
Name:  "T"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  " "
Keyword:  "inout"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "store"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  "."
Name:  "store"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  "."
Name:  "type"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Keyword:  "unittest"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "JSONValue"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Text:  " "
Literal.String:  "\"a string\""
Text:  " "
Punctuation:  ");"
Text:  "<newline>        "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.Number.Integer:  "42"
Punctuation:  ");"
Text:  "<newline><newline>        "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "]"
Text:  " "
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Name:  "j"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ");"
Text:  "<newline><newline>        "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Text:  " "
Punctuation:  "["
Literal.String:  "\"language\""
Punctuation:  ":"
Text:  " "
Literal.String:  "\"D\""
Punctuation:  "]"
Text:  " "
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Name:  "j"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "void"
Text:  " "
Name:  "opAssign"
Punctuation:  "("
Name:  "T"
Punctuation:  ")("
Name:  "T"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  " "
Keyword:  "if"
Punctuation:  "(!"
Name:  "isStaticArray"
Punctuation:  "!"
Name:  "T"
Text:  " "
Punctuation:  "&&"
Text:  " "
Punctuation:  "!"
Keyword:  "is"
Punctuation:  "("
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "assign"
Punctuation:  "("
Name:  "arg"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "void"
Text:  " "
Name:  "opAssign"
Punctuation:  "("
Name:  "T"
Punctuation:  ")("
Keyword:  "ref"
Text:  " "
Name:  "T"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "isStaticArray"
Punctuation:  "!"
Name:  "T"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "assignRef"
Punctuation:  "("
Name:  "arg"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Array syntax for json arrays."
Text:  "<newline>    "
Comment.Single:  "/// Throws: $(D JSONException) if $(D type) is not $(D JSON_TYPE.ARRAY)."
Text:  "<newline>    "
Keyword:  "ref"
Text:  " "
Keyword:  "inout"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  ")"
Text:  " "
Name:  "opIndex"
Punctuation:  "("
Name.Builtin:  "size_t"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Keyword:  "inout"
Text:  " "
Keyword:  "pure"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an array\""
Punctuation:  ");"
Text:  "<newline>        "
Name:  "enforceEx"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "i"
Text:  " "
Punctuation:  "<"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  "."
Name:  "length"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue array index is out of range\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  "["
Name:  "i"
Punctuation:  "];"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Keyword:  "unittest"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "JSONValue"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "42"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "43"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "44"
Punctuation:  "]"
Text:  " "
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Text:  " "
Name:  "j"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]."
Name:  "integer"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "42"
Text:  " "
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Text:  " "
Name:  "j"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]."
Name:  "integer"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "43"
Text:  " "
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Hash syntax for json objects."
Text:  "<newline>    "
Comment.Single:  "/// Throws: $(D JSONException) if $(D type) is not $(D JSON_TYPE.OBJECT)."
Text:  "<newline>    "
Keyword:  "ref"
Text:  " "
Keyword:  "inout"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  ")"
Text:  " "
Name:  "opIndex"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "k"
Punctuation:  ")"
Text:  " "
Keyword:  "inout"
Text:  " "
Keyword:  "pure"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an object\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Punctuation:  "*"
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "k"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  ","
Text:  "<newline>                                        "
Literal.String:  "\"Key not found: \""
Text:  " "
Punctuation:  "~"
Text:  " "
Name:  "k"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Keyword:  "unittest"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "JSONValue"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Text:  " "
Punctuation:  "["
Literal.String:  "\"language\""
Punctuation:  ":"
Text:  " "
Literal.String:  "\"D\""
Punctuation:  "]"
Text:  " "
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Text:  " "
Name:  "j"
Punctuation:  "["
Literal.String:  "\"language\""
Punctuation:  "]."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"D\""
Text:  " "
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Operator sets $(D value) for element of JSON object by $(D key)."
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Comment.Single:  "/// If JSON value is null, then operator initializes it with object and then"
Text:  "<newline>    "
Comment.Single:  "/// sets $(D value) for it."
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Comment.Single:  "/// Throws: $(D JSONException) if $(D type) is not $(D JSON_TYPE.OBJECT)"
Text:  "<newline>    "
Comment.Single:  "/// or $(D JSON_TYPE.NULL)."
Text:  "<newline>    "
Keyword.Type:  "void"
Text:  " "
Name:  "opIndexAssign"
Punctuation:  "("
Name:  "T"
Punctuation:  ")("
Keyword:  "auto"
Text:  " "
Keyword:  "ref"
Text:  " "
Name:  "T"
Text:  " "
Name:  "value"
Punctuation:  ","
Text:  " "
Name.Builtin:  "string"
Text:  " "
Name:  "key"
Punctuation:  ")"
Text:  " "
Keyword:  "pure"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforceEx"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Text:  " "
Punctuation:  "||"
Text:  " "
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "NULL"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue must be object or null\""
Punctuation:  ");"
Text:  "<newline><newline>        "
Keyword:  "if"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "NULL"
Punctuation:  ")"
Text:  "<newline>            "
Keyword:  "this"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "["
Name.Builtin:  "string"
Punctuation:  "])."
Name:  "init"
Punctuation:  ";"
Text:  "<newline><newline>        "
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  "["
Name:  "key"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "value"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Keyword:  "unittest"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "JSONValue"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Text:  " "
Punctuation:  "["
Literal.String:  "\"language\""
Punctuation:  ":"
Text:  " "
Literal.String:  "\"D\""
Punctuation:  "]"
Text:  " "
Punctuation:  ");"
Text:  "<newline>            "
Name:  "j"
Punctuation:  "["
Literal.String:  "\"language\""
Punctuation:  "]."
Name:  "str"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"Perl\""
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "assert"
Punctuation:  "("
Text:  " "
Name:  "j"
Punctuation:  "["
Literal.String:  "\"language\""
Punctuation:  "]."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"Perl\""
Text:  " "
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "void"
Text:  " "
Name:  "opIndexAssign"
Punctuation:  "("
Name:  "T"
Punctuation:  ")("
Name:  "T"
Text:  " "
Name:  "arg"
Punctuation:  ","
Text:  " "
Name.Builtin:  "size_t"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Keyword:  "pure"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforceEx"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an array\""
Punctuation:  ");"
Text:  "<newline>        "
Name:  "enforceEx"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "i"
Text:  " "
Punctuation:  "<"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  "."
Name:  "length"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue array index is out of range\""
Punctuation:  ");"
Text:  "<newline>        "
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Keyword:  "unittest"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "JSONValue"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Text:  " "
Punctuation:  "["
Literal.String:  "\"Perl\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"C\""
Punctuation:  "]"
Text:  " "
Punctuation:  ");"
Text:  "<newline>            "
Name:  "j"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]."
Name:  "str"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"D\""
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "assert"
Punctuation:  "("
Text:  " "
Name:  "j"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"D\""
Text:  " "
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "opBinary"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "op"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String:  "\"~\""
Punctuation:  ","
Text:  " "
Name:  "T"
Punctuation:  ")("
Name:  "T"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforceEx"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an array\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "isArray"
Punctuation:  "!"
Name:  "T"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "JSONValue"
Text:  " "
Name:  "newArray"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Keyword:  "this"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  "."
Name:  "dup"
Punctuation:  ");"
Text:  "<newline>            "
Name:  "newArray"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "~="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Name:  "arg"
Punctuation:  ")."
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name:  "newArray"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "enforceEx"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "arg"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ","
Text:  "<newline>                                    "
Literal.String:  "\"JSONValue is not an array\""
Punctuation:  ");"
Text:  "<newline>            "
Name:  "JSONValue"
Text:  " "
Name:  "newArray"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Keyword:  "this"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  "."
Name:  "dup"
Punctuation:  ");"
Text:  "<newline>            "
Name:  "newArray"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "~="
Text:  " "
Name:  "arg"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name:  "newArray"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "static"
Text:  " "
Keyword:  "assert"
Punctuation:  "("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Literal.String:  "\"argument is not an array or a JSONValue array\""
Punctuation:  ");"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "void"
Text:  " "
Name:  "opOpAssign"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "op"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String:  "\"~\""
Punctuation:  ","
Text:  " "
Name:  "T"
Punctuation:  ")("
Name:  "T"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforceEx"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an array\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "isArray"
Punctuation:  "!"
Name:  "T"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "~="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Name:  "arg"
Punctuation:  ")."
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Name:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "enforceEx"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "arg"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ","
Text:  "<newline>                                    "
Literal.String:  "\"JSONValue is not an array\""
Punctuation:  ");"
Text:  "<newline>            "
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "~="
Text:  " "
Name:  "arg"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "static"
Text:  " "
Keyword:  "assert"
Punctuation:  "("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Literal.String:  "\"argument is not an array or a JSONValue array\""
Punctuation:  ");"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Multiline:  "/**<newline>     * Support for the $(D in) operator.<newline>     *<newline>     * Tests wether a key can be found in an object.<newline>     *<newline>     * Returns:<newline>     *      when found, the $(D const(JSONValue)*) that matches to the key,<newline>     *      otherwise $(D null).<newline>     *<newline>     * Throws: $(D JSONException) if the right hand side argument $(D JSON_TYPE)<newline>     * is not $(D OBJECT).<newline>     */"
Text:  "<newline>    "
Keyword:  "auto"
Text:  " "
Name:  "opBinaryRight"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "op"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String:  "\"in\""
Punctuation:  ")("
Name.Builtin:  "string"
Text:  " "
Name:  "k"
Punctuation:  ")"
Text:  " "
Keyword:  "const"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an object\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "k"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Keyword:  "unittest"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "JSONValue"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "["
Text:  " "
Literal.String:  "\"language\""
Punctuation:  ":"
Text:  " "
Literal.String:  "\"D\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"author\""
Punctuation:  ":"
Text:  " "
Literal.String:  "\"walter\""
Text:  " "
Punctuation:  "];"
Text:  "<newline>        "
Name.Builtin:  "string"
Text:  " "
Name:  "a"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Literal.String:  "\"author\""
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "j"
Punctuation:  ")."
Name:  "str"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "bool"
Text:  " "
Name:  "opEquals"
Punctuation:  "("
Keyword:  "const"
Text:  " "
Name:  "JSONValue"
Text:  " "
Name:  "rhs"
Punctuation:  ")"
Text:  " "
Keyword:  "const"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@nogc"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "opEquals"
Punctuation:  "("
Name:  "rhs"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "bool"
Text:  " "
Name:  "opEquals"
Punctuation:  "("
Keyword:  "ref"
Text:  " "
Keyword:  "const"
Text:  " "
Name:  "JSONValue"
Text:  " "
Name:  "rhs"
Punctuation:  ")"
Text:  " "
Keyword:  "const"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@nogc"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Comment.Single:  "// Default doesn't work well since store is a union.  Compare only"
Text:  "<newline>        "
Comment.Single:  "// what should be in store."
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "type_tag"
Text:  " "
Punctuation:  "!="
Text:  " "
Name:  "rhs"
Punctuation:  "."
Name:  "type_tag"
Punctuation:  ")"
Text:  " "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ";"
Text:  "<newline><newline>        "
Keyword:  "final"
Text:  " "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "type_tag"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ":"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "rhs"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "str"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ":"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "integer"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "rhs"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "integer"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "UINTEGER"
Punctuation:  ":"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "uinteger"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "rhs"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "uinteger"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FLOAT"
Punctuation:  ":"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "floating"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "rhs"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "floating"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ":"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "object"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "rhs"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ":"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "rhs"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "TRUE"
Punctuation:  ":"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FALSE"
Punctuation:  ":"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "NULL"
Punctuation:  ":"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Implements the foreach $(D opApply) interface for json arrays."
Text:  "<newline>    "
Keyword.Type:  "int"
Text:  " "
Name:  "opApply"
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Keyword:  "delegate"
Punctuation:  "("
Name.Builtin:  "size_t"
Text:  " "
Name:  "index"
Punctuation:  ","
Text:  " "
Keyword:  "ref"
Text:  " "
Name:  "JSONValue"
Punctuation:  ")"
Text:  " "
Name:  "dg"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an array\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword.Type:  "int"
Text:  " "
Name:  "result"
Punctuation:  ";"
Text:  "<newline><newline>        "
Keyword:  "foreach"
Punctuation:  "("
Name.Builtin:  "size_t"
Text:  " "
Name:  "index"
Punctuation:  ","
Text:  " "
Keyword:  "ref"
Text:  " "
Name:  "value"
Punctuation:  ";"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "result"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "dg"
Punctuation:  "("
Name:  "index"
Punctuation:  ","
Text:  " "
Name:  "value"
Punctuation:  ");"
Text:  "<newline>            "
Keyword:  "if"
Punctuation:  "("
Name:  "result"
Punctuation:  ")"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline><newline>        "
Keyword:  "return"
Text:  " "
Name:  "result"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Implements the foreach $(D opApply) interface for json objects."
Text:  "<newline>    "
Keyword.Type:  "int"
Text:  " "
Name:  "opApply"
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Keyword:  "delegate"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "key"
Punctuation:  ","
Text:  " "
Keyword:  "ref"
Text:  " "
Name:  "JSONValue"
Punctuation:  ")"
Text:  " "
Name:  "dg"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "enforce"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ","
Text:  "<newline>                                "
Literal.String:  "\"JSONValue is not an object\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword.Type:  "int"
Text:  " "
Name:  "result"
Punctuation:  ";"
Text:  "<newline><newline>        "
Keyword:  "foreach"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "key"
Punctuation:  ","
Text:  " "
Keyword:  "ref"
Text:  " "
Name:  "value"
Punctuation:  ";"
Text:  " "
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "result"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "dg"
Punctuation:  "("
Name:  "key"
Punctuation:  ","
Text:  " "
Name:  "value"
Punctuation:  ");"
Text:  "<newline>            "
Keyword:  "if"
Punctuation:  "("
Name:  "result"
Punctuation:  ")"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline><newline>        "
Keyword:  "return"
Text:  " "
Name:  "result"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Implicitly calls $(D toJSON) on this JSONValue."
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Comment.Single:  "/// $(I options) can be used to tweak the conversion behavior."
Text:  "<newline>    "
Name.Builtin:  "string"
Text:  " "
Name:  "toString"
Punctuation:  "("
Keyword:  "in"
Text:  " "
Name:  "JSONOptions"
Text:  " "
Name:  "options"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONOptions"
Punctuation:  "."
Name:  "none"
Punctuation:  ")"
Text:  " "
Keyword:  "const"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "toJSON"
Punctuation:  "(&"
Keyword:  "this"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Name:  "options"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "/// Implicitly calls $(D toJSON) on this JSONValue, like $(D toString), but"
Text:  "<newline>    "
Comment.Single:  "/// also passes $(I true) as $(I pretty) argument."
Text:  "<newline>    "
Comment.Single:  "///"
Text:  "<newline>    "
Comment.Single:  "/// $(I options) can be used to tweak the conversion behavior"
Text:  "<newline>    "
Name.Builtin:  "string"
Text:  " "
Name:  "toPrettyString"
Punctuation:  "("
Keyword:  "in"
Text:  " "
Name:  "JSONOptions"
Text:  " "
Name:  "options"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONOptions"
Punctuation:  "."
Name:  "none"
Punctuation:  ")"
Text:  " "
Keyword:  "const"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "toJSON"
Punctuation:  "(&"
Keyword:  "this"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ","
Text:  " "
Name:  "options"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline>Parses a serialized string and returns a tree of JSON values.<newline>Throws: $(XREF json,JSONException) if the depth exceeds the max depth.<newline>Params:<newline>    json = json-formatted string to parse<newline>    maxDepth = maximum depth of nesting allowed, -1 disables depth checking<newline>    options = enable decoding string representations of NaN/Inf as float values<newline>*/"
Text:  "<newline>"
Name:  "JSONValue"
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Name:  "T"
Punctuation:  ")("
Name:  "T"
Text:  " "
Name:  "json"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "maxDepth"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "JSONOptions"
Text:  " "
Name:  "options"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONOptions"
Punctuation:  "."
Name:  "none"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "if"
Punctuation:  "("
Name:  "isInputRange"
Punctuation:  "!"
Name:  "T"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "ascii"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "isWhite"
Punctuation:  ","
Text:  " "
Name:  "isDigit"
Punctuation:  ","
Text:  " "
Name:  "isHexDigit"
Punctuation:  ","
Text:  " "
Name:  "toUpper"
Punctuation:  ","
Text:  " "
Name:  "toLower"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "utf"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "toUTF8"
Punctuation:  ";"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "root"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Type:  "void"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "root"
Punctuation:  "."
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "NULL"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "if"
Punctuation:  "("
Name:  "json"
Punctuation:  "."
Name:  "empty"
Punctuation:  ")"
Text:  " "
Keyword:  "return"
Text:  " "
Name:  "root"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword.Type:  "int"
Text:  " "
Name:  "depth"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>    "
Keyword.Type:  "dchar"
Text:  " "
Name:  "next"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>    "
Keyword.Type:  "int"
Text:  " "
Name:  "line"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "pos"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword.Type:  "void"
Text:  " "
Name:  "error"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "msg"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "throw"
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "JSONException"
Punctuation:  "("
Name:  "msg"
Punctuation:  ","
Text:  " "
Name:  "line"
Punctuation:  ","
Text:  " "
Name:  "pos"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "dchar"
Text:  " "
Name:  "popChar"
Punctuation:  "()"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "json"
Punctuation:  "."
Name:  "empty"
Punctuation:  ")"
Text:  " "
Name:  "error"
Punctuation:  "("
Literal.String:  "\"Unexpected end of data.\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword.Type:  "dchar"
Text:  " "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "json"
Punctuation:  "."
Name:  "front"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "json"
Punctuation:  "."
Name:  "popFront"
Punctuation:  "();"
Text:  "<newline><newline>        "
Keyword:  "if"
Punctuation:  "("
Name:  "c"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String.Char:  "'<newline>'"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "line"
Punctuation:  "++;"
Text:  "<newline>            "
Name:  "pos"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "pos"
Punctuation:  "++;"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline><newline>        "
Keyword:  "return"
Text:  " "
Name:  "c"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "dchar"
Text:  " "
Name:  "peekChar"
Punctuation:  "()"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "if"
Punctuation:  "(!"
Name:  "next"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "if"
Punctuation:  "("
Name:  "json"
Punctuation:  "."
Name:  "empty"
Punctuation:  ")"
Text:  " "
Keyword:  "return"
Text:  " "
Literal.String.Char:  "'\\0'"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "next"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "popChar"
Punctuation:  "();"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "next"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "void"
Text:  " "
Name:  "skipWhitespace"
Punctuation:  "()"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "while"
Punctuation:  "("
Name:  "isWhite"
Punctuation:  "("
Name:  "peekChar"
Punctuation:  "()))"
Text:  " "
Name:  "next"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "dchar"
Text:  " "
Name:  "getChar"
Punctuation:  "("
Keyword.Type:  "bool"
Text:  " "
Name:  "SkipWhitespace"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")()"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "SkipWhitespace"
Punctuation:  ")"
Text:  " "
Name:  "skipWhitespace"
Punctuation:  "();"
Text:  "<newline><newline>        "
Keyword.Type:  "dchar"
Text:  " "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Type:  "void"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "if"
Punctuation:  "("
Name:  "next"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "next"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "next"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>            "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "popChar"
Punctuation:  "();"
Text:  "<newline><newline>        "
Keyword:  "return"
Text:  " "
Name:  "c"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "void"
Text:  " "
Name:  "checkChar"
Punctuation:  "("
Keyword.Type:  "bool"
Text:  " "
Name:  "SkipWhitespace"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ","
Text:  " "
Keyword.Type:  "bool"
Text:  " "
Name:  "CaseSensitive"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ")("
Keyword.Type:  "char"
Text:  " "
Name:  "c"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "SkipWhitespace"
Punctuation:  ")"
Text:  " "
Name:  "skipWhitespace"
Punctuation:  "();"
Text:  "<newline>        "
Keyword:  "auto"
Text:  " "
Name:  "c2"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "getChar"
Punctuation:  "();"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "(!"
Name:  "CaseSensitive"
Punctuation:  ")"
Text:  " "
Name:  "c2"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "toLower"
Punctuation:  "("
Name:  "c2"
Punctuation:  ");"
Text:  "<newline><newline>        "
Keyword:  "if"
Punctuation:  "("
Name:  "c2"
Text:  " "
Punctuation:  "!="
Text:  " "
Name:  "c"
Punctuation:  ")"
Text:  " "
Name:  "error"
Punctuation:  "("
Name:  "text"
Punctuation:  "("
Literal.String:  "\"Found '\""
Punctuation:  ","
Text:  " "
Name:  "c2"
Punctuation:  ","
Text:  " "
Literal.String:  "\"' when expecting '\""
Punctuation:  ","
Text:  " "
Name:  "c"
Punctuation:  ","
Text:  " "
Literal.String:  "\"'.\""
Punctuation:  "));"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "bool"
Text:  " "
Name:  "testChar"
Punctuation:  "("
Keyword.Type:  "bool"
Text:  " "
Name:  "SkipWhitespace"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ","
Text:  " "
Keyword.Type:  "bool"
Text:  " "
Name:  "CaseSensitive"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ")("
Keyword.Type:  "char"
Text:  " "
Name:  "c"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "SkipWhitespace"
Punctuation:  ")"
Text:  " "
Name:  "skipWhitespace"
Punctuation:  "();"
Text:  "<newline>        "
Keyword:  "auto"
Text:  " "
Name:  "c2"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "peekChar"
Punctuation:  "();"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "(!"
Name:  "CaseSensitive"
Punctuation:  ")"
Text:  " "
Name:  "c2"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "toLower"
Punctuation:  "("
Name:  "c2"
Punctuation:  ");"
Text:  "<newline><newline>        "
Keyword:  "if"
Punctuation:  "("
Name:  "c2"
Text:  " "
Punctuation:  "!="
Text:  " "
Name:  "c"
Punctuation:  ")"
Text:  " "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ";"
Text:  "<newline><newline>        "
Name:  "getChar"
Punctuation:  "();"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Builtin:  "string"
Text:  " "
Name:  "parseString"
Punctuation:  "()"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "auto"
Text:  " "
Name:  "str"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "appender"
Punctuation:  "!"
Name.Builtin:  "string"
Punctuation:  "();"
Text:  "<newline><newline>    "
Name:  "Next"
Punctuation:  ":"
Text:  "<newline>        "
Keyword:  "switch"
Punctuation:  "("
Name:  "peekChar"
Punctuation:  "())"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'\"'"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "getChar"
Punctuation:  "();"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'\\\\'"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "getChar"
Punctuation:  "();"
Text:  "<newline>                "
Keyword:  "auto"
Text:  " "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "getChar"
Punctuation:  "();"
Text:  "<newline>                "
Keyword:  "switch"
Punctuation:  "("
Name:  "c"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'\"'"
Punctuation:  ":"
Text:  "       "
Name:  "str"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'\"'"
Punctuation:  ");"
Text:  "   "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'\\\\'"
Punctuation:  ":"
Text:  "      "
Name:  "str"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'\\\\'"
Punctuation:  ");"
Text:  "  "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'/'"
Punctuation:  ":"
Text:  "       "
Name:  "str"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'/'"
Punctuation:  ");"
Text:  "   "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'b'"
Punctuation:  ":"
Text:  "       "
Name:  "str"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'\\b'"
Punctuation:  ");"
Text:  "  "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'f'"
Punctuation:  ":"
Text:  "       "
Name:  "str"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'\\f'"
Punctuation:  ");"
Text:  "  "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'n'"
Punctuation:  ":"
Text:  "       "
Name:  "str"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'<newline>'"
Punctuation:  ");"
Text:  "  "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'r'"
Punctuation:  ":"
Text:  "       "
Name:  "str"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'\\r'"
Punctuation:  ");"
Text:  "  "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'t'"
Punctuation:  ":"
Text:  "       "
Name:  "str"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'\\t'"
Punctuation:  ");"
Text:  "  "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'u'"
Punctuation:  ":"
Text:  "<newline>                        "
Keyword.Type:  "dchar"
Text:  " "
Name:  "val"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword:  "foreach_reverse"
Punctuation:  "("
Name:  "i"
Punctuation:  ";"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  ".."
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ")"
Text:  "<newline>                        "
Punctuation:  "{"
Text:  "<newline>                            "
Keyword:  "auto"
Text:  " "
Name:  "hex"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "toUpper"
Punctuation:  "("
Name:  "getChar"
Punctuation:  "());"
Text:  "<newline>                            "
Keyword:  "if"
Punctuation:  "(!"
Name:  "isHexDigit"
Punctuation:  "("
Name:  "hex"
Punctuation:  "))"
Text:  " "
Name:  "error"
Punctuation:  "("
Literal.String:  "\"Expecting hex character\""
Punctuation:  ");"
Text:  "<newline>                            "
Name:  "val"
Text:  " "
Punctuation:  "+="
Text:  " "
Punctuation:  "("
Name:  "isDigit"
Punctuation:  "("
Name:  "hex"
Punctuation:  ")"
Text:  " "
Punctuation:  "?"
Text:  " "
Name:  "hex"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.String.Char:  "'0'"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "hex"
Text:  " "
Punctuation:  "-"
Text:  " "
Punctuation:  "("
Literal.String.Char:  "'A'"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  "))"
Text:  " "
Punctuation:  "<<"
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "4"
Text:  " "
Punctuation:  "*"
Text:  " "
Name:  "i"
Punctuation:  ");"
Text:  "<newline>                        "
Punctuation:  "}"
Text:  "<newline>                        "
Keyword.Type:  "char"
Punctuation:  "["
Literal.Number.Integer:  "4"
Punctuation:  "]"
Text:  " "
Name:  "buf"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Type:  "void"
Punctuation:  ";"
Text:  "<newline>                        "
Name:  "str"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Name:  "toUTF8"
Punctuation:  "("
Name:  "buf"
Punctuation:  ","
Text:  " "
Name:  "val"
Punctuation:  "));"
Text:  "<newline>                        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>                    "
Keyword:  "default"
Punctuation:  ":"
Text:  "<newline>                        "
Name:  "error"
Punctuation:  "("
Name:  "text"
Punctuation:  "("
Literal.String:  "\"Invalid escape sequence '\\\\\""
Punctuation:  ","
Text:  " "
Name:  "c"
Punctuation:  ","
Text:  " "
Literal.String:  "\"'.\""
Punctuation:  "));"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "goto"
Text:  " "
Name:  "Next"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "default"
Punctuation:  ":"
Text:  "<newline>                "
Keyword:  "auto"
Text:  " "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "getChar"
Punctuation:  "();"
Text:  "<newline>                "
Name:  "appendJSONChar"
Punctuation:  "(&"
Name:  "str"
Punctuation:  ","
Text:  " "
Name:  "c"
Punctuation:  ","
Text:  " "
Punctuation:  "&"
Name:  "error"
Punctuation:  ");"
Text:  "<newline>                "
Keyword:  "goto"
Text:  " "
Name:  "Next"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline><newline>        "
Keyword:  "return"
Text:  " "
Name:  "str"
Punctuation:  "."
Name:  "data"
Punctuation:  "."
Name:  "length"
Text:  " "
Punctuation:  "?"
Text:  " "
Name:  "str"
Punctuation:  "."
Name:  "data"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String:  "\"\""
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "bool"
Text:  " "
Name:  "tryGetSpecialFloat"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "str"
Punctuation:  ","
Text:  " "
Keyword:  "out"
Text:  " "
Keyword.Type:  "double"
Text:  " "
Name:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "switch"
Punctuation:  "("
Name:  "str"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "nan"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "val"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Type:  "double"
Punctuation:  "."
Name:  "nan"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "inf"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "val"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Type:  "double"
Punctuation:  "."
Name:  "infinity"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "negativeInf"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "val"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "-"
Keyword.Type:  "double"
Punctuation:  "."
Name:  "infinity"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "default"
Punctuation:  ":"
Text:  "<newline>                "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "void"
Text:  " "
Name:  "parseValue"
Punctuation:  "("
Keyword:  "ref"
Text:  " "
Name:  "JSONValue"
Text:  " "
Name:  "value"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "depth"
Punctuation:  "++;"
Text:  "<newline><newline>        "
Keyword:  "if"
Punctuation:  "("
Name:  "maxDepth"
Text:  " "
Punctuation:  "!="
Text:  " "
Punctuation:  "-"
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "&&"
Text:  " "
Name:  "depth"
Text:  " "
Punctuation:  ">"
Text:  " "
Name:  "maxDepth"
Punctuation:  ")"
Text:  " "
Name:  "error"
Punctuation:  "("
Literal.String:  "\"Nesting too deep.\""
Punctuation:  ");"
Text:  "<newline><newline>        "
Keyword:  "auto"
Text:  " "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "getChar"
Punctuation:  "!"
Keyword.Constant:  "true"
Punctuation:  "();"
Text:  "<newline><newline>        "
Keyword:  "switch"
Punctuation:  "("
Name:  "c"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'{'"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "value"
Punctuation:  "."
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "object"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ";"
Text:  "<newline><newline>                "
Keyword:  "if"
Punctuation:  "("
Name:  "testChar"
Punctuation:  "("
Literal.String.Char:  "'}'"
Punctuation:  "))"
Text:  " "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>                "
Keyword:  "do"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "checkChar"
Punctuation:  "("
Literal.String.Char:  "'\"'"
Punctuation:  ");"
Text:  "<newline>                    "
Name.Builtin:  "string"
Text:  " "
Name:  "name"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseString"
Punctuation:  "();"
Text:  "<newline>                    "
Name:  "checkChar"
Punctuation:  "("
Literal.String.Char:  "':'"
Punctuation:  ");"
Text:  "<newline>                    "
Name:  "JSONValue"
Text:  " "
Name:  "member"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Type:  "void"
Punctuation:  ";"
Text:  "<newline>                    "
Name:  "parseValue"
Punctuation:  "("
Name:  "member"
Punctuation:  ");"
Text:  "<newline>                    "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  "["
Name:  "name"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "member"
Punctuation:  ";"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "while"
Punctuation:  "("
Name:  "testChar"
Punctuation:  "("
Literal.String.Char:  "','"
Punctuation:  "));"
Text:  "<newline><newline>                "
Name:  "checkChar"
Punctuation:  "("
Literal.String.Char:  "'}'"
Punctuation:  ");"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'['"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "value"
Punctuation:  "."
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ";"
Text:  "<newline><newline>                "
Keyword:  "if"
Punctuation:  "("
Name:  "testChar"
Punctuation:  "("
Literal.String.Char:  "']'"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "cast"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "[])"
Text:  " "
Literal.String:  "\"\""
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ";"
Text:  "<newline><newline>                "
Keyword:  "do"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "JSONValue"
Text:  " "
Name:  "element"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Type:  "void"
Punctuation:  ";"
Text:  "<newline>                    "
Name:  "parseValue"
Punctuation:  "("
Name:  "element"
Punctuation:  ");"
Text:  "<newline>                    "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "~="
Text:  " "
Name:  "element"
Punctuation:  ";"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "while"
Punctuation:  "("
Name:  "testChar"
Punctuation:  "("
Literal.String.Char:  "','"
Punctuation:  "));"
Text:  "<newline><newline>                "
Name:  "checkChar"
Punctuation:  "("
Literal.String.Char:  "']'"
Punctuation:  ");"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'\"'"
Punctuation:  ":"
Text:  "<newline>                "
Keyword:  "auto"
Text:  " "
Name:  "str"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseString"
Punctuation:  "();"
Text:  "<newline><newline>                "
Comment.Single:  "// if special float parsing is enabled, check if string represents NaN/Inf"
Text:  "<newline>                "
Keyword:  "if"
Text:  " "
Punctuation:  "(("
Name:  "options"
Text:  " "
Punctuation:  "&"
Text:  " "
Name:  "JSONOptions"
Punctuation:  "."
Name:  "specialFloatLiterals"
Punctuation:  ")"
Text:  " "
Punctuation:  "&&"
Text:  "<newline>                    "
Name:  "tryGetSpecialFloat"
Punctuation:  "("
Name:  "str"
Punctuation:  ","
Text:  " "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "floating"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Comment.Single:  "// found a special float, its value was placed in value.store.floating"
Text:  "<newline>                    "
Name:  "value"
Punctuation:  "."
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FLOAT"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Name:  "value"
Punctuation:  "."
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "str"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'0'"
Punctuation:  ":"
Text:  " "
Punctuation:  ".."
Text:  " "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'9'"
Punctuation:  ":"
Text:  "<newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'-'"
Punctuation:  ":"
Text:  "<newline>                "
Keyword:  "auto"
Text:  " "
Name:  "number"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "appender"
Punctuation:  "!"
Name.Builtin:  "string"
Punctuation:  "();"
Text:  "<newline>                "
Keyword.Type:  "bool"
Text:  " "
Name:  "isFloat"
Punctuation:  ","
Text:  " "
Name:  "isNegative"
Punctuation:  ";"
Text:  "<newline><newline>                "
Keyword.Type:  "void"
Text:  " "
Name:  "readInteger"
Punctuation:  "()"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Keyword:  "if"
Punctuation:  "(!"
Name:  "isDigit"
Punctuation:  "("
Name:  "c"
Punctuation:  "))"
Text:  " "
Name:  "error"
Punctuation:  "("
Literal.String:  "\"Digit expected\""
Punctuation:  ");"
Text:  "<newline><newline>                "
Name:  "Next"
Punctuation:  ":"
Text:  " "
Name:  "number"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Name:  "c"
Punctuation:  ");"
Text:  "<newline><newline>                    "
Keyword:  "if"
Punctuation:  "("
Name:  "isDigit"
Punctuation:  "("
Name:  "peekChar"
Punctuation:  "()))"
Text:  "<newline>                    "
Punctuation:  "{"
Text:  "<newline>                        "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "getChar"
Punctuation:  "();"
Text:  "<newline>                        "
Keyword:  "goto"
Text:  " "
Name:  "Next"
Punctuation:  ";"
Text:  "<newline>                    "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Keyword:  "if"
Punctuation:  "("
Name:  "c"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String.Char:  "'-'"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "number"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'-'"
Punctuation:  ");"
Text:  "<newline>                    "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "getChar"
Punctuation:  "();"
Text:  "<newline>                    "
Name:  "isNegative"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ";"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Name:  "readInteger"
Punctuation:  "();"
Text:  "<newline><newline>                "
Keyword:  "if"
Punctuation:  "("
Name:  "testChar"
Punctuation:  "("
Literal.String.Char:  "'.'"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "isFloat"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ";"
Text:  "<newline>                    "
Name:  "number"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'.'"
Punctuation:  ");"
Text:  "<newline>                    "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "getChar"
Punctuation:  "();"
Text:  "<newline>                    "
Name:  "readInteger"
Punctuation:  "();"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "if"
Punctuation:  "("
Name:  "testChar"
Punctuation:  "!("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")("
Literal.String.Char:  "'e'"
Punctuation:  "))"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "isFloat"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ";"
Text:  "<newline>                    "
Name:  "number"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'e'"
Punctuation:  ");"
Text:  "<newline>                    "
Keyword:  "if"
Punctuation:  "("
Name:  "testChar"
Punctuation:  "("
Literal.String.Char:  "'+'"
Punctuation:  "))"
Text:  " "
Name:  "number"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'+'"
Punctuation:  ");"
Text:  "<newline>                    "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name:  "testChar"
Punctuation:  "("
Literal.String.Char:  "'-'"
Punctuation:  "))"
Text:  " "
Name:  "number"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'-'"
Punctuation:  ");"
Text:  "<newline>                    "
Name:  "c"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "getChar"
Punctuation:  "();"
Text:  "<newline>                    "
Name:  "readInteger"
Punctuation:  "();"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline><newline>                "
Name.Builtin:  "string"
Text:  " "
Name:  "data"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "number"
Punctuation:  "."
Name:  "data"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "if"
Punctuation:  "("
Name:  "isFloat"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "value"
Punctuation:  "."
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FLOAT"
Punctuation:  ";"
Text:  "<newline>                    "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "floating"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parse"
Punctuation:  "!"
Keyword.Type:  "double"
Punctuation:  "("
Name:  "data"
Punctuation:  ");"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "else"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "isNegative"
Punctuation:  ")"
Text:  "<newline>                        "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "integer"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parse"
Punctuation:  "!"
Keyword.Type:  "long"
Punctuation:  "("
Name:  "data"
Punctuation:  ");"
Text:  "<newline>                    "
Keyword:  "else"
Text:  "<newline>                        "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "uinteger"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parse"
Punctuation:  "!"
Keyword.Type:  "ulong"
Punctuation:  "("
Name:  "data"
Punctuation:  ");"
Text:  "<newline><newline>                    "
Name:  "value"
Punctuation:  "."
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "!"
Name:  "isNegative"
Text:  " "
Punctuation:  "&&"
Text:  " "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "uinteger"
Text:  " "
Punctuation:  "&"
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "1U"
Name:  "L"
Text:  " "
Punctuation:  "<<"
Text:  " "
Literal.Number.Integer:  "63"
Punctuation:  ")"
Text:  " "
Punctuation:  "?"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "UINTEGER"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ";"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'t'"
Punctuation:  ":"
Text:  "<newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'T'"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "value"
Punctuation:  "."
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "TRUE"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "checkChar"
Punctuation:  "!("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")("
Literal.String.Char:  "'r'"
Punctuation:  ");"
Text:  "<newline>                "
Name:  "checkChar"
Punctuation:  "!("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")("
Literal.String.Char:  "'u'"
Punctuation:  ");"
Text:  "<newline>                "
Name:  "checkChar"
Punctuation:  "!("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")("
Literal.String.Char:  "'e'"
Punctuation:  ");"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'f'"
Punctuation:  ":"
Text:  "<newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'F'"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "value"
Punctuation:  "."
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FALSE"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "checkChar"
Punctuation:  "!("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")("
Literal.String.Char:  "'a'"
Punctuation:  ");"
Text:  "<newline>                "
Name:  "checkChar"
Punctuation:  "!("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")("
Literal.String.Char:  "'l'"
Punctuation:  ");"
Text:  "<newline>                "
Name:  "checkChar"
Punctuation:  "!("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")("
Literal.String.Char:  "'s'"
Punctuation:  ");"
Text:  "<newline>                "
Name:  "checkChar"
Punctuation:  "!("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")("
Literal.String.Char:  "'e'"
Punctuation:  ");"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'n'"
Punctuation:  ":"
Text:  "<newline>            "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'N'"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "value"
Punctuation:  "."
Name:  "type_tag"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "NULL"
Punctuation:  ";"
Text:  "<newline>                "
Name:  "checkChar"
Punctuation:  "!("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")("
Literal.String.Char:  "'u'"
Punctuation:  ");"
Text:  "<newline>                "
Name:  "checkChar"
Punctuation:  "!("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")("
Literal.String.Char:  "'l'"
Punctuation:  ");"
Text:  "<newline>                "
Name:  "checkChar"
Punctuation:  "!("
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")("
Literal.String.Char:  "'l'"
Punctuation:  ");"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "default"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "error"
Punctuation:  "("
Name:  "text"
Punctuation:  "("
Literal.String:  "\"Unexpected character '\""
Punctuation:  ","
Text:  " "
Name:  "c"
Punctuation:  ","
Text:  " "
Literal.String:  "\"'.\""
Punctuation:  "));"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline><newline>        "
Name:  "depth"
Punctuation:  "--;"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name:  "parseValue"
Punctuation:  "("
Name:  "root"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "root"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "unittest"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "enum"
Text:  " "
Name:  "issue15742objectOfObject"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "`{ \"key1\": { \"key2\": 1 }}`"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "static"
Text:  " "
Keyword:  "assert"
Punctuation:  "("
Name:  "parseJSON"
Punctuation:  "("
Name:  "issue15742objectOfObject"
Punctuation:  ")."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ");"
Text:  "<newline><newline>    "
Keyword:  "enum"
Text:  " "
Name:  "issue15742arrayOfArray"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "`[[1]]`"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "static"
Text:  " "
Keyword:  "assert"
Punctuation:  "("
Name:  "parseJSON"
Punctuation:  "("
Name:  "issue15742arrayOfArray"
Punctuation:  ")."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline>Parses a serialized string and returns a tree of JSON values.<newline>Throws: $(XREF json,JSONException) if the depth exceeds the max depth.<newline>Params:<newline>    json = json-formatted string to parse<newline>    options = enable decoding string representations of NaN/Inf as float values<newline>*/"
Text:  "<newline>"
Name:  "JSONValue"
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Name:  "T"
Punctuation:  ")("
Name:  "T"
Text:  " "
Name:  "json"
Punctuation:  ","
Text:  " "
Name:  "JSONOptions"
Text:  " "
Name:  "options"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "if"
Punctuation:  "("
Name:  "isInputRange"
Punctuation:  "!"
Name:  "T"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "parseJSON"
Punctuation:  "!"
Name:  "T"
Punctuation:  "("
Name:  "json"
Punctuation:  ","
Text:  " "
Punctuation:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "options"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline>Takes a tree of JSON values and returns the serialized string.<newline><newline>Any Object types will be serialized in a key-sorted order.<newline><newline>If $(D pretty) is false no whitespaces are generated.<newline>If $(D pretty) is true serialized string is formatted to be human-readable.<newline>Set the $(specialFloatLiterals) flag is set in $(D options) to encode NaN/Infinity as strings.<newline>*/"
Text:  "<newline>"
Name.Builtin:  "string"
Text:  " "
Name:  "toJSON"
Punctuation:  "("
Keyword:  "in"
Text:  " "
Name:  "JSONValue"
Punctuation:  "*"
Text:  " "
Name:  "root"
Punctuation:  ","
Text:  " "
Keyword:  "in"
Text:  " "
Keyword.Type:  "bool"
Text:  " "
Name:  "pretty"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ","
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "JSONOptions"
Text:  " "
Name:  "options"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONOptions"
Punctuation:  "."
Name:  "none"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "auto"
Text:  " "
Name:  "json"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "appender"
Punctuation:  "!"
Name.Builtin:  "string"
Punctuation:  "();"
Text:  "<newline><newline>    "
Keyword.Type:  "void"
Text:  " "
Name:  "toString"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "str"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'\"'"
Punctuation:  ");"
Text:  "<newline><newline>        "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Keyword.Type:  "dchar"
Text:  " "
Name:  "c"
Punctuation:  ";"
Text:  " "
Name:  "str"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "switch"
Punctuation:  "("
Name:  "c"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "{"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'\"'"
Punctuation:  ":"
Text:  "       "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"\\\\\\\"\""
Punctuation:  ");"
Text:  "       "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'\\\\'"
Punctuation:  ":"
Text:  "      "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"\\\\\\\\\""
Punctuation:  ");"
Text:  "       "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'/'"
Punctuation:  ":"
Text:  "       "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"\\\\/\""
Punctuation:  ");"
Text:  "        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'\\b'"
Punctuation:  ":"
Text:  "      "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"\\\\b\""
Punctuation:  ");"
Text:  "        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'\\f'"
Punctuation:  ":"
Text:  "      "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"\\\\f\""
Punctuation:  ");"
Text:  "        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'<newline>'"
Punctuation:  ":"
Text:  "      "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"\\<newline>\""
Punctuation:  ");"
Text:  "        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'\\r'"
Punctuation:  ":"
Text:  "      "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"\\\\r\""
Punctuation:  ");"
Text:  "        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "case"
Text:  " "
Literal.String.Char:  "'\\t'"
Punctuation:  ":"
Text:  "      "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"\\\\t\""
Punctuation:  ");"
Text:  "        "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "default"
Punctuation:  ":"
Text:  "<newline>                    "
Name:  "appendJSONChar"
Punctuation:  "(&"
Name:  "json"
Punctuation:  ","
Text:  " "
Name:  "c"
Punctuation:  ","
Text:  "<newline>                                   "
Punctuation:  "("
Name:  "msg"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "throw"
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "JSONException"
Punctuation:  "("
Name:  "msg"
Punctuation:  ");"
Text:  " "
Punctuation:  "});"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline><newline>        "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'\"'"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Type:  "void"
Text:  " "
Name:  "toValue"
Punctuation:  "("
Keyword:  "in"
Text:  " "
Name:  "JSONValue"
Punctuation:  "*"
Text:  " "
Name:  "value"
Punctuation:  ","
Text:  " "
Keyword.Type:  "ulong"
Text:  " "
Name:  "indentLevel"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword.Type:  "void"
Text:  " "
Name:  "putTabs"
Punctuation:  "("
Keyword.Type:  "ulong"
Text:  " "
Name:  "additionalIndent"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "if"
Punctuation:  "("
Name:  "pretty"
Punctuation:  ")"
Text:  "<newline>                "
Keyword:  "foreach"
Punctuation:  "("
Name:  "i"
Punctuation:  ";"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  ".."
Text:  " "
Name:  "indentLevel"
Text:  " "
Punctuation:  "+"
Text:  " "
Name:  "additionalIndent"
Punctuation:  ")"
Text:  "<newline>                    "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"    \""
Punctuation:  ");"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword.Type:  "void"
Text:  " "
Name:  "putEOL"
Punctuation:  "()"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "if"
Punctuation:  "("
Name:  "pretty"
Punctuation:  ")"
Text:  "<newline>                "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'<newline>'"
Punctuation:  ");"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword.Type:  "void"
Text:  " "
Name:  "putCharAndEOL"
Punctuation:  "("
Keyword.Type:  "char"
Text:  " "
Name:  "ch"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Name:  "ch"
Punctuation:  ");"
Text:  "<newline>            "
Name:  "putEOL"
Punctuation:  "();"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline><newline>        "
Keyword:  "final"
Text:  " "
Keyword:  "switch"
Punctuation:  "("
Name:  "value"
Punctuation:  "."
Name:  "type"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ":"
Text:  "<newline>                "
Keyword:  "if"
Punctuation:  "(!"
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  "."
Name:  "length"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"{}\""
Punctuation:  ");"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "else"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "putCharAndEOL"
Punctuation:  "("
Literal.String.Char:  "'{'"
Punctuation:  ");"
Text:  "<newline>                    "
Keyword.Type:  "bool"
Text:  " "
Name:  "first"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ";"
Text:  "<newline><newline>                    "
Keyword.Type:  "void"
Text:  " "
Name:  "emit"
Punctuation:  "("
Name:  "R"
Punctuation:  ")("
Name:  "R"
Text:  " "
Name:  "names"
Punctuation:  ")"
Text:  "<newline>                    "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "name"
Punctuation:  ";"
Text:  " "
Name:  "names"
Punctuation:  ")"
Text:  "<newline>                        "
Punctuation:  "{"
Text:  "<newline>                            "
Keyword:  "auto"
Text:  " "
Name:  "member"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  "["
Name:  "name"
Punctuation:  "];"
Text:  "<newline>                            "
Keyword:  "if"
Punctuation:  "(!"
Name:  "first"
Punctuation:  ")"
Text:  "<newline>                                "
Name:  "putCharAndEOL"
Punctuation:  "("
Literal.String.Char:  "','"
Punctuation:  ");"
Text:  "<newline>                            "
Name:  "first"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ";"
Text:  "<newline>                            "
Name:  "putTabs"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>                            "
Name:  "toString"
Punctuation:  "("
Name:  "name"
Punctuation:  ");"
Text:  "<newline>                            "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "':'"
Punctuation:  ");"
Text:  "<newline>                            "
Keyword:  "if"
Punctuation:  "("
Name:  "pretty"
Punctuation:  ")"
Text:  "<newline>                                "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "' '"
Punctuation:  ");"
Text:  "<newline>                            "
Name:  "toValue"
Punctuation:  "(&"
Name:  "member"
Punctuation:  ","
Text:  " "
Name:  "indentLevel"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>                        "
Punctuation:  "}"
Text:  "<newline>                    "
Punctuation:  "}"
Text:  "<newline><newline>                    "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "algorithm"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "sort"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "auto"
Text:  " "
Name:  "names"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "object"
Punctuation:  "."
Name:  "keys"
Punctuation:  ";"
Text:  "<newline>                    "
Name:  "sort"
Punctuation:  "("
Name:  "names"
Punctuation:  ");"
Text:  "<newline>                    "
Name:  "emit"
Punctuation:  "("
Name:  "names"
Punctuation:  ");"
Text:  "<newline><newline>                    "
Name:  "putEOL"
Punctuation:  "();"
Text:  "<newline>                    "
Name:  "putTabs"
Punctuation:  "();"
Text:  "<newline>                    "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "'}'"
Punctuation:  ");"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ":"
Text:  "<newline>                "
Keyword:  "if"
Punctuation:  "("
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  "."
Name:  "empty"
Punctuation:  ")"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"[]\""
Punctuation:  ");"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "else"
Text:  "<newline>                "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "putCharAndEOL"
Punctuation:  "("
Literal.String.Char:  "'['"
Punctuation:  ");"
Text:  "<newline>                    "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "i"
Punctuation:  ","
Text:  " "
Keyword:  "ref"
Text:  " "
Name:  "el"
Punctuation:  ";"
Text:  " "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "array"
Punctuation:  ")"
Text:  "<newline>                    "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "if"
Punctuation:  "("
Name:  "i"
Punctuation:  ")"
Text:  "<newline>                            "
Name:  "putCharAndEOL"
Punctuation:  "("
Literal.String.Char:  "','"
Punctuation:  ");"
Text:  "<newline>                        "
Name:  "putTabs"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>                        "
Name:  "toValue"
Punctuation:  "(&"
Name:  "el"
Punctuation:  ","
Text:  " "
Name:  "indentLevel"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>                    "
Punctuation:  "}"
Text:  "<newline>                    "
Name:  "putEOL"
Punctuation:  "();"
Text:  "<newline>                    "
Name:  "putTabs"
Punctuation:  "();"
Text:  "<newline>                    "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String.Char:  "']'"
Punctuation:  ");"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "toString"
Punctuation:  "("
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "str"
Punctuation:  ");"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Name:  "to"
Punctuation:  "!"
Name.Builtin:  "string"
Punctuation:  "("
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "integer"
Punctuation:  "));"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "UINTEGER"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Name:  "to"
Punctuation:  "!"
Name.Builtin:  "string"
Punctuation:  "("
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "uinteger"
Punctuation:  "));"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FLOAT"
Punctuation:  ":"
Text:  "<newline>                "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "math"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "isNaN"
Punctuation:  ","
Text:  " "
Name:  "isInfinity"
Punctuation:  ";"
Text:  "<newline><newline>                "
Keyword:  "auto"
Text:  " "
Name:  "val"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "value"
Punctuation:  "."
Name:  "store"
Punctuation:  "."
Name:  "floating"
Punctuation:  ";"
Text:  "<newline><newline>                "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "val"
Punctuation:  "."
Name:  "isNaN"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "options"
Text:  " "
Punctuation:  "&"
Text:  " "
Name:  "JSONOptions"
Punctuation:  "."
Name:  "specialFloatLiterals"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Name:  "toString"
Punctuation:  "("
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "nan"
Punctuation:  ");"
Text:  "<newline>                    "
Punctuation:  "}"
Text:  "<newline>                    "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "throw"
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "JSONException"
Punctuation:  "("
Text:  "<newline>                            "
Literal.String:  "\"Cannot encode NaN. Consider passing the specialFloatLiterals flag.\""
Punctuation:  ");"
Text:  "<newline>                    "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "val"
Punctuation:  "."
Name:  "isInfinity"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "options"
Text:  " "
Punctuation:  "&"
Text:  " "
Name:  "JSONOptions"
Punctuation:  "."
Name:  "specialFloatLiterals"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Name:  "toString"
Punctuation:  "(("
Name:  "val"
Text:  " "
Punctuation:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "?"
Text:  "  "
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "inf"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "negativeInf"
Punctuation:  ");"
Text:  "<newline>                    "
Punctuation:  "}"
Text:  "<newline>                    "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                        "
Keyword:  "throw"
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "JSONException"
Punctuation:  "("
Text:  "<newline>                            "
Literal.String:  "\"Cannot encode Infinity. Consider passing the specialFloatLiterals flag.\""
Punctuation:  ");"
Text:  "<newline>                    "
Punctuation:  "}"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                    "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Name:  "to"
Punctuation:  "!"
Name.Builtin:  "string"
Punctuation:  "("
Name:  "val"
Punctuation:  "));"
Text:  "<newline>                "
Punctuation:  "}"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "TRUE"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"true\""
Punctuation:  ");"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FALSE"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"false\""
Punctuation:  ");"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "case"
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "NULL"
Punctuation:  ":"
Text:  "<newline>                "
Name:  "json"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"null\""
Punctuation:  ");"
Text:  "<newline>                "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name:  "toValue"
Punctuation:  "("
Name:  "root"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "json"
Punctuation:  "."
Name:  "data"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "private"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Name:  "appendJSONChar"
Punctuation:  "("
Name:  "Appender"
Punctuation:  "!"
Name.Builtin:  "string"
Punctuation:  "*"
Text:  " "
Name:  "dst"
Punctuation:  ","
Text:  " "
Keyword.Type:  "dchar"
Text:  " "
Name:  "c"
Punctuation:  ","
Text:  "<newline>                            "
Keyword:  "scope"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Keyword:  "delegate"
Punctuation:  "("
Name.Builtin:  "string"
Punctuation:  ")"
Text:  " "
Name:  "error"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "uni"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "isControl"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "if"
Punctuation:  "("
Name:  "isControl"
Punctuation:  "("
Name:  "c"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "dst"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Literal.String:  "\"\\\\u\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "foreach_reverse"
Text:  " "
Punctuation:  "("
Name:  "i"
Punctuation:  ";"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  ".."
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword.Type:  "char"
Text:  " "
Name:  "ch"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "c"
Text:  " "
Punctuation:  ">>>"
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "4"
Text:  " "
Punctuation:  "*"
Text:  " "
Name:  "i"
Punctuation:  "))"
Text:  " "
Punctuation:  "&"
Text:  " "
Literal.Number.Hex:  "0x0f"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "ch"
Text:  " "
Punctuation:  "+="
Text:  " "
Name:  "ch"
Text:  " "
Punctuation:  "<"
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.String.Char:  "'0'"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String.Char:  "'A'"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "dst"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Name:  "ch"
Punctuation:  ");"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Keyword:  "else"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "dst"
Punctuation:  "."
Name:  "put"
Punctuation:  "("
Name:  "c"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline>Exception thrown on JSON errors<newline>*/"
Text:  "<newline>"
Keyword:  "class"
Text:  " "
Name:  "JSONException"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "Exception"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "this"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "msg"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "line"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name:  "pos"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@safe"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "if"
Punctuation:  "("
Name:  "line"
Punctuation:  ")"
Text:  "<newline>            "
Keyword:  "super"
Punctuation:  "("
Name:  "text"
Punctuation:  "("
Name:  "msg"
Punctuation:  ","
Text:  " "
Literal.String:  "\" (Line \""
Punctuation:  ","
Text:  " "
Name:  "line"
Punctuation:  ","
Text:  " "
Literal.String:  "\":\""
Punctuation:  ","
Text:  " "
Name:  "pos"
Punctuation:  ","
Text:  " "
Literal.String:  "\")\""
Punctuation:  "));"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>            "
Keyword:  "super"
Punctuation:  "("
Name:  "msg"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword:  "this"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "msg"
Punctuation:  ","
Text:  " "
Name.Builtin:  "string"
Text:  " "
Name:  "file"
Punctuation:  ","
Text:  " "
Name.Builtin:  "size_t"
Text:  " "
Name:  "line"
Punctuation:  ")"
Text:  " "
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@safe"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "super"
Punctuation:  "("
Name:  "msg"
Punctuation:  ","
Text:  " "
Name:  "file"
Punctuation:  ","
Text:  " "
Name:  "line"
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline><newline>"
Keyword:  "unittest"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "exception"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"123\""
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertNotThrown"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "str"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "integer"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "uinteger"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "floating"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "object"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "array"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"aa\""
Punctuation:  "]);"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "jv"
Punctuation:  "["
Literal.Number.Integer:  "2"
Punctuation:  "]);"
Text:  "<newline><newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "-"
Literal.Number.Integer:  "3"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertNotThrown"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "integer"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "cast"
Punctuation:  "("
Keyword.Type:  "uint"
Punctuation:  ")"
Literal.Number.Integer:  "3"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "UINTEGER"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertNotThrown"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "uinteger"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Float:  "3.0f"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FLOAT"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertNotThrown"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "floating"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "\"key\""
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String:  "\"value\""
Punctuation:  "];"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertNotThrown"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "object"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertNotThrown"
Punctuation:  "("
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"key\""
Punctuation:  "]);"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Literal.String:  "\"key\""
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "jv"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Literal.String:  "\"notAnElement\""
Text:  " "
Punctuation:  "!"
Keyword:  "in"
Text:  " "
Name:  "jv"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"notAnElement\""
Punctuation:  "]);"
Text:  "<newline>    "
Keyword:  "const"
Text:  " "
Name:  "cjv"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "jv"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Literal.String:  "\"key\""
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "cjv"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "cjv"
Punctuation:  "["
Literal.String:  "\"notAnElement\""
Punctuation:  "]);"
Text:  "<newline><newline>    "
Keyword:  "foreach"
Punctuation:  "("
Name.Builtin:  "string"
Text:  " "
Name:  "key"
Punctuation:  ","
Text:  " "
Name:  "value"
Punctuation:  ";"
Text:  " "
Name:  "jv"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword:  "assert"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Keyword:  "typeof"
Punctuation:  "("
Name:  "value"
Punctuation:  ")"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSONValue"
Punctuation:  "));"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Name:  "key"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"key\""
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Name:  "value"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ");"
Text:  "<newline>        "
Name:  "assertNotThrown"
Punctuation:  "("
Name:  "value"
Punctuation:  "."
Name:  "str"
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Name:  "value"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"value\""
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  "];"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertNotThrown"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "array"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertNotThrown"
Punctuation:  "("
Name:  "jv"
Punctuation:  "["
Literal.Number.Integer:  "2"
Punctuation:  "]);"
Text:  "<newline>    "
Keyword:  "foreach"
Punctuation:  "("
Name.Builtin:  "size_t"
Text:  " "
Name:  "index"
Punctuation:  ","
Text:  " "
Name:  "value"
Punctuation:  ";"
Text:  " "
Name:  "jv"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "static"
Text:  " "
Keyword:  "assert"
Punctuation:  "("
Keyword:  "is"
Punctuation:  "("
Keyword:  "typeof"
Punctuation:  "("
Name:  "value"
Punctuation:  ")"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSONValue"
Punctuation:  "));"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Name:  "value"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ");"
Text:  "<newline>        "
Name:  "assertNotThrown"
Punctuation:  "("
Name:  "value"
Punctuation:  "."
Name:  "integer"
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Name:  "index"
Text:  " "
Punctuation:  "=="
Text:  " "
Punctuation:  "("
Name:  "value"
Punctuation:  "."
Name:  "integer"
Punctuation:  "-"
Literal.Number.Integer:  "3"
Punctuation:  "));"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "NULL"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "isNull"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"foo\""
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "(!"
Name:  "jv"
Punctuation:  "."
Name:  "isNull"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.String:  "\"value\""
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"value\""
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jv2"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.String:  "\"value\""
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv2"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv2"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"value\""
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jv3"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.String:  "\"\\u001c\""
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv3"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv3"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"\\u001C\""
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "unittest"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// Bugzilla 11504"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"123\""
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"123\""
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "integer"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "integer"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "uinteger"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "2u"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "UINTEGER"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "uinteger"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "2u"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "floating"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Float:  "1.5f"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FLOAT"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "floating"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Float:  "1.5f"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "object"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "\"key\""
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.String:  "\"value\""
Punctuation:  ")];"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "object"
Text:  " "
Punctuation:  "=="
Text:  " "
Punctuation:  "["
Literal.String:  "\"key\""
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.String:  "\"value\""
Punctuation:  ")]);"
Text:  "<newline><newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "["
Name:  "JSONValue"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  "),"
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.Number.Integer:  "2"
Punctuation:  "),"
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.Number.Integer:  "3"
Punctuation:  ")];"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "=="
Text:  " "
Punctuation:  "["
Name:  "JSONValue"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  "),"
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.Number.Integer:  "2"
Punctuation:  "),"
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.Number.Integer:  "3"
Punctuation:  ")]);"
Text:  "<newline><newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "TRUE"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FALSE"
Punctuation:  ");"
Text:  "<newline><newline>    "
Keyword:  "enum"
Text:  " "
Name:  "E"
Punctuation:  "{"
Name:  "True"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "true"
Punctuation:  "}"
Text:  "<newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "E"
Punctuation:  "."
Name:  "True"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "TRUE"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "pure"
Text:  " "
Keyword:  "unittest"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// Adding new json element via array() / object() directly"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jarr"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "(["
Literal.Number.Integer:  "10"
Punctuation:  "]);"
Text:  "<newline>    "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "i"
Punctuation:  ";"
Text:  " "
Literal.Number.Float:  "0..9"
Punctuation:  ")"
Text:  "<newline>        "
Name:  "jarr"
Punctuation:  "."
Name:  "array"
Text:  " "
Punctuation:  "~="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Name:  "i"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jarr"
Punctuation:  "."
Name:  "array"
Punctuation:  "."
Name:  "length"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jobj"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "(["
Literal.String:  "\"key\""
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.String:  "\"value\""
Punctuation:  ")]);"
Text:  "<newline>    "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "i"
Punctuation:  ";"
Text:  " "
Literal.Number.Float:  "0..9"
Punctuation:  ")"
Text:  "<newline>        "
Name:  "jobj"
Punctuation:  "."
Name:  "object"
Punctuation:  "["
Name:  "text"
Punctuation:  "("
Literal.String:  "\"key\""
Punctuation:  ","
Text:  " "
Name:  "i"
Punctuation:  ")]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Name:  "text"
Punctuation:  "("
Literal.String:  "\"value\""
Punctuation:  ","
Text:  " "
Name:  "i"
Punctuation:  "));"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jobj"
Punctuation:  "."
Name:  "object"
Punctuation:  "."
Name:  "length"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "pure"
Text:  " "
Keyword:  "unittest"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// Adding new json element without array() / object() access"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jarr"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "(["
Literal.Number.Integer:  "10"
Punctuation:  "]);"
Text:  "<newline>    "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "i"
Punctuation:  ";"
Text:  " "
Literal.Number.Float:  "0..9"
Punctuation:  ")"
Text:  "<newline>        "
Name:  "jarr"
Text:  " "
Punctuation:  "~="
Text:  " "
Punctuation:  "["
Name:  "JSONValue"
Punctuation:  "("
Name:  "i"
Punctuation:  ")];"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jarr"
Punctuation:  "."
Name:  "array"
Punctuation:  "."
Name:  "length"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jobj"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "(["
Literal.String:  "\"key\""
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.String:  "\"value\""
Punctuation:  ")]);"
Text:  "<newline>    "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "i"
Punctuation:  ";"
Text:  " "
Literal.Number.Float:  "0..9"
Punctuation:  ")"
Text:  "<newline>        "
Name:  "jobj"
Punctuation:  "["
Name:  "text"
Punctuation:  "("
Literal.String:  "\"key\""
Punctuation:  ","
Text:  " "
Name:  "i"
Punctuation:  ")]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Name:  "text"
Punctuation:  "("
Literal.String:  "\"value\""
Punctuation:  ","
Text:  " "
Name:  "i"
Punctuation:  "));"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jobj"
Punctuation:  "."
Name:  "object"
Punctuation:  "."
Name:  "length"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ");"
Text:  "<newline><newline>    "
Comment.Single:  "// No array alias"
Text:  "<newline>    "
Keyword:  "auto"
Text:  " "
Name:  "jarr2"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "jarr"
Text:  " "
Punctuation:  "~"
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Literal.Number.Integer:  "2"
Punctuation:  ","
Literal.Number.Integer:  "3"
Punctuation:  "];"
Text:  "<newline>    "
Name:  "jarr2"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "999"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jarr"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSONValue"
Punctuation:  "("
Literal.Number.Integer:  "10"
Punctuation:  "));"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "unittest"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "exception"
Punctuation:  ";"
Text:  "<newline><newline>    "
Comment.Single:  "// An overly simple test suite, if it can parse a serializated string and"
Text:  "<newline>    "
Comment.Single:  "// then use the resulting values tree to generate an identical"
Text:  "<newline>    "
Comment.Single:  "// serialization, both the decoder and encoder works."
Text:  "<newline><newline>    "
Keyword:  "auto"
Text:  " "
Name:  "jsons"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>        "
Literal.String:  "`null`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`true`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`false`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`0`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`123`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`-4321`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`0.23`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`-0.23`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`\"\"`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`\"hello<newline>world\"`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`\"\\\"\\\\\\/\\b\\f<newline>\\r\\t\"`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`[]`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`[12,\"foo\",true,false]`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`{}`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`{\"a\":1,\"b\":null}`"
Punctuation:  ","
Text:  "<newline>        "
Literal.String:  "`{\"goodbye\":[true,\"or\",false,[\"test\",42,{\"nested\":{\"a\":23.54,\"b\":0.0012}}]],\"hello\":{\"array\":[12,null,{}],\"json\":\"is great\"}}`"
Punctuation:  ","
Text:  "<newline>    "
Punctuation:  "];"
Text:  "<newline><newline>    "
Keyword:  "version"
Text:  " "
Punctuation:  "("
Name:  "MinGW"
Punctuation:  ")"
Text:  "<newline>        "
Name:  "jsons"
Text:  " "
Punctuation:  "~="
Text:  " "
Literal.String:  "`1.223e+024`"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "else"
Text:  "<newline>        "
Name:  "jsons"
Text:  " "
Punctuation:  "~="
Text:  " "
Literal.String:  "`1.223e+24`"
Punctuation:  ";"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "val"
Punctuation:  ";"
Text:  "<newline>    "
Name.Builtin:  "string"
Text:  " "
Name:  "result"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "json"
Punctuation:  ";"
Text:  " "
Name:  "jsons"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "try"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "val"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Name:  "json"
Punctuation:  ");"
Text:  "<newline>            "
Keyword:  "enum"
Text:  " "
Name:  "pretty"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "result"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "toJSON"
Punctuation:  "(&"
Name:  "val"
Punctuation:  ","
Text:  " "
Name:  "pretty"
Punctuation:  ");"
Text:  "<newline>            "
Keyword:  "assert"
Punctuation:  "("
Name:  "result"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "json"
Punctuation:  ","
Text:  " "
Name:  "text"
Punctuation:  "("
Name:  "result"
Punctuation:  ","
Text:  " "
Literal.String:  "\" should be \""
Punctuation:  ","
Text:  " "
Name:  "json"
Punctuation:  "));"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Keyword:  "catch"
Text:  " "
Punctuation:  "("
Name:  "JSONException"
Text:  " "
Name:  "e"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "stdio"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "writefln"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "writefln"
Punctuation:  "("
Name:  "text"
Punctuation:  "("
Name:  "json"
Punctuation:  ","
Text:  " "
Literal.String:  "\"<newline>\""
Punctuation:  ","
Text:  " "
Name:  "e"
Punctuation:  "."
Name:  "toString"
Punctuation:  "()));"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "// Should be able to correctly interpret unicode entities"
Text:  "<newline>    "
Name:  "val"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Literal.String:  "`\"\\u003C\\u003E\"`"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "toJSON"
Punctuation:  "(&"
Name:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"\\\"\\&lt;\\&gt;\\\"\""
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "val"
Punctuation:  "."
Name:  "to"
Punctuation:  "!"
Name.Builtin:  "string"
Punctuation:  "()"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"\\\"\\&lt;\\&gt;\\\"\""
Punctuation:  ");"
Text:  "<newline>    "
Name:  "val"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Literal.String:  "`\"\\u0391\\u0392\\u0393\"`"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "toJSON"
Punctuation:  "(&"
Name:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"\\\"\\&Alpha;\\&Beta;\\&Gamma;\\\"\""
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "val"
Punctuation:  "."
Name:  "to"
Punctuation:  "!"
Name.Builtin:  "string"
Punctuation:  "()"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"\\\"\\&Alpha;\\&Beta;\\&Gamma;\\\"\""
Punctuation:  ");"
Text:  "<newline>    "
Name:  "val"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Literal.String:  "`\"\\u2660\\u2666\"`"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "toJSON"
Punctuation:  "(&"
Name:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"\\\"\\&spades;\\&diams;\\\"\""
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "val"
Punctuation:  "."
Name:  "to"
Punctuation:  "!"
Name.Builtin:  "string"
Punctuation:  "()"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"\\\"\\&spades;\\&diams;\\\"\""
Punctuation:  ");"
Text:  "<newline><newline>    "
Comment.Single:  "//0x7F is a control character (see Unicode spec)"
Text:  "<newline>    "
Name:  "val"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Literal.String:  "`\"\\u007F\"`"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "toJSON"
Punctuation:  "(&"
Name:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"\\\"\\\\u007F\\\"\""
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "val"
Punctuation:  "."
Name:  "to"
Punctuation:  "!"
Name.Builtin:  "string"
Punctuation:  "()"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"\\\"\\\\u007F\\\"\""
Punctuation:  ");"
Text:  "<newline><newline>    "
Keyword:  "with"
Punctuation:  "("
Name:  "parseJSON"
Punctuation:  "("
Literal.String:  "`\"\"`"
Punctuation:  "))"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "("
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"\""
Text:  " "
Punctuation:  "&&"
Text:  " "
Name:  "str"
Text:  " "
Punctuation:  "!"
Keyword:  "is"
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "with"
Punctuation:  "("
Name:  "parseJSON"
Punctuation:  "("
Literal.String:  "`[]`"
Punctuation:  "))"
Text:  "<newline>        "
Keyword:  "assert"
Punctuation:  "(!"
Name:  "array"
Punctuation:  "."
Name:  "length"
Text:  " "
Punctuation:  "&&"
Text:  " "
Name:  "array"
Text:  " "
Punctuation:  "!"
Keyword:  "is"
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ");"
Text:  "<newline><newline>    "
Comment.Single:  "// Formatting"
Text:  "<newline>    "
Name:  "val"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Literal.String:  "`{\"a\":[null,{\"x\":1},{},[]]}`"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "toJSON"
Punctuation:  "(&"
Name:  "val"
Punctuation:  ","
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ")"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "`{<newline>    \"a\": [<newline>        null,<newline>        {<newline>            \"x\": 1<newline>        },<newline>        {},<newline>        []<newline>    ]<newline>}`"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "unittest"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "auto"
Text:  " "
Name:  "json"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "`\"hello<newline>world\"`"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "const"
Text:  " "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Name:  "json"
Punctuation:  ");"
Text:  "<newline>  "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "toString"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "json"
Punctuation:  ");"
Text:  "<newline>  "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "toPrettyString"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "json"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "deprecated"
Text:  " "
Keyword:  "unittest"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// Bugzilla 12332"
Text:  "<newline>    "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "exception"
Punctuation:  ";"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jv"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "INTEGER"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "integer"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "UINTEGER"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "uinteger"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "integer"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "str"
Text:  " "
Keyword:  "is"
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"123\""
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"123\""
Punctuation:  ");"
Text:  "<newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"123\""
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "TRUE"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "TRUE"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "pure"
Text:  " "
Keyword:  "unittest"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// Bugzilla 12969"
Text:  "<newline><newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jv"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"int\""
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "123"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "OBJECT"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Literal.String:  "\"int\""
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "jv"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"int\""
Punctuation:  "]."
Name:  "integer"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "123"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"array\""
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  "];"
Text:  "<newline><newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"array\""
Punctuation:  "]."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"array\""
Punctuation:  "]["
Literal.Number.Integer:  "2"
Punctuation:  "]."
Name:  "integer"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"str\""
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"D language\""
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"str\""
Punctuation:  "]."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "STRING"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"str\""
Punctuation:  "]."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"D language\""
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"bool\""
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "["
Literal.String:  "\"bool\""
Punctuation:  "]."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "FALSE"
Punctuation:  ");"
Text:  "<newline><newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jv"
Punctuation:  "."
Name:  "object"
Punctuation:  "."
Name:  "length"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name:  "jv"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "5"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "];"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Text:  " "
Name:  "jv"
Punctuation:  "."
Name:  "type"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSON_TYPE"
Punctuation:  "."
Name:  "ARRAY"
Text:  " "
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Text:  " "
Name:  "jv"
Punctuation:  "["
Literal.Number.Integer:  "3"
Punctuation:  "]."
Name:  "integer"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "unittest"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "auto"
Text:  " "
Name:  "s"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "q"
Literal.String:  "\"EOF<newline>[<newline>  1,<newline>  2,<newline>  3,<newline>  potato<newline>]<newline>EOF\""
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "exception"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "auto"
Text:  " "
Name:  "e"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "collectException"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "parseJSON"
Punctuation:  "("
Name:  "s"
Punctuation:  "));"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "e"
Punctuation:  "."
Name:  "msg"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String:  "\"Unexpected character 'p'. (Line 5:3)\""
Punctuation:  ","
Text:  " "
Name:  "e"
Punctuation:  "."
Name:  "msg"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// handling of special float values (NaN, Inf, -Inf)"
Text:  "<newline>"
Keyword:  "unittest"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "math"
Text:  "      "
Punctuation:  ":"
Text:  " "
Name:  "isNaN"
Punctuation:  ","
Text:  " "
Name:  "isInfinity"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "import"
Text:  " "
Name:  "std"
Punctuation:  "."
Name:  "exception"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "assertThrown"
Punctuation:  ";"
Text:  "<newline><newline>    "
Comment.Single:  "// expected representations of NaN and Inf"
Text:  "<newline>    "
Keyword:  "enum"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "nanString"
Text:  "         "
Punctuation:  "="
Text:  " "
Literal.String.Char:  "'\"'"
Text:  " "
Punctuation:  "~"
Text:  " "
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "nan"
Text:  "         "
Punctuation:  "~"
Text:  " "
Literal.String.Char:  "'\"'"
Punctuation:  ","
Text:  "<newline>        "
Name:  "infString"
Text:  "         "
Punctuation:  "="
Text:  " "
Literal.String.Char:  "'\"'"
Text:  " "
Punctuation:  "~"
Text:  " "
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "inf"
Text:  "         "
Punctuation:  "~"
Text:  " "
Literal.String.Char:  "'\"'"
Punctuation:  ","
Text:  "<newline>        "
Name:  "negativeInfString"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Char:  "'\"'"
Text:  " "
Punctuation:  "~"
Text:  " "
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "negativeInf"
Text:  " "
Punctuation:  "~"
Text:  " "
Literal.String.Char:  "'\"'"
Punctuation:  ","
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "// with the specialFloatLiterals option, encode NaN/Inf as strings"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "("
Keyword.Type:  "float"
Punctuation:  "."
Name:  "nan"
Punctuation:  ")."
Name:  "toString"
Punctuation:  "("
Name:  "JSONOptions"
Punctuation:  "."
Name:  "specialFloatLiterals"
Punctuation:  ")"
Text:  "       "
Punctuation:  "=="
Text:  " "
Name:  "nanString"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "("
Keyword.Type:  "double"
Punctuation:  "."
Name:  "infinity"
Punctuation:  ")."
Name:  "toString"
Punctuation:  "("
Name:  "JSONOptions"
Punctuation:  "."
Name:  "specialFloatLiterals"
Punctuation:  ")"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "infString"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "(-"
Keyword.Type:  "real"
Punctuation:  "."
Name:  "infinity"
Punctuation:  ")."
Name:  "toString"
Punctuation:  "("
Name:  "JSONOptions"
Punctuation:  "."
Name:  "specialFloatLiterals"
Punctuation:  ")"
Text:  "  "
Punctuation:  "=="
Text:  " "
Name:  "negativeInfString"
Punctuation:  ");"
Text:  "<newline><newline>    "
Comment.Single:  "// without the specialFloatLiterals option, throw on encoding NaN/Inf"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "("
Keyword.Type:  "float"
Punctuation:  "."
Name:  "nan"
Punctuation:  ")."
Name:  "toString"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "("
Keyword.Type:  "double"
Punctuation:  "."
Name:  "infinity"
Punctuation:  ")."
Name:  "toString"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "assertThrown"
Punctuation:  "!"
Name:  "JSONException"
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "(-"
Keyword.Type:  "real"
Punctuation:  "."
Name:  "infinity"
Punctuation:  ")."
Name:  "toString"
Punctuation:  ");"
Text:  "<newline><newline>    "
Comment.Single:  "// when parsing json with specialFloatLiterals option, decode special strings as floats"
Text:  "<newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jvNan"
Text:  "    "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Name:  "nanString"
Punctuation:  ","
Text:  " "
Name:  "JSONOptions"
Punctuation:  "."
Name:  "specialFloatLiterals"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jvInf"
Text:  "    "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Name:  "infString"
Punctuation:  ","
Text:  " "
Name:  "JSONOptions"
Punctuation:  "."
Name:  "specialFloatLiterals"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "jvNegInf"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Name:  "negativeInfString"
Punctuation:  ","
Text:  " "
Name:  "JSONOptions"
Punctuation:  "."
Name:  "specialFloatLiterals"
Punctuation:  ");"
Text:  "<newline><newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jvNan"
Punctuation:  "."
Name:  "floating"
Punctuation:  "."
Name:  "isNaN"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jvInf"
Punctuation:  "."
Name:  "floating"
Punctuation:  "."
Name:  "isInfinity"
Text:  "    "
Punctuation:  "&&"
Text:  " "
Name:  "jvInf"
Punctuation:  "."
Name:  "floating"
Text:  " "
Punctuation:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jvNegInf"
Punctuation:  "."
Name:  "floating"
Punctuation:  "."
Name:  "isInfinity"
Text:  " "
Punctuation:  "&&"
Text:  " "
Name:  "jvNegInf"
Punctuation:  "."
Name:  "floating"
Text:  " "
Punctuation:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ");"
Text:  "<newline><newline>    "
Comment.Single:  "// when parsing json without the specialFloatLiterals option, decode special strings as strings"
Text:  "<newline>    "
Name:  "jvNan"
Text:  "    "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Name:  "nanString"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "jvInf"
Text:  "    "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Name:  "infString"
Punctuation:  ");"
Text:  "<newline>    "
Name:  "jvNegInf"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parseJSON"
Punctuation:  "("
Name:  "negativeInfString"
Punctuation:  ");"
Text:  "<newline><newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jvNan"
Punctuation:  "."
Name:  "str"
Text:  "    "
Punctuation:  "=="
Text:  " "
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "nan"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jvInf"
Punctuation:  "."
Name:  "str"
Text:  "    "
Punctuation:  "=="
Text:  " "
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "inf"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "jvNegInf"
Punctuation:  "."
Name:  "str"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "JSONFloatLiteral"
Punctuation:  "."
Name:  "negativeInf"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "pure"
Text:  " "
Keyword:  "nothrow"
Text:  " "
Name.Decorator:  "@safe"
Text:  " "
Name.Decorator:  "@nogc"
Text:  " "
Keyword:  "unittest"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Name:  "JSONValue"
Text:  " "
Name:  "testVal"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "testVal"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "\"test\""
Punctuation:  ";"
Text:  "<newline>    "
Name:  "testVal"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "testVal"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "10u"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "testVal"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Float:  "1.0"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "testVal"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "("
Name:  "JSONValue"
Punctuation:  "["
Name.Builtin:  "string"
Punctuation:  "])."
Name:  "init"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "testVal"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "JSONValue"
Punctuation:  "[]."
Name:  "init"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "testVal"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Constant:  "null"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "assert"
Punctuation:  "("
Name:  "testVal"
Punctuation:  "."
Name:  "isNull"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// comment at eof"
Text:  "<newline>"
