Text:  "<newline>"
Keyword:  "note"
Text:  "<newline>\t"
Name:  "description"
Punctuation.Indicator:  ":"
Text:  " "
Literal.String.Other:  "\"[<newline>\t\tSequences of values, all of the same type or of a conforming one,<newline>\t\taccessible through integer indices in a contiguous interval.<newline>\t\t]\""
Text:  "<newline><newline>\t"
Name:  "library"
Punctuation.Indicator:  ":"
Text:  " "
Literal.String.Double:  "\"Free implementation of ELKS library\""
Text:  "<newline>\t"
Name:  "status"
Punctuation.Indicator:  ":"
Text:  " "
Literal.String.Double:  "\"See notice at end of class.\""
Text:  "<newline>\t"
Name:  "legal"
Punctuation.Indicator:  ":"
Text:  " "
Literal.String.Double:  "\"See notice at end of class.\""
Text:  "<newline>\t"
Name:  "date"
Punctuation.Indicator:  ":"
Text:  " "
Literal.String.Double:  "\"$Date$\""
Text:  "<newline>\t"
Name:  "revision"
Punctuation.Indicator:  ":"
Text:  " "
Literal.String.Double:  "\"$Revision$\""
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "ARRAY"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]"
Text:  " "
Keyword:  "inherit"
Text:  "<newline><newline>\t"
Name.Class:  "RESIZABLE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]"
Text:  "<newline>\t\t"
Keyword:  "redefine"
Text:  "<newline>\t\t\t"
Name:  "full"
Punctuation.Indicator:  ","
Text:  " "
Name:  "copy"
Punctuation.Indicator:  ","
Text:  " "
Name:  "is_equal"
Punctuation.Indicator:  ","
Text:  " "
Name:  "resizable"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name.Class:  "INDEXABLE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  "]"
Text:  "<newline>\t\t"
Keyword:  "rename"
Text:  "<newline>\t\t\t"
Name:  "item"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "item"
Text:  " "
Keyword:  "alias"
Text:  " "
Literal.String.Other:  "\"[]\""
Text:  "<newline>\t\t"
Keyword:  "redefine"
Text:  "<newline>\t\t\t"
Name:  "copy"
Punctuation.Indicator:  ","
Text:  " "
Name:  "is_equal"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name.Class:  "TO_SPECIAL"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]"
Text:  "<newline>\t\t"
Keyword:  "export"
Text:  "<newline>\t\t\t"
Punctuation.Indicator:  "{"
Name.Class:  "ARRAY"
Punctuation.Indicator:  "}"
Text:  " "
Name:  "set_area"
Text:  "<newline>\t\t"
Keyword:  "redefine"
Text:  "<newline>\t\t\t"
Name:  "copy"
Punctuation.Indicator:  ","
Text:  " "
Name:  "is_equal"
Punctuation.Indicator:  ","
Text:  " "
Name:  "item"
Punctuation.Indicator:  ","
Text:  " "
Name:  "put"
Punctuation.Indicator:  ","
Text:  " "
Name:  "at"
Punctuation.Indicator:  ","
Text:  " "
Name:  "valid_index"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "create"
Text:  "<newline>\t"
Name:  "make_empty"
Punctuation.Indicator:  ","
Text:  "<newline>\t"
Name:  "make"
Punctuation.Indicator:  ","
Text:  "<newline>\t"
Name:  "make_filled"
Punctuation.Indicator:  ","
Text:  "<newline>\t"
Name:  "make_from_array"
Punctuation.Indicator:  ","
Text:  "<newline>\t"
Name:  "make_from_special"
Punctuation.Indicator:  ","
Text:  "<newline>\t"
Name:  "make_from_cil"
Text:  "<newline><newline>"
Keyword:  "convert"
Text:  "<newline>\t"
Name:  "to_cil"
Punctuation.Indicator:  ":"
Text:  " "
Punctuation.Indicator:  "{"
Name.Class:  "NATIVE_ARRAY"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]},"
Text:  "<newline>\t"
Name:  "to_special"
Punctuation.Indicator:  ":"
Text:  " "
Punctuation.Indicator:  "{"
Name.Class:  "SPECIAL"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]},"
Text:  "<newline>\t"
Name:  "make_from_cil"
Text:  " "
Punctuation.Indicator:  "({"
Name.Class:  "NATIVE_ARRAY"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]})"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Comment.Single:  "-- Initialization"
Text:  "<newline><newline>\t"
Name:  "make_empty"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Allocate empty array starting at `1'."
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t\t"
Name:  "make_empty_area"
Text:  " "
Punctuation.Indicator:  "("
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "lower_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Name:  "upper_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t\t"
Name:  "items_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "all_default"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "make_filled"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a_default_value"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "G"
Punctuation.Indicator:  ";"
Text:  " "
Name:  "min_index"
Punctuation.Indicator:  ","
Text:  " "
Name:  "max_index"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Allocate array; set index interval to"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- `min_index' .. `max_index'; set all values to default."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- (Make array empty if `min_index' = `max_index' + 1)."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "valid_bounds"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "min_index"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "max_index"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "n"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "min_index"
Text:  "<newline>\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "max_index"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "min_index"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "max_index"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Name:  "n"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "max_index"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "min_index"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t"
Name:  "make_filled_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a_default_value"
Punctuation.Indicator:  ","
Text:  " "
Name:  "n"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "lower_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Name:  "min_index"
Text:  "<newline>\t\t\t"
Name:  "upper_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Name:  "max_index"
Text:  "<newline>\t\t\t"
Name:  "items_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "filled_with"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a_default_value"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "make"
Text:  " "
Punctuation.Indicator:  "("
Name:  "min_index"
Punctuation.Indicator:  ","
Text:  " "
Name:  "max_index"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Allocate array; set index interval to"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- `min_index' .. `max_index'; set all values to default."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- (Make array empty if `min_index' = `max_index' + 1)."
Text:  "<newline>\t\t"
Keyword:  "obsolete"
Text:  "<newline>\t\t\t"
Literal.String.Double:  "\" `make' is not void-safe statically. Use `make_empty' or `make_filled' instead. [07-2010]\""
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "valid_bounds"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "min_index"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "max_index"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Name:  "has_default"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "min_index"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "max_index"
Text:  " "
Keyword:  "implies"
Text:  " "
Punctuation.Indicator:  "({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "has_default"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "min_index"
Text:  "<newline>\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "max_index"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "min_index"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "max_index"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Name:  "make_filled_area"
Text:  " "
Punctuation.Indicator:  "(({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ","
Text:  " "
Name:  "max_index"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "min_index"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "make_empty_area"
Text:  " "
Punctuation.Indicator:  "("
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "lower_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Name:  "min_index"
Text:  "<newline>\t\t\t"
Name:  "upper_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Name:  "max_index"
Text:  "<newline>\t\t\t"
Name:  "items_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "all_default"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "make_from_array"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "ARRAY"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "])"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Initialize from the items of `a'."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- (Useful in proper descendants of class `ARRAY',"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- to initialize an array-like object from a manifest array.)"
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "array_exists"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "set_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a"
Punctuation.Indicator:  "."
Name:  "area"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Name:  "lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "a"
Punctuation.Indicator:  "."
Name:  "lower"
Text:  "<newline>\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "a"
Punctuation.Indicator:  "."
Name:  "upper"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "shared"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "area"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Punctuation.Indicator:  "."
Name:  "area"
Text:  "<newline>\t\t\t"
Name:  "lower_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Punctuation.Indicator:  "."
Name:  "lower"
Text:  "<newline>\t\t\t"
Name:  "upper_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Punctuation.Indicator:  "."
Name:  "upper"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "make_from_special"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "SPECIAL"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "])"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Initialize Current from items of `a'."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "special_attached"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "set_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Name:  "lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "a"
Punctuation.Indicator:  "."
Name:  "count"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "shared"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "area"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  "<newline>\t\t\t"
Name:  "lower_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Name:  "upper_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Punctuation.Indicator:  "."
Name:  "count"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "make_from_cil"
Text:  " "
Punctuation.Indicator:  "("
Name:  "na"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "NATIVE_ARRAY"
Text:  " "
Punctuation.Indicator:  "["
Keyword:  "like"
Text:  " "
Name:  "item"
Punctuation.Indicator:  "])"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Initialize array from `na'."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "is_dotnet"
Punctuation.Indicator:  ":"
Text:  " "
Punctuation.Indicator:  "{"
Name.Class:  "PLATFORM"
Punctuation.Indicator:  "}."
Name:  "is_dotnet"
Text:  "<newline>\t\t\t"
Name:  "na_not_void"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "na"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "create"
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "make_from_native_array"
Text:  " "
Punctuation.Indicator:  "("
Name:  "na"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Name:  "lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "count"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Comment.Single:  "-- Access"
Text:  "<newline><newline>\t"
Name:  "item"
Text:  " "
Keyword:  "alias"
Text:  " "
Literal.String.Other:  "\"[]\""
Punctuation.Indicator:  ","
Text:  " "
Name:  "at"
Text:  " "
Keyword:  "alias"
Text:  " "
Literal.String.Double:  "\"@\""
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  "):"
Text:  " "
Name.Class:  "G"
Text:  " "
Keyword:  "assign"
Text:  " "
Name:  "put"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Entry at index `i', if in index interval"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "entry"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  "):"
Text:  " "
Name.Class:  "G"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Entry at index `i', if in index interval"
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "valid_key"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "valid_index"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "has"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "G"
Punctuation.Indicator:  "):"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Does `v' appear in array?"
Text:  "<newline> \t\t\t"
Comment.Single:  "-- (Reference or object equality,"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- based on `object_comparison'.)"
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "i"
Punctuation.Indicator:  ","
Text:  " "
Name:  "nb"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Name:  "l_area"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Name:  "area"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "l_area"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Text:  "<newline>\t\t\t"
Name:  "nb"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "object_comparison"
Text:  " "
Keyword:  "and"
Text:  " "
Name:  "v"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Keyword:  "from"
Text:  "<newline>\t\t\t\t"
Keyword:  "until"
Text:  "<newline>\t\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "nb"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword.Variable:  "Result"
Text:  "<newline>\t\t\t\t"
Keyword:  "loop"
Text:  "<newline>\t\t\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "l_area"
Punctuation.Indicator:  "."
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  " "
Operator:  "~"
Text:  " "
Name:  "v"
Text:  "<newline>\t\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Keyword:  "from"
Text:  "<newline>\t\t\t\t"
Keyword:  "until"
Text:  "<newline>\t\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "nb"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword.Variable:  "Result"
Text:  "<newline>\t\t\t\t"
Keyword:  "loop"
Text:  "<newline>\t\t\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "l_area"
Punctuation.Indicator:  "."
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  " "
Operator:  "="
Text:  " "
Name:  "v"
Text:  "<newline>\t\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Comment.Single:  "-- Measurement"
Text:  "<newline><newline>\t"
Name:  "lower"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Minimum index"
Text:  "<newline><newline>\t"
Name:  "upper"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Maximum index"
Text:  "<newline><newline>\t"
Name:  "count"
Punctuation.Indicator:  ","
Text:  " "
Name:  "capacity"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Number of available indices"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t"
Name:  "consistent_with_bounds"
Punctuation.Indicator:  ":"
Text:  " "
Keyword.Variable:  "Result"
Text:  " "
Operator:  "="
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "occurrences"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "G"
Punctuation.Indicator:  "):"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Number of times `v' appears in structure"
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "i"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "object_comparison"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Keyword:  "from"
Text:  "<newline>\t\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t\t"
Keyword:  "until"
Text:  "<newline>\t\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "upper"
Text:  "<newline>\t\t\t\t"
Keyword:  "loop"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  " "
Operator:  "~"
Text:  " "
Name:  "v"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Keyword.Variable:  "Result"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Keyword:  "from"
Text:  "<newline>\t\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t\t"
Keyword:  "until"
Text:  "<newline>\t\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "upper"
Text:  "<newline>\t\t\t\t"
Keyword:  "loop"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  " "
Operator:  "="
Text:  " "
Name:  "v"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Keyword.Variable:  "Result"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "index_set"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER_INTERVAL"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Range of acceptable indexes"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "create"
Text:  " "
Keyword.Variable:  "Result"
Punctuation.Indicator:  "."
Name:  "make"
Text:  " "
Punctuation.Indicator:  "("
Name:  "lower"
Punctuation.Indicator:  ","
Text:  " "
Name:  "upper"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t"
Name:  "same_count"
Punctuation.Indicator:  ":"
Text:  " "
Keyword.Variable:  "Result"
Punctuation.Indicator:  "."
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Name:  "count"
Text:  "<newline>\t\t\t"
Name:  "same_bounds"
Punctuation.Indicator:  ":"
Text:  "<newline>\t\t\t\t"
Punctuation.Indicator:  "(("
Keyword.Variable:  "Result"
Punctuation.Indicator:  "."
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ")"
Text:  " "
Keyword:  "and"
Text:  " "
Punctuation.Indicator:  "("
Keyword.Variable:  "Result"
Punctuation.Indicator:  "."
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Name:  "upper"
Punctuation.Indicator:  "))"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Comment.Single:  "-- Comparison"
Text:  "<newline><newline>\t"
Name:  "is_equal"
Text:  " "
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Keyword.Variable:  "Current"
Punctuation.Indicator:  "):"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Is array made of the same items as `other'?"
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "i"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "other"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Variable:  "Current"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Keyword.Constant:  "True"
Text:  "<newline>\t\t\t"
Keyword:  "elseif"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "lower"
Text:  " "
Keyword:  "and"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "upper"
Text:  " "
Keyword:  "and"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Name:  "object_comparison"
Text:  " "
Operator:  "="
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "object_comparison"
Text:  "<newline>\t\t\t"
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "object_comparison"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "from"
Text:  "<newline>\t\t\t\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Keyword.Constant:  "True"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "until"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "not"
Text:  " "
Keyword.Variable:  "Result"
Text:  " "
Keyword:  "or"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "upper"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "loop"
Text:  "<newline>\t\t\t\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  " "
Operator:  "~"
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "same_items"
Text:  " "
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  "."
Name:  "area"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "count"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Comment.Single:  "-- Status report"
Text:  "<newline><newline>\t"
Name:  "all_default"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Are all items set to default values?"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "count"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Punctuation.Indicator:  "({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "has_default"
Text:  " "
Keyword:  "and"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "filled_with"
Text:  " "
Punctuation.Indicator:  "(({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Keyword.Constant:  "True"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "definition"
Punctuation.Indicator:  ":"
Text:  " "
Keyword.Variable:  "Result"
Text:  " "
Operator:  "="
Text:  " "
Punctuation.Indicator:  "("
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Punctuation.Indicator:  "(("
Keyword:  "not"
Text:  " "
Keyword:  "attached"
Text:  " "
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "upper"
Punctuation.Indicator:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Punctuation.Indicator:  "({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ")"
Text:  " "
Keyword:  "and"
Text:  "<newline>\t\t\t\t"
Name:  "subarray"
Text:  " "
Punctuation.Indicator:  "("
Name:  "lower"
Punctuation.Indicator:  ","
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")."
Name:  "all_default"
Punctuation.Indicator:  "))"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "filled_with"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "G"
Punctuation.Indicator:  "):"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Are all items set to `v'?"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "filled_with"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "definition"
Punctuation.Indicator:  ":"
Text:  " "
Keyword.Variable:  "Result"
Text:  " "
Operator:  "="
Text:  " "
Punctuation.Indicator:  "("
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Punctuation.Indicator:  "("
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "upper"
Punctuation.Indicator:  ")"
Text:  " "
Operator:  "="
Text:  " "
Name:  "v"
Text:  " "
Keyword:  "and"
Text:  " "
Name:  "subarray"
Text:  " "
Punctuation.Indicator:  "("
Name:  "lower"
Punctuation.Indicator:  ","
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")."
Name:  "filled_with"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ")))"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "full"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Is structure filled to capacity? (Answer: yes)"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Keyword.Constant:  "True"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "same_items"
Text:  " "
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Keyword.Variable:  "Current"
Punctuation.Indicator:  "):"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Do `other' and Current have same items?"
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "other_not_void"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "other"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "count"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "same_items"
Text:  " "
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  "."
Name:  "area"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "count"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "definition"
Punctuation.Indicator:  ":"
Text:  " "
Keyword.Variable:  "Result"
Text:  " "
Operator:  "="
Text:  " "
Punctuation.Indicator:  "(("
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "count"
Punctuation.Indicator:  ")"
Text:  " "
Keyword:  "and"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Punctuation.Indicator:  "("
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation.Indicator:  "("
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "upper"
Punctuation.Indicator:  ")"
Text:  " "
Operator:  "="
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  "."
Name:  "upper"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "and"
Text:  " "
Name:  "subarray"
Text:  " "
Punctuation.Indicator:  "("
Name:  "lower"
Punctuation.Indicator:  ","
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")."
Name:  "same_items"
Text:  "<newline>\t\t\t\t"
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  "."
Name:  "subarray"
Text:  " "
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  "."
Name:  "lower"
Punctuation.Indicator:  ","
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")))))"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "valid_index"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  "):"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Is `i' within the bounds of the array?"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Punctuation.Indicator:  "("
Name:  "lower"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "i"
Punctuation.Indicator:  ")"
Text:  " "
Keyword:  "and"
Text:  " "
Keyword:  "then"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "upper"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "extendible"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- May items be added?"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- (Answer: no, although array may be resized.)"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Keyword.Constant:  "False"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "prunable"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- May items be removed? (Answer: no.)"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Keyword.Constant:  "False"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "resizable"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Can array be resized automatically?"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Punctuation.Indicator:  "({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "has_default"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "valid_index_set"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "index_set"
Punctuation.Indicator:  "."
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Name:  "count"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Comment.Single:  "-- Element change"
Text:  "<newline><newline>\t"
Name:  "put"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Name:  "item"
Punctuation.Indicator:  ";"
Text:  " "
Name:  "i"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Replace `i'-th entry, if in index interval, by `v'."
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "put"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ","
Text:  " "
Name:  "i"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "enter"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Name:  "item"
Punctuation.Indicator:  ";"
Text:  " "
Name:  "i"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Replace `i'-th entry, if in index interval, by `v'."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "valid_key"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "valid_index"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "put"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ","
Text:  " "
Name:  "i"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "force"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Name:  "item"
Punctuation.Indicator:  ";"
Text:  " "
Name:  "i"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Assign item `v' to `i'-th entry."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Resize the array if `i' falls out of currently defined bounds; preserve existing items."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- In void-safe mode, if ({G}).has_default does not hold, then you can only insert between"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- `lower - 1' or `upper + 1' position in the ARRAY."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "has_default_if_too_low"
Punctuation.Indicator:  ":"
Text:  "<newline>\t\t\t\t"
Punctuation.Indicator:  "("
Name:  "i"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "and"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "/="
Text:  " "
Punctuation.Indicator:  "{"
Keyword:  "like"
Text:  " "
Name:  "lower"
Punctuation.Indicator:  "}."
Name:  "min_value"
Punctuation.Indicator:  ")"
Text:  " "
Keyword:  "implies"
Text:  " "
Punctuation.Indicator:  "({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "has_default"
Text:  "<newline>\t\t\t"
Name:  "has_default_if_too_high"
Punctuation.Indicator:  ":"
Text:  "<newline>\t\t\t\t"
Punctuation.Indicator:  "("
Name:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "and"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "/="
Text:  " "
Punctuation.Indicator:  "{"
Keyword:  "like"
Text:  " "
Name:  "upper"
Punctuation.Indicator:  "}."
Name:  "max_value"
Punctuation.Indicator:  ")"
Text:  " "
Keyword:  "implies"
Text:  " "
Punctuation.Indicator:  "({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "has_default"
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "old_size"
Punctuation.Indicator:  ","
Text:  " "
Name:  "new_size"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Name:  "new_lower"
Punctuation.Indicator:  ","
Text:  " "
Name:  "new_upper"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Name:  "l_count"
Punctuation.Indicator:  ","
Text:  " "
Name:  "l_offset"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Name:  "l_increased_by_one"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "new_lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Punctuation.Indicator:  "."
Name:  "min"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Name:  "new_upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "upper"
Punctuation.Indicator:  "."
Name:  "max"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Name:  "new_size"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "new_upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "new_lower"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Name:  "l_increased_by_one"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  " "
Keyword:  "or"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "empty_area"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t"
Comment.Single:  "-- List is empty. First we create an empty SPECIAL of the right capacity."
Text:  "<newline>\t\t\t\t"
Name:  "make_empty_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "new_size"
Punctuation.Indicator:  "."
Name:  "max"
Text:  " "
Punctuation.Indicator:  "("
Name:  "additional_space"
Punctuation.Indicator:  "))"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Keyword:  "not"
Text:  " "
Name:  "l_increased_by_one"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t\t"
Comment.Single:  "-- We need to fill the SPECIAL for `0' to `new_size - 2' with the default value."
Text:  "<newline>\t\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "fill_with"
Text:  " "
Punctuation.Indicator:  "(({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "new_size"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "extend"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "old_size"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "capacity"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "new_size"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "old_size"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t"
Name:  "set_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "area"
Punctuation.Indicator:  "."
Name:  "aliased_resized_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "new_size"
Punctuation.Indicator:  "."
Name:  "max"
Text:  " "
Punctuation.Indicator:  "("
Name:  "old_size"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "additional_space"
Punctuation.Indicator:  ")))"
Text:  "<newline>\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "new_lower"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "lower"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t\t"
Comment.Single:  "-- We have inserted below the previous `lower'. We need to shift entries to the right"
Text:  "<newline>\t\t\t\t\t\t"
Comment.Single:  "-- before we can insert `v'."
Text:  "<newline>\t\t\t\t\t"
Name:  "l_offset"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "new_lower"
Text:  "<newline>\t\t\t\t\t"
Name:  "l_count"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "capacity"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Keyword:  "not"
Text:  " "
Name:  "l_increased_by_one"
Text:  " "
Keyword:  "and"
Text:  " "
Name:  "l_offset"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "l_count"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Single:  "-- With the `new_lower' given, the data has to move"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Single:  "-- beyond the `area''s count which requires us to fill"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Single:  "-- the gap between the old data's location and the new one"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Single:  "-- with the default value."
Text:  "<newline>\t\t\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "fill_with"
Text:  " "
Punctuation.Indicator:  "(({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ","
Text:  " "
Name:  "l_count"
Punctuation.Indicator:  ","
Text:  " "
Name:  "l_offset"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "move_data"
Text:  " "
Punctuation.Indicator:  "("
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "l_offset"
Punctuation.Indicator:  ","
Text:  " "
Name:  "l_count"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Keyword:  "not"
Text:  " "
Name:  "l_increased_by_one"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Single:  "-- We start at `1' and not `0' because next instruction"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Single:  "-- will update the item at position `0'."
Text:  "<newline>\t\t\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "fill_with"
Text:  " "
Punctuation.Indicator:  "(({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ","
Text:  " "
Name:  "l_offset"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t\t\t"
Comment.Single:  "-- Insert `v' at the new lower position."
Text:  "<newline>\t\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "put"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "new_size"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "count"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Single:  "-- We are adding to the new `upper' position. First we fill the non-initialized"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Single:  "-- elements if any up to `new_size - 2' (i.e. up the the item prior to `upper')."
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Keyword:  "not"
Text:  " "
Name:  "l_increased_by_one"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "fill_with"
Text:  " "
Punctuation.Indicator:  "(({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ","
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "count"
Punctuation.Indicator:  ","
Text:  " "
Name:  "new_size"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Single:  "-- Add `v' at upper position."
Text:  "<newline>\t\t\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "extend"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t\t\t\t"
Comment.Single:  "-- Here `lower' hasn't changed"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "put"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ","
Text:  " "
Name:  "i"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t"
Name:  "lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "new_lower"
Text:  "<newline>\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "new_upper"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "inserted"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  " "
Operator:  "="
Text:  " "
Name:  "v"
Text:  "<newline>\t\t\t"
Name:  "higher_count"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "count"
Text:  " "
Operator:  ">="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "count"
Text:  "<newline>\t\t\t"
Name:  "lower_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Punctuation.Indicator:  "("
Keyword:  "old"
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ")."
Name:  "min"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Name:  "upper_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Punctuation.Indicator:  "("
Keyword:  "old"
Text:  " "
Name:  "upper"
Punctuation.Indicator:  ")."
Name:  "max"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "fill_with"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "G"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Set items between `lower' and `upper' with `v'."
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "fill_with"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "same_capacity"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "capacity"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "capacity"
Text:  "<newline>\t\t\t"
Name:  "count_definition"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "count"
Text:  "<newline>\t\t\t"
Name:  "filled"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "filled_with"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "subcopy"
Text:  " "
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "ARRAY"
Text:  " "
Punctuation.Indicator:  "["
Keyword:  "like"
Text:  " "
Name:  "item"
Punctuation.Indicator:  "];"
Text:  " "
Name:  "start_pos"
Punctuation.Indicator:  ","
Text:  " "
Name:  "end_pos"
Punctuation.Indicator:  ","
Text:  " "
Name:  "index_pos"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Copy items of `other' within bounds `start_pos' and `end_pos'"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- to current array starting at index `index_pos'."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "other_not_void"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "other"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t\t"
Name:  "valid_start_pos"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "start_pos"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "lower"
Text:  "<newline>\t\t\t"
Name:  "valid_end_pos"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "end_pos"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "upper"
Text:  "<newline>\t\t\t"
Name:  "valid_bounds"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "start_pos"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "end_pos"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Name:  "valid_index_pos"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "index_pos"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t"
Name:  "enough_space"
Punctuation.Indicator:  ":"
Text:  " "
Punctuation.Indicator:  "("
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "index_pos"
Punctuation.Indicator:  ")"
Text:  " "
Operator:  ">="
Text:  " "
Punctuation.Indicator:  "("
Name:  "end_pos"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "start_pos"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "copy_data"
Text:  " "
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  "."
Name:  "area"
Punctuation.Indicator:  ","
Text:  " "
Name:  "start_pos"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "lower"
Punctuation.Indicator:  ","
Text:  " "
Name:  "index_pos"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ","
Text:  " "
Name:  "end_pos"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "start_pos"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- copied: forall `i' in 0 .. (`end_pos'-`start_pos'),"
Text:  "<newline>\t\t\t"
Comment.Single:  "--     item (index_pos + i) = other.item (start_pos + i)"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Comment.Single:  "-- Iteration"
Text:  "<newline><newline>\t"
Name:  "do_all"
Text:  " "
Punctuation.Indicator:  "("
Name:  "action"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "PROCEDURE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "ANY"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "TUPLE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]])"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Apply `action' to every item, from first to last."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Semantics not guaranteed if `action' changes the structure;"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- in such a case, apply iterator to clone of structure instead."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "action_not_void"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "action"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "do_all_in_bounds"
Text:  " "
Punctuation.Indicator:  "("
Name:  "action"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "do_if"
Text:  " "
Punctuation.Indicator:  "("
Name:  "action"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "PROCEDURE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "ANY"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "TUPLE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]];"
Text:  " "
Name:  "test"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "FUNCTION"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "ANY"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "TUPLE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "],"
Text:  " "
Name.Class:  "BOOLEAN"
Punctuation.Indicator:  "])"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Apply `action' to every item that satisfies `test', from first to last."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Semantics not guaranteed if `action' or `test' changes the structure;"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- in such a case, apply iterator to clone of structure instead."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "action_not_void"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "action"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t\t"
Name:  "test_not_void"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "test"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "do_if_in_bounds"
Text:  " "
Punctuation.Indicator:  "("
Name:  "action"
Punctuation.Indicator:  ","
Text:  " "
Name:  "test"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "there_exists"
Text:  " "
Punctuation.Indicator:  "("
Name:  "test"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "FUNCTION"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "ANY"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "TUPLE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "],"
Text:  " "
Name.Class:  "BOOLEAN"
Punctuation.Indicator:  "]):"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Is `test' true for at least one item?"
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "test_not_void"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "test"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "there_exists_in_bounds"
Text:  " "
Punctuation.Indicator:  "("
Name:  "test"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "for_all"
Text:  " "
Punctuation.Indicator:  "("
Name:  "test"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "FUNCTION"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "ANY"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "TUPLE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "],"
Text:  " "
Name.Class:  "BOOLEAN"
Punctuation.Indicator:  "]):"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Is `test' true for all items?"
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "test_not_void"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "test"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "for_all_in_bounds"
Text:  " "
Punctuation.Indicator:  "("
Name:  "test"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "do_all_with_index"
Text:  " "
Punctuation.Indicator:  "("
Name:  "action"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "PROCEDURE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "ANY"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "TUPLE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  "]])"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Apply `action' to every item, from first to last."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- `action' receives item and its index."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Semantics not guaranteed if `action' changes the structure;"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- in such a case, apply iterator to clone of structure instead."
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "i"
Punctuation.Indicator:  ","
Text:  " "
Name:  "j"
Punctuation.Indicator:  ","
Text:  " "
Name:  "nb"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Name:  "l_area"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Name:  "area"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "from"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t\t\t"
Name:  "j"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t\t"
Name:  "nb"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Name:  "l_area"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Text:  "<newline>\t\t\t"
Keyword:  "until"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "nb"
Text:  "<newline>\t\t\t"
Keyword:  "loop"
Text:  "<newline>\t\t\t\t"
Name:  "action"
Punctuation.Indicator:  "."
Name:  "call"
Text:  " "
Punctuation.Indicator:  "(["
Name:  "l_area"
Punctuation.Indicator:  "."
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  "),"
Text:  " "
Name:  "j"
Punctuation.Indicator:  "])"
Text:  "<newline>\t\t\t\t"
Name:  "j"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "j"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "do_if_with_index"
Text:  " "
Punctuation.Indicator:  "("
Name:  "action"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "PROCEDURE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "ANY"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "TUPLE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  "]];"
Text:  " "
Name:  "test"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "FUNCTION"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "ANY"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "TUPLE"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  ","
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  "],"
Text:  " "
Name.Class:  "BOOLEAN"
Punctuation.Indicator:  "])"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Apply `action' to every item that satisfies `test', from first to last."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- `action' and `test' receive the item and its index."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Semantics not guaranteed if `action' or `test' changes the structure;"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- in such a case, apply iterator to clone of structure instead."
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "i"
Punctuation.Indicator:  ","
Text:  " "
Name:  "j"
Punctuation.Indicator:  ","
Text:  " "
Name:  "nb"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Name:  "l_area"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Name:  "area"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "from"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t\t\t"
Name:  "j"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t\t"
Name:  "nb"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Name:  "l_area"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Text:  "<newline>\t\t\t"
Keyword:  "until"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "nb"
Text:  "<newline>\t\t\t"
Keyword:  "loop"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "test"
Punctuation.Indicator:  "."
Name:  "item"
Text:  " "
Punctuation.Indicator:  "(["
Name:  "l_area"
Punctuation.Indicator:  "."
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  "),"
Text:  " "
Name:  "j"
Punctuation.Indicator:  "])"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t"
Name:  "action"
Punctuation.Indicator:  "."
Name:  "call"
Text:  " "
Punctuation.Indicator:  "(["
Name:  "l_area"
Punctuation.Indicator:  "."
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  "),"
Text:  " "
Name:  "j"
Punctuation.Indicator:  "])"
Text:  "<newline>\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t"
Name:  "j"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "j"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Comment.Single:  "-- Removal"
Text:  "<newline><newline>\t"
Name:  "wipe_out"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Make array empty."
Text:  "<newline>\t\t"
Keyword:  "obsolete"
Text:  "<newline>\t\t\t"
Literal.String.Double:  "\"Not applicable since not `prunable'. Use `discard_items' instead.\""
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "discard_items"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "discard_items"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Reset all items to default values with reallocation."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "has_default"
Punctuation.Indicator:  ":"
Text:  " "
Punctuation.Indicator:  "({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "has_default"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "create"
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "make_filled"
Text:  " "
Punctuation.Indicator:  "(({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ","
Text:  " "
Name:  "capacity"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "default_items"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "all_default"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "clear_all"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Reset all items to default values."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "has_default"
Punctuation.Indicator:  ":"
Text:  " "
Punctuation.Indicator:  "({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "has_default"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "fill_with"
Text:  " "
Punctuation.Indicator:  "(({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "stable_lower"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t"
Name:  "stable_upper"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "upper"
Text:  "<newline>\t\t\t"
Name:  "default_items"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "all_default"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "keep_head"
Text:  " "
Punctuation.Indicator:  "("
Name:  "n"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Remove all items except for the first `n';"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- do nothing if `n' >= `count'."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "non_negative_argument"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "n"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "count"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Name:  "area"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "aliased_resized_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "n"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "new_count"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Name:  "n"
Punctuation.Indicator:  "."
Name:  "min"
Text:  " "
Punctuation.Indicator:  "("
Keyword:  "old"
Text:  " "
Name:  "count"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Name:  "same_lower"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "keep_tail"
Text:  " "
Punctuation.Indicator:  "("
Name:  "n"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Remove all items except for the last `n';"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- do nothing if `n' >= `count'."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "non_negative_argument"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "n"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "nb"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "nb"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "count"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "nb"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "overlapping_move"
Text:  " "
Punctuation.Indicator:  "("
Name:  "nb"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "n"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "n"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Name:  "area"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "aliased_resized_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "n"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "new_count"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Name:  "n"
Punctuation.Indicator:  "."
Name:  "min"
Text:  " "
Punctuation.Indicator:  "("
Keyword:  "old"
Text:  " "
Name:  "count"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Name:  "same_upper"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "upper"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "remove_head"
Text:  " "
Punctuation.Indicator:  "("
Name:  "n"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Remove first `n' items;"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- if `n' > `count', remove all."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "n_non_negative"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "n"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "count"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Name:  "area"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "aliased_resized_area"
Text:  " "
Punctuation.Indicator:  "("
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "keep_tail"
Text:  " "
Punctuation.Indicator:  "("
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "n"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "new_count"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Punctuation.Indicator:  "("
Keyword:  "old"
Text:  " "
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "n"
Punctuation.Indicator:  ")."
Name:  "max"
Text:  " "
Punctuation.Indicator:  "("
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Name:  "same_upper"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "upper"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "remove_tail"
Text:  " "
Punctuation.Indicator:  "("
Name:  "n"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Remove last `n' items;"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- if `n' > `count', remove all."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "n_non_negative"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "n"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "count"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Name:  "area"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "aliased_resized_area"
Text:  " "
Punctuation.Indicator:  "("
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "keep_head"
Text:  " "
Punctuation.Indicator:  "("
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "n"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "new_count"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "count"
Text:  " "
Operator:  "="
Text:  " "
Punctuation.Indicator:  "("
Keyword:  "old"
Text:  " "
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "n"
Punctuation.Indicator:  ")."
Name:  "max"
Text:  " "
Punctuation.Indicator:  "("
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Name:  "same_lower"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Comment.Single:  "-- Resizing"
Text:  "<newline><newline>\t"
Name:  "grow"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Change the capacity to at least `i'."
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "capacity"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Name:  "conservative_resize_with_default"
Text:  " "
Punctuation.Indicator:  "(({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ","
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ","
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "capacity"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "conservative_resize"
Text:  " "
Punctuation.Indicator:  "("
Name:  "min_index"
Punctuation.Indicator:  ","
Text:  " "
Name:  "max_index"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Rearrange array so that it can accommodate"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- indices down to `min_index' and up to `max_index'."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Do not lose any previously entered item."
Text:  "<newline>\t\t"
Keyword:  "obsolete"
Text:  "<newline>\t\t\t"
Literal.String.Double:  "\" `conservative_resize' is not void-safe statically. Use `conservative_resize_with_default' instead. [07-2010]\""
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "good_indices"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "min_index"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "max_index"
Text:  "<newline>\t\t\t"
Name:  "has_default"
Punctuation.Indicator:  ":"
Text:  " "
Punctuation.Indicator:  "({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "has_default"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "conservative_resize_with_default"
Text:  " "
Punctuation.Indicator:  "(({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ","
Text:  " "
Name:  "min_index"
Punctuation.Indicator:  ","
Text:  " "
Name:  "max_index"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "no_low_lost"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Name:  "min_index"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t"
Name:  "no_high_lost"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Name:  "max_index"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "upper"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "conservative_resize_with_default"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a_default_value"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "G"
Punctuation.Indicator:  ";"
Text:  " "
Name:  "min_index"
Punctuation.Indicator:  ","
Text:  " "
Name:  "max_index"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Rearrange array so that it can accommodate"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- indices down to `min_index' and up to `max_index'."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Do not lose any previously entered item."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "good_indices"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "min_index"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "max_index"
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "new_size"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Name:  "new_lower"
Punctuation.Indicator:  ","
Text:  " "
Name:  "new_upper"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t\t"
Name:  "offset"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "empty_area"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Name:  "set_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "area"
Punctuation.Indicator:  "."
Name:  "aliased_resized_area_with_default"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a_default_value"
Punctuation.Indicator:  ","
Text:  " "
Name:  "max_index"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "min_index"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  "))"
Text:  "<newline>\t\t\t\t"
Name:  "lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "min_index"
Text:  "<newline>\t\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "max_index"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Name:  "new_lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "min_index"
Punctuation.Indicator:  "."
Name:  "min"
Text:  " "
Punctuation.Indicator:  "("
Name:  "lower"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "new_upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "max_index"
Punctuation.Indicator:  "."
Name:  "max"
Text:  " "
Punctuation.Indicator:  "("
Name:  "upper"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "new_size"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "new_upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "new_lower"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "new_size"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "count"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t"
Name:  "set_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "area"
Punctuation.Indicator:  "."
Name:  "aliased_resized_area_with_default"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a_default_value"
Punctuation.Indicator:  ","
Text:  " "
Name:  "new_size"
Punctuation.Indicator:  "))"
Text:  "<newline>\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "new_lower"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "lower"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t\t"
Name:  "offset"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "new_lower"
Text:  "<newline>\t\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "move_data"
Text:  " "
Punctuation.Indicator:  "("
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "offset"
Punctuation.Indicator:  ","
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t\t"
Name:  "area"
Punctuation.Indicator:  "."
Name:  "fill_with"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a_default_value"
Punctuation.Indicator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation.Indicator:  ","
Text:  " "
Name:  "offset"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t\t"
Name:  "lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "new_lower"
Text:  "<newline>\t\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "new_upper"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "no_low_lost"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Name:  "min_index"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t"
Name:  "no_high_lost"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Name:  "max_index"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "upper"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "resize"
Text:  " "
Punctuation.Indicator:  "("
Name:  "min_index"
Punctuation.Indicator:  ","
Text:  " "
Name:  "max_index"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Rearrange array so that it can accommodate"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- indices down to `min_index' and up to `max_index'."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Do not lose any previously entered item."
Text:  "<newline>\t\t"
Keyword:  "obsolete"
Text:  "<newline>\t\t\t"
Literal.String.Double:  "\"Use `conservative_resize_with_default' instead as future versions will implement `resize' as specified in ELKS.\""
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "good_indices"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "min_index"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "max_index"
Text:  "<newline>\t\t\t"
Name:  "has_default"
Punctuation.Indicator:  ":"
Text:  " "
Punctuation.Indicator:  "({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "has_default"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "conservative_resize_with_default"
Text:  " "
Punctuation.Indicator:  "(({"
Name.Class:  "G"
Punctuation.Indicator:  "})."
Name:  "default"
Punctuation.Indicator:  ","
Text:  " "
Name:  "min_index"
Punctuation.Indicator:  ","
Text:  " "
Name:  "max_index"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "no_low_lost"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Name:  "min_index"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t"
Name:  "no_high_lost"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Name:  "max_index"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "upper"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "trim"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- <Precursor>"
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "n"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Name:  "count"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "n"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "count"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "capacity"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Name:  "area"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "aliased_resized_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "n"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t"
Name:  "same_items"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "same_items"
Text:  " "
Punctuation.Indicator:  "("
Keyword:  "old"
Text:  " "
Name:  "twin"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "rebase"
Text:  " "
Punctuation.Indicator:  "("
Name:  "a_lower"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Name:  "lower"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Without changing the actual content of `Current' we set `lower' to `a_lower'"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- and `upper' accordingly to `a_lower + count - 1'."
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "l_old_lower"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Name:  "l_old_lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t"
Name:  "lower"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "a_lower"
Text:  "<newline>\t\t\t"
Name:  "upper"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "a_lower"
Text:  " "
Operator:  "+"
Text:  " "
Punctuation.Indicator:  "("
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "l_old_lower"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "lower_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a_lower"
Text:  "<newline>\t\t\t"
Name:  "upper_set"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a_lower"
Text:  " "
Operator:  "+"
Text:  " "
Keyword:  "old"
Text:  " "
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Comment.Single:  "-- Conversion"
Text:  "<newline><newline>\t"
Name:  "to_c"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "ANY"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Address of actual sequence of values,"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- for passing to external (non-Eiffel) routines."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "not_is_dotnet"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "not"
Text:  " "
Punctuation.Indicator:  "{"
Name.Class:  "PLATFORM"
Punctuation.Indicator:  "}."
Name:  "is_dotnet"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "to_cil"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "NATIVE_ARRAY"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Address of actual sequence of values,"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- for passing to external (non-Eiffel) routines."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "is_dotnet"
Punctuation.Indicator:  ":"
Text:  " "
Punctuation.Indicator:  "{"
Name.Class:  "PLATFORM"
Punctuation.Indicator:  "}."
Name:  "is_dotnet"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "native_array"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "to_cil_not_void"
Punctuation.Indicator:  ":"
Text:  " "
Keyword.Variable:  "Result"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "to_special"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "SPECIAL"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- 'area'."
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "to_special_not_void"
Punctuation.Indicator:  ":"
Text:  " "
Keyword.Variable:  "Result"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "linear_representation"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "LINEAR"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Representation as a linear structure"
Text:  "<newline>\t\t"
Keyword:  "local"
Text:  "<newline>\t\t\t"
Name:  "temp"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "ARRAYED_LIST"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]"
Text:  "<newline>\t\t\t"
Name:  "i"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "create"
Text:  " "
Name:  "temp"
Punctuation.Indicator:  "."
Name:  "make"
Text:  " "
Punctuation.Indicator:  "("
Name:  "capacity"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "from"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "lower"
Text:  "<newline>\t\t\t"
Keyword:  "until"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "upper"
Text:  "<newline>\t\t\t"
Keyword:  "loop"
Text:  "<newline>\t\t\t\t"
Name:  "temp"
Punctuation.Indicator:  "."
Name:  "extend"
Text:  " "
Punctuation.Indicator:  "("
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "i"
Punctuation.Indicator:  "))"
Text:  "<newline>\t\t\t\t"
Name:  "i"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "temp"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Comment.Single:  "-- Duplication"
Text:  "<newline><newline>\t"
Name:  "copy"
Text:  " "
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  ":"
Text:  " "
Keyword:  "like"
Text:  " "
Keyword.Variable:  "Current"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Reinitialize by copying all the items of `other'."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- (This is also used by `clone'.)"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "other"
Text:  " "
Operator:  "/="
Text:  " "
Keyword.Variable:  "Current"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Name:  "standard_copy"
Text:  " "
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t"
Name:  "set_area"
Text:  " "
Punctuation.Indicator:  "("
Name:  "other"
Punctuation.Indicator:  "."
Name:  "area"
Punctuation.Indicator:  "."
Name:  "twin"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t"
Name:  "equal_areas"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "area"
Text:  " "
Operator:  "~"
Text:  " "
Name:  "other"
Punctuation.Indicator:  "."
Name:  "area"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "subarray"
Text:  " "
Punctuation.Indicator:  "("
Name:  "start_pos"
Punctuation.Indicator:  ","
Text:  " "
Name:  "end_pos"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "INTEGER"
Punctuation.Indicator:  "):"
Text:  " "
Name.Class:  "ARRAY"
Text:  " "
Punctuation.Indicator:  "["
Name.Class:  "G"
Punctuation.Indicator:  "]"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Array made of items of current array within"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- bounds `start_pos' and `end_pos'."
Text:  "<newline>\t\t"
Keyword:  "require"
Text:  "<newline>\t\t\t"
Name:  "valid_start_pos"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "valid_index"
Text:  " "
Punctuation.Indicator:  "("
Name:  "start_pos"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Name:  "valid_end_pos"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "end_pos"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "upper"
Text:  "<newline>\t\t\t"
Name:  "valid_bounds"
Punctuation.Indicator:  ":"
Text:  " "
Punctuation.Indicator:  "("
Name:  "start_pos"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "end_pos"
Punctuation.Indicator:  ")"
Text:  " "
Keyword:  "or"
Text:  " "
Punctuation.Indicator:  "("
Name:  "start_pos"
Text:  " "
Operator:  "="
Text:  " "
Name:  "end_pos"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name:  "start_pos"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "end_pos"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t\t\t"
Keyword:  "create"
Text:  " "
Keyword.Variable:  "Result"
Punctuation.Indicator:  "."
Name:  "make_filled"
Text:  " "
Punctuation.Indicator:  "("
Name:  "item"
Text:  " "
Punctuation.Indicator:  "("
Name:  "start_pos"
Punctuation.Indicator:  "),"
Text:  " "
Name:  "start_pos"
Punctuation.Indicator:  ","
Text:  " "
Name:  "end_pos"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t\t\t"
Comment.Single:  "-- Only copy elements if needed."
Text:  "<newline>\t\t\t\t"
Keyword.Variable:  "Result"
Punctuation.Indicator:  "."
Name:  "subcopy"
Text:  " "
Punctuation.Indicator:  "("
Keyword.Variable:  "Current"
Punctuation.Indicator:  ","
Text:  " "
Name:  "start_pos"
Punctuation.Indicator:  ","
Text:  " "
Name:  "end_pos"
Punctuation.Indicator:  ","
Text:  " "
Name:  "start_pos"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t\t"
Comment.Single:  "-- make empty"
Text:  "<newline>\t\t\t\t"
Keyword:  "create"
Text:  " "
Keyword.Variable:  "Result"
Punctuation.Indicator:  "."
Name:  "make_empty"
Text:  "<newline>\t\t\t\t"
Keyword.Variable:  "Result"
Punctuation.Indicator:  "."
Name:  "rebase"
Text:  " "
Punctuation.Indicator:  "("
Name:  "start_pos"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "end"
Text:  "<newline>\t\t"
Keyword:  "ensure"
Text:  "<newline>\t\t\t"
Name:  "lower"
Punctuation.Indicator:  ":"
Text:  " "
Keyword.Variable:  "Result"
Punctuation.Indicator:  "."
Name:  "lower"
Text:  " "
Operator:  "="
Text:  " "
Name:  "start_pos"
Text:  "<newline>\t\t\t"
Name:  "upper"
Punctuation.Indicator:  ":"
Text:  " "
Keyword.Variable:  "Result"
Punctuation.Indicator:  "."
Name:  "upper"
Text:  " "
Operator:  "="
Text:  " "
Name:  "end_pos"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- copied: forall `i' in `start_pos' .. `end_pos',"
Text:  "<newline>\t\t\t"
Comment.Single:  "--     Result.item (i) = item (i)"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Punctuation.Indicator:  "{"
Name.Class:  "NONE"
Punctuation.Indicator:  "}"
Text:  " "
Comment.Single:  "-- Inapplicable"
Text:  "<newline><newline>\t"
Name:  "prune"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "G"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Remove first occurrence of `v' if any."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- (Precondition is False.)"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>\t"
Name:  "extend"
Text:  " "
Punctuation.Indicator:  "("
Name:  "v"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "G"
Punctuation.Indicator:  ")"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Add `v' to structure."
Text:  "<newline>\t\t\t"
Comment.Single:  "-- (Precondition is False.)"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "feature"
Text:  " "
Punctuation.Indicator:  "{"
Name.Class:  "NONE"
Punctuation.Indicator:  "}"
Text:  " "
Comment.Single:  "-- Implementation"
Text:  "<newline><newline>\t"
Name:  "empty_area"
Punctuation.Indicator:  ":"
Text:  " "
Name.Class:  "BOOLEAN"
Text:  "<newline>\t\t\t"
Comment.Single:  "-- Is `area' empty?"
Text:  "<newline>\t\t"
Keyword:  "do"
Text:  "<newline>\t\t\t"
Keyword.Variable:  "Result"
Text:  " "
Punctuation.Indicator:  ":="
Text:  " "
Name:  "area"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "Void"
Text:  " "
Keyword:  "or"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "area"
Punctuation.Indicator:  "."
Name:  "capacity"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "invariant"
Text:  "<newline><newline>\t"
Name:  "area_exists"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "area"
Text:  " "
Operator:  "/="
Text:  " "
Keyword:  "Void"
Text:  "<newline>\t"
Name:  "consistent_size"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "capacity"
Text:  " "
Operator:  "="
Text:  " "
Name:  "upper"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "lower"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t"
Name:  "non_negative_count"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "count"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t"
Name:  "index_set_has_same_count"
Punctuation.Indicator:  ":"
Text:  " "
Name:  "valid_index_set"
Text:  "<newline>"
Comment.Single:  "-- Internal discussion haven't reached an agreement on this invariant"
Text:  "<newline>"
Comment.Single:  "--\tindex_set_has_same_bounds: ((index_set.lower = lower) and"
Text:  "<newline>"
Comment.Single:  "--\t\t\t\t(index_set.upper = lower + count - 1))"
Text:  "<newline><newline>"
Keyword:  "note"
Text:  "<newline>\t"
Name:  "copyright"
Punctuation.Indicator:  ":"
Text:  " "
Literal.String.Double:  "\"Copyright (c) 1984-2012, Eiffel Software and others\""
Text:  "<newline>\t"
Name:  "license"
Punctuation.Indicator:  ":"
Text:  "   "
Literal.String.Double:  "\"Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)\""
Text:  "<newline>\t"
Name:  "source"
Punctuation.Indicator:  ":"
Text:  " "
Literal.String.Other:  "\"[<newline>\t\t\tEiffel Software<newline>\t\t\t5949 Hollister Ave., Goleta, CA 93117 USA<newline>\t\t\tTelephone 805-685-1006, Fax 805-685-6869<newline>\t\t\tWebsite http://www.eiffel.com<newline>\t\t\tCustomer support http://support.eiffel.com<newline>\t\t]\""
Text:  "<newline><newline>"
Keyword:  "end"
Text:  "<newline>"
