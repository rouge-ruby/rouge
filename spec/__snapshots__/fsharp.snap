Comment.Single:  "////////////////////////////////////////////////////////////////////////////////"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "// Copyright 2008 \"FAKE - F# Make\" Project                                    //"
Text:  "<newline>"
Comment.Single:  "// Copyright 2010 Steffen Forkmann                                            //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "// Licensed under the Apache License, Version 2.0 (the \"License\");            //"
Text:  "<newline>"
Comment.Single:  "// you may not use this project except in compliance with the License.        //"
Text:  "<newline>"
Comment.Single:  "// You may obtain a copy of the License at                                    //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "//   http://www.apache.org/licenses/LICENSE-2.0                               //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "// Unless required by applicable law or agreed to in writing, software        //"
Text:  "<newline>"
Comment.Single:  "// distributed under the License is distributed on an \"AS IS\" BASIS,          //"
Text:  "<newline>"
Comment.Single:  "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   //"
Text:  "<newline>"
Comment.Single:  "// See the License for the specific language governing permissions and        //"
Text:  "<newline>"
Comment.Single:  "// limitations under the License.                                             //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "// You may choose to use this library under either the MS-PL or Apache 2.0    //"
Text:  "<newline>"
Comment.Single:  "// licenses. Both are included here for reference.                            //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "// Unless you explicitly state otherwise, any Contribution intentionally      //"
Text:  "<newline>"
Comment.Single:  "// submitted for inclusion in the Project shall be under the terms and        //"
Text:  "<newline>"
Comment.Single:  "// conditions of the Apache 2.0 license.                                      //"
Text:  "<newline>"
Comment.Single:  "//                                                                            //"
Text:  "<newline>"
Comment.Single:  "////////////////////////////////////////////////////////////////////////////////"
Text:  "<newline><newline>"
Comment:  "(*<newline>    mult-line comment test<newline>*)"
Text:  "<newline>"
Keyword:  "open"
Text:  " "
Name.Class:  "System"
Text:  "<newline>"
Keyword:  "open"
Text:  " "
Name.Class:  "Fake"
Text:  "<newline>"
Keyword:  "open"
Text:  " "
Name.Namespace:  "System"
Punctuation:  "."
Name.Class:  "IO"
Text:  "<newline>"
Keyword:  "open"
Text:  " "
Name.Class:  "Argu"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "printVersion"
Name.Builtin.Pseudo:  "()"
Text:  " "
Punctuation:  "="
Text:  "<newline>    "
Name:  "traceFAKE"
Text:  " "
Literal.String.Double:  "\"FakePath: %s\""
Text:  " "
Name:  "fakePath"
Text:  "<newline>    "
Name:  "traceFAKE"
Text:  " "
Literal.String.Double:  "\"%s\""
Text:  " "
Name:  "fakeVersionStr"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "printUsage"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Punctuation:  "="
Text:  "<newline>    "
Name:  "printfn"
Text:  " "
Literal.String.Double:  "\"-------------------\""
Text:  "<newline>    "
Name:  "printfn"
Text:  " "
Literal.String.Double:  "\" FAKE usage\""
Text:  "<newline>    "
Name:  "printfn"
Text:  " "
Literal.String.Double:  "\"-------------------\""
Text:  "<newline>    "
Name.Namespace:  "Cli"
Punctuation:  "."
Name:  "printUsage"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "printEnvironment"
Text:  " "
Name:  "cmdArgs"
Text:  " "
Name:  "args"
Text:  " "
Punctuation:  "="
Text:  "<newline>    "
Name:  "printVersion"
Name.Builtin.Pseudo:  "()"
Text:  "<newline><newline>    "
Keyword:  "if"
Text:  " "
Name:  "buildServer"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Class:  "LocalBuild"
Text:  " "
Keyword:  "then"
Text:  "<newline>        "
Name:  "trace"
Text:  " "
Name:  "localBuildLabel"
Text:  "<newline>    "
Keyword:  "else"
Text:  "<newline>        "
Name:  "tracefn"
Text:  " "
Literal.String.Double:  "\"Build-Version: %s\""
Text:  " "
Name:  "buildVersion"
Text:  "<newline><newline>    "
Keyword:  "if"
Text:  " "
Name:  "cmdArgs"
Text:  " "
Punctuation:  "|>"
Text:  " "
Name.Namespace:  "Array"
Punctuation:  "."
Name:  "length"
Text:  " "
Punctuation:  ">"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "then"
Text:  "<newline>        "
Name:  "traceFAKE"
Text:  " "
Literal.String.Double:  "\"FAKE Arguments:\""
Text:  "<newline>        "
Name:  "args"
Text:  " <newline>          "
Punctuation:  "|>"
Text:  " "
Name.Namespace:  "Seq"
Punctuation:  "."
Name:  "map"
Text:  " "
Name:  "fst"
Text:  "<newline>          "
Punctuation:  "|>"
Text:  " "
Name.Namespace:  "Seq"
Punctuation:  "."
Name:  "iter"
Text:  " "
Punctuation:  "("
Name:  "tracefn"
Text:  " "
Literal.String.Double:  "\"%A\""
Punctuation:  ")"
Text:  "<newline><newline>    "
Name:  "log"
Text:  " "
Literal.String.Double:  "\"\""
Text:  "<newline>    "
Name:  "traceFAKE"
Text:  " "
Literal.String.Double:  "\"FSI-Path: %s\""
Text:  " "
Name:  "fsiPath"
Text:  "<newline>    "
Name:  "traceFAKE"
Text:  " "
Literal.String.Double:  "\"MSBuild-Path: %s\""
Text:  " "
Name:  "msBuildExe"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "containsParam"
Text:  " "
Name:  "param"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Namespace:  "Seq"
Punctuation:  "."
Name:  "map"
Text:  " "
Name:  "toLower"
Text:  " "
Operator:  ">>"
Text:  " "
Name.Namespace:  "Seq"
Punctuation:  "."
Name:  "exists"
Text:  " "
Operator:  "((=)"
Text:  " "
Punctuation:  "("
Name:  "toLower"
Text:  " "
Name:  "param"
Operator:  "))"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "paramIsHelp"
Text:  " "
Name:  "param"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "containsParam"
Text:  " "
Name:  "param"
Text:  " "
Punctuation:  "["
Literal.String.Double:  "\"help\""
Punctuation:  ";"
Text:  " "
Literal.String.Double:  "\"?\""
Punctuation:  ";"
Text:  " "
Literal.String.Double:  "\"/?\""
Punctuation:  ";"
Text:  " "
Literal.String.Double:  "\"-h\""
Punctuation:  ";"
Text:  " "
Literal.String.Double:  "\"--help\""
Punctuation:  ";"
Text:  " "
Literal.String.Double:  "\"/h\""
Punctuation:  ";"
Text:  " "
Literal.String.Double:  "\"/help\""
Punctuation:  "]"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "buildScripts"
Text:  " "
Punctuation:  "="
Text:  " "
Operator:  "!!"
Text:  " "
Literal.String.Double:  "\"*.fsx\""
Text:  " "
Punctuation:  "|>"
Text:  " "
Name.Namespace:  "Seq"
Punctuation:  "."
Name:  "toList"
Text:  "<newline><newline>"
Keyword:  "try"
Text:  "<newline>    "
Keyword:  "try"
Text:  "<newline>        "
Name.Class:  "AutoCloseXmlWriter"
Text:  " "
Punctuation:  "<-"
Text:  " "
Name.Builtin.Pseudo:  "true"
Text:  "<newline><newline>        "
Keyword:  "let"
Text:  " "
Name:  "cmdArgs"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Namespace:  "System"
Punctuation:  "."
Name.Namespace:  "Environment"
Punctuation:  "."
Name.Class:  "GetCommandLineArgs"
Name.Builtin.Pseudo:  "()"
Text:  "<newline><newline>        "
Keyword:  "let"
Text:  " "
Name:  "args"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name:  "parsePositionalArgs"
Text:  " "
Name:  "cmdArgs"
Text:  "<newline><newline>        "
Keyword:  "match"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name:  "parsedArgsOrEx"
Text:  " "
Name:  "args"
Punctuation:  "."
Name.Class:  "Rest"
Text:  " "
Keyword:  "with"
Text:  "<newline><newline>        "
Comment.Single:  "//We have new style help args!"
Text:  "<newline>        "
Punctuation:  "|"
Text:  " "
Name.Class:  "Choice1Of2"
Punctuation:  "("
Name:  "fakeArgs"
Punctuation:  ")"
Text:  " "
Punctuation:  "->"
Text:  "<newline>            <newline>            "
Comment.Single:  "//Break to allow a debugger to be attached here"
Text:  "<newline>            "
Keyword:  "if"
Text:  " "
Name:  "fakeArgs"
Punctuation:  "."
Name.Class:  "Contains"
Text:  " "
Operator:  "<@"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name.Class:  "Break"
Text:  " "
Operator:  "@>"
Text:  " "
Keyword:  "then"
Text:  "<newline>                "
Name.Namespace:  "Diagnostics"
Punctuation:  "."
Name.Namespace:  "Debugger"
Punctuation:  "."
Name.Class:  "Launch"
Name.Builtin.Pseudo:  "()"
Text:  " "
Punctuation:  "|>"
Text:  " "
Name:  "ignore"
Text:  "<newline>                "
Name.Namespace:  "Diagnostics"
Punctuation:  "."
Name.Namespace:  "Debugger"
Punctuation:  "."
Name.Class:  "Break"
Name.Builtin.Pseudo:  "()"
Text:  " "
Punctuation:  "|>"
Text:  " "
Name:  "ignore"
Text:  "<newline><newline>            "
Comment.Single:  "//Boot and version force us to ignore other args, so check for them and handle."
Text:  "<newline>            "
Keyword:  "let"
Text:  " "
Name:  "isBoot"
Punctuation:  ","
Text:  " "
Name:  "bootArgs"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "fakeArgs"
Punctuation:  "."
Name.Class:  "Contains"
Text:  " "
Operator:  "<@"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name.Class:  "Boot"
Text:  " "
Operator:  "@>,"
Text:  " "
Name:  "fakeArgs"
Punctuation:  "."
Name.Class:  "GetResults"
Text:  " "
Operator:  "<@"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name.Class:  "Boot"
Text:  " "
Operator:  "@>"
Text:  "<newline>            "
Keyword:  "let"
Text:  " "
Name:  "isVersion"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "fakeArgs"
Punctuation:  "."
Name.Class:  "Contains"
Text:  " "
Operator:  "<@"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name.Class:  "Version"
Text:  " "
Operator:  "@>"
Text:  "<newline>            "
Keyword:  "let"
Text:  " "
Name:  "printDetails"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "fakeArgs"
Punctuation:  "."
Name.Class:  "Contains"
Text:  " "
Operator:  "<@"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name.Class:  "PrintDetails"
Text:  " "
Operator:  "@>"
Text:  "<newline><newline>            "
Keyword:  "match"
Text:  " "
Name:  "isVersion"
Punctuation:  ","
Text:  " "
Name:  "isBoot"
Text:  " "
Keyword:  "with"
Text:  "<newline><newline>            "
Comment.Single:  "//Version."
Text:  "<newline>            "
Punctuation:  "|"
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ","
Text:  " "
Punctuation:  "_"
Text:  " "
Punctuation:  "->"
Text:  " "
Name:  "printVersion"
Name.Builtin.Pseudo:  "()"
Text:  "<newline><newline>            "
Comment.Single:  "//Boot."
Text:  "<newline>            "
Punctuation:  "|"
Text:  " "
Name.Builtin.Pseudo:  "false"
Punctuation:  ","
Text:  " "
Name.Builtin.Pseudo:  "true"
Text:  " "
Punctuation:  "->"
Text:  "<newline>                "
Keyword:  "let"
Text:  " "
Name:  "handler"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Namespace:  "Boot"
Punctuation:  "."
Name.Class:  "HandlerForArgs"
Text:  " "
Name:  "bootArgs"
Comment.Single:  "//Could be List.empty, but let Boot handle this."
Text:  "<newline>                "
Name:  "handler"
Punctuation:  "."
Name.Class:  "Interact"
Name.Builtin.Pseudo:  "()"
Text:  "<newline><newline>            "
Comment.Single:  "//Try and run a build script! "
Text:  "<newline>            "
Punctuation:  "|"
Text:  " "
Name.Builtin.Pseudo:  "false"
Punctuation:  ","
Text:  " "
Name.Builtin.Pseudo:  "false"
Text:  " "
Punctuation:  "->"
Text:  "<newline><newline>                "
Name:  "traceStartBuild"
Name.Builtin.Pseudo:  "()"
Text:  "<newline>                "
Keyword:  "if"
Text:  " "
Name:  "printDetails"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "printVersion"
Name.Builtin.Pseudo:  "()"
Text:  "<newline><newline>                "
Comment.Single:  "//Maybe log."
Text:  "<newline>                "
Keyword:  "match"
Text:  " "
Name:  "fakeArgs"
Punctuation:  "."
Name.Class:  "TryGetResult"
Text:  " "
Operator:  "<@"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name.Class:  "LogFile"
Text:  " "
Operator:  "@>"
Text:  " "
Keyword:  "with"
Text:  "<newline>                "
Punctuation:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "path"
Punctuation:  ")"
Text:  " "
Punctuation:  "->"
Text:  " "
Name:  "addXmlListener"
Text:  " "
Name:  "path"
Text:  "<newline>                "
Punctuation:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Punctuation:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  "<newline><newline>                "
Comment.Single:  "//Combine the key value pair vars and the flag vars."
Text:  "<newline>                "
Keyword:  "let"
Text:  " "
Name:  "envVars"
Text:  " "
Punctuation:  "="
Text:  "<newline>                    "
Name:  "seq"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "yield"
Operator:  "!"
Text:  " "
Name:  "fakeArgs"
Punctuation:  "."
Name.Class:  "GetResults"
Text:  " "
Operator:  "<@"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name.Class:  "EnvFlag"
Text:  " "
Operator:  "@>"
Text:  " "
Punctuation:  "|>"
Text:  " "
Name.Namespace:  "Seq"
Punctuation:  "."
Name:  "map"
Text:  " "
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name:  "name"
Text:  " "
Punctuation:  "->"
Text:  " "
Name:  "name"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\"true\""
Punctuation:  ")"
Text:  "<newline>                          "
Keyword:  "yield"
Operator:  "!"
Text:  " "
Name:  "fakeArgs"
Punctuation:  "."
Name.Class:  "GetResults"
Text:  " "
Operator:  "<@"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name.Class:  "EnvVar"
Text:  " "
Operator:  "@>"
Text:  "<newline>                          "
Keyword:  "if"
Text:  " "
Name:  "fakeArgs"
Punctuation:  "."
Name.Class:  "Contains"
Text:  " "
Operator:  "<@"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name.Class:  "Single_Target"
Text:  " "
Operator:  "@>"
Text:  " "
Keyword:  "then"
Text:  " "
Keyword:  "yield"
Text:  " "
Literal.String.Double:  "\"single-target\""
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\"true\""
Text:  "<newline>                          "
Keyword:  "if"
Text:  " "
Name:  "args"
Punctuation:  "."
Name.Namespace:  "Target"
Punctuation:  "."
Name.Class:  "IsSome"
Text:  " "
Keyword:  "then"
Text:  " "
Keyword:  "yield"
Text:  " "
Literal.String.Double:  "\"target\""
Punctuation:  ","
Text:  " "
Name:  "args"
Punctuation:  "."
Name.Namespace:  "Target"
Punctuation:  "."
Name.Class:  "Value"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>                "
Comment.Single:  "//Get our fsiargs from somewhere!"
Text:  "<newline>                "
Keyword:  "let"
Text:  " "
Name:  "fsiArgs"
Text:  " "
Punctuation:  "="
Text:  " <newline>                    "
Keyword:  "match"
Text:  "<newline>                        "
Name:  "fakeArgs"
Punctuation:  "."
Name.Class:  "GetResults"
Text:  " "
Operator:  "<@"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name.Class:  "FsiArgs"
Text:  " "
Operator:  "@>,"
Text:  "<newline>                        "
Name:  "args"
Punctuation:  "."
Name.Class:  "Script"
Punctuation:  ","
Text:  "<newline>                        "
Name.Namespace:  "List"
Punctuation:  "."
Name:  "isEmpty"
Text:  " "
Name:  "buildScripts"
Text:  " "
Keyword:  "with"
Text:  "<newline><newline>                    "
Comment.Single:  "//TODO check for presence of --fsiargs with no args?  Make attribute for UAP?"
Text:  "<newline><newline>                    "
Comment.Single:  "//Use --fsiargs approach."
Text:  "<newline>                    "
Punctuation:  "|"
Text:  " "
Name:  "x"
Punctuation:  "::"
Name:  "xs"
Punctuation:  ","
Text:  " "
Operator:  "_,"
Text:  " "
Punctuation:  "_"
Text:  " "
Punctuation:  "->"
Text:  "<newline>                        "
Keyword:  "match"
Text:  " "
Name.Namespace:  "FsiArgs"
Punctuation:  "."
Name:  "parse"
Text:  " "
Punctuation:  "("
Name:  "x"
Punctuation:  "::"
Name:  "xs"
Text:  " "
Punctuation:  "|>"
Text:  " "
Name.Namespace:  "Array"
Punctuation:  "."
Name:  "ofList"
Punctuation:  ")"
Text:  "  "
Keyword:  "with"
Text:  "<newline>                        "
Punctuation:  "|"
Text:  " "
Name.Class:  "Choice1Of2"
Punctuation:  "("
Name:  "fsiArgs"
Punctuation:  ")"
Text:  " "
Punctuation:  "->"
Text:  " "
Name:  "fsiArgs"
Text:  "<newline>                        "
Punctuation:  "|"
Text:  " "
Name.Class:  "Choice2Of2"
Punctuation:  "("
Name:  "msg"
Punctuation:  ")"
Text:  " "
Punctuation:  "->"
Text:  " "
Name:  "failwith"
Text:  " "
Punctuation:  "("
Name:  "sprintf"
Text:  " "
Literal.String.Double:  "\"Unable to parse --fsiargs.  %s.\""
Text:  " "
Name:  "msg"
Punctuation:  ")"
Text:  "<newline><newline>                    "
Comment.Single:  "//Script path is specified."
Text:  "<newline>                    "
Punctuation:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ","
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "script"
Operator:  "),"
Text:  " "
Punctuation:  "_"
Text:  " "
Punctuation:  "->"
Text:  " "
Name.Class:  "FsiArgs"
Operator:  "([],"
Text:  " "
Name:  "script"
Punctuation:  ","
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ")"
Text:  "<newline><newline>                    "
Comment.Single:  "//No explicit script, but have in working directory."
Text:  "<newline>                    "
Punctuation:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ","
Text:  " "
Name.Class:  "None"
Punctuation:  ","
Text:  " "
Name.Builtin.Pseudo:  "false"
Text:  " "
Punctuation:  "->"
Text:  " "
Name.Class:  "FsiArgs"
Operator:  "([],"
Text:  " "
Name.Namespace:  "List"
Punctuation:  "."
Name:  "head"
Text:  " "
Name:  "buildScripts"
Punctuation:  ","
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ")"
Text:  "<newline><newline>                    "
Comment.Single:  "//Noooo script anywhere!"
Text:  "<newline>                    "
Punctuation:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ","
Text:  " "
Name.Class:  "None"
Punctuation:  ","
Text:  " "
Name.Builtin.Pseudo:  "true"
Text:  " "
Punctuation:  "->"
Text:  " "
Name:  "failwith"
Text:  " "
Literal.String.Double:  "\"Build script not specified on command line, in fsi args or found in working directory.\""
Text:  "<newline>                    <newline>                "
Comment.Single:  "//TODO if printDetails then printEnvironment cmdArgs args"
Text:  "<newline><newline>                "
Keyword:  "let"
Text:  " "
Name:  "useCache"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "not"
Text:  " "
Punctuation:  "("
Name:  "fakeArgs"
Punctuation:  "."
Name.Class:  "Contains"
Text:  " "
Operator:  "<@"
Text:  " "
Name.Namespace:  "Cli"
Punctuation:  "."
Name.Class:  "NoCache"
Text:  " "
Operator:  "@>)"
Text:  "<newline>                "
Keyword:  "if"
Text:  " "
Keyword:  "not"
Text:  " "
Punctuation:  "("
Name:  "runBuildScriptWithFsiArgsAt"
Text:  " "
Name:  "printDetails"
Text:  " "
Name:  "fsiArgs"
Text:  " "
Name:  "envVars"
Text:  " "
Name:  "useCache"
Punctuation:  ")"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Namespace:  "Environment"
Punctuation:  "."
Name.Class:  "ExitCode"
Text:  " "
Punctuation:  "<-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>                "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "printDetails"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "log"
Text:  " "
Literal.String.Double:  "\"Ready.\""
Text:  "<newline><newline>                "
Name.Builtin.Pseudo:  "()"
Text:  "<newline><newline>        "
Comment.Single:  "//None of the new style args parsed, so revert to the old skool."
Text:  "<newline>        "
Punctuation:  "|"
Text:  " "
Name.Class:  "Choice2Of2"
Punctuation:  "("
Name:  "ex"
Punctuation:  ")"
Text:  " "
Punctuation:  "->"
Text:  "<newline><newline>            "
Comment.Single:  "// #1082 print a warning as we've been invoked with invalid OR old-style args."
Text:  "<newline>            "
Comment.Single:  "// traceImportant \"Error parsing command line arguments.  You have a mistake in your args, or are using the pre-2.1.8 argument style:\""
Text:  "<newline>            "
Comment.Single:  "// exceptionAndInnersToString ex |> traceImportant"
Text:  "<newline>            "
Comment.Single:  "// trace \"Attempting to run with pre-version 2.18 argument style, for backwards compat.\""
Text:  "<newline><newline>            "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "cmdArgs"
Punctuation:  "."
Name.Class:  "Length"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "&&"
Text:  " "
Name:  "paramIsHelp"
Text:  " "
Name:  "cmdArgs"
Operator:  ".["
Literal.Number.Integer:  "1"
Operator:  "])"
Text:  " "
Operator:  "||"
Text:  " "
Punctuation:  "("
Name:  "cmdArgs"
Punctuation:  "."
Name.Class:  "Length"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "&&"
Text:  " "
Name.Namespace:  "List"
Punctuation:  "."
Name:  "length"
Text:  " "
Name:  "buildScripts"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "printUsage"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Keyword:  "else"
Text:  "<newline>            "
Keyword:  "match"
Text:  " "
Name.Namespace:  "Boot"
Punctuation:  "."
Name.Class:  "ParseCommandLine"
Punctuation:  "("
Name:  "cmdArgs"
Punctuation:  ")"
Text:  " "
Keyword:  "with"
Text:  "<newline>            "
Punctuation:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Punctuation:  "->"
Text:  "<newline>                "
Keyword:  "let"
Text:  " "
Name:  "buildScriptArg"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "cmdArgs"
Punctuation:  "."
Name.Class:  "Length"
Text:  " "
Punctuation:  ">"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "&&"
Text:  " "
Name:  "cmdArgs"
Operator:  ".["
Literal.Number.Integer:  "1"
Operator:  "]."
Name.Class:  "EndsWith"
Text:  " "
Literal.String.Double:  "\".fsx\""
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "cmdArgs"
Operator:  ".["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Namespace:  "Seq"
Punctuation:  "."
Name:  "head"
Text:  " "
Name:  "buildScripts"
Text:  "<newline>                "
Keyword:  "let"
Text:  " "
Name:  "fakeArgs"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "cmdArgs"
Text:  " "
Punctuation:  "|>"
Text:  " "
Name.Namespace:  "Array"
Punctuation:  "."
Name:  "filter"
Text:  " "
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name:  "x"
Text:  " "
Punctuation:  "->"
Text:  " "
Name:  "x"
Punctuation:  "."
Name.Class:  "StartsWith"
Text:  " "
Literal.String.Double:  "\"-d:\""
Text:  " "
Punctuation:  "="
Text:  " "
Name.Builtin.Pseudo:  "false"
Punctuation:  ")"
Text:  "<newline>                "
Keyword:  "let"
Text:  " "
Name:  "fsiArgs"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "cmdArgs"
Text:  " "
Punctuation:  "|>"
Text:  " "
Name.Namespace:  "Array"
Punctuation:  "."
Name:  "filter"
Text:  " "
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name:  "x"
Text:  " "
Punctuation:  "->"
Text:  " "
Name:  "x"
Punctuation:  "."
Name.Class:  "StartsWith"
Text:  " "
Literal.String.Double:  "\"-d:\""
Punctuation:  ")"
Text:  " "
Punctuation:  "|>"
Text:  " "
Name.Namespace:  "Array"
Punctuation:  "."
Name:  "toList"
Text:  "<newline>                "
Keyword:  "let"
Text:  " "
Name:  "args"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Namespace:  "CommandlineParams"
Punctuation:  "."
Name:  "parseArgs"
Text:  " "
Punctuation:  "("
Name:  "fakeArgs"
Text:  " "
Punctuation:  "|>"
Text:  " "
Name.Namespace:  "Seq"
Punctuation:  "."
Name:  "filter"
Text:  " "
Operator:  "((<>)"
Text:  " "
Name:  "buildScriptArg"
Punctuation:  ")"
Text:  " "
Punctuation:  "|>"
Text:  " "
Name.Namespace:  "Seq"
Punctuation:  "."
Name:  "filter"
Text:  " "
Operator:  "((<>)"
Text:  " "
Literal.String.Double:  "\"details\""
Operator:  "))"
Text:  "<newline><newline>                "
Name:  "traceStartBuild"
Name.Builtin.Pseudo:  "()"
Text:  "<newline>                "
Keyword:  "let"
Text:  " "
Name:  "printDetails"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "containsParam"
Text:  " "
Literal.String.Double:  "\"details\""
Text:  " "
Name:  "cmdArgs"
Text:  "<newline>                "
Keyword:  "if"
Text:  " "
Name:  "printDetails"
Text:  " "
Keyword:  "then"
Text:  "<newline>                    "
Name:  "printEnvironment"
Text:  " "
Name:  "cmdArgs"
Text:  " "
Name:  "args"
Text:  "<newline>                "
Keyword:  "if"
Text:  " "
Keyword:  "not"
Text:  " "
Punctuation:  "("
Name:  "runBuildScript"
Text:  " "
Name:  "printDetails"
Text:  " "
Name:  "buildScriptArg"
Text:  " "
Name:  "fsiArgs"
Text:  " "
Name:  "args"
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ")"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Namespace:  "Environment"
Punctuation:  "."
Name.Class:  "ExitCode"
Text:  " "
Punctuation:  "<-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>                "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "printDetails"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "log"
Text:  " "
Literal.String.Double:  "\"Ready.\""
Text:  "<newline>            "
Punctuation:  "|"
Text:  " "
Name.Class:  "Some"
Text:  " "
Name:  "handler"
Text:  " "
Punctuation:  "->"
Text:  "<newline>                "
Name:  "handler"
Punctuation:  "."
Name.Class:  "Interact"
Name.Builtin.Pseudo:  "()"
Text:  "<newline>    "
Keyword:  "with"
Text:  "<newline>    "
Punctuation:  "|"
Text:  " "
Name:  "exn"
Text:  " "
Punctuation:  "->"
Text:  " <newline>        "
Keyword:  "if"
Text:  " "
Name:  "exn"
Punctuation:  "."
Name.Class:  "InnerException"
Text:  " "
Punctuation:  "<>"
Text:  " "
Keyword:  "null"
Text:  " "
Keyword:  "then"
Text:  "<newline>            "
Keyword:  "let"
Text:  " "
Name:  "``inner message.#1``"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "exn"
Punctuation:  "."
Name.Namespace:  "InnerException"
Punctuation:  "."
Name.Class:  "Message"
Text:  "<newline>            "
Name:  "sprintf"
Text:  " "
Literal.String.Double:  "\"Build failed."
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "Error:"
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "%s"
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "InnerException:"
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "%s\""
Text:  " "
Name:  "exn"
Punctuation:  "."
Name.Class:  "Message"
Text:  " "
Name:  "``inner message.#1``"
Text:  "<newline>            "
Punctuation:  "|>"
Text:  " "
Name:  "traceError"
Text:  "<newline>            "
Name:  "printUsage"
Name.Builtin.Pseudo:  "()"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>            "
Name:  "sprintf"
Text:  " "
Literal.String.Double:  "\"Build failed."
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "Error:"
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "%s\""
Text:  " "
Name:  "exn"
Punctuation:  "."
Name.Class:  "Message"
Text:  "<newline>            "
Punctuation:  "|>"
Text:  " "
Name:  "traceError"
Text:  "<newline>            "
Name:  "printUsage"
Name.Builtin.Pseudo:  "()"
Text:  "<newline><newline>        "
Keyword:  "let"
Text:  " "
Name:  "isKnownException"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "exn"
Text:  " "
Operator:  ":?"
Text:  " "
Name.Class:  "FAKEException"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Keyword:  "not"
Text:  " "
Name:  "isKnownException"
Text:  " "
Keyword:  "then"
Text:  "<newline>            "
Name:  "sendTeamCityError"
Text:  " "
Name:  "exn"
Punctuation:  "."
Name.Class:  "Message"
Text:  "<newline><newline>        "
Name.Namespace:  "Environment"
Punctuation:  "."
Name.Class:  "ExitCode"
Text:  " "
Punctuation:  "<-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline><newline>    "
Name:  "killAllCreatedProcesses"
Name.Builtin.Pseudo:  "()"
Text:  "<newline><newline>"
Keyword:  "finally"
Text:  "<newline>    "
Name:  "traceEndBuild"
Name.Builtin.Pseudo:  "()"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Operator:  "!"
Name.Namespace:  "TargetHelper"
Punctuation:  "."
Name.Namespace:  "ExitCode"
Punctuation:  "."
Name:  "exitCode"
Text:  " "
Punctuation:  "<>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "exit"
Text:  " "
Operator:  "!"
Name.Namespace:  "TargetHelper"
Punctuation:  "."
Name.Namespace:  "ExitCode"
Punctuation:  "."
Name:  "exitCode"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Namespace:  "Environment"
Punctuation:  "."
Name.Class:  "ExitCode"
Text:  " "
Punctuation:  "<>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "exit"
Text:  " "
Name.Namespace:  "Environment"
Punctuation:  "."
Name.Class:  "ExitCode"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "value"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword.Type:  "array"
Operator:  ".["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "value"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "dict"
Punctuation:  "."
Name.Namespace:  "Test"
Punctuation:  ".["
Literal.String.Double:  "\"key\""
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "// syntax highlighting"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "number"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "123"
Text:  "<newline>"
