Comment:  "// A line comment."
Text:  "<newline><newline>"
Comment:  "/*<newline>A general comment.<newline>*/"
Text:  "<newline><newline>"
Comment:  "// Keywords"
Text:  "<newline><newline>\t"
Keyword:  "break"
Text:  "        "
Keyword:  "default"
Text:  "      "
Keyword:  "func"
Text:  "         "
Keyword:  "interface"
Text:  "    "
Keyword:  "select"
Text:  "<newline>\t"
Keyword:  "case"
Text:  "         "
Keyword:  "defer"
Text:  "        "
Keyword:  "go"
Text:  "           "
Keyword:  "map"
Text:  "          "
Keyword:  "struct"
Text:  "<newline>\t"
Keyword:  "chan"
Text:  "         "
Keyword:  "else"
Text:  "         "
Keyword:  "goto"
Text:  "         "
Keyword:  "package"
Text:  "      "
Keyword:  "switch"
Text:  "<newline>\t"
Keyword:  "const"
Text:  "        "
Keyword:  "fallthrough"
Text:  "  "
Keyword:  "if"
Text:  "           "
Keyword:  "range"
Text:  "        "
Keyword:  "type"
Text:  "<newline>\t"
Keyword:  "continue"
Text:  "     "
Keyword:  "for"
Text:  "          "
Keyword:  "import"
Text:  "       "
Keyword:  "return"
Text:  "       "
Keyword:  "var"
Text:  "<newline><newline>"
Comment:  "// Operators, delimiters and special tokens"
Text:  "<newline><newline>\t"
Operator:  "+"
Text:  "    "
Operator:  "&"
Text:  "     "
Operator:  "+="
Text:  "    "
Operator:  "&="
Text:  "     "
Operator:  "&&"
Text:  "    "
Operator:  "=="
Text:  "    "
Operator:  "!="
Text:  "    "
Punctuation:  "("
Text:  "    "
Punctuation:  ")"
Text:  "<newline>\t"
Operator:  "-"
Text:  "    "
Operator:  "|"
Text:  "     "
Operator:  "-="
Text:  "    "
Operator:  "|="
Text:  "     "
Operator:  "||"
Text:  "    "
Operator:  "<"
Text:  "     "
Operator:  "<="
Text:  "    "
Punctuation:  "["
Text:  "    "
Punctuation:  "]"
Text:  "<newline>\t"
Operator:  "*"
Text:  "    "
Operator:  "^"
Text:  "     "
Operator:  "*="
Text:  "    "
Operator:  "^="
Text:  "     "
Operator:  "<-"
Text:  "    "
Operator:  ">"
Text:  "     "
Operator:  ">="
Text:  "    "
Punctuation:  "{"
Text:  "    "
Punctuation:  "}"
Text:  "<newline>\t"
Operator:  "/"
Text:  "    "
Operator:  "<<"
Text:  "    "
Operator:  "/="
Text:  "    "
Operator:  "<<="
Text:  "    "
Operator:  "++"
Text:  "    "
Operator:  "="
Text:  "     "
Operator:  ":="
Text:  "    "
Punctuation:  ","
Text:  "    "
Punctuation:  ";"
Text:  "<newline>\t"
Operator:  "%"
Text:  "    "
Operator:  ">>"
Text:  "    "
Operator:  "%="
Text:  "    "
Operator:  ">>="
Text:  "    "
Operator:  "--"
Text:  "    "
Operator:  "!"
Text:  "     "
Operator:  "..."
Text:  "   "
Operator:  "."
Text:  "    "
Operator:  ":"
Text:  "<newline>\t     "
Operator:  "&^"
Text:  "          "
Operator:  "&^="
Text:  "<newline><newline>"
Comment:  "// Integer literals"
Text:  "<newline><newline>\t"
Literal.Number:  "42"
Text:  "<newline>\t"
Literal.Number:  "0600"
Text:  "<newline>\t"
Literal.Number:  "0xBadFace"
Text:  "<newline>\t"
Literal.Number:  "170141183460469231731687303715884105727"
Text:  "<newline><newline>"
Comment:  "// Floating-point literals"
Text:  "<newline><newline>\t"
Literal.Number:  "0."
Text:  "<newline>\t"
Literal.Number:  "72.40"
Text:  "<newline>\t"
Literal.Number:  "072.40"
Text:  "<newline>\t"
Literal.Number:  "2.71828"
Text:  "<newline>\t"
Literal.Number:  "1.e+0"
Text:  "<newline>\t"
Literal.Number:  "6.67428e-11"
Text:  "<newline>\t"
Literal.Number:  "1E6"
Text:  "<newline>\t"
Literal.Number:  ".25"
Text:  "<newline>\t"
Literal.Number:  ".12345E+5"
Text:  "<newline><newline>"
Comment:  "// Imaginary literals"
Text:  "<newline><newline>\t"
Literal.Number:  "0i"
Text:  "<newline>\t"
Literal.Number:  "011i"
Text:  "<newline>\t"
Literal.Number:  "0.i"
Text:  "<newline>\t"
Literal.Number:  "2.71828i"
Text:  "<newline>\t"
Literal.Number:  "1.e+0i"
Text:  "<newline>\t"
Literal.Number:  "6.67428e-11i"
Text:  "<newline>\t"
Literal.Number:  "1E6i"
Text:  "<newline>\t"
Literal.Number:  ".25i"
Text:  "<newline>\t"
Literal.Number:  ".12345E+5i"
Text:  "<newline><newline>"
Comment:  "// Character literals"
Text:  "<newline><newline>\t"
Literal.String.Char:  "'a'"
Text:  "<newline>\t"
Literal.String.Char:  "'\u00E4'"
Text:  "<newline>\t"
Literal.String.Char:  "'\u672C'"
Text:  "<newline>\t"
Literal.String.Char:  "'\\t'"
Text:  "<newline>\t"
Literal.String.Char:  "'\\000'"
Text:  "<newline>\t"
Literal.String.Char:  "'\\007'"
Text:  "<newline>\t"
Literal.String.Char:  "'\\377'"
Text:  "<newline>\t"
Literal.String.Char:  "'\\x07'"
Text:  "<newline>\t"
Literal.String.Char:  "'\\xff'"
Text:  "<newline>\t"
Literal.String.Char:  "'\\u12e4'"
Text:  "<newline>\t"
Literal.String.Char:  "'\\U00101234'"
Text:  "<newline><newline>"
Comment:  "// String literals"
Text:  "<newline><newline>\t"
Literal.String:  "`abc`"
Text:  "<newline>\t"
Literal.String:  "`<newline><newline>\t<newline>`"
Text:  "<newline>\t"
Literal.String:  "\""
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Text:  "<newline>\t"
Literal.String:  "\"\""
Text:  "<newline>\t"
Literal.String:  "\"Hello, world!"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Text:  "<newline>\t"
Literal.String:  "\"\u65E5\u672C\u8A9E\""
Text:  "<newline>\t"
Literal.String:  "\""
Literal.String.Escape:  "\\u65e5"
Literal.String:  "\u672C"
Literal.String.Escape:  "\\U00008a9e"
Literal.String:  "\""
Text:  "<newline>\t"
Literal.String:  "\""
Literal.String.Escape:  "\\xff\\u00FF"
Literal.String:  "\""
Text:  "<newline>\t"
Literal.String:  "\""
Literal.String.Escape:  "\\uD800"
Literal.String:  "\""
Text:  "       "
Comment:  "// illegal: surrogate half"
Text:  "<newline>\t"
Literal.String:  "\""
Literal.String.Escape:  "\\U00110000"
Literal.String:  "\""
Text:  "   "
Comment:  "// illegal: invalid Unicode code point"
Text:  "<newline>\t"
Literal.String:  "\""
Error:  "\\z"
Literal.String:  "\""
Text:  "           "
Comment:  "// illegal"
Text:  "<newline><newline>"
Comment:  "// Predeclared identifiers"
Text:  "<newline><newline>\t"
Comment:  "// Types:"
Text:  "<newline>\t"
Keyword.Type:  "bool"
Text:  " "
Keyword.Type:  "byte"
Text:  " "
Keyword.Type:  "complex64"
Text:  " "
Keyword.Type:  "complex128"
Text:  " "
Keyword.Type:  "error"
Text:  " "
Keyword.Type:  "float32"
Text:  " "
Keyword.Type:  "float64"
Text:  "<newline>\t"
Keyword.Type:  "int"
Text:  " "
Keyword.Type:  "int8"
Text:  " "
Keyword.Type:  "int16"
Text:  " "
Keyword.Type:  "int32"
Text:  " "
Keyword.Type:  "int64"
Text:  " "
Keyword.Type:  "rune"
Text:  " "
Keyword.Type:  "string"
Text:  "<newline>\t"
Keyword.Type:  "uint"
Text:  " "
Keyword.Type:  "uint8"
Text:  " "
Keyword.Type:  "uint16"
Text:  " "
Keyword.Type:  "uint32"
Text:  " "
Keyword.Type:  "uint64"
Text:  " "
Keyword.Type:  "uintptr"
Text:  "<newline><newline>\t"
Comment:  "// Constants:"
Text:  "<newline>\t"
Name.Constant:  "true"
Text:  " "
Name.Constant:  "false"
Text:  " "
Name.Constant:  "iota"
Text:  "<newline><newline>\t"
Comment:  "// Zero value:"
Text:  "<newline>\t"
Name.Constant:  "nil"
Text:  "<newline><newline>\t"
Comment:  "// Functions:"
Text:  "<newline>\t"
Name.Builtin:  "append"
Text:  " "
Name.Builtin:  "cap"
Text:  " "
Name.Builtin:  "close"
Text:  " "
Name.Builtin:  "complex"
Text:  " "
Name.Builtin:  "copy"
Text:  " "
Name.Builtin:  "delete"
Text:  " "
Name.Builtin:  "imag"
Text:  " "
Name.Builtin:  "len"
Text:  "<newline>\t"
Name.Builtin:  "make"
Text:  " "
Name.Builtin:  "new"
Text:  " "
Name.Builtin:  "panic"
Text:  " "
Name.Builtin:  "print"
Text:  " "
Name.Builtin:  "println"
Text:  " "
Name.Builtin:  "real"
Text:  " "
Name.Builtin:  "recover"
Text:  "<newline><newline>"
Comment:  "// Types"
Text:  "<newline><newline>\t"
Keyword:  "type"
Text:  " "
Name:  "T1"
Text:  " "
Keyword.Type:  "string"
Text:  "<newline>\t"
Keyword:  "type"
Text:  " "
Name:  "T2"
Text:  " "
Name:  "T1"
Text:  "<newline>\t"
Keyword:  "type"
Text:  " "
Name:  "T3"
Text:  " "
Punctuation:  "[]"
Name:  "T1"
Text:  "<newline>\t"
Keyword:  "type"
Text:  " "
Name:  "T4"
Text:  " "
Name:  "T3"
Text:  "<newline><newline>"
Comment:  "// Array types"
Text:  "<newline><newline>\t"
Punctuation:  "["
Literal.Number:  "32"
Punctuation:  "]"
Keyword.Type:  "byte"
Text:  "<newline>\t"
Punctuation:  "["
Literal.Number:  "2"
Operator:  "*"
Name:  "N"
Punctuation:  "]"
Text:  " "
Keyword:  "struct"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "y"
Text:  " "
Keyword.Type:  "int32"
Text:  " "
Punctuation:  "}"
Text:  "<newline>\t"
Punctuation:  "["
Literal.Number:  "1000"
Punctuation:  "]"
Operator:  "*"
Keyword.Type:  "float64"
Text:  "<newline>\t"
Punctuation:  "["
Literal.Number:  "3"
Punctuation:  "]["
Literal.Number:  "5"
Punctuation:  "]"
Keyword.Type:  "int"
Text:  "<newline>\t"
Punctuation:  "["
Literal.Number:  "2"
Punctuation:  "]["
Literal.Number:  "2"
Punctuation:  "]["
Literal.Number:  "2"
Punctuation:  "]"
Keyword.Type:  "float64"
Text:  "<newline><newline>"
Comment:  "// Struct types"
Text:  "<newline><newline>\t"
Keyword:  "struct"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>\t"
Keyword:  "struct"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "y"
Text:  " "
Keyword.Type:  "int"
Text:  "<newline>\t\t"
Name:  "u"
Text:  " "
Keyword.Type:  "float32"
Text:  "<newline>\t\t"
Name:  "_"
Text:  " "
Keyword.Type:  "float32"
Text:  "<newline>\t\t"
Name:  "A"
Text:  " "
Operator:  "*"
Punctuation:  "[]"
Keyword.Type:  "int"
Text:  "<newline>\t\t"
Name:  "F"
Text:  " "
Keyword:  "func"
Punctuation:  "()"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "struct"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "T1"
Text:  "<newline>\t\t"
Operator:  "*"
Name:  "T2"
Text:  "<newline>\t\t"
Name:  "P"
Operator:  "."
Name:  "T3"
Text:  "<newline>\t\t"
Operator:  "*"
Name:  "P"
Operator:  "."
Name:  "T4"
Text:  "<newline>\t\t"
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "y"
Text:  " "
Keyword.Type:  "int"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "struct"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "T"
Text:  "<newline>\t\t"
Operator:  "*"
Name:  "T"
Text:  "<newline>\t\t"
Operator:  "*"
Name:  "P"
Operator:  "."
Name:  "T"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "struct"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "microsec"
Text:  "  "
Keyword.Type:  "uint64"
Text:  " "
Literal.String:  "\"field 1\""
Text:  "<newline>\t\t"
Name:  "serverIP6"
Text:  " "
Keyword.Type:  "uint64"
Text:  " "
Literal.String:  "\"field 2\""
Text:  "<newline>\t\t"
Name:  "process"
Text:  "   "
Keyword.Type:  "string"
Text:  " "
Literal.String:  "\"field 3\""
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment:  "// Function types"
Text:  "<newline><newline>\t"
Keyword:  "func"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword:  "func"
Punctuation:  "("
Name:  "x"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Keyword.Type:  "int"
Text:  "<newline>\t"
Keyword:  "func"
Punctuation:  "("
Name:  "a"
Punctuation:  ","
Text:  " "
Name:  "_"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Name:  "z"
Text:  " "
Keyword.Type:  "float32"
Punctuation:  ")"
Text:  " "
Keyword.Type:  "bool"
Text:  "<newline>\t"
Keyword:  "func"
Punctuation:  "("
Name:  "a"
Punctuation:  ","
Text:  " "
Name:  "b"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Name:  "z"
Text:  " "
Keyword.Type:  "float32"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword.Type:  "bool"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "func"
Punctuation:  "("
Name:  "prefix"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ","
Text:  " "
Name:  "values"
Text:  " "
Operator:  "..."
Keyword.Type:  "int"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "func"
Punctuation:  "("
Name:  "a"
Punctuation:  ","
Text:  " "
Name:  "b"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Name:  "z"
Text:  " "
Keyword.Type:  "float64"
Punctuation:  ","
Text:  " "
Name:  "opt"
Text:  " "
Operator:  "..."
Keyword:  "interface"
Punctuation:  "{})"
Text:  " "
Punctuation:  "("
Name:  "success"
Text:  " "
Keyword.Type:  "bool"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "func"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ","
Text:  " "
Keyword.Type:  "float64"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword.Type:  "float64"
Punctuation:  ","
Text:  " "
Operator:  "*"
Punctuation:  "[]"
Keyword.Type:  "int"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "func"
Punctuation:  "("
Name:  "n"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Keyword:  "func"
Punctuation:  "("
Name:  "p"
Text:  " "
Operator:  "*"
Name:  "T"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment:  "// Interface types"
Text:  "<newline><newline>\t"
Keyword:  "interface"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "Read"
Punctuation:  "("
Name:  "b"
Text:  " "
Name:  "Buffer"
Punctuation:  ")"
Text:  " "
Keyword.Type:  "bool"
Text:  "<newline>\t\t"
Name:  "Write"
Punctuation:  "("
Name:  "b"
Text:  " "
Name:  "Buffer"
Punctuation:  ")"
Text:  " "
Keyword.Type:  "bool"
Text:  "<newline>\t\t"
Name:  "Close"
Punctuation:  "()"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "type"
Text:  " "
Name:  "Lock"
Text:  " "
Keyword:  "interface"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "Lock"
Punctuation:  "()"
Text:  "<newline>\t\t"
Name:  "Unlock"
Punctuation:  "()"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment:  "// Channel types"
Text:  "<newline><newline>\t"
Keyword:  "chan"
Text:  " "
Name:  "T"
Text:  "<newline>\t"
Keyword:  "chan"
Operator:  "<-"
Text:  " "
Keyword.Type:  "float64"
Text:  "<newline>\t"
Operator:  "<-"
Keyword:  "chan"
Text:  " "
Keyword.Type:  "int"
Text:  "<newline><newline>\t"
Keyword:  "chan"
Operator:  "<-"
Text:  " "
Keyword:  "chan"
Text:  " "
Keyword.Type:  "int"
Text:  "<newline>\t"
Keyword:  "chan"
Operator:  "<-"
Text:  " "
Operator:  "<-"
Keyword:  "chan"
Text:  " "
Keyword.Type:  "int"
Text:  "<newline>\t"
Operator:  "<-"
Keyword:  "chan"
Text:  " "
Operator:  "<-"
Keyword:  "chan"
Text:  " "
Keyword.Type:  "int"
Text:  "<newline>\t"
Keyword:  "chan"
Text:  " "
Punctuation:  "("
Operator:  "<-"
Keyword:  "chan"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  "<newline>"
