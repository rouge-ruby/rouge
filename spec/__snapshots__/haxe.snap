Keyword.Namespace:  "package"
Text:  " "
Name.Namespace:  "a.b.c"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword.Namespace:  "import"
Text:  " "
Name.Namespace:  "haxe.macro."
Operator:  "*"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Namespace:  "import"
Text:  " "
Name.Namespace:  "String.fromCharCode"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  " "
Name:  "f"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Namespace:  "import"
Text:  " "
Name.Namespace:  "String.fromCharCode"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Name:  "f"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Namespace:  "using"
Text:  " "
Name.Namespace:  "my.package.SomeStaticExtension"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// one line comment"
Text:  "<newline>"
Comment.Multiline:  "/*<newline>  multiline<newline>  comment<newline>*/"
Text:  "<newline><newline>"
Comment.Single:  "// ** CUSTOM TYPE **"
Text:  "<newline>"
Keyword.Declaration:  "typedef"
Text:  " "
Name.Other:  "NewType"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "Map"
Operator:  "<"
Name.Builtin:  "String"
Punctuation:  ","
Text:  " "
Name.Builtin:  "Array"
Operator:  "<"
Name.Builtin:  "Int"
Operator:  ">>"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// ** INTERFACE **"
Text:  "<newline>"
Keyword:  "interface"
Text:  " "
Name.Other:  "NewInterface"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "public"
Text:  " "
Keyword:  "function"
Text:  " "
Name.Other:  "method"
Punctuation:  "()"
Operator:  ":"
Name.Builtin:  "String"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "class"
Text:  " "
Name.Other:  "Main"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>  "
Comment.Single:  "// ** VARIABLES **"
Text:  "<newline>  "
Comment.Single:  "// Types for variables are optional"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "testInt"
Operator:  ":"
Name.Builtin:  "Int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "20"
Punctuation:  ";"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "testFloat"
Operator:  ":"
Name.Builtin:  "Float"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "20.30"
Punctuation:  ";"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "testRegex"
Operator:  ":"
Name.Builtin:  "EReg"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "~/"
Name.Other:  "haxe"
Operator:  "/"
Name.Other:  "i"
Punctuation:  ";"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "testComplicatedRegex"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "~/"
Punctuation:  "["
Name.Other:  "A"
Operator:  "-"
Name.Other:  "Z0"
Operator:  "-"
Literal.Number.Integer:  "9"
Punctuation:  "."
Name.Other:  "_"
Operator:  "%-"
Punctuation:  "]"
Operator:  "+"
Punctuation:  ".["
Name.Other:  "A"
Operator:  "-"
Name.Other:  "Z"
Punctuation:  "]["
Name.Other:  "A"
Operator:  "-"
Name.Other:  "Z"
Punctuation:  "]["
Name.Other:  "A"
Operator:  "-"
Name.Other:  "Z"
Punctuation:  "]?"
Operator:  "/"
Name.Other:  "i"
Punctuation:  ";"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "testString"
Punctuation:  ":"
Name.Builtin:  "String"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Haxe\""
Punctuation:  ";"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "testArray"
Operator:  ":"
Name.Builtin:  "Array"
Operator:  "<"
Name.Builtin:  "Int"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  "];"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "testStruct"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Literal.String.Double:  "\"a\""
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\"b\""
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "};"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "testBool"
Operator:  ":"
Name.Builtin:  "Bool"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "true"
Punctuation:  ";"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "testMap"
Operator:  ":"
Name.Builtin:  "Map"
Operator:  "<"
Name.Builtin:  "Int"
Punctuation:  ","
Text:  " "
Name.Builtin:  "String"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>    "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"one\""
Punctuation:  ","
Text:  "<newline>    "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"two\""
Punctuation:  ","
Text:  "<newline>    "
Literal.Number.Integer:  "3"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"three\""
Punctuation:  ","
Text:  "<newline>    "
Literal.Number.Integer:  "4"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"four\""
Text:  "<newline>  "
Punctuation:  "];"
Text:  "<newline><newline>  "
Keyword:  "public"
Text:  " "
Keyword.Declaration:  "static"
Text:  " "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "testPublicVar"
Operator:  ":"
Name.Builtin:  "Int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "20"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "public"
Text:  " "
Keyword.Declaration:  "static"
Text:  " "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "initialColMap"
Operator:  ":"
Name.Builtin:  "Void"
Operator:  "->"
Name.Other:  "NewType"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "["
Literal.String.Double:  "\"Level-1\""
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "[],"
Text:  " "
Literal.String.Double:  "\"Level-2\""
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "[]];"
Text:  "<newline>  "
Keyword:  "public"
Text:  " "
Keyword.Declaration:  "static"
Text:  " "
Keyword.Declaration:  "inline"
Text:  " "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "testPublicInlineVar"
Operator:  ":"
Name.Builtin:  "Int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "400"
Punctuation:  ";"
Text:  "<newline><newline>  "
Comment.Single:  "// ** SWITCH **"
Text:  "<newline>  "
Comment.Single:  "// No need for break becasue case body expressions never \"fall through\""
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name.Other:  "testInt"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Literal.Number.Integer:  "20"
Operator:  ":"
Text:  "<newline>      "
Keyword.Reserved:  "trace"
Punctuation:  "("
Name.Builtin:  "Math"
Punctuation:  "."
Name.Other:  "random"
Punctuation:  "());"
Text:  "<newline>    "
Name.Label:  "default"
Punctuation:  ":"
Text:  "<newline>      "
Keyword.Reserved:  "trace"
Punctuation:  "("
Literal.String.Double:  "\"default\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Comment.Single:  "// ** LOOPS **"
Text:  "<newline>  "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name.Other:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "..."
Literal.Number.Integer:  "10"
Punctuation:  ")"
Text:  " "
Keyword.Reserved:  "trace"
Punctuation:  "("
Name.Other:  "i"
Punctuation:  ");"
Text:  "<newline>  "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name.Other:  "num"
Text:  " "
Keyword:  "in"
Text:  " "
Name.Other:  "testArray"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Name.Other:  "num"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name.Other:  "key"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Other:  "value"
Text:  " "
Keyword:  "in"
Text:  " "
Name.Other:  "testMap"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Name.Other:  "key"
Punctuation:  ","
Text:  " "
Name.Other:  "value"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "  <newline>  "
Name.Other:  "testArray"
Punctuation:  "."
Name.Other:  "map"
Punctuation:  "("
Keyword:  "function"
Punctuation:  "("
Name.Other:  "num"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Name.Other:  "num"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "})"
Text:  "<newline>  "
Name.Other:  "testArray"
Punctuation:  "."
Name.Other:  "map"
Punctuation:  "(("
Name.Other:  "num"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Name.Other:  "num"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "})"
Text:  " <newline><newline>  "
Comment.Single:  "// ** IF STATEMENT **"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Other:  "testString"
Text:  " "
Operator:  "=="
Text:  " "
Literal.String.Double:  "\"Kha\""
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Literal.String.Double:  "\"It's Kha!\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Punctuation:  "("
Name.Other:  "testString"
Text:  " "
Operator:  "!="
Text:  " "
Literal.String.Double:  "\"Heaps\""
Text:  " "
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Literal.String.Double:  "\"It's not Heaps!\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Literal.String.Double:  "\"It's nothing\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  <newline>  "
Comment.Single:  "// ** SPECIAL VARS **"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "ternary"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name.Other:  "test"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ")"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ";"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "stringInterp"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'"
Literal.String.Interpol:  "$testString"
Literal.String.Single:  " is cool!!'"
Punctuation:  ";"
Text:  "<newline><newline>  "
Comment.Single:  "// Class constructor"
Text:  "<newline>  "
Keyword:  "public"
Text:  " "
Keyword:  "function"
Text:  " "
Keyword:  "new"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "calculator"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name.Other:  "Calculator"
Punctuation:  "();"
Text:  "<newline><newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Name.Other:  "calculator"
Punctuation:  "."
Name.Other:  "add"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "));"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Name.Other:  "calculator"
Punctuation:  "."
Name.Other:  "multiply"
Punctuation:  "("
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "));"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Other:  "Calculator"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/**<newline>  * Class documentation. Similar to JSDoc without types.<newline>  */"
Text:  "<newline>  "
Keyword:  "public"
Text:  " "
Keyword:  "function"
Text:  " "
Keyword:  "new"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Literal.String.Double:  "\"A new calculator instance was created!\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Keyword:  "public"
Text:  " "
Keyword:  "function"
Text:  " "
Name.Other:  "add"
Punctuation:  "("
Name.Other:  "a"
Operator:  ":"
Name.Builtin:  "Int"
Punctuation:  ","
Text:  " "
Name.Other:  "b"
Operator:  ":"
Name.Builtin:  "Int"
Punctuation:  ")"
Operator:  ":"
Text:  " "
Name.Builtin:  "Int"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Other:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name.Other:  "b"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Keyword:  "public"
Text:  " "
Keyword:  "function"
Text:  " "
Name.Other:  "multiply"
Punctuation:  "("
Name.Other:  "a"
Operator:  ":"
Name.Builtin:  "Int"
Punctuation:  ","
Text:  " "
Name.Other:  "b"
Operator:  ":"
Name.Builtin:  "Int"
Punctuation:  ")"
Operator:  ":"
Name.Builtin:  "Int"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Other:  "a"
Text:  " "
Operator:  "*"
Text:  " "
Name.Other:  "b"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Builtin:  "Class"
Text:  " "
Keyword.Declaration:  "implements"
Text:  " "
Name.Other:  "NewInterface"
Text:  " "
Punctuation:  "{"
Text:  " <newline>  "
Keyword:  "public"
Text:  " "
Keyword:  "function"
Text:  " "
Name.Other:  "method"
Punctuation:  "()"
Operator:  ":"
Name.Builtin:  "String"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "f"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "0.0"
Punctuation:  ";"
Text:  "<newline>    <newline>    "
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name.Other:  "f"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Float:  "0.5"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\"Test string\""
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// ** STRING INTERPOLATION ** //"
Text:  "<newline>"
Literal.String.Single:  "'The value of x is "
Literal.String.Interpol:  "$x"
Literal.String.Single:  "'"
Text:  "<newline>"
Literal.String.Single:  "'The value of x is "
Literal.String.Interpol:  "${"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "2"
Literal.String.Interpol:  "}"
Literal.String.Single:  "'"
Text:  "<newline>"
Literal.String.Single:  "'The value of x is $$'"
Text:  "<newline><newline>"
Comment.Single:  "// ** METADATA ** //"
Text:  "<newline>"
Name.Decorator:  "@author"
Punctuation:  "("
Literal.String.Double:  "\"Nicolas\""
Name.Decorator:  ")"
Text:  "<newline>"
Name.Decorator:  "@:keep"
Text:  "<newline>"
Keyword:  "class"
Text:  " "
Name.Other:  "MyClass"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Decorator:  "@range"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "8"
Name.Decorator:  ")"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "value"
Operator:  ":"
Name.Builtin:  "Int"
Punctuation:  ";"
Text:  "<newline><newline>  "
Name.Decorator:  "@broken"
Text:  "<newline>  "
Keyword.Declaration:  "static"
Text:  " "
Keyword:  "function"
Text:  " "
Name.Other:  "method"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Decorator:  "@:some.metadata"
Text:  "<newline><newline>"
Comment.Single:  "// ** CONDITIONAL COMPILATION ** //"
Text:  "<newline>"
Keyword:  "class"
Text:  " "
Name.Other:  "Main"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "public"
Text:  " "
Keyword.Declaration:  "static"
Text:  " "
Keyword:  "function"
Text:  " "
Name.Other:  "main"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Preproc:  "#if !debug"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Literal.String.Double:  "\"ok\""
Punctuation:  ");"
Text:  "<newline>    "
Comment.Preproc:  "#elseif (debug_level > 3)"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Literal.Number.Integer:  "3"
Punctuation:  ");"
Text:  "<newline>    "
Comment.Preproc:  "#else"
Text:  "<newline>    "
Keyword.Reserved:  "trace"
Punctuation:  "("
Literal.String.Double:  "\"debug level too low\""
Punctuation:  ");"
Text:  "<newline>    "
Comment.Preproc:  "#end"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// ** ABSTRACT ** //"
Text:  "<newline>"
Keyword.Declaration:  "abstract"
Text:  " "
Name.Other:  "Color"
Punctuation:  "("
Name.Builtin:  "Int"
Punctuation:  ")"
Text:  " "
Keyword.Declaration:  "from"
Text:  " "
Name.Builtin:  "Int"
Text:  " "
Keyword.Declaration:  "to"
Text:  " "
Name.Builtin:  "Int"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "public"
Text:  " "
Keyword.Declaration:  "static"
Text:  " "
Keyword.Declaration:  "inline"
Text:  " "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "TRANSPARENT"
Text:  " "
Operator:  ":"
Text:  " "
Name.Other:  "Color"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Hex:  "0x00000000"
Punctuation:  ";"
Text:  "<newline>  "
Name.Decorator:  "@:from"
Text:  " "
Keyword:  "public"
Text:  " "
Keyword.Declaration:  "static"
Text:  " "
Keyword.Declaration:  "inline"
Text:  " "
Keyword:  "function"
Text:  " "
Name.Other:  "fromString"
Punctuation:  "("
Name.Other:  "argb"
Text:  " "
Operator:  ":"
Text:  " "
Name.Builtin:  "String"
Punctuation:  ")"
Text:  " "
Operator:  ":"
Text:  " "
Name.Other:  "Color"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Keyword:  "new"
Text:  " "
Name.Other:  "Color"
Punctuation:  "("
Name.Builtin:  "Std"
Punctuation:  "."
Name.Builtin:  "parseInt"
Punctuation:  "("
Name.Other:  "argb"
Punctuation:  "));"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
