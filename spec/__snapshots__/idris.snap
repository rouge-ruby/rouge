Comment.Single:  "-- https://github.com/pheymann/specdris/blob/master/src/Specdris/Core.idr"
Text:  "<newline>"
Keyword.Reserved:  "module"
Text:  " "
Name.Namespace:  "Specdris.Core"
Text:  "<newline><newline>"
Keyword.Reserved:  "import"
Text:  " "
Name.Namespace:  "Specdris.Data.SpecInfo"
Text:  "<newline>"
Keyword.Reserved:  "import"
Text:  " "
Name.Namespace:  "Specdris.Data.SpecResult"
Text:  "<newline>"
Keyword.Reserved:  "import"
Text:  " "
Name.Namespace:  "Specdris.Data.SpecState"
Text:  "<newline><newline>"
Keyword:  "%access export"
Text:  "<newline>"
Keyword:  "%default total"
Text:  "<newline><newline>"
Comment.Doc:  "||| BTree with elements in the leafs."
Text:  "<newline>"
Name:  "public"
Text:  " "
Name:  "export"
Text:  "<newline>"
Keyword.Reserved:  "data"
Text:  " "
Keyword.Type:  "Tree"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "Type "
Operator:  "->"
Text:  " "
Keyword.Type:  "Type "
Keyword.Reserved:  "where"
Text:  "<newline>     "
Keyword.Type:  "Leaf"
Text:  " "
Operator:  ":"
Text:  " "
Punctuation:  "("
Name:  "elem"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "a"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Tree"
Text:  " "
Name:  "a"
Text:  "<newline>     "
Keyword.Type:  "Node"
Text:  " "
Operator:  ":"
Text:  " "
Punctuation:  "("
Name:  "left"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "Tree"
Text:  " "
Name:  "a"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "("
Name:  "right"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "Tree"
Text:  " "
Name:  "a"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Tree"
Text:  " "
Name:  "a"
Text:  "<newline><newline>"
Name:  "public"
Text:  " "
Name:  "export"
Text:  "<newline>"
Name.Function:  "SpecTree' :"
Text:  " "
Keyword.Type:  "FFI"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Type<newline>SpecTree'"
Text:  " "
Name:  "ffi"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "Tree"
Text:  " "
Punctuation:  "("
Keyword.Type:  "Either SpecInfo"
Text:  " "
Punctuation:  "("
Keyword.Type:  "IO'"
Text:  " "
Name:  "ffi"
Text:  " "
Keyword.Type:  "SpecResult"
Punctuation:  "))"
Text:  "<newline><newline>"
Name:  "public"
Text:  " "
Name:  "export"
Text:  "<newline>"
Name.Function:  "SpecTree :"
Text:  " "
Keyword.Type:  "Type<newline>SpecTree"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "SpecTree'"
Text:  " "
Keyword.Type:  "FFI_C"
Text:  "<newline><newline><newline>"
Keyword.Reserved:  "namespace"
Text:  " "
Keyword.Type:  "SpecTreeDo"
Text:  "<newline>  "
Punctuation:  "("
Operator:  ">>="
Punctuation:  ")"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "SpecTree'"
Text:  " "
Name:  "ffi"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "("
Name.Builtin:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "SpecTree'"
Text:  " "
Name:  "ffi"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "SpecTree'"
Text:  " "
Name:  "ffi"
Text:  "<newline>  "
Punctuation:  "("
Operator:  ">>="
Punctuation:  ")"
Text:  " "
Name:  "leftTree"
Text:  " "
Name:  "f"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Reserved:  "let"
Text:  " "
Name:  "rightTree"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Text:  " "
Name.Builtin:  "()"
Text:  " "
Keyword.Reserved:  "in"
Text:  "<newline>                         "
Keyword.Type:  "Node"
Text:  " "
Name:  "leftTree"
Text:  " "
Name:  "rightTree"
Text:  "<newline><newline>"
Comment.Multiline:  "{- Evaluates every leaf in the `SpecTree` and folds the different `IO`s to collect<newline>   a final `SpecState`.<newline>   <newline>   Test:<newline>     describe \"a\" $ do<newline>       describe \"b\" $ do<newline>         it \"c\" test_io_c<newline>       it \"d\" test_io_d<newline>   <newline>   Tree from Test:<newline>                        Node<newline>                         |<newline>         ----------------------------------<newline>         |                                |<newline>    Leaf Desc \"a\"                        Node<newline>                                          |<newline>                                 ---------------------         <newline>                                 |                   |<newline>                                Node                Node<newline>                                 |                   |<newline>                       -------------               --------------- <newline>                       |           |               |             |<newline>                 Leaf Desc \"b\"    Node        Leaf It \"d\"  Leaf test_io_d<newline>                                   |<newline>                            ----------------<newline>                            |              |<newline>                       Leaf It \"c\"   Leaf test_io_c<newline> -}"
Text:  "<newline>"
Name.Function:  "evaluateTree :"
Text:  " "
Keyword.Type:  "SpecTree'"
Text:  " "
Name:  "ffi"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Keyword.Type:  "SpecState"
Text:  " "
Operator:  "->"
Text:  " <newline>               "
Punctuation:  "("
Name:  "around"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "IO'"
Text:  " "
Name:  "ffi"
Text:  " "
Keyword.Type:  "SpecResult"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "IO'"
Text:  " "
Name:  "ffi"
Text:  " "
Keyword.Type:  "SpecResult"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Punctuation:  "("
Name:  "storeOutput"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "Bool"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " <newline>               "
Punctuation:  "("
Name:  "level"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "Nat"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " <newline>               "
Keyword.Type:  "IO'"
Text:  " "
Name:  "ffi"
Text:  " "
Keyword.Type:  "SpecState"
Text:  "<newline>"
Comment.Single:  "-- description or it"
Text:  "<newline>"
Name:  "evaluateTree"
Text:  " "
Punctuation:  "("
Keyword.Type:  "Leaf"
Text:  " "
Punctuation:  "("
Keyword.Constant:  "Left"
Text:  " "
Name:  "info"
Punctuation:  "))"
Text:  " "
Name:  "state"
Text:  " "
Keyword.Reserved:  "_"
Text:  " "
Name:  "store"
Text:  " "
Name:  "level"
Text:  "         "
Operator:  "="
Text:  " "
Keyword.Reserved:  "let"
Text:  " "
Name:  "out"
Text:  " "
Operator:  "="
Text:  " "
Name:  "evalInfo"
Text:  " "
Name:  "info"
Text:  " "
Name:  "level"
Text:  " "
Keyword.Reserved:  "in"
Text:  "<newline>                                                                  "
Keyword.Reserved:  "if"
Text:  " "
Name:  "store"
Text:  " "
Keyword.Reserved:  "then"
Text:  "<newline>                                                                    "
Name:  "pure"
Text:  " "
Operator:  "$"
Text:  " "
Name:  "addLine"
Text:  " "
Name:  "out"
Text:  " "
Name:  "state"
Text:  "<newline>                                                                  "
Keyword.Reserved:  "else"
Text:  " "
Keyword.Reserved:  "do"
Text:  " <newline>                                                                    "
Name.Builtin:  "putStrLn "
Name:  "out"
Text:  "<newline>                                                                    "
Name:  "pure"
Text:  " "
Name:  "state"
Text:  "<newline><newline>"
Comment.Single:  "-- test case"
Text:  "<newline>"
Name:  "evaluateTree"
Text:  " "
Punctuation:  "("
Keyword.Type:  "Leaf"
Text:  " "
Punctuation:  "("
Keyword.Constant:  "Right"
Text:  " "
Name:  "specIO"
Punctuation:  "))"
Text:  " "
Name:  "state"
Text:  " "
Name:  "around"
Text:  " "
Name:  "store"
Text:  " "
Name:  "level"
Text:  " "
Operator:  "="
Text:  " "
Name:  "evalResult"
Text:  " "
Operator:  "!"
Punctuation:  "("
Name:  "around"
Text:  " "
Name:  "specIO"
Punctuation:  ")"
Text:  " "
Name:  "state"
Text:  " "
Name:  "store"
Text:  " "
Name:  "level"
Text:  "<newline><newline>"
Comment.Single:  "-- recursive step"
Text:  "<newline>"
Name:  "evaluateTree"
Text:  " "
Punctuation:  "("
Keyword.Type:  "Node"
Text:  " "
Name:  "left"
Text:  " "
Name:  "right"
Punctuation:  ")"
Text:  " "
Name:  "state"
Text:  " "
Name:  "around"
Text:  " "
Name:  "store"
Text:  " "
Name:  "level"
Text:  " <newline>  "
Operator:  "="
Text:  " "
Keyword.Reserved:  "case"
Text:  " "
Name:  "left"
Text:  " "
Keyword.Reserved:  "of"
Text:  "<newline>        "
Comment.Single:  "-- node containing a description/it -> new level of output indentation"
Text:  "<newline>        "
Punctuation:  "("
Keyword.Type:  "Leaf"
Text:  " "
Keyword.Reserved:  "_"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Reserved:  "do"
Text:  " "
Name:  "newState"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "evaluateTree"
Text:  " "
Name:  "left"
Text:  " "
Name:  "state"
Text:  " "
Name:  "around"
Text:  " "
Name:  "store"
Text:  " "
Punctuation:  "("
Name:  "level"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Float:  "1"
Punctuation:  ")"
Text:  "<newline>                       "
Name:  "evaluateTree"
Text:  " "
Name:  "right"
Text:  " "
Name:  "newState"
Text:  " "
Name:  "around"
Text:  " "
Name:  "store"
Text:  " "
Punctuation:  "("
Name:  "level"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Float:  "1"
Punctuation:  ")"
Text:  "<newline>                       <newline>        "
Keyword.Reserved:  "_"
Text:  "        "
Operator:  "=>"
Text:  " "
Keyword.Reserved:  "do"
Text:  " "
Name:  "newState"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "evaluateTree"
Text:  " "
Name:  "left"
Text:  " "
Name:  "state"
Text:  " "
Name:  "around"
Text:  " "
Name:  "store"
Text:  " "
Name:  "level"
Text:  "<newline>                       "
Name:  "evaluateTree"
Text:  " "
Name:  "right"
Text:  " "
Name:  "newState"
Text:  " "
Name:  "around"
Text:  " "
Name:  "store"
Text:  " "
Name:  "level"
Text:  "<newline><newline>"
Name.Function:  "evaluate :"
Text:  " "
Punctuation:  "("
Name:  "around"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "IO'"
Text:  " "
Name:  "ffi"
Text:  " "
Keyword.Type:  "SpecResult"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "IO'"
Text:  " "
Name:  "ffi"
Text:  " "
Keyword.Type:  "SpecResult"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "("
Name:  "storeOutput"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "Bool"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "SpecTree'"
Text:  " "
Name:  "ffi"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "IO'"
Text:  " "
Name:  "ffi"
Text:  " "
Keyword.Type:  "SpecState"
Text:  "<newline>"
Name:  "evaluate"
Text:  " "
Name:  "around"
Text:  " "
Name:  "store"
Text:  " "
Name:  "tree"
Text:  " "
Operator:  "="
Text:  " "
Name:  "evaluateTree"
Text:  " "
Name:  "tree"
Text:  " "
Name:  "neutral"
Text:  " "
Name:  "around"
Text:  " "
Name:  "store"
Text:  " "
Literal.Number.Float:  "0"
Text:  "<newline><newline>"
Name.Function:  "randomBase :"
Text:  " "
Keyword.Type:  "Integer"
Text:  "<newline>"
Name:  "randomBase"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pow"
Text:  " "
Literal.Number.Float:  "2"
Text:  " "
Literal.Number.Float:  "32"
Text:  "<newline><newline>"
Name.Function:  "randomInt :"
Text:  " "
Punctuation:  "("
Name:  "seed"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "Integer"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Integer"
Text:  "<newline>"
Name:  "randomInt"
Text:  " "
Name:  "seed"
Text:  " "
Operator:  "="
Text:  " "
Name:  "assert_total"
Text:  " "
Punctuation:  "(("
Literal.Number.Float:  "1664525"
Text:  " "
Operator:  "*"
Text:  " "
Name:  "seed"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Float:  "1013904223"
Punctuation:  ")"
Text:  " "
Punctuation:  "`"
Name:  "prim__sremBigInt"
Punctuation:  "`"
Text:  " "
Name:  "randomBase"
Punctuation:  ")"
Text:  "<newline><newline>"
Name.Function:  "randomDouble :"
Text:  " "
Punctuation:  "("
Name:  "seed"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "Integer"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Double"
Text:  "<newline>"
Name:  "randomDouble"
Text:  " "
Name:  "seed"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Reserved:  "let"
Text:  " "
Name:  "value"
Text:  " "
Operator:  "="
Text:  " "
Name:  "randomInt"
Text:  " "
Name:  "seed"
Text:  " "
Keyword.Reserved:  "in"
Text:  "<newline>                      "
Punctuation:  "("
Name:  "cast"
Text:  " "
Punctuation:  "{"
Name:  "to"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "Double"
Punctuation:  "}"
Text:  " "
Name:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "/"
Text:  " "
Punctuation:  "("
Name:  "cast"
Text:  " "
Punctuation:  "{"
Name:  "to"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "Double"
Punctuation:  "}"
Text:  " "
Name:  "randomBase"
Punctuation:  ")"
Text:  "<newline><newline>"
Name:  "partial"
Text:  "<newline>"
Name.Function:  "shuffle :"
Text:  " "
Punctuation:  "{"
Name:  "default"
Text:  " "
Name:  "randomDouble"
Text:  " "
Name:  "rand"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "Integer"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Double"
Punctuation:  "}"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "SpecTree'"
Text:  " "
Name:  "ffi"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "("
Name:  "seed"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "Integer"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "SpecTree'"
Text:  " "
Name:  "ffi"
Text:  "<newline>"
Name:  "shuffle"
Text:  " "
Punctuation:  "{"
Name:  "rand"
Punctuation:  "}"
Text:  " "
Punctuation:  "("
Keyword.Type:  "Node"
Text:  " "
Name:  "left"
Operator:  "@"
Punctuation:  "("
Keyword.Type:  "Leaf"
Text:  " "
Keyword.Reserved:  "_"
Punctuation:  ")"
Text:  " "
Name:  "right"
Operator:  "@"
Punctuation:  "("
Keyword.Type:  "Leaf"
Text:  " "
Keyword.Reserved:  "_"
Punctuation:  "))"
Text:  " "
Name:  "seed"
Text:  "          "
Operator:  "="
Text:  " "
Keyword.Type:  "Node"
Text:  " "
Name:  "left"
Text:  " "
Name:  "right"
Text:  "<newline>"
Name:  "shuffle"
Text:  " "
Punctuation:  "{"
Name:  "rand"
Punctuation:  "}"
Text:  " "
Punctuation:  "("
Keyword.Type:  "Node"
Text:  " "
Name:  "left"
Operator:  "@"
Punctuation:  "("
Keyword.Type:  "Leaf"
Text:  " "
Punctuation:  "("
Keyword.Constant:  "Left"
Text:  " "
Punctuation:  "("
Keyword.Type:  "Describe"
Text:  " "
Keyword.Reserved:  "_"
Punctuation:  ")))"
Text:  " "
Name:  "right"
Punctuation:  ")"
Text:  " "
Name:  "seed"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "Node"
Text:  " "
Name:  "left"
Text:  " "
Punctuation:  "("
Name:  "shuffle"
Text:  " "
Punctuation:  "{"
Name:  "rand"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rand"
Punctuation:  "}"
Text:  " "
Name:  "right"
Text:  " "
Name:  "seed"
Punctuation:  ")"
Text:  "<newline>"
Name:  "shuffle"
Text:  " "
Punctuation:  "{"
Name:  "rand"
Punctuation:  "}"
Text:  " "
Punctuation:  "("
Keyword.Type:  "Node"
Text:  " "
Name:  "left"
Operator:  "@"
Punctuation:  "("
Keyword.Type:  "Node"
Text:  " "
Keyword.Reserved:  "_"
Text:  " "
Keyword.Reserved:  "_"
Punctuation:  ")"
Text:  " "
Name:  "right"
Operator:  "@"
Punctuation:  "("
Keyword.Type:  "Node"
Text:  " "
Keyword.Reserved:  "_"
Text:  " "
Keyword.Reserved:  "_"
Punctuation:  "))"
Text:  " "
Name:  "seed"
Text:  "      "
Operator:  "="
Text:  " "
Keyword.Reserved:  "let"
Text:  " "
Name:  "randVal"
Text:  "  "
Operator:  "="
Text:  " "
Name:  "rand"
Text:  " "
Name:  "seed"
Text:  " <newline>                                                                       "
Name:  "nextSeed"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "cast"
Text:  " "
Punctuation:  "{"
Name:  "to"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "Integer"
Punctuation:  "}"
Text:  " "
Name:  "randVal"
Punctuation:  ")"
Text:  " "
Operator:  "*"
Text:  " "
Literal.Number.Float:  "100"
Text:  " "
Keyword.Reserved:  "in"
Text:  "<newline>                                                                     "
Keyword.Reserved:  "if"
Text:  " "
Name:  "randVal"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Float:  "0.5"
Text:  " "
Keyword.Reserved:  "then"
Text:  " <newline>                                                                       "
Keyword.Type:  "Node"
Text:  " "
Punctuation:  "("
Name:  "shuffle"
Text:  " "
Punctuation:  "{"
Name:  "rand"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rand"
Punctuation:  "}"
Text:  " "
Name:  "left"
Text:  " "
Name:  "nextSeed"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name:  "shuffle"
Text:  " "
Punctuation:  "{"
Name:  "rand"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rand"
Punctuation:  "}"
Text:  " "
Name:  "right"
Text:  " "
Name:  "nextSeed"
Punctuation:  ")"
Text:  "<newline>                                                                     "
Keyword.Reserved:  "else"
Text:  "<newline>                                                                       "
Keyword.Type:  "Node"
Text:  " "
Punctuation:  "("
Name:  "shuffle"
Text:  " "
Punctuation:  "{"
Name:  "rand"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rand"
Punctuation:  "}"
Text:  " "
Name:  "right"
Text:  " "
Name:  "nextSeed"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name:  "shuffle"
Text:  " "
Punctuation:  "{"
Name:  "rand"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rand"
Punctuation:  "}"
Text:  " "
Name:  "left"
Text:  " "
Name:  "nextSeed"
Punctuation:  ")"
Text:  "<newline>"
