Comment.Preproc:  "#pragma"
Text:  " "
Name:  "rtGlobals"
Operator:  "="
Literal.Number.Integer:  "3"
Text:  "<newline>"
Comment.Preproc:  "#pragma"
Text:  " "
Name:  "version"
Operator:  "="
Literal.Number.Hex:  "1.0"
Text:  "<newline>"
Comment.Preproc:  "#pragma"
Text:  " "
Name:  "IgorVersion"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Hex:  "6.3"
Punctuation:  "."
Literal.Number.Integer:  "0"
Text:  "<newline>"
Comment.Preproc:  "#pragma"
Text:  " "
Name:  "IndependentModule"
Operator:  "="
Name:  "CodeBrowserModule"
Text:  "<newline><newline>"
Comment:  "// This file was created by () byte physics Thomas Braun, support@byte-physics.de"
Text:  "<newline>"
Comment:  "// (c) 2013"
Text:  "<newline><newline>"
Keyword:  "Menu"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "CodeBrowser"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Comment:  "// CTRL+0 is the keyboard shortcut"
Text:  "<newline>\t"
Literal.String.Double:  "\""
Literal.String:  "Open/0"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Operator:  "/"
Name:  "Q"
Punctuation:  ","
Text:  " "
Name:  "CodeBrowserModule"
Punctuation:  "#"
Name:  "CreatePanel"
Punctuation:  "()"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Markers for the different listbox elements"
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "strConstantMarker"
Text:  "\t"
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\\"
Literal.String:  "W539"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "constantMarker"
Text:  "\t\t"
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\\"
Literal.String:  "W534"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "functionMarker"
Text:  "\t\t"
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\\"
Literal.String:  "W529"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "macroMarker"
Text:  "\t\t\t"
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\\"
Literal.String:  "W519"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "windowMarker"
Text:  "\t\t\t"
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\\"
Literal.String:  "W520"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "procMarker"
Text:  "\t\t\t"
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\\"
Literal.String:  "W521"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "structureMarker"
Text:  "\t\t"
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\\"
Literal.String:  "W522"
Literal.String.Double:  "\""
Text:  "<newline><newline>"
Comment:  "// the idea here: static functions have less intense colors"
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "plainColor"
Text:  "     "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "0,0,0"
Literal.String.Double:  "\""
Text:  "             "
Comment:  "// black"
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "staticColor"
Text:  "    "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "47872,47872,47872"
Literal.String.Double:  "\""
Text:  " "
Comment:  "// grey"
Text:  "<newline><newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "tsColor"
Text:  "        "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "0,0,65280"
Literal.String.Double:  "\""
Text:  "         "
Comment:  "// blue"
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "tsStaticColor"
Text:  "  "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "32768,40704,65280"
Literal.String.Double:  "\""
Text:  " "
Comment:  "// light blue"
Text:  "<newline><newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "overrideColor"
Text:  "  "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "65280,0,0"
Literal.String.Double:  "\""
Text:  "         "
Comment:  "// red"
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "overrideTSColor"
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "26368,0,52224"
Literal.String.Double:  "\""
Text:  "     "
Comment:  "// purple"
Text:  "<newline><newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "pkgFolder"
Text:  "         "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "root:Packages:CodeBrowser"
Literal.String.Double:  "\""
Text:  "<newline>"
Comment:  "// 2D Wave"
Text:  "<newline>"
Comment:  "// first column : marker depending on the function/macro type"
Text:  "<newline>"
Comment:  "// second column: full declaration of the  function/macro"
Text:  "<newline>"
Comment:  "// one row for each function/macro"
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "declarations"
Text:  "      "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "declarations"
Literal.String.Double:  "\""
Text:  "<newline>"
Comment:  "// 1D Wave in each row having the line of the function or -1 for macros"
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "declarationLines"
Text:  "  "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "lines"
Literal.String.Double:  "\""
Text:  "<newline>"
Comment:  "// database-like global multidimensional waves for storing parsing results to minimize time."
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "CsaveStrings"
Text:  " \t"
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "saveStrings"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Strconstant"
Text:  " "
Name.Variable:  "CSaveVariables"
Text:  " \t"
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "saveVariables"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "CsaveWaves"
Text:  " \t\t"
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "saveWaves"
Literal.String.Double:  "\""
Text:  "<newline>"
Comment:  "// Maximum Waves that will be saved in Experiment. first in first out."
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Constant"
Text:  " "
Name.Variable:  "CsaveMaximum"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "1024"
Text:  "<newline><newline>"
Keyword.Declaration:  "Constant"
Text:  "    "
Name.Variable:  "openKey"
Text:  "           "
Punctuation:  "="
Text:  " "
Literal.Number.Integer:  "46"
Text:  " "
Comment:  "// \".\", the dot"
Text:  "<newline><newline>"
Comment:  "// List of available macro subtypes"
Text:  "<newline>"
Keyword.Declaration:  "StrConstant"
Text:  " "
Name.Variable:  "subTypeList"
Text:  "       "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "Graph;GraphStyle;GraphMarquee;Table;TableStyle;Layout;LayoutStyle;LayoutMarquee;ListBoxControl;Panel;ButtonControl;CheckBoxControl;PopupMenuControl;SetVariableControl"
Literal.String.Double:  "\""
Text:  "<newline>"
Comment:  "// List of igor7 structure elements."
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "strConstant"
Text:  " "
Name.Variable:  "cstrTypes"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "Variable|String|WAVE|NVAR|SVAR|DFREF|FUNCREF|STRUCT|char|uchar|int16|uint16|int32|uint32|int64|uint64|float|double"
Literal.String.Double:  "\""
Text:  "<newline>"
Comment:  "// Loosely based on the WM procedure from the documentation"
Text:  "<newline>"
Comment:  "// Returns a human readable string for the given parameter/return type."
Text:  "<newline>"
Comment:  "// See the documentation for FunctionInfo for the exact values."
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "interpretParamType"
Punctuation:  "("
Name.Variable:  "ptype"
Punctuation:  ","
Text:  " "
Name.Variable:  "paramOrReturn"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "variable"
Text:  " "
Name.Variable:  "ptype"
Punctuation:  ","
Text:  " "
Name.Variable:  "paramOrReturn"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "typeStr"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\"\""
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "paramOrReturn"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "paramOrReturn"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "Abort"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "paramOrReturn must be 1 or 0"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x4000"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "wave"
Literal.String.Double:  "\""
Text:  "<newline><newline>\t\t"
Comment:  "// type addon"
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x1"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "/C"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t "
Comment:  "// text wave for parameters only. Seems to be a bug in the documentation or Igor. Already reported to WM."
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Float:  "0x4000"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "paramOrReturn"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "/T"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x4"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "/D"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x2"
Punctuation:  ")"
Text:  "<newline>"
Comment:  "//\t\t\tthis is the default wave type, this is printed 99% of the time so we don't output it"
Text:  "<newline>"
Comment:  "//\t\t\ttypeStr += \"/R\""
Text:  "<newline>\t\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x8"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "/B"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x10"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "/W"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x20"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "/I"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x80"
Punctuation:  ")"
Text:  " "
Comment:  "// undocumented"
Text:  "<newline>\t\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "/WAVE"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x100"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "/DF"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x40"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "/U"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>"
Comment:  "//\t\tif(getGlobalVar(\"debuggingEnabled\") == 1)"
Text:  "<newline>"
Comment:  "//\t\t\tstring msg"
Text:  "<newline>"
Comment:  "//\t\t\tsprintf msg, \"type:%d, str:%s\", ptype, typeStr"
Text:  "<newline>"
Comment:  "//\t\t\tdebugPrint(msg)"
Text:  "<newline>"
Comment:  "//\t\tendif"
Text:  "<newline><newline>\t\t"
Keyword:  "return"
Text:  " "
Name:  "typeStr"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Comment:  "// special casing"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Float:  "0x5"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "imag"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Float:  "0x1005"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "imag&"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x2000"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "str"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x4"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "var"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x100"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "dfref"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x200"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "struct"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x400"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "funcref"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  " imag"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "ptype"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Float:  "0x1000"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "typeStr"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "&"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "typeStr"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Convert the SPECIAL tag from FunctionInfo"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "interpretSpecialTag"
Punctuation:  "("
Name.Variable:  "specialTag"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "specialTag"
Text:  "<newline><newline>\t"
Keyword:  "strswitch"
Punctuation:  "("
Name:  "specialTag"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "no"
Literal.String.Double:  "\""
Operator:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\"\""
Text:  "<newline>\t\t\t"
Keyword:  "break"
Text:  "<newline>\t\t"
Keyword:  "default"
Operator:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Name:  "specialTag"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Text:  "<newline>\t"
Keyword:  "endswitch"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Convert the THREADSAFE tag from FunctionInfo"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "interpretThreadsafeTag"
Punctuation:  "("
Name.Variable:  "threadsafeTag"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "threadsafeTag"
Text:  "<newline><newline>\t"
Keyword:  "strswitch"
Punctuation:  "("
Name:  "threadsafeTag"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "yes"
Literal.String.Double:  "\""
Operator:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "threadsafe"
Literal.String.Double:  "\""
Text:  "<newline>\t\t\t"
Keyword:  "break"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "no"
Literal.String.Double:  "\""
Operator:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\"\""
Text:  "<newline>\t\t\t"
Keyword:  "break"
Text:  "<newline>\t\t"
Keyword:  "default"
Operator:  ":"
Text:  "<newline>\t\t\t"
Name:  "debugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "Unknown default value"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\"\""
Text:  "<newline>\t\t\t"
Keyword:  "break"
Text:  "<newline>\t"
Keyword:  "endswitch"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Convert the SUBTYPE tag from FunctionInfo"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "interpretSubtypeTag"
Punctuation:  "("
Name.Variable:  "subtypeTag"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "subtypeTag"
Text:  "<newline><newline>\t"
Keyword:  "strswitch"
Punctuation:  "("
Name:  "subtypeTag"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "NONE"
Literal.String.Double:  "\""
Operator:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\"\""
Text:  "<newline>\t\t\t"
Keyword:  "break"
Text:  "<newline>\t\t"
Keyword:  "default"
Operator:  ":"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Name:  "subtypeTag"
Text:  "<newline>\t\t\t"
Keyword:  "break"
Text:  "<newline>\t"
Keyword:  "endswitch"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Returns a human readable interpretation of the function info string"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "interpretParameters"
Punctuation:  "("
Name.Variable:  "funcInfo"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "funcInfo"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "variable"
Text:  " "
Name.Variable:  "numParams"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "NumberByKey"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "N_PARAMS"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "funcInfo"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "variable"
Text:  " "
Name.Variable:  "i"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "str"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\"\""
Generic:  ","
Text:  " "
Name.Variable:  "key"
Punctuation:  ","
Text:  " "
Name.Variable:  "paramType"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "variable"
Text:  " "
Name.Variable:  "numOptParams"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "NumberByKey"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "N_OPT_PARAMS"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "funcInfo"
Punctuation:  ")"
Text:  "<newline><newline>\t"
Keyword:  "for"
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "numParams"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword.Reserved:  "sprintf"
Text:  " "
Name:  "key"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "PARAM_%d_TYPE"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "i"
Text:  "<newline>\t\t"
Name:  "paramType"
Text:  " "
Operator:  "="
Text:  " "
Name:  "interpretParamType"
Punctuation:  "("
Name:  "NumberByKey"
Punctuation:  "("
Name:  "key"
Punctuation:  ","
Text:  " "
Name:  "funcInfo"
Punctuation:  "),"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "numParams"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "numOptParams"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "str"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "["
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Name:  "str"
Text:  " "
Operator:  "+="
Text:  " "
Name:  "paramType"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "numParams"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "str"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ", "
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline>\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "numOptParams"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "str"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "]"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "str"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Returns a cmd for the given fill *and* stroke color"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "getColorDef"
Punctuation:  "("
Name.Variable:  "color"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "color"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "str"
Text:  "<newline>\t"
Keyword.Reserved:  "sprintf"
Text:  " "
Name:  "str"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\"
Literal.String:  "k("
Literal.String.Other:  "%s"
Literal.String:  ")"
Literal.String.Escape:  "\\"
Literal.String:  "K("
Literal.String.Other:  "%s"
Literal.String:  ")"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "color"
Punctuation:  ","
Text:  " "
Name:  "color"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "str"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Creates a colored marker based on the function type"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "createMarkerForType"
Punctuation:  "("
Name.Variable:  "type"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "type"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "marker"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "function"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "marker"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Declaration:  "functionMarker"
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "macro"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "marker"
Text:  " "
Operator:  "="
Text:  " "
Name:  "macroMarker"
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "window"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "marker"
Text:  " "
Operator:  "="
Text:  " "
Name:  "windowMarker"
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "proc"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "marker"
Text:  " "
Operator:  "="
Text:  " "
Name:  "procMarker"
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "strconstant"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "marker"
Text:  " "
Operator:  "="
Text:  " "
Name:  "strConstantMarker"
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "constant"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "marker"
Text:  " "
Operator:  "="
Text:  " "
Name:  "constantMarker"
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "structure"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "marker"
Text:  " "
Operator:  "="
Text:  " "
Name:  "structureMarker"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Comment:  "// plain definitions"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name.Builtin:  "cmpstr"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "function"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "cmpstr"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "macro"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "cmpstr"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "window"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "cmpstr"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "proc"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "cmpstr"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "constant"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "cmpstr"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "strconstant"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "cmpstr"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "structure"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name:  "getColorDef"
Punctuation:  "("
Name:  "plainColor"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "marker"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "threadsafe"
Literal.String.Double:  "\""
Punctuation:  ","
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "static"
Literal.String.Double:  "\""
Punctuation:  ","
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Comment:  "// threadsafe + static"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Name:  "getColorDef"
Punctuation:  "("
Name:  "tsStaticColor"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "marker"
Text:  "<newline>\t\t"
Keyword:  "elseif"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "override"
Literal.String.Double:  "\""
Punctuation:  ","
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Comment:  "// threadsafe + override"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Name:  "getColorDef"
Punctuation:  "("
Name:  "overrideTSColor"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "marker"
Text:  "<newline>\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Name:  "getColorDef"
Punctuation:  "("
Name:  "tsColor"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "marker"
Text:  " "
Comment:  "// plain threadsafe"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "static"
Literal.String.Double:  "\""
Punctuation:  ","
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name:  "getColorDef"
Punctuation:  "("
Name:  "staticColor"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "marker"
Text:  " "
Comment:  "// plain static"
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "type"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "override"
Literal.String.Double:  "\""
Punctuation:  ","
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name:  "getColorDef"
Punctuation:  "("
Name:  "overrideColor"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "marker"
Text:  " "
Comment:  "// plain override"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Name:  "Abort"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "Unknown type"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Pretty printing of function/macro with additional info"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "formatDecl"
Punctuation:  "("
Name.Variable:  "funcOrMacro"
Punctuation:  ","
Text:  " "
Name.Variable:  "params"
Punctuation:  ","
Text:  " "
Name.Variable:  "subtypeTag"
Punctuation:  ","
Text:  " "
Punctuation:  "["
Name.Variable:  "returnType"
Punctuation:  "])"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "funcOrMacro"
Punctuation:  ","
Text:  " "
Name.Variable:  "params"
Punctuation:  ","
Text:  " "
Name.Variable:  "subtypeTag"
Punctuation:  ","
Text:  " "
Name.Variable:  "returnType"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name:  "isEmpty"
Punctuation:  "("
Name:  "subtypeTag"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "subtypeTag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  " : "
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "subtypeTag"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "decl"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "ParamIsDefault"
Punctuation:  "("
Name:  "returnType"
Punctuation:  "))"
Text:  "<newline>\t\t"
Keyword.Reserved:  "sprintf"
Text:  " "
Name:  "decl"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String.Other:  "%s"
Literal.String:  "("
Literal.String.Other:  "%s"
Literal.String:  ")"
Literal.String.Other:  "%s"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "funcOrMacro"
Punctuation:  ","
Text:  " "
Name:  "params"
Punctuation:  ","
Text:  " "
Name:  "subtypeTag"
Text:  "<newline>\t"
Keyword:  "else"
Text:  "<newline>\t\t"
Keyword.Reserved:  "sprintf"
Text:  " "
Name:  "decl"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String.Other:  "%s"
Literal.String:  "("
Literal.String.Other:  "%s"
Literal.String:  ") -> "
Literal.String.Other:  "%s%s"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "funcOrMacro"
Punctuation:  ","
Text:  " "
Name:  "params"
Punctuation:  ","
Text:  " "
Name:  "returnType"
Punctuation:  ","
Text:  " "
Name:  "subtypeTag"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "decl"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Adds all kind of information to a list of function in current procedure"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "addDecoratedFunctions"
Punctuation:  "("
Name.Variable:  "module"
Punctuation:  ","
Text:  " "
Name.Variable:  "procedure"
Punctuation:  ","
Text:  " "
Name.Variable:  "declWave"
Punctuation:  ","
Text:  " "
Name.Variable:  "lineWave"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "module"
Punctuation:  ","
Text:  " "
Name.Variable:  "procedure"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "declWave"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/D"
Text:  " "
Name.Variable:  "lineWave"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "options"
Punctuation:  ","
Text:  " "
Name.Variable:  "funcList"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "func"
Punctuation:  ","
Text:  " "
Name.Variable:  "funcDec"
Punctuation:  ","
Text:  " "
Name.Variable:  "fi"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "threadsafeTag"
Punctuation:  ","
Text:  " "
Name.Variable:  "specialTag"
Punctuation:  ","
Text:  " "
Name.Variable:  "params"
Punctuation:  ","
Text:  " "
Name.Variable:  "subtypeTag"
Punctuation:  ","
Text:  " "
Name.Variable:  "returnType"
Text:  "<newline>\t"
Keyword.Declaration:  "variable"
Text:  " "
Name.Variable:  "idx"
Punctuation:  ","
Text:  " "
Name.Variable:  "numMatches"
Punctuation:  ","
Text:  " "
Name.Variable:  "numEntries"
Text:  "<newline><newline>\t"
Comment:  "// list normal, userdefined, override and static functions"
Text:  "<newline>\t"
Name:  "options"
Text:  "  "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "KIND:18,WIN:"
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "procedure"
Text:  "<newline>\t"
Name:  "funcList"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Declaration:  "FunctionList"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "*"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ";"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "options"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "numMatches"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ItemsInList"
Punctuation:  "("
Name:  "funcList"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "numEntries"
Text:  " "
Operator:  "="
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "declWave"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "Redimension"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Name:  "numEntries"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "numMatches"
Punctuation:  ","
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Name:  "declWave"
Punctuation:  ","
Text:  " "
Name:  "lineWave"
Text:  "<newline>\t"
Keyword:  "for"
Punctuation:  "("
Name:  "idx"
Text:  " "
Operator:  "="
Text:  " "
Name:  "numEntries"
Punctuation:  ";"
Text:  " "
Name:  "idx"
Text:  " "
Operator:  "<"
Text:  " "
Punctuation:  "("
Name:  "numEntries"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "numMatches"
Punctuation:  ");"
Text:  " "
Name:  "idx"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "func"
Text:  " "
Operator:  "="
Text:  " "
Name:  "StringFromList"
Punctuation:  "("
Name:  "idx"
Punctuation:  ","
Text:  " "
Name:  "funcList"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "fi"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Declaration:  "FunctionInfo"
Punctuation:  "("
Name.Variable:  "module"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "#"
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "func"
Punctuation:  ","
Text:  " "
Name:  "procedure"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name:  "isEmpty"
Punctuation:  "("
Name:  "fi"
Punctuation:  "))"
Text:  "<newline>\t\t\t"
Name:  "debugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "macro or other error for "
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "module"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "#"
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "func"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Name:  "returnType"
Text:  "    "
Operator:  "="
Text:  " "
Name:  "interpretParamType"
Punctuation:  "("
Name:  "NumberByKey"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "RETURNTYPE"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "fi"
Punctuation:  "),"
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "threadsafeTag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "interpretThreadsafeTag"
Punctuation:  "("
Name:  "StringByKey"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "THREADSAFE"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "fi"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "specialTag"
Text:  "    "
Operator:  "="
Text:  " "
Name:  "interpretSpecialTag"
Punctuation:  "("
Name:  "StringByKey"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "SPECIAL"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "fi"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "subtypeTag"
Text:  "    "
Operator:  "="
Text:  " "
Name:  "interpretSubtypeTag"
Punctuation:  "("
Name:  "StringByKey"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "SUBTYPE"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "fi"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "params"
Text:  "        "
Operator:  "="
Text:  " "
Name:  "interpretParameters"
Punctuation:  "("
Name:  "fi"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "declWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "createMarkerForType"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "function"
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "specialTag"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "threadsafeTag"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "declWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "formatDecl"
Punctuation:  "("
Name:  "func"
Punctuation:  ","
Text:  " "
Name:  "params"
Punctuation:  ","
Text:  " "
Name:  "subtypeTag"
Punctuation:  ","
Text:  " "
Name:  "returnType"
Text:  " "
Operator:  "="
Text:  " "
Name:  "returnType"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "lineWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]"
Text:  "    "
Operator:  "="
Text:  " "
Name:  "NumberByKey"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "PROCLINE"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "fi"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "msg"
Text:  "<newline>\t"
Keyword.Reserved:  "sprintf"
Text:  " "
Name:  "msg"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "decl rows="
Literal.String.Other:  "%d"
Literal.String.Escape:  "\\"
Literal.String:  "r"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "declWave"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "debugPrint"
Punctuation:  "("
Name:  "msg"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Adds Constants/StrConstants by searching for them in the Procedure with a Regular Expression"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "addDecoratedConstants"
Punctuation:  "("
Name.Variable:  "module"
Punctuation:  ","
Text:  " "
Name.Variable:  "procedureWithoutModule"
Punctuation:  ","
Text:  "  "
Name.Variable:  "declWave"
Punctuation:  ","
Text:  " "
Name.Variable:  "lineWave"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "module"
Punctuation:  ","
Text:  " "
Name.Variable:  "procedureWithoutModule"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "declWave"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/D"
Text:  " "
Name.Variable:  "lineWave"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "numLines"
Punctuation:  ","
Text:  " "
Name.Variable:  "i"
Punctuation:  ","
Text:  " "
Name.Variable:  "idx"
Punctuation:  ","
Text:  " "
Name.Variable:  "numEntries"
Punctuation:  ","
Text:  " "
Name.Variable:  "numMatches"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "procText"
Punctuation:  ","
Text:  " "
Name.Variable:  "re"
Punctuation:  ","
Text:  " "
Name.Variable:  "def"
Punctuation:  ","
Text:  " "
Name.Variable:  "name"
Text:  "<newline><newline>\t"
Comment:  "// get procedure code"
Text:  "<newline>\t"
Name:  "procText"
Text:  " "
Operator:  "="
Text:  " "
Name:  "getProcedureText"
Punctuation:  "("
Name:  "module"
Punctuation:  ","
Text:  " "
Name:  "procedureWithoutModule"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "numLines"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ItemsInList"
Punctuation:  "("
Name:  "procText"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\"
Literal.String:  "r"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline><newline>\t"
Comment:  "// search code and return wavLineNumber"
Text:  "<newline>\t"
Name:  "Make"
Operator:  "/"
Name:  "FREE"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Name:  "numLines"
Punctuation:  ")"
Operator:  "/"
Name:  "T"
Text:  " "
Name:  "text"
Text:  " "
Operator:  "="
Text:  " "
Name:  "StringFromList"
Punctuation:  "("
Name:  "p"
Punctuation:  ","
Text:  " "
Name:  "procText"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\"
Literal.String:  "r"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "re"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "^(?i)[[:space:]]*((?:override)?(?:static)?[[:space:]]*(?:Str)?Constant)[[:space:]]+(.*)=.*"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name:  "Grep"
Operator:  "/"
Name:  "Q"
Operator:  "/"
Name:  "INDX"
Operator:  "/"
Name:  "E"
Operator:  "="
Name:  "re"
Text:  " "
Name:  "text"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Text:  " "
Name.Variable:  "W_Index"
Text:  "<newline>\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "FREE"
Text:  " "
Name.Constant:  "W_Index"
Text:  " "
Name:  "wavLineNumber"
Text:  "<newline>\t"
Name:  "KillWaves"
Operator:  "/"
Name:  "Z"
Text:  " "
Name.Constant:  "W_Index"
Text:  "<newline>\t"
Name:  "KillStrings"
Operator:  "/"
Name:  "Z"
Text:  " "
Name.Constant:  "S_fileName"
Text:  "<newline>\t"
Name:  "WaveClear"
Text:  " "
Name.Constant:  "W_Index"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name.Constant:  "V_Value"
Punctuation:  ")"
Text:  " "
Comment:  "// no matches"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Name:  "numMatches"
Text:  " "
Operator:  "="
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "wavLineNumber"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "numEntries"
Text:  " "
Operator:  "="
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "declWave"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "Redimension"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Name:  "numEntries"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "numMatches"
Punctuation:  ","
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Name:  "declWave"
Punctuation:  ","
Text:  " "
Name:  "lineWave"
Text:  "<newline><newline>\t"
Name:  "idx"
Text:  " "
Operator:  "="
Text:  " "
Name:  "numEntries"
Text:  "<newline>\t"
Keyword:  "for"
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "numMatches"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "SplitString"
Operator:  "/"
Name:  "E"
Operator:  "="
Name:  "re"
Text:  " "
Name:  "text"
Punctuation:  "["
Name:  "wavLineNumber"
Punctuation:  "["
Name:  "i"
Punctuation:  "]],"
Text:  " "
Name:  "def"
Punctuation:  ","
Text:  " "
Name:  "name"
Text:  "<newline><newline>\t\t"
Name:  "declWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "createMarkerForType"
Punctuation:  "("
Name:  "LowerStr"
Punctuation:  "("
Name:  "def"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "declWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "name"
Text:  "<newline>\t\t"
Name:  "lineWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]"
Text:  "    "
Operator:  "="
Text:  " "
Name:  "wavLineNumber"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  "<newline>\t\t"
Name:  "idx"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t"
Name:  "KillWaves"
Operator:  "/"
Name:  "Z"
Text:  " "
Name.Constant:  "W_Index"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "addDecoratedMacros"
Punctuation:  "("
Name.Variable:  "module"
Punctuation:  ","
Text:  " "
Name.Variable:  "procedureWithoutModule"
Punctuation:  ","
Text:  "  "
Name.Variable:  "declWave"
Punctuation:  ","
Text:  " "
Name.Variable:  "lineWave"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "module"
Punctuation:  ","
Text:  " "
Name.Variable:  "procedureWithoutModule"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "declWave"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/D"
Text:  " "
Name.Variable:  "lineWave"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "numLines"
Punctuation:  ","
Text:  " "
Name.Variable:  "i"
Punctuation:  ","
Text:  " "
Name.Variable:  "idx"
Punctuation:  ","
Text:  " "
Name.Variable:  "numEntries"
Punctuation:  ","
Text:  " "
Name.Variable:  "numMatches"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "procText"
Punctuation:  ","
Text:  " "
Name.Variable:  "re"
Punctuation:  ","
Text:  " "
Name.Variable:  "def"
Punctuation:  ","
Text:  " "
Name.Variable:  "name"
Punctuation:  ","
Text:  " "
Name.Variable:  "arguments"
Punctuation:  ","
Text:  " "
Name.Variable:  "type"
Error:  "<newline>"
Text:  "<newline>\t"
Comment:  "// get procedure code"
Text:  "<newline>\t"
Name:  "procText"
Text:  " "
Operator:  "="
Text:  " "
Name:  "getProcedureText"
Punctuation:  "("
Name:  "module"
Punctuation:  ","
Text:  " "
Name:  "procedureWithoutModule"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "numLines"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ItemsInList"
Punctuation:  "("
Name:  "procText"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\"
Literal.String:  "r"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline><newline>\t"
Comment:  "// search code and return wavLineNumber"
Text:  "<newline>\t"
Name:  "Make"
Operator:  "/"
Name:  "FREE"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Name:  "numLines"
Punctuation:  ")"
Operator:  "/"
Name:  "T"
Text:  " "
Name:  "text"
Text:  " "
Operator:  "="
Text:  " "
Name:  "StringFromList"
Punctuation:  "("
Name:  "p"
Punctuation:  ","
Text:  " "
Name:  "procText"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\"
Literal.String:  "r"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "// regexp: match case insensitive (?i) spaces don't matter. search for window or macro or proc. Macro Name is the the next non-space character followed by brackets () where the arguments are. At the end there might be a colon, specifying the type of macro and a comment beginning with /"
Text:  "<newline>\t"
Comment:  "// macro should have no arguments. Handled for backwards compatibility."
Text:  "<newline>\t"
Comment:  "// help for regex on https://regex101.com/"
Text:  "<newline>\t"
Name:  "re"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "^(?i)[[:space:]]*(window|macro|proc)[[:space:]]+([^[:space:]]+)[[:space:]]*"
Literal.String.Escape:  "\\"
Literal.String:  "((.*)"
Literal.String.Escape:  "\\"
Literal.String:  ")[[:space:]]*[:]?[[:space:]]*([^[:space:]"
Literal.String.Escape:  "\\"
Literal.String:  "/]*).*"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name:  "Grep"
Operator:  "/"
Name:  "Q"
Operator:  "/"
Name:  "INDX"
Operator:  "/"
Name:  "E"
Operator:  "="
Name:  "re"
Text:  " "
Name:  "text"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Text:  " "
Name.Variable:  "W_Index"
Text:  "<newline>\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "FREE"
Text:  " "
Name.Constant:  "W_Index"
Text:  " "
Name:  "wavLineNumber"
Text:  "<newline>\t"
Name:  "KillWaves"
Operator:  "/"
Name:  "Z"
Text:  " "
Name.Constant:  "W_Index"
Text:  "<newline>\t"
Name:  "KillStrings"
Operator:  "/"
Name:  "Z"
Text:  " "
Name.Constant:  "S_fileName"
Text:  "<newline>\t"
Name:  "WaveClear"
Text:  " "
Name.Constant:  "W_Index"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name.Constant:  "V_Value"
Punctuation:  ")"
Text:  " "
Comment:  "// no matches"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Name:  "numMatches"
Text:  " "
Operator:  "="
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "wavLineNumber"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "numEntries"
Text:  " "
Operator:  "="
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "declWave"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "Redimension"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Name:  "numEntries"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "numMatches"
Punctuation:  ","
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Name:  "declWave"
Punctuation:  ","
Text:  " "
Name:  "lineWave"
Text:  "<newline><newline>\t"
Keyword:  "for"
Punctuation:  "("
Name:  "idx"
Text:  " "
Operator:  "="
Text:  " "
Name:  "numEntries"
Punctuation:  ";"
Text:  " "
Name:  "idx"
Text:  " "
Operator:  "<"
Text:  " "
Punctuation:  "("
Name:  "numEntries"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "numMatches"
Punctuation:  ");"
Text:  " "
Name:  "idx"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "SplitString"
Operator:  "/"
Name:  "E"
Operator:  "="
Name:  "re"
Text:  " "
Name:  "text"
Punctuation:  "["
Name:  "wavLineNumber"
Punctuation:  "[("
Name:  "idx"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "numEntries"
Punctuation:  ")]],"
Text:  " "
Name:  "def"
Punctuation:  ","
Text:  " "
Name:  "name"
Punctuation:  ","
Text:  " "
Name:  "arguments"
Punctuation:  ","
Text:  " "
Name:  "type"
Text:  "<newline>\t\t"
Comment:  "// def containts window/macro/proc"
Text:  "<newline>\t\t"
Comment:  "// type contains Panel/Layout for subclasses of window macros"
Text:  "<newline>\t\t"
Name:  "declWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "createMarkerForType"
Punctuation:  "("
Name:  "LowerStr"
Punctuation:  "("
Name:  "def"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "declWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "name"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "("
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  "  "
Name:  "trimArgument"
Punctuation:  "("
Name:  "arguments"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ","
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "strListSepStringOutput"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ", "
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ")"
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  " : "
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "type"
Text:  "<newline>\t\t"
Name:  "lineWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]"
Text:  "    "
Operator:  "="
Text:  " "
Name:  "wavLineNumber"
Punctuation:  "[("
Name:  "idx"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "numEntries"
Punctuation:  ")]"
Text:  "<newline>\t"
Keyword:  "endfor"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "addDecoratedStructure"
Punctuation:  "("
Name.Variable:  "module"
Punctuation:  ","
Text:  " "
Name.Variable:  "procedureWithoutModule"
Punctuation:  ","
Text:  "  "
Name.Variable:  "declWave"
Punctuation:  ","
Text:  " "
Name.Variable:  "lineWave"
Punctuation:  ","
Text:  " "
Punctuation:  "["
Name.Variable:  "parseVariables"
Punctuation:  "])"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "module"
Punctuation:  ","
Text:  " "
Name.Variable:  "procedureWithoutModule"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "declWave"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/D"
Text:  " "
Name.Variable:  "lineWave"
Text:  "<newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "parseVariables"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "paramIsDefault"
Punctuation:  "("
Name:  "parseVariables"
Punctuation:  ")"
Text:  " "
Operator:  "|"
Text:  " "
Name:  "parseVariables"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "parseVariables"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment:  "// added for debugging"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "variable"
Text:  " "
Name.Variable:  "numLines"
Punctuation:  ","
Text:  " "
Name.Variable:  "i"
Punctuation:  ","
Text:  " "
Name.Variable:  "idx"
Punctuation:  ","
Text:  " "
Name.Variable:  "numEntries"
Punctuation:  ","
Text:  " "
Name.Variable:  "numMatches"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "procText"
Punctuation:  ","
Text:  " "
Name.Variable:  "reStart"
Punctuation:  ","
Text:  " "
Name.Variable:  "reEnd"
Punctuation:  ","
Text:  " "
Name.Variable:  "name"
Punctuation:  ","
Text:  " "
Name.Variable:  "StaticKeyword"
Text:  "<newline><newline>\t"
Comment:  "// get procedure code"
Text:  "<newline>\t"
Name:  "procText"
Text:  " "
Operator:  "="
Text:  " "
Name:  "getProcedureText"
Punctuation:  "("
Name:  "module"
Punctuation:  ","
Text:  " "
Name:  "procedureWithoutModule"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "numLines"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ItemsInList"
Punctuation:  "("
Name:  "procText"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\"
Literal.String:  "r"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "numLines"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "debugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "no Content in Procedure "
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "procedureWithoutModule"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Comment:  "// search code and return wavLineNumber"
Text:  "<newline>\t"
Name:  "Make"
Operator:  "/"
Name:  "FREE"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Name:  "numLines"
Punctuation:  ")"
Operator:  "/"
Name:  "T"
Text:  " "
Name:  "text"
Text:  " "
Operator:  "="
Text:  " "
Name:  "StringFromList"
Punctuation:  "("
Name:  "p"
Punctuation:  ","
Text:  " "
Name:  "procText"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\"
Literal.String:  "r"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "// regexp: match case insensitive (?i) leading spaces don't matter. optional static statement. search for structure name which contains no spaces. followed by an optional space and nearly anything like inline comments"
Text:  "<newline>\t"
Comment:  "// help for regex on https://regex101.com/"
Text:  "<newline>\t"
Name:  "reStart"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "^(?i)[[:space:]]*((?:static[[:space:]])?)[[:space:]]*structure[[:space:]]+([^[:space:]"
Literal.String.Escape:  "\\"
Literal.String:  "/]+)[[:space:]"
Literal.String.Escape:  "\\"
Literal.String:  "/]?.*"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name:  "Grep"
Operator:  "/"
Name:  "Q"
Operator:  "/"
Name:  "INDX"
Operator:  "/"
Name:  "E"
Operator:  "="
Name:  "reStart"
Text:  " "
Name:  "text"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Text:  " "
Name.Variable:  "W_Index"
Text:  "<newline>\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "FREE"
Text:  " "
Name.Constant:  "W_Index"
Text:  " "
Name:  "wavStructureStart"
Text:  "<newline>\t"
Name:  "KillWaves"
Operator:  "/"
Name:  "Z"
Text:  " "
Name.Constant:  "W_Index"
Text:  "<newline>\t"
Name:  "KillStrings"
Operator:  "/"
Name:  "Z"
Text:  " "
Name.Constant:  "S_fileName"
Text:  "<newline>\t"
Name:  "WaveClear"
Text:  " "
Name.Constant:  "W_Index"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name.Constant:  "V_Value"
Punctuation:  ")"
Text:  " "
Comment:  "// no matches"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>\t"
Name:  "numMatches"
Text:  " "
Operator:  "="
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "wavStructureStart"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline><newline>\t"
Comment:  "// optionally analyze structure elements"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "parseVariables"
Punctuation:  ")"
Text:  "<newline>\t\t"
Comment:  "// regexp: match case insensitive endstructure followed by (space or /) and anything else or just a lineend"
Text:  "<newline>\t\t"
Comment:  "// does not match endstructure23 but endstructure//"
Text:  "<newline>\t\t"
Name:  "reEnd"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "^(?i)[[:space:]]*(?:endstructure(?:[[:space:]]|"
Literal.String.Escape:  "\\"
Literal.String:  "/).*)|endstructure$"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Name:  "Grep"
Operator:  "/"
Name:  "Q"
Operator:  "/"
Name:  "INDX"
Operator:  "/"
Name:  "E"
Operator:  "="
Name:  "reEnd"
Text:  " "
Name:  "text"
Text:  "<newline>\t\t"
Keyword.Declaration:  "Wave"
Text:  " "
Name.Variable:  "W_Index"
Text:  "<newline>\t\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "FREE"
Text:  " "
Name.Constant:  "W_Index"
Text:  " "
Name:  "wavStructureEnd"
Text:  "<newline>\t\t"
Name:  "KillWaves"
Operator:  "/"
Name:  "Z"
Text:  " "
Name.Constant:  "W_Index"
Text:  "<newline>\t\t"
Name:  "KillStrings"
Operator:  "/"
Name:  "Z"
Text:  " "
Name.Constant:  "S_fileName"
Text:  "<newline>\t\t"
Name:  "WaveClear"
Text:  " "
Name.Constant:  "W_Index"
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name:  "numMatches"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "wavStructureEnd"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>\t\t\t"
Name:  "numMatches"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Name:  "numEntries"
Text:  " "
Operator:  "="
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "declWave"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "Redimension"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Name:  "numEntries"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "numMatches"
Punctuation:  ","
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Name:  "declWave"
Punctuation:  ","
Text:  " "
Name:  "lineWave"
Text:  "<newline><newline>\t"
Keyword:  "for"
Punctuation:  "("
Name:  "idx"
Text:  " "
Operator:  "="
Text:  " "
Name:  "numEntries"
Punctuation:  ";"
Text:  " "
Name:  "idx"
Text:  " "
Operator:  "<"
Text:  " "
Punctuation:  "("
Name:  "numEntries"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "numMatches"
Punctuation:  ");"
Text:  " "
Name:  "idx"
Text:  " "
Operator:  "+="
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "SplitString"
Operator:  "/"
Name:  "E"
Operator:  "="
Name:  "reStart"
Text:  " "
Name:  "text"
Punctuation:  "["
Name:  "wavStructureStart"
Punctuation:  "[("
Name:  "idx"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "numEntries"
Punctuation:  ")]],"
Text:  " "
Name:  "StaticKeyword"
Punctuation:  ","
Text:  " "
Name:  "name"
Text:  "<newline>\t\t"
Name:  "declWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "createMarkerForType"
Punctuation:  "("
Name:  "LowerStr"
Punctuation:  "("
Name:  "StaticKeyword"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "structure"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Comment:  "// no \" \" between static and structure needed"
Text:  "<newline>\t\t"
Name:  "declWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "name"
Text:  "<newline><newline>\t\t"
Comment:  "// optionally parse structure elements"
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name:  "parseVariables"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "FREE"
Operator:  "/"
Name:  "R"
Operator:  "="
Punctuation:  "[("
Name:  "wavStructureStart"
Punctuation:  "[("
Name:  "idx"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "numEntries"
Punctuation:  ")]),("
Name:  "wavStructureEnd"
Punctuation:  "[("
Name:  "idx"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "numEntries"
Punctuation:  ")])]"
Text:  " "
Name:  "text"
Punctuation:  ","
Text:  " "
Name:  "temp"
Text:  "<newline>\t\t\t"
Name:  "declWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "+="
Text:  " "
Name:  "getStructureElements"
Punctuation:  "("
Name:  "temp"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "WaveClear"
Text:  " "
Name:  "temp"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Name:  "lineWave"
Punctuation:  "["
Name:  "idx"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "wavStructureStart"
Punctuation:  "[("
Name:  "idx"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "numEntries"
Punctuation:  ")]"
Text:  "<newline>\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t"
Name:  "WaveClear"
Text:  " "
Name:  "wavStructureStart"
Punctuation:  ","
Text:  " "
Name:  "wavStructureEnd"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// input wave (wavStructure) contains text of Structure lineseparated."
Text:  "<newline>"
Comment:  "// wavStructure begins with \"Structure\" definition in first line and ends with \"EndStructure\" in last line."
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "getStructureElements"
Punctuation:  "("
Name.Variable:  "wavStructure"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "wavStructure"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "regExp"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\"\""
Generic:  ","
Text:  " "
Name.Variable:  "strType"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "lstVariables"
Punctuation:  ","
Text:  " "
Name.Variable:  "lstTypes"
Punctuation:  ","
Text:  " "
Name.Variable:  "lstNames"
Text:  "<newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "numElements"
Punctuation:  ","
Text:  " "
Name.Variable:  "numMatches"
Punctuation:  ","
Text:  " "
Name.Variable:  "numVariables"
Punctuation:  ","
Text:  " "
Name.Variable:  "i"
Punctuation:  ","
Text:  " "
Name.Variable:  "j"
Text:  "<newline><newline>\t"
Comment:  "// check for minimum structure definition structure/endstructure"
Text:  "<newline>\t"
Name:  "numElements"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Dimsize"
Punctuation:  "("
Name:  "wavStructure"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "numElements"
Text:  " "
Operator:  "<="
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "DebugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "Structure has no Elements"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\"\""
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Comment:  "// search code and return wavLineNumber and wavContent"
Text:  "<newline>\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "T"
Operator:  "/"
Name:  "FREE"
Operator:  "/"
Name:  "R"
Operator:  "="
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Punctuation:  "("
Name:  "numElements"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")]"
Text:  " "
Name:  "wavStructure"
Text:  " "
Name:  "wavContent"
Text:  "<newline>\t"
Name:  "regExp"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "^(?i)[[:space:]]*("
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "cstrTypes"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ")[[:space:]]+(?:"
Literal.String.Escape:  "\\"
Literal.String:  "/[a-z]+[[:space:]]*)*([^"
Literal.String.Escape:  "\\"
Literal.String:  "/]*)(?:["
Literal.String.Escape:  "\\"
Literal.String:  "/].*)?"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name:  "Grep"
Operator:  "/"
Name:  "Q"
Operator:  "/"
Name:  "INDX"
Operator:  "/"
Name:  "E"
Operator:  "="
Name:  "regExp"
Text:  " "
Name:  "wavContent"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Text:  " "
Name.Variable:  "W_Index"
Text:  "<newline>\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "FREE"
Text:  " "
Name.Constant:  "W_Index"
Text:  " "
Name:  "wavLineNumber"
Text:  "<newline>\t"
Name:  "KillWaves"
Operator:  "/"
Name:  "Z"
Text:  " "
Name.Constant:  "W_Index"
Text:  "<newline>\t"
Name:  "KillStrings"
Operator:  "/"
Name:  "Z"
Text:  " "
Name.Constant:  "S_fileName"
Text:  "<newline>\t"
Name:  "WaveClear"
Text:  " "
Name.Constant:  "W_Index"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name.Constant:  "V_Value"
Punctuation:  ")"
Text:  " "
Comment:  "// no matches"
Text:  "<newline>\t\t"
Name:  "DebugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "Structure with no Elements found"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "()"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Comment:  "// extract Variable types and names inside each content line to return lstTypes and lstNames"
Text:  "<newline>\t"
Name:  "lstTypes"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"\""
Text:  "<newline>\t"
Name:  "lstNames"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"\""
Text:  "<newline>\t"
Name:  "numMatches"
Text:  " "
Operator:  "="
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "wavLineNumber"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "for"
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "numMatches"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "SplitString"
Operator:  "/"
Name:  "E"
Operator:  "="
Name:  "regExp"
Text:  " "
Name:  "wavContent"
Punctuation:  "[("
Name:  "wavLineNumber"
Punctuation:  "["
Name:  "i"
Punctuation:  "])],"
Text:  " "
Name:  "strType"
Punctuation:  ","
Text:  " "
Name:  "lstVariables"
Text:  "<newline>\t\t"
Name:  "numVariables"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ItemsInList"
Punctuation:  "("
Name:  "lstVariables"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ","
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "for"
Punctuation:  "("
Name:  "j"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Name:  "j"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "numVariables"
Punctuation:  ";"
Text:  " "
Name:  "j"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "lstTypes"
Text:  " "
Operator:  "="
Text:  " "
Name:  "AddListItem"
Punctuation:  "("
Name:  "strType"
Punctuation:  ","
Text:  " "
Name:  "lstNames"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "lstNames"
Text:  " "
Operator:  "="
Text:  " "
Name:  "AddListItem"
Punctuation:  "("
Name:  "getVariableName"
Punctuation:  "("
Name:  "StringFromList"
Punctuation:  "("
Name:  "j"
Punctuation:  ","
Text:  " "
Name:  "lstVariables"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ","
Literal.String.Double:  "\""
Punctuation:  ")),"
Text:  " "
Name:  "lstNames"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline>\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t"
Comment:  "// sort elements depending on checkbox status"
Text:  "<newline>\t"
Name:  "lstNames"
Text:  " "
Operator:  "="
Text:  " "
Name:  "RemoveEnding"
Punctuation:  "("
Name:  "lstNames"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ", "
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Comment:  "// do not sort last element."
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "returnCheckBoxSort"
Punctuation:  "())"
Text:  "<newline>\t\t"
Name:  "lstNames"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Sortlist"
Punctuation:  "("
Name:  "lstNames"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ", "
Literal.String.Double:  "\""
Punctuation:  ","
Literal.Number.Integer:  "16"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Comment:  "// format output"
Text:  "<newline>\t"
Name:  "lstTypes"
Text:  " "
Operator:  "="
Text:  " "
Name:  "RemoveEnding"
Punctuation:  "("
Name:  "lstTypes"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ";"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "lstNames"
Text:  " "
Operator:  "="
Text:  " "
Name:  "RemoveEnding"
Punctuation:  "("
Name:  "lstNames"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ";"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "lstNames"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ReplaceString"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  ";"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "lstNames"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ", "
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "lstTypes"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ReplaceString"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  ";"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "lstTypes"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ", "
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "{"
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "lstNames"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "}"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "getVariableName"
Punctuation:  "("
Name.Variable:  "strDefinition"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "strDefinition"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "strVariableName"
Punctuation:  ","
Text:  " "
Name.Variable:  "strStartValue"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "regExp"
Text:  "<newline><newline>\t"
Name:  "regExp"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "^(?i)[[:space:]]*([^"
Literal.String.Escape:  "\\"
Literal.String:  "="
Literal.String.Escape:  "\\"
Literal.String:  "/[:space:]]+)[[:space:]]*(?:"
Literal.String.Escape:  "\\"
Literal.String:  "=[[:space:]]*([^"
Literal.String.Escape:  "\\"
Literal.String:  ","
Literal.String.Escape:  "\\"
Literal.String:  "="
Literal.String.Escape:  "\\"
Literal.String:  "/[:space:]]+))?.*"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name:  "SplitString"
Operator:  "/"
Name:  "E"
Operator:  "="
Name:  "regExp"
Text:  " "
Name:  "strDefinition"
Punctuation:  ","
Text:  " "
Name:  "strVariableName"
Punctuation:  ","
Text:  " "
Name:  "strStartValue"
Text:  "<newline><newline>\t"
Comment:  "// there must be sth. wrong if the variable could not be found."
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name.Builtin:  "strlen"
Punctuation:  "("
Name:  "strVariableName"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "DebugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "Could not analyze Name of Variable in String: '"
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "strDefinition"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "'"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "Abort"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "Could not analyze Name of Variable in String: "
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "strDefinition"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  "\t "
Name:  "strVariableName"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "resetLists"
Punctuation:  "("
Name.Variable:  "decls"
Punctuation:  ","
Text:  " "
Name.Variable:  "lines"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "decls"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/D"
Text:  " "
Name.Variable:  "lines"
Text:  "<newline>\t"
Name:  "Redimension"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "sortListByLineNumber"
Punctuation:  "("
Name.Variable:  "decls"
Punctuation:  ","
Text:  " "
Name.Variable:  "lines"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "decls"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/D"
Text:  " "
Name.Variable:  "lines"
Text:  "<newline><newline>\t"
Comment:  "// check if sort is necessary"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "Dimsize"
Punctuation:  "("
Name:  "decls"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "*"
Text:  " "
Name:  "Dimsize"
Punctuation:  "("
Name:  "lines"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "T"
Operator:  "/"
Name:  "FREE"
Operator:  "/"
Name:  "R"
Operator:  "="
Punctuation:  "[]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "declCol0"
Text:  "<newline>\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "T"
Operator:  "/"
Name:  "FREE"
Operator:  "/"
Name:  "R"
Operator:  "="
Punctuation:  "[]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "declCol1"
Text:  "<newline>\t"
Name:  "Sort"
Operator:  "/"
Name:  "A"
Text:  " "
Name:  "lines"
Punctuation:  ","
Text:  " "
Name:  "lines"
Punctuation:  ","
Text:  " "
Name:  "declCol0"
Punctuation:  ","
Text:  " "
Name:  "declCol1"
Text:  "<newline>\t"
Name:  "decls"
Punctuation:  "[]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "declCol0"
Punctuation:  "["
Name:  "p"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>\t"
Name:  "decls"
Punctuation:  "[]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "declCol1"
Punctuation:  "["
Name:  "p"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "sortListByName"
Punctuation:  "("
Name.Variable:  "decls"
Punctuation:  ","
Text:  " "
Name.Variable:  "lines"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "decls"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/D"
Text:  " "
Name.Variable:  "lines"
Text:  "<newline><newline>\t"
Comment:  "// check if sort is necessary"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "Dimsize"
Punctuation:  "("
Name:  "decls"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "*"
Text:  " "
Name:  "Dimsize"
Punctuation:  "("
Name:  "lines"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "T"
Operator:  "/"
Name:  "FREE"
Operator:  "/"
Name:  "R"
Operator:  "="
Punctuation:  "[]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "declCol0"
Text:  "<newline>\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "T"
Operator:  "/"
Name:  "FREE"
Operator:  "/"
Name:  "R"
Operator:  "="
Punctuation:  "[]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "declCol1"
Text:  "<newline>\t"
Name:  "Sort"
Operator:  "/"
Name:  "A"
Text:  " "
Name:  "declCol1"
Punctuation:  ","
Text:  " "
Name:  "lines"
Punctuation:  ","
Text:  " "
Name:  "declCol0"
Punctuation:  ","
Text:  " "
Name:  "declCol1"
Text:  "<newline>\t"
Name:  "decls"
Punctuation:  "[]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "declCol0"
Punctuation:  "["
Name:  "p"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>\t"
Name:  "decls"
Punctuation:  "[]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "declCol1"
Punctuation:  "["
Name:  "p"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Parses all procedure windows and write into the decl and line waves"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "parseProcedure"
Punctuation:  "("
Name.Variable:  "procedure"
Punctuation:  ","
Text:  " "
Punctuation:  "["
Name.Variable:  "checksumIsCalculated"
Punctuation:  "])"
Text:  "<newline>\t"
Keyword.Declaration:  "STRUCT"
Text:  " "
Name.Variable:  "procedure"
Text:  " "
Operator:  "&"
Name:  "procedure"
Text:  "<newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "checksumIsCalculated"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "ParamIsDefault"
Punctuation:  "("
Name:  "checksumIsCalculated"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "checksumIsCalculated"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>\t"
Name:  "DebugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "Checksum recalc:"
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name.Builtin:  "num2str"
Punctuation:  "("
Name:  "checksumIsCalculated"
Punctuation:  "))"
Text:  "<newline><newline>\t"
Comment:  "// start timer"
Text:  "<newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "timer"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "timerStart"
Punctuation:  "()"
Text:  "<newline><newline>\t"
Comment:  "// load global lists"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "decls"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getDeclWave"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/I"
Text:  " "
Name.Variable:  "lines"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getLineWave"
Punctuation:  "()"
Text:  "<newline><newline>\t"
Comment:  "// scan and add elements to lists"
Text:  "<newline>\t"
Name:  "resetLists"
Punctuation:  "("
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "addDecoratedFunctions"
Punctuation:  "("
Name.Variable:  "procedure"
Punctuation:  "."
Name:  "module"
Punctuation:  ","
Text:  " "
Name:  "procedure"
Punctuation:  "."
Name:  "fullName"
Punctuation:  ","
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "addDecoratedConstants"
Punctuation:  "("
Name:  "procedure"
Punctuation:  "."
Name:  "module"
Punctuation:  ","
Text:  " "
Name:  "procedure"
Punctuation:  "."
Name:  "name"
Punctuation:  ","
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "addDecoratedMacros"
Punctuation:  "("
Name:  "procedure"
Punctuation:  "."
Name:  "module"
Punctuation:  ","
Text:  " "
Name:  "procedure"
Punctuation:  "."
Name:  "name"
Punctuation:  ","
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "addDecoratedStructure"
Punctuation:  "("
Name:  "procedure"
Punctuation:  "."
Name:  "module"
Punctuation:  ","
Text:  " "
Name:  "procedure"
Punctuation:  "."
Name:  "name"
Punctuation:  ","
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Punctuation:  ")"
Text:  "<newline><newline>\t"
Comment:  "// stop timer"
Text:  "<newline>\t"
Name:  "setParsingTime"
Punctuation:  "("
Name:  "timerStop"
Punctuation:  "("
Name:  "timer"
Punctuation:  "))"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Identifier = module#procedure"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "saveResults"
Punctuation:  "("
Name.Variable:  "procedure"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "STRUCT"
Text:  " "
Name.Variable:  "procedure"
Text:  " "
Operator:  "&"
Name:  "procedure"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "declWave"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getDeclWave"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/I"
Text:  " "
Name.Variable:  "lineWave"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getLineWave"
Punctuation:  "()"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/WAVE"
Text:  " "
Name.Variable:  "SaveWavesWave"
Text:  "     "
Punctuation:  "="
Text:  " "
Generic:  "getSaveWaves"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " \t  "
Name.Variable:  "SaveStringsWave"
Text:  "   "
Punctuation:  "="
Text:  " "
Generic:  "getSaveStrings"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Text:  "      "
Name.Variable:  "SaveVariablesWave"
Text:  "\t"
Punctuation:  "="
Text:  " "
Generic:  "getSaveVariables"
Punctuation:  "()"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "endOfWave"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "Dimsize"
Punctuation:  "("
Name:  "SaveWavesWave"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline><newline>\t"
Name:  "debugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "saving Results for "
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "procedure"
Punctuation:  "."
Name:  "id"
Punctuation:  ")"
Text:  "<newline><newline>\t"
Comment:  "// prepare Waves for data storage."
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Comment:  "// maximum data storage was reached, push elements to free last item."
Text:  "<newline>\t\t"
Name:  "savePush"
Punctuation:  "()"
Text:  "<newline>\t\t"
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Text:  " "
Operator:  "="
Text:  " "
Name:  "endOfWave"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "endOfWave"
Punctuation:  ")"
Text:  "<newline>\t\t"
Comment:  "// redimension waves to fit new elements"
Text:  "<newline>\t\t"
Name:  "Redimension"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "(("
Name:  "endOfWave"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "),"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Name:  "SaveStringsWave"
Text:  "<newline>\t\t"
Name:  "Redimension"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "(("
Name:  "endOfWave"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "),"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Name:  "SaveWavesWave"
Text:  "<newline>\t\t"
Name:  "Redimension"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "(("
Name:  "endOfWave"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "),"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Name:  "SaveVariablesWave"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Comment:  "// save Results. Waves as References to free waves and the Id-Identifier"
Text:  "<newline>\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "FREE"
Text:  " "
Name:  "declWave"
Text:  " "
Name:  "myFreeDeclWave"
Text:  "<newline>\t"
Name:  "Duplicate"
Operator:  "/"
Name:  "FREE"
Text:  " "
Name:  "lineWave"
Text:  " "
Name:  "myFreeLineWave"
Text:  "<newline>\t"
Name:  "SaveStringsWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " \t"
Operator:  "="
Text:  " "
Name:  "procedure"
Punctuation:  "."
Name:  "id"
Text:  "<newline>\t"
Name:  "SaveStringsWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " \t"
Operator:  "="
Text:  " "
Name:  "getChecksum"
Punctuation:  "()"
Text:  "<newline>\t"
Name:  "SaveWavesWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "myFreeDeclWave"
Text:  "<newline>\t"
Name:  "SaveWavesWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "myFreeLineWave"
Text:  "<newline>\t"
Name:  "SaveVariablesWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment:  "// mark as valid"
Text:  "<newline>\t"
Name:  "SaveVariablesWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "getParsingTime"
Punctuation:  "()"
Text:  " "
Comment:  "// time in micro seconds"
Text:  "<newline>\t"
Name:  "SaveVariablesWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "2"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "getCheckSumTime"
Punctuation:  "()"
Text:  " "
Comment:  "// time in micro seconds"
Text:  "<newline><newline>\t"
Comment:  "// if function list could not be acquired don't save the checksum"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name.Builtin:  "numpnts"
Punctuation:  "("
Name:  "declWave"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Operator:  "!"
Name.Builtin:  "cmpstr"
Punctuation:  "("
Name:  "declWave"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "],"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "Procedures Not Compiled() -> "
Literal.String.Double:  "\""
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "DebugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "Function list is not complete"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "SaveStringsWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "no checksum"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "saveLoad"
Punctuation:  "("
Name.Variable:  "procedure"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "STRUCT"
Text:  " "
Name.Variable:  "procedure"
Text:  " "
Operator:  "&"
Name:  "procedure"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "numResults"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "declWave"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getDeclWave"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/I"
Text:  " "
Name.Variable:  "lineWave"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getLineWave"
Punctuation:  "()"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/WAVE"
Text:  " "
Name.Variable:  "SaveWavesWave"
Text:  "     "
Punctuation:  "="
Text:  " "
Generic:  "getSaveWaves"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  "    "
Name.Variable:  "SaveStringsWave"
Text:  "   "
Punctuation:  "="
Text:  " "
Generic:  "getSaveStrings"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Text:  "      "
Name.Variable:  "SaveVariablesWave"
Text:  "\t"
Punctuation:  "="
Text:  " "
Generic:  "getSaveVariables"
Punctuation:  "()"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "(("
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Punctuation:  "("
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "Dimsize"
Punctuation:  "("
Name:  "SaveStringsWave"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  " "
Operator:  "||"
Text:  " "
Punctuation:  "("
Name:  "Dimsize"
Punctuation:  "("
Name:  "SaveStringsWave"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>\t\t"
Comment:  "// if maximum storage capacity was reached (procedure.row == -1) or Element not found (procedure.row == endofWave) there is nothing to load."
Text:  "<newline>\t\t"
Name:  "debugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "save state not found"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Text:  "<newline>\t"
Keyword:  "elseif"
Punctuation:  "("
Name:  "SaveVariablesWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Comment:  "// procedure marked as non valid by AfterRecompileHook"
Text:  "<newline>\t\t"
Comment:  "// checksum needs to be compared."
Text:  "<newline><newline>\t\t"
Comment:  "// getting checksum"
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name:  "setChecksum"
Punctuation:  "("
Name:  "procedure"
Punctuation:  ")"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "debugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "error creating variable"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Comment:  "// comparing checksum"
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name.Builtin:  "cmpstr"
Punctuation:  "("
Name:  "SaveStringsWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "],"
Name:  "getChecksum"
Punctuation:  "())"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Comment:  "// checksum changed. return -2 to indicate that calculation was already done by setChecksum."
Text:  "<newline>\t\t\t"
Name:  "debugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "Checksum missmatch: Procedure has to be reloaded."
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "2"
Text:  "<newline>\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t"
Comment:  "//mark as valid"
Text:  "<newline>\t\t\t"
Name:  "debugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "Checksum match: Procedure marked valid."
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "SaveVariablesWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Comment:  "// load results from free waves"
Text:  "<newline>\t"
Name:  "numResults"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Dimsize"
Punctuation:  "("
Name:  "SaveWavesWave"
Punctuation:  "["
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "],"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "Redimension"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Name:  "numResults"
Punctuation:  ","
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Name:  "declWave"
Punctuation:  ","
Text:  " "
Name:  "lineWave"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "numResults"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "load0"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "SaveWavesWave[procedure.row][0]"
Text:  "<newline>\t\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/I"
Text:  " "
Name.Variable:  "load1"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "SaveWavesWave[procedure.row][1]"
Text:  "<newline>\t\t"
Name:  "declWave"
Punctuation:  "[]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "load0"
Punctuation:  "["
Name:  "p"
Punctuation:  "]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>\t\t"
Name:  "declWave"
Punctuation:  "[]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "load0"
Punctuation:  "["
Name:  "p"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "<newline>\t\t"
Name:  "lineWave"
Punctuation:  "[]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "load1"
Punctuation:  "["
Name:  "p"
Punctuation:  "]"
Text:  "<newline>\t\t"
Name:  "debugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "save state loaded successfully"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t"
Keyword:  "else"
Text:  "<newline>\t\t"
Name:  "debugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "no elements in save state"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "//\tIdentifier = module#procedure"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "getSaveRow"
Punctuation:  "("
Name.Variable:  "Identifier"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "Identifier"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "SaveStrings"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getSaveStrings"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "found"
Punctuation:  ","
Text:  " "
Name.Variable:  "endOfWave"
Text:  "<newline><newline>\t"
Name:  "FindValue"
Operator:  "/"
Name:  "TEXT"
Operator:  "="
Name:  "Identifier"
Operator:  "/"
Name:  "TXOP"
Operator:  "="
Literal.Number.Integer:  "4"
Operator:  "/"
Name:  "Z"
Text:  " "
Name:  "SaveStrings"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name.Constant:  "V_value"
Text:  " "
Operator:  "=="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Comment:  "// element not found"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name:  "Dimsize"
Punctuation:  "("
Name:  "SaveStrings"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "else"
Text:  "<newline>\t\t"
Comment:  "// element found at position V_value"
Text:  "<newline><newline>\t\t"
Comment:  "// check for inconsistency."
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name.Constant:  "V_value"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "CsaveMaximum"
Text:  " "
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "DebugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "Storage capacity exceeded"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Comment:  "// should only happen if(CsaveMaximum) was touched on runtime."
Text:  "<newline>\t\t\t"
Comment:  "// Redimension/Deletion of Wave could be possible."
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Punctuation:  "("
Name:  "CsaveMaximum"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Keyword:  "return"
Text:  " "
Name.Constant:  "V_value"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// drop first item at position 0. push all elements upward by 1 element. Free last Position."
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "savePush"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "SaveStrings"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getSaveStrings"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/WAVE"
Text:  " "
Name.Variable:  "SaveWavesWave"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getSaveWaves"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Text:  " "
Name.Variable:  "SaveVariables"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getSaveVariables"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "i"
Punctuation:  ","
Text:  " "
Name.Variable:  "endOfWave"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "Dimsize"
Punctuation:  "("
Name:  "SaveStrings"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline><newline>\t"
Comment:  "// moving items."
Text:  "<newline>\t"
Name:  "MatrixOp"
Operator:  "/"
Name:  "O"
Text:  " "
Name:  "SaveVariables"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rotateRows"
Punctuation:  "("
Name:  "SaveVariables"
Punctuation:  ","
Text:  " "
Punctuation:  "("
Name:  "endofWave"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>\t"
Comment:  "// MatrixOP is strictly numeric (but fast)"
Text:  "<newline>\t"
Keyword:  "for"
Punctuation:  "("
Name:  "i"
Operator:  "="
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Operator:  "<"
Name:  "endofWave"
Punctuation:  ";"
Name:  "i"
Operator:  "+="
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "SaveWavesWave"
Punctuation:  "["
Name:  "i"
Punctuation:  "][]"
Text:  "\t"
Operator:  "="
Text:  " "
Name:  "SaveWavesWave"
Punctuation:  "[("
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")]["
Name:  "q"
Punctuation:  "]"
Text:  "<newline>\t\t"
Name:  "SaveStrings"
Punctuation:  "["
Name:  "i"
Punctuation:  "][]"
Text:  " \t"
Operator:  "="
Text:  " "
Name:  "SaveStrings"
Punctuation:  "[("
Name:  "i"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")]["
Name:  "q"
Punctuation:  "]"
Text:  "<newline>\t"
Keyword:  "endfor"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "saveReParse"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Text:  " "
Name.Variable:  "savedVariables"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getSaveVariables"
Punctuation:  "()"
Text:  "<newline>\t"
Name:  "savedVariables"
Punctuation:  "[]["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "saveResetStorage"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Text:  " "
Name.Variable:  "savedVariablesWave"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getSaveVariables"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "SavedStringsWave"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getSaveStrings"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/WAVE"
Text:  " "
Name.Variable:  "SavedWavesWave"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getSaveWaves"
Punctuation:  "()"
Text:  "<newline><newline>\t"
Comment:  "// if objects are in use they can not be killed. reset before killing"
Text:  "<newline><newline>\t"
Comment:  "// reset"
Text:  "<newline>\t"
Name:  "saveReParse"
Punctuation:  "()"
Text:  "<newline>\t"
Name:  "setGlobalStr"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "parsingChecksum"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "setGlobalVar"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "checksumTime"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Keyword.Constant:  "NaN"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "setGlobalVar"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "parsingTime"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Keyword.Constant:  "NaN"
Punctuation:  ")"
Text:  "<newline><newline>\t"
Comment:  "// kill"
Text:  "<newline>\t"
Name:  "Killwaves"
Operator:  "/"
Name:  "Z"
Text:  " "
Name:  "savedVariablesWave"
Punctuation:  ","
Text:  " "
Name:  "SavedStringsWave"
Punctuation:  ","
Text:  " "
Name:  "SavedWavesWave"
Text:  "<newline>\t"
Name:  "killGlobalStr"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "parsingChecksum"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "killGlobalVar"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "checksumTime"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "killGlobalvar"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "parsingTime"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Returns a list with the following optional suffixes removed:"
Text:  "<newline>"
Comment:  "// -Module \" [.*]\""
Text:  "<newline>"
Comment:  "// -Ending \".ipf\""
Text:  "<newline>"
Comment:  "// -Both \".ipf [.*]\""
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "nicifyProcedureList"
Punctuation:  "("
Name.Variable:  "list"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "list"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "variable"
Text:  " "
Name.Variable:  "i"
Punctuation:  ","
Text:  " "
Name.Variable:  "idx"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "item"
Punctuation:  ","
Text:  " "
Name.Variable:  "niceList"
Punctuation:  "="
Literal.String.Double:  "\"\""
Text:  "<newline><newline>\t"
Keyword:  "for"
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "ItemsInList"
Punctuation:  "("
Name:  "list"
Punctuation:  ");"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "item"
Text:  " "
Operator:  "="
Text:  " "
Name:  "StringFromList"
Punctuation:  "("
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "list"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "item"
Text:  " "
Operator:  "="
Text:  " "
Name:  "RemoveEverythingAfter"
Punctuation:  "("
Name:  "item"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  " ["
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "item"
Text:  " "
Operator:  "="
Text:  " "
Name:  "RemoveEverythingAfter"
Punctuation:  "("
Name:  "item"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ".ipf"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "niceList"
Text:  " "
Operator:  "="
Text:  " "
Name:  "AddListItem"
Punctuation:  "("
Name:  "item"
Punctuation:  ","
Text:  " "
Name:  "niceList"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ";"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Keyword.Constant:  "inf"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "niceList"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// returns code of procedure in module"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "getProcedureText"
Punctuation:  "("
Name.Variable:  "module"
Punctuation:  ","
Text:  " "
Name.Variable:  "procedureWithoutModule"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "module"
Punctuation:  ","
Text:  " "
Name.Variable:  "procedureWithoutModule"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "strProcedure"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "isProcGlobal"
Punctuation:  "("
Name:  "module"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "debugPrint"
Punctuation:  "("
Name:  "module"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  " is in ProcGlobal"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "strProcedure"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ProcedureText"
Punctuation:  "("
Literal.String.Double:  "\"\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name:  "procedureWithoutModule"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name:  "strProcedure"
Text:  "<newline>\t"
Keyword:  "else"
Text:  "<newline>\t\t"
Name:  "debugPrint"
Punctuation:  "("
Name:  "procedureWithoutModule"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  " is in "
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "module"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name:  "ProcedureText"
Punctuation:  "("
Literal.String.Double:  "\"\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name:  "procedureWithoutModule"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  " ["
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "module"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "]"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Returns 1 if the procedure file has content which we can show, 0 otherwise"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "updateListBoxHook"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "STRUCT"
Text:  " "
Name.Variable:  "procedure"
Text:  " "
Name.Variable:  "procedure"
Text:  "<newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "returnState"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "searchString"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Double:  "\"\""
Text:  "<newline><newline>\t"
Comment:  "// load global lists (for sort)"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "decls"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getDeclWave"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/I"
Text:  " "
Name.Variable:  "lines"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getLineWave"
Punctuation:  "()"
Text:  "<newline><newline>\t"
Comment:  "// get procedure information"
Text:  "<newline>\t"
Name:  "procedure"
Punctuation:  "."
Name:  "name"
Text:  "     "
Operator:  "="
Text:  " "
Name:  "getCurrentItem"
Punctuation:  "("
Name:  "procedureWithoutModule"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "procedure"
Punctuation:  "."
Name:  "module"
Text:  "   "
Operator:  "="
Text:  " "
Name:  "getCurrentItem"
Punctuation:  "("
Name:  "module"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "procedure"
Punctuation:  "."
Name:  "fullName"
Text:  " "
Operator:  "="
Text:  " "
Name:  "getCurrentItem"
Punctuation:  "("
Name:  "procedure"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Comment:  "// remove this if maclist is removed"
Text:  "<newline>\t"
Name:  "procedure"
Punctuation:  "."
Name:  "id"
Text:  "       "
Operator:  "="
Text:  " "
Name:  "procedure"
Punctuation:  "."
Name:  "module"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "#"
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "procedure"
Punctuation:  "."
Name:  "name"
Text:  "<newline>\t"
Name:  "procedure"
Punctuation:  "."
Name:  "row"
Text:  "      "
Operator:  "="
Text:  " "
Name:  "getSaveRow"
Punctuation:  "("
Name:  "procedure"
Punctuation:  "."
Name:  "id"
Punctuation:  ")"
Text:  "<newline><newline>\t"
Comment:  "// load procedure"
Text:  "<newline>\t"
Name:  "returnState"
Text:  " "
Operator:  "="
Text:  " "
Name:  "saveLoad"
Punctuation:  "("
Name:  "procedure"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "returnState"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "debugPrint"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "parsing Procedure"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "parseProcedure"
Punctuation:  "("
Name:  "procedure"
Punctuation:  ")"
Text:  "<newline>\t\t"
Comment:  "// return state -2 means checksum already calculated and stored in global variable."
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Punctuation:  "("
Name:  "returnState"
Text:  " "
Operator:  "=="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "2"
Punctuation:  "))"
Text:  "<newline>\t\t\t"
Name:  "setCheckSum"
Punctuation:  "("
Name:  "procedure"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Comment:  "// save information in \"database\""
Text:  "<newline>\t\t"
Name:  "saveResults"
Punctuation:  "("
Name:  "procedure"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Comment:  "// check if search is necessary"
Text:  "<newline>\t"
Name:  "searchString"
Text:  " "
Operator:  "="
Text:  " "
Name:  "getGlobalStr"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "search"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name.Builtin:  "strlen"
Punctuation:  "("
Name:  "searchString"
Punctuation:  ")"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "searchAndDelete"
Punctuation:  "("
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Punctuation:  ","
Text:  " "
Name:  "searchString"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Comment:  "// switch sort type"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "returnCheckBoxSort"
Punctuation:  "())"
Text:  "<newline>\t\t"
Name:  "sortListByName"
Punctuation:  "("
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "else"
Text:  "<newline>\t\t"
Name:  "sortListByLineNumber"
Punctuation:  "("
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "decls"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "searchAndDelete"
Punctuation:  "("
Name.Variable:  "decls"
Punctuation:  ","
Text:  " "
Name.Variable:  "lines"
Punctuation:  ","
Text:  " "
Name.Variable:  "searchString"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "decls"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/I"
Text:  " "
Name.Variable:  "lines"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "searchString"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "i"
Punctuation:  ","
Text:  " "
Name.Variable:  "numEntries"
Text:  "<newline><newline>\t"
Comment:  "// search and delete backwards for simplicity reasons"
Text:  "<newline>\t"
Name:  "numEntries"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Dimsize"
Punctuation:  "("
Name:  "decls"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "for"
Punctuation:  "("
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "numEntries"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "-="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "decls"
Punctuation:  "["
Name:  "i"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "],"
Text:  " "
Name:  "searchString"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "DeletePoints"
Operator:  "/"
Name:  "M"
Operator:  "="
Literal.Number.Integer:  "0"
Text:  " "
Name:  "i"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline>\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t"
Comment:  "// prevent loss of dimension if no match was found at all."
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name.Builtin:  "strsearch"
Punctuation:  "("
Name:  "decls"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "],"
Text:  " "
Name:  "searchString"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "if"
Punctuation:  "("
Name:  "Dimsize"
Punctuation:  "("
Name:  "decls"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name:  "Redimension"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Text:  "<newline>\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t"
Name:  "DeletePoints"
Operator:  "/"
Name:  "M"
Operator:  "="
Literal.Number.Integer:  "0"
Text:  " "
Name:  "i"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "decls"
Punctuation:  ","
Text:  " "
Name:  "lines"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "searchReset"
Punctuation:  "()"
Text:  "<newline>\t"
Name:  "setGlobalStr"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "search"
Literal.String.Double:  "\""
Punctuation:  ","
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "DeletePKGfolder"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "CountObjects"
Punctuation:  "("
Name:  "pkgFolder"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "CountObjects"
Punctuation:  "("
Name:  "pkgFolder"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "CountObjects"
Punctuation:  "("
Name:  "pkgFolder"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "KillDataFolder"
Operator:  "/"
Name:  "Z"
Text:  " "
Operator:  "$"
Name:  "pkgFolder"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "CountObjects"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "root:Packages"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name:  "KillDataFolder"
Text:  " "
Name:  "root"
Operator:  ":"
Name:  "Packages"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Shows the line/function for the function/macro with the given index into decl"
Text:  "<newline>"
Comment:  "// With no index just the procedure file is shown"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "showCode"
Punctuation:  "("
Name.Variable:  "procedure"
Punctuation:  ",["
Name.Variable:  "index"
Punctuation:  "])"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "procedure"
Text:  "<newline>\t"
Keyword.Declaration:  "variable"
Text:  " "
Name.Variable:  "index"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "ParamIsDefault"
Punctuation:  "("
Name:  "index"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "DisplayProcedure"
Operator:  "/"
Name:  "W"
Operator:  "=$"
Name:  "procedure"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Keyword.Constant:  "NaN"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/T"
Text:  " "
Name.Variable:  "decl"
Text:  "  "
Punctuation:  "="
Text:  " "
Generic:  "getDeclWave"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "Wave"
Keyword.Pseudo:  "/I"
Text:  " "
Name.Variable:  "lines"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getLineWave"
Punctuation:  "()"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Punctuation:  "("
Name:  "index"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Name:  "index"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "decl"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Name:  "index"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "DimSize"
Punctuation:  "("
Name:  "lines"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "Abort"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "Index out of range"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Name:  "lines"
Punctuation:  "["
Name:  "index"
Punctuation:  "]"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "func"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getShortFuncOrMacroName"
Punctuation:  "("
Name:  "decl"
Punctuation:  "["
Name:  "index"
Punctuation:  "]["
Literal.Number.Integer:  "1"
Punctuation:  "])"
Text:  "<newline>\t\t"
Name:  "DisplayProcedure"
Operator:  "/"
Name:  "W"
Operator:  "=$"
Name:  "procedure"
Text:  " "
Name:  "func"
Text:  "<newline>\t"
Keyword:  "else"
Text:  "<newline>\t\t"
Name:  "DisplayProcedure"
Operator:  "/"
Name:  "W"
Operator:  "=$"
Name:  "procedure"
Operator:  "/"
Name:  "L"
Operator:  "="
Punctuation:  "("
Name:  "lines"
Punctuation:  "["
Name:  "index"
Punctuation:  "])"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Returns a list of all procedures windows in ProcGlobal context"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "getGlobalProcWindows"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "procList"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "getProcWindows"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "*"
Literal.String.Double:  "\""
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "INDEPENDENTMODULE:0"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "AddToItemsInList"
Punctuation:  "("
Name:  "procList"
Punctuation:  ","
Text:  " "
Name:  "suffix"
Operator:  "="
Literal.String.Double:  "\""
Literal.String:  " [ProcGlobal]"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Returns a list of all procedures windows in the given independent module"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "getIMProcWindows"
Punctuation:  "("
Name.Variable:  "moduleName"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "moduleName"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "regexp"
Text:  "<newline>\t"
Keyword.Reserved:  "sprintf"
Text:  " "
Name:  "regexp"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "* ["
Literal.String.Other:  "%s"
Literal.String:  "]"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "moduleName"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " \t"
Name:  "getProcWindows"
Punctuation:  "("
Name:  "regexp"
Punctuation:  ","
Literal.String.Double:  "\""
Literal.String:  "INDEPENDENTMODULE:1"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Low level implementation, returns a sorted list of procedure windows matching regexp and options"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "getProcWindows"
Punctuation:  "("
Name.Variable:  "regexp"
Punctuation:  ","
Text:  " "
Name.Variable:  "options"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "regexp"
Punctuation:  ","
Text:  " "
Name.Variable:  "options"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "string"
Text:  " "
Name.Variable:  "procList"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "WinList"
Punctuation:  "("
Name:  "regexp"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ";"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "options"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "SortList"
Punctuation:  "("
Name:  "procList"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ";"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Returns a list of independent modules"
Text:  "<newline>"
Comment:  "// Includes ProcGlobal but skips all WM modules and the current module in release mode"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "getModuleList"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "moduleList"
Text:  "<newline><newline>\t"
Name:  "moduleList"
Text:  " "
Operator:  "="
Text:  " "
Name:  "IndependentModuleList"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  ";"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "moduleList"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ListMatch"
Punctuation:  "("
Name:  "moduleList"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "!WM*"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ";"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Comment:  "// skip WM modules"
Text:  "<newline>\t"
Name:  "moduleList"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ListMatch"
Punctuation:  "("
Name:  "moduleList"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "!RCP*"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String:  ";"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Comment:  "// skip WM's Resize Controls modul"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "module"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "GetIndependentModuleName"
Punctuation:  "()"
Text:  "<newline><newline>\t"
Name:  "moduleList"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "ProcGlobal;"
Literal.String.Double:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Name:  "SortList"
Punctuation:  "("
Name:  "moduleList"
Punctuation:  ")"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "moduleList"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Returns declarations: after parsing the object names and variables are stored in this wave."
Text:  "<newline>"
Comment:  "// Return refrence to (text) Wave/T"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/Wave"
Text:  " "
Name.Function:  "getDeclWave"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "DFREF"
Text:  " "
Name.Variable:  "dfr"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "createDFWithAllParents"
Punctuation:  "("
Name:  "pkgFolder"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/Z/T/SDFR"
Punctuation:  "="
Generic:  "dfr"
Text:  " "
Name.Variable:  "wv"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "$declarations"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name:  "WaveExists"
Punctuation:  "("
Name:  "wv"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "Make"
Operator:  "/"
Name:  "T"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Literal.Number.Integer:  "128"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  " "
Name:  "dfr"
Operator:  ":$"
Name:  "declarations"
Keyword.Pseudo:  "/Wave"
Punctuation:  "="
Name.Variable:  "wv"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "wv"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Returns linenumbers: each parsing result of decl has a corresponding line number."
Text:  "<newline>"
Comment:  "// Return refrence to (integer) Wave/I"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/Wave"
Text:  " "
Name.Function:  "getLineWave"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "DFREF"
Text:  " "
Name.Variable:  "dfr"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "createDFWithAllParents"
Punctuation:  "("
Name:  "pkgFolder"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/Z/I/SDFR"
Punctuation:  "="
Generic:  "dfr"
Text:  " "
Name.Variable:  "wv"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "$declarationLines"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name:  "WaveExists"
Punctuation:  "("
Name:  "wv"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "Make"
Operator:  "/"
Name:  "I"
Text:  " "
Name:  "dfr"
Operator:  ":$"
Name:  "declarationLines"
Keyword.Pseudo:  "/Wave"
Punctuation:  "="
Name.Variable:  "wv"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "wv"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// 2D-Wave with Strings"
Text:  "<newline>"
Comment:  "// Return refrence to (string) Wave/T"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/Wave"
Text:  " "
Name.Function:  "getSaveStrings"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "DFREF"
Text:  " "
Name.Variable:  "dfr"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "createDFWithAllParents"
Punctuation:  "("
Name:  "pkgFolder"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/Z/T/SDFR"
Punctuation:  "="
Generic:  "dfr"
Text:  " "
Name.Variable:  "wv"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "$CsaveStrings"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name:  "WaveExists"
Punctuation:  "("
Name:  "wv"
Punctuation:  "))"
Text:  "<newline>\t\t"
Comment:  "// Textwave:"
Text:  "<newline>\t\t"
Comment:  "// Column 1: Id (Identification String)"
Text:  "<newline>\t\t"
Comment:  "// Column 2: CheckSum"
Text:  "<newline>\t\t"
Name:  "Make"
Operator:  "/"
Name:  "T"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ","
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  " "
Name:  "dfr"
Operator:  ":$"
Name:  "CsaveStrings"
Keyword.Pseudo:  "/Wave"
Punctuation:  "="
Name.Variable:  "wv"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "wv"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// 2D-Wave with references to Declaration- and LineNumber-Waves as free waves."
Text:  "<newline>"
Comment:  "// Return refrence to (wave) Wave/WAVE"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/Wave"
Text:  " "
Name.Function:  "getSaveWaves"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "DFREF"
Text:  " "
Name.Variable:  "dfr"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "createDFWithAllParents"
Punctuation:  "("
Name:  "pkgFolder"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/Z/WAVE/SDFR"
Punctuation:  "="
Generic:  "dfr"
Text:  " "
Name.Variable:  "wv"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "$CsaveWaves"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name:  "WaveExists"
Punctuation:  "("
Name:  "wv"
Punctuation:  "))"
Text:  "<newline>\t\t"
Name:  "Make"
Operator:  "/"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/N"
Punctuation:  "="
Generic:  "(0,2)"
Text:  " "
Name.Variable:  "dfr"
Operator:  ":$"
Name:  "CsaveWaves"
Keyword.Pseudo:  "/Wave"
Punctuation:  "="
Name.Variable:  "wv"
Text:  " "
Comment:  "// wave of wave references"
Text:  "<newline>\t\t"
Comment:  "// Wave with Free Waves:"
Text:  "<newline>\t\t"
Comment:  "// Column 1: decl (a (text) Wave/T with the results of parsing the procedure file)"
Text:  "<newline>\t\t"
Comment:  "// Column 1: line (a (integer) Wave/I with the corresponding line numbers within the procedure file)"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "wv"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// 2D-Wave where Numbers can be stored."
Text:  "<newline>"
Comment:  "// Return refrence to (numeric) Wave"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/Wave"
Text:  " "
Name.Function:  "getSaveVariables"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword.Declaration:  "DFREF"
Text:  " "
Name.Variable:  "dfr"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "createDFWithAllParents"
Punctuation:  "("
Name:  "pkgFolder"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "WAVE"
Keyword.Pseudo:  "/Z/SDFR"
Punctuation:  "="
Generic:  "dfr"
Text:  " "
Name.Variable:  "wv"
Text:  " "
Punctuation:  "="
Text:  " "
Generic:  "$CsaveVariables"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name:  "WaveExists"
Punctuation:  "("
Name:  "wv"
Punctuation:  "))"
Text:  "<newline>\t\t"
Comment:  "// Numeric Wave:"
Text:  "<newline>\t\t"
Comment:  "// Column 1: valid (0: no, 1: yes) used to mark waves for parsing after \"compile\" was done."
Text:  "<newline>\t\t"
Comment:  "// Column 2: time for parsing (time consumption of compilation in us)"
Text:  "<newline>\t\t"
Comment:  "// Column 3: time for checksum"
Text:  "<newline>\t\t"
Name:  "Make"
Operator:  "/"
Name:  "N"
Operator:  "="
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ","
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  " "
Name:  "dfr"
Operator:  ":$"
Name:  "CsaveVariables"
Keyword.Pseudo:  "/Wave"
Punctuation:  "="
Name.Variable:  "wv"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Name:  "wv"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Comment:  "// Returns a list of all procedure files of the given independent module/ProcGlobal"
Text:  "<newline>"
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "getProcList"
Punctuation:  "("
Name.Variable:  "module"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "module"
Text:  "<newline><newline>\t"
Keyword:  "if"
Punctuation:  "("
Text:  " "
Name:  "isProcGlobal"
Punctuation:  "("
Name:  "module"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name:  "getGlobalProcWindows"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword:  "else"
Text:  "<newline>  \t\t"
Keyword:  "return"
Text:  " "
Name:  "getIMProcWindows"
Punctuation:  "("
Name:  "module"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "getParsingTime"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "getGlobalVar"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "parsingTime"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "setParsingTime"
Punctuation:  "("
Name.Variable:  "numTime"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "numTime"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "setGlobalVar"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "parsingTime"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "numTime"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "getCheckSumTime"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "getGlobalVar"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "checksumTime"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "setCheckSumTime"
Punctuation:  "("
Name.Variable:  "numTime"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "numTime"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "setGlobalVar"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "checksumTime"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "numTime"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Text:  " "
Name.Function:  "setCheckSum"
Punctuation:  "("
Name.Variable:  "procedure"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword.Declaration:  "STRUCT"
Text:  " "
Name.Variable:  "procedure"
Text:  " "
Operator:  "&"
Name:  "procedure"
Text:  "<newline><newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "procText"
Punctuation:  ","
Text:  " "
Name.Variable:  "checksum"
Text:  "<newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "returnValue"
Punctuation:  ","
Text:  " "
Name.Variable:  "timer"
Text:  "<newline><newline>\t"
Name:  "timer"
Text:  " "
Operator:  "="
Text:  " "
Name:  "timerStart"
Punctuation:  "()"
Text:  "<newline><newline>\t"
Name:  "procText"
Text:  " "
Operator:  "="
Text:  " "
Name:  "getProcedureText"
Punctuation:  "("
Name:  "procedure"
Punctuation:  "."
Name:  "module"
Punctuation:  ","
Text:  " "
Name:  "procedure"
Punctuation:  "."
Name:  "name"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "procText"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ProcedureText"
Punctuation:  "("
Literal.String.Double:  "\"\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name:  "procedure"
Punctuation:  "."
Name:  "fullname"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "returnValue"
Text:  " "
Operator:  "="
Text:  " "
Name:  "setGlobalStr"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "parsingChecksum"
Literal.String.Double:  "\""
Punctuation:  ","
Text:  " "
Name:  "Hash"
Punctuation:  "("
Name:  "procText"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline><newline>\t"
Name:  "setCheckSumTime"
Punctuation:  "("
Name:  "timerStop"
Punctuation:  "("
Name:  "timer"
Punctuation:  "))"
Text:  "<newline><newline>\t"
Keyword:  "return"
Text:  " "
Punctuation:  "("
Name:  "returnValue"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword.Declaration:  "Function"
Keyword.Pseudo:  "/S"
Text:  " "
Name.Function:  "getCheckSum"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword:  "return"
Text:  " "
Name:  "getGlobalStr"
Punctuation:  "("
Literal.String.Double:  "\""
Literal.String:  "parsingChecksum"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "End"
Text:  "<newline><newline>"
Keyword:  "static"
Text:  " "
Keyword:  "Structure"
Text:  " "
Name:  "procedure"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "id"
Text:  "<newline>\t"
Keyword.Declaration:  "Variable"
Text:  " "
Name.Variable:  "row"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "name"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "module"
Text:  "<newline>\t"
Keyword.Declaration:  "String"
Text:  " "
Name.Variable:  "fullName"
Text:  "<newline>"
Keyword:  "Endstructure"
Text:  "<newline>"
