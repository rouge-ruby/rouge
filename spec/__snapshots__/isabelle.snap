Keyword:  "theory"
Text.Whitespace:  " "
Name:  "demo"
Text.Whitespace:  " "
Keyword.Pseudo:  "imports"
Text.Whitespace:  " "
Name:  "Main"
Text.Whitespace:  " "
Keyword:  "begin"
Text.Whitespace:  "<newline><newline>"
Generic.Subheading:  "section"
Text.Whitespace:  " "
Text:  "\u2039Inductive predicates for lists\u203A"
Text.Whitespace:  "<newline><newline>"
Keyword:  "datatype"
Text.Whitespace:  " "
Name.Variable:  "'a"
Text.Whitespace:  " "
Name:  "list"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Name:  "Nil"
Text.Whitespace:  " "
Operator:  "("
Literal.String:  "\"[]\""
Operator:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  " "
Name:  "Cons"
Text.Whitespace:  " "
Name.Variable:  "'a"
Text.Whitespace:  " "
Literal.String:  "\"'a list\""
Text.Whitespace:  " "
Operator:  "("
Literal.String:  "\"_ # _\""
Operator:  ")"
Text.Whitespace:  "<newline><newline>"
Keyword:  "fun"
Text.Whitespace:  " "
Name:  "length"
Text.Whitespace:  " "
Operator:  "::"
Text.Whitespace:  " "
Literal.String:  "\"'a list \u21D2 nat\""
Text.Whitespace:  " "
Keyword.Pseudo:  "where"
Text.Whitespace:  "<newline>  "
Literal.String:  "\"length [] = 0\""
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  " "
Literal.String:  "\"length (x # xs) = 1 + length xs\""
Text.Whitespace:  "<newline><newline>"
Keyword:  "inductive"
Text.Whitespace:  " "
Name:  "\u03B6"
Text.Whitespace:  " "
Operator:  "::"
Text.Whitespace:  " "
Literal.String:  "\"'a list \u21D2 nat \u21D2 bool\""
Text.Whitespace:  " "
Keyword.Pseudo:  "where"
Text.Whitespace:  "<newline>"
Name:  "Nil"
Operator:  "["
Name:  "intro"
Operator:  "!]:"
Text.Whitespace:  "  "
Literal.String:  "\"\u03B6 [] 0\""
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Name:  "Cons"
Operator:  "["
Name:  "intro"
Operator:  "]:"
Text.Whitespace:  " "
Literal.String:  "\"\u03B6 xs l \u27F9 \u03B6 (x # xs) (1 + l)\""
Text.Whitespace:  "<newline><newline>"
Comment:  "(* Not the answer? *)"
Text.Whitespace:  "<newline>"
Keyword.Namespace:  "lemma"
Text.Whitespace:  " "
Literal.String:  "\"\u03B6 xs 42\""
Text.Whitespace:  "<newline>  "
Generic.Error:  "oops"
Text.Whitespace:  "<newline><newline>"
Keyword.Namespace:  "theorem"
Text.Whitespace:  " "
Name:  "len_pred"
Operator:  ":"
Text.Whitespace:  " "
Literal.String:  "\"\u03B6 xs (length xs)\""
Text.Whitespace:  "<newline>"
Keyword:  "proof"
Text.Whitespace:  " "
Operator:  "("
Name:  "induction"
Text.Whitespace:  " "
Name:  "rule"
Operator:  ":"
Text.Whitespace:  " "
Name:  "length"
Operator.Word:  "."
Name:  "induct"
Operator:  ")"
Text.Whitespace:  "<newline>"
Keyword:  "case"
Text.Whitespace:  " "
Name:  "1"
Text.Whitespace:  "<newline>  "
Keyword:  "then"
Text.Whitespace:  " "
Keyword:  "show"
Text.Whitespace:  " "
Operator:  "?"
Keyword:  "case"
Text.Whitespace:  " "
Keyword.Pseudo:  "apply"
Text.Whitespace:  " "
Name:  "simp"
Text.Whitespace:  " "
Operator.Word:  ".."
Text.Whitespace:  "<newline>"
Keyword:  "next"
Text.Whitespace:  "<newline>  "
Keyword:  "fix"
Text.Whitespace:  " "
Name:  "x"
Text.Whitespace:  " "
Name:  "xs"
Text.Whitespace:  " "
Keyword:  "assume"
Text.Whitespace:  " "
Literal.String:  "\"\u03B6 xs (length xs)\""
Text.Whitespace:  "<newline>  "
Keyword:  "then"
Text.Whitespace:  " "
Keyword:  "show"
Text.Whitespace:  " "
Literal.String:  "\"\u03B6 (x # xs) (length (x # xs))\""
Text.Whitespace:  "<newline>    "
Keyword:  "using"
Text.Whitespace:  " "
Name:  "\u03B6.simps"
Text.Whitespace:  " "
Keyword:  "by"
Text.Whitespace:  " "
Name:  "auto"
Text.Whitespace:  "<newline>"
Keyword:  "qed"
Text.Whitespace:  "<newline><newline>"
Keyword:  "end"
Text.Whitespace:  "<newline>"
