Comment.Single:  "// vim: ft=javascript"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myFloat"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "0.123"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myOctal"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Hex:  "0x123"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myRegex"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/asdf/"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myComplicatedRegex"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/."
Literal.String.Escape:  "["
Literal.String.Regex:  "."
Literal.String.Escape:  "](?="
Literal.String.Regex:  "x"
Literal.String.Escape:  "\\h\\[["
Literal.String.Regex:  ")"
Literal.String.Escape:  "])[^"
Literal.String.Regex:  ".{}abc"
Literal.String.Escape:  "]"
Literal.String.Regex:  "{foo}"
Literal.String.Escape:  "{3,}"
Literal.String.Regex:  "x"
Literal.String.Escape:  "{2,3}"
Literal.String.Regex:  "/"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myObject"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "a"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name.Attribute:  "b"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "someText"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "hi"
Literal.String.Delimiter:  "\""
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "someText"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "there"
Literal.String.Delimiter:  "\""
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "test"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "123"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Attribute:  "a"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Escape:  "\\t"
Literal.String.Double:  "est"
Literal.String.Delimiter:  "\""
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "b"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "est"
Literal.String.Delimiter:  "\""
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "c"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Escape:  "\\\\"
Literal.String.Double:  "test"
Literal.String.Delimiter:  "\""
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "d"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Escape:  "\\\\"
Literal.String.Double:  "nest"
Literal.String.Delimiter:  "\""
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "e"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Escape:  "\\\\"
Literal.String.Delimiter:  "\""
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "f"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "Using "
Literal.String.Escape:  "\\\\"
Literal.String.Double:  " in a string"
Literal.String.Delimiter:  "\""
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "g"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Escape:  "\\"
Literal.String.Double:  "error"
Literal.String.Delimiter:  "\""
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Name.Function:  "switch"
Punctuation:  "("
Name.Other:  "test"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Keyword:  "case"
Text:  " "
Literal.Number.Integer:  "123"
Punctuation:  ":"
Text:  "<newline>  "
Name.Other:  "console"
Punctuation:  "."
Name.Function:  "log"
Punctuation:  "("
Literal.Number.Integer:  "123"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "break"
Text:  "<newline>"
Keyword:  "default"
Punctuation:  ":"
Text:  "<newline>  "
Name.Other:  "console"
Punctuation:  "."
Name.Function:  "log"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "default"
Literal.String.Delimiter:  "'"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "break"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Function:  "switch"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "case"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "foo"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "}."
Name.Other:  "foo"
Punctuation:  ":"
Text:  "<newline>    "
Name.Other:  "console"
Punctuation:  "."
Name.Function:  "log"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "oh my fucking god"
Literal.String.Delimiter:  "'"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "break"
Text:  "<newline>  "
Keyword:  "case"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "bar"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "}."
Name.Other:  "bar"
Text:  " "
Punctuation:  "?"
Text:  " "
Name.Other:  "baz"
Punctuation:  ":"
Text:  " "
Name.Other:  "zot"
Punctuation:  ":"
Text:  "<newline><newline>  "
Keyword:  "case"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "zot"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Punctuation:  "}."
Name.Other:  "zot"
Text:  " "
Punctuation:  "?"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "quux"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "4"
Text:  " "
Punctuation:  "}"
Text:  " "
Punctuation:  "."
Name.Other:  "quux"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  ":"
Text:  "<newline>    "
Name.Other:  "console"
Punctuation:  "."
Name.Function:  "log"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "ahahahahahaha"
Literal.String.Delimiter:  "'"
Punctuation:  ")"
Text:  "<newline><newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "ternary"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Name.Attribute:  "object_key"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "?"
Text:  " "
Name.Other:  "variable"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "ternary2"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "a"
Text:  " "
Punctuation:  "?"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "object_key"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "c"
Text:  " "
Punctuation:  "}"
Text:  " "
Operator:  "+"
Text:  " "
Name.Other:  "variable"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "e"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "ternary3"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "a"
Text:  " "
Punctuation:  "?"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Attribute:  "key1"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "var1"
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "key2"
Punctuation:  ":"
Text:  " "
Name.Other:  "var2"
Text:  " "
Punctuation:  "?"
Text:  " "
Keyword.Declaration:  "function"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Label:  "label1"
Punctuation:  ":"
Text:  " "
Comment.Single:  "// break label, not an object key!"
Text:  "<newline>    "
Name.Function:  "while"
Punctuation:  "("
Keyword.Constant:  "true"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Keyword:  "break"
Text:  " "
Name.Other:  "label1"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Label:  "label2"
Punctuation:  ":"
Text:  " "
Comment.Single:  "// also a break label"
Text:  "<newline>    "
Name.Function:  "while "
Punctuation:  "("
Keyword.Constant:  "true"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Keyword:  "break"
Text:  " "
Name.Other:  "label2"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Operator:  "+"
Text:  " "
Name.Other:  "var3"
Punctuation:  ":"
Text:  " "
Name.Other:  "var4"
Punctuation:  ","
Text:  " "
Comment.Single:  "// ternary, not object key"
Text:  "<newline>  "
Name.Attribute:  "key3"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "foo"
Literal.String.Delimiter:  "'"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Attribute:  "num"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "func"
Punctuation:  ":"
Text:  " "
Keyword.Declaration:  "function"
Punctuation:  "()"
Text:  " "
Punctuation:  "{},"
Text:  "<newline>  "
Name.Attribute:  "str"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "''"
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "bool"
Punctuation:  ":"
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "obj"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// comment"
Text:  "<newline>    "
Name.Attribute:  "key"
Punctuation:  ":"
Text:  " "
Name.Other:  "val"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/*!<newline> * multiline comment<newline> */"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "quotedKeys"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "one"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  "<newline>  "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "two"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  "<newline>  "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "three"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "doc"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "first"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "key"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "value"
Literal.String.Delimiter:  "\""
Punctuation:  ","
Text:  "<newline>    "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "func"
Literal.String.Delimiter:  "\""
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword.Declaration:  "function"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name.Attribute:  "label"
Punctuation:  ":"
Text:  "<newline>      "
Name.Function:  "while "
Punctuation:  "("
Keyword.Constant:  "true"
Punctuation:  ")"
Text:  " "
Keyword:  "break"
Text:  " "
Name.Other:  "label"
Punctuation:  ";"
Text:  "<newline><newline>      "
Keyword:  "return"
Text:  " "
Name.Other:  "foo"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "bar"
Literal.String.Delimiter:  "\""
Text:  " "
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "baz"
Punctuation:  ":"
Text:  " "
Name.Other:  "zot"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>    "
Punctuation:  "}"
Text:  "<newline><newline>  "
Punctuation:  "},"
Text:  "<newline>  "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "hello"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "world"
Literal.String.Delimiter:  "\""
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Single:  "// not an object is OK"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "doc"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "first"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "value"
Literal.String.Delimiter:  "\""
Punctuation:  ","
Text:  "<newline>  "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "hello"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "world"
Literal.String.Delimiter:  "\""
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Single:  "// not quoted is OK"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "doc"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Attribute:  "first"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "key"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "value"
Literal.String.Delimiter:  "\""
Text:  "<newline>  "
Punctuation:  "},"
Text:  "<newline>  "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "hello"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "world"
Literal.String.Delimiter:  "\""
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline>"
Name.Other:  "Blag"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{};"
Text:  "<newline>"
Name.Other:  "jQuery"
Punctuation:  "."
Name.Function:  "noConflict"
Punctuation:  "();"
Text:  "<newline><newline>"
Name.Function:  "if "
Punctuation:  "("
Name.Other:  "cond"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>  "
Name.Label:  "label1"
Punctuation:  ":"
Text:  "<newline>  "
Name.Function:  "while "
Punctuation:  "("
Name.Other:  "cond"
Punctuation:  ")"
Text:  " "
Keyword:  "break"
Text:  " "
Name.Other:  "label1"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Other:  "Blag"
Punctuation:  "."
Name.Other:  "ReadMore"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Declaration:  "function"
Punctuation:  "("
Name.Other:  "$"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "getFold"
Punctuation:  "("
Name.Other:  "button"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Function:  "$"
Punctuation:  "("
Name.Other:  "button"
Punctuation:  ")."
Name.Function:  "siblings"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  ".fold"
Literal.String.Delimiter:  "'"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "expand"
Punctuation:  "("
Name.Other:  "e"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Other:  "e"
Punctuation:  "."
Name.Function:  "preventDefault"
Punctuation:  "();"
Text:  "<newline><newline>    "
Keyword.Declaration:  "var"
Text:  " "
Name.Builtin:  "self"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "$"
Punctuation:  "("
Keyword:  "this"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name.Function:  "getFold"
Punctuation:  "("
Name.Builtin:  "self"
Punctuation:  ")."
Name.Function:  "show"
Punctuation:  "();"
Text:  "<newline>    "
Name.Builtin:  "self"
Punctuation:  "."
Name.Function:  "html"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "&laquo; less"
Literal.String.Delimiter:  "'"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "contract"
Punctuation:  "("
Name.Other:  "e"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Other:  "e"
Punctuation:  "."
Name.Function:  "preventDefault"
Punctuation:  "();"
Text:  "<newline><newline>    "
Keyword.Declaration:  "var"
Text:  " "
Name.Builtin:  "self"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "$"
Punctuation:  "("
Keyword:  "this"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name.Function:  "getFold"
Punctuation:  "("
Name.Builtin:  "self"
Punctuation:  ")."
Name.Function:  "hide"
Punctuation:  "();"
Text:  "<newline>    "
Name.Builtin:  "self"
Punctuation:  "."
Name.Function:  "html"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "more &raquo;"
Literal.String.Delimiter:  "'"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "init"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "$"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "a.read-more"
Literal.String.Delimiter:  "'"
Punctuation:  ")."
Name.Function:  "toggle"
Punctuation:  "("
Name.Other:  "expand"
Punctuation:  ","
Text:  " "
Name.Other:  "contract"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Name.Function:  "$"
Punctuation:  "("
Name.Builtin:  "document"
Punctuation:  ")."
Name.Function:  "ready"
Punctuation:  "("
Name.Other:  "init"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "})("
Name.Other:  "jQuery"
Punctuation:  ");"
Text:  "<newline><newline>"
Name.Other:  "underscoreFunc"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "_underscoreFunc"
Punctuation:  "()"
Text:  "<newline>"
Name.Other:  "underscoreClass"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "_UnderscoreClass"
Punctuation:  "()"
Text:  "<newline><newline>"
Comment.Single:  "// evil regexes, from pygments"
Text:  "<newline><newline>"
Operator:  "/"
Name.Other:  "regexp"
Operator:  "/"
Punctuation:  "."
Name.Function:  "test"
Punctuation:  "("
Name.Other:  "foo"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String.Regex:  "/regexp/"
Punctuation:  ","
Literal.String.Regex:  "/regexp/"
Punctuation:  ","
Text:  " "
Literal.String.Regex:  "/regexp/"
Punctuation:  ","
Text:  " "
Comment.Single:  "// comment"
Text:  "<newline>"
Comment.Single:  "// comment"
Text:  "<newline>"
Literal.String.Regex:  "/regexp/"
Punctuation:  "];"
Text:  "<newline>"
Name.Function:  "if "
Punctuation:  "("
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "test"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "{"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "test"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ");};"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Literal.String.Regex:  "/regexp/"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/regexp/"
Punctuation:  ";"
Text:  "<newline>"
Name.Function:  "if "
Punctuation:  "("
Literal.Number.Integer:  "0"
Operator:  "<"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ">"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  "))"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "u"
Punctuation:  ":"
Literal.String.Regex:  "/regexp/"
Punctuation:  ","
Text:  " "
Name.Attribute:  "v"
Punctuation:  ":"
Text:  " "
Literal.String.Regex:  "/regexp/"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Name.Function:  "foo"
Punctuation:  "();"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "test"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ");"
Text:  " "
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "test"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ");"
Text:  "<newline>"
Name.Function:  "if "
Punctuation:  "("
Operator:  "!"
Literal.String.Regex:  "/regexp/"
Punctuation:  ")"
Text:  " "
Name.Function:  "foobar"
Punctuation:  "();"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "u"
Text:  " "
Operator:  "%"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "*"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "/"
Text:  " "
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ");"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "u"
Punctuation:  "?"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ")"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "v"
Text:  " "
Operator:  "+"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "-"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ");"
Text:  "<newline>"
Name.Other:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "u"
Operator:  "^"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "&"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "|"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "+~"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Name.Other:  "string"
Punctuation:  ");"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/regexp/"
Text:  " "
Comment.Multiline:  "/* a comment */"
Text:  " "
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/"
Literal.String.Escape:  "["
Literal.String.Regex:  "reg"
Literal.String.Escape:  "/"
Literal.String.Regex:  "exp"
Literal.String.Escape:  "]"
Literal.String.Regex:  "/"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "4"
Operator:  "/"
Literal.Number.Integer:  "2"
Operator:  "/"
Name.Other:  "i"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name.Other:  "a"
Text:  " "
Operator:  "=="
Text:  " "
Name.Other:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "?"
Comment.Multiline:  "/* this is a comment */"
Text:  " "
Name.Other:  "c"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "d"
Punctuation:  ";"
Text:  "<newline>"
Comment.Single:  "/// a comment //"
Text:  "<newline>"
Name.Other:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/regex/"
Operator:  "/"
Literal.Number.Integer:  "2"
Operator:  "/"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  " "
Comment.Single:  "//syntactically correct, returns NaN"
Text:  "<newline><newline>"
Comment.Single:  "// bad regexen - should have an error token at the last char and recover"
Text:  "<newline>"
Comment.Single:  "// on the next line"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/fo"
Error:  "o<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "b"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/"
Literal.String.Escape:  "["
Literal.String.Regex:  "fo"
Error:  "o<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "c"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/valid-regex/"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "template"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "{{current}} of beer on the wall"
Literal.String.Delimiter:  "\""
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "stanza"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "template"
Punctuation:  "."
Name.Function:  "replace"
Punctuation:  "("
Literal.String.Regex:  "/{{current}}/g"
Punctuation:  ","
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "99 bottles"
Literal.String.Delimiter:  "\""
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* original examples */"
Text:  "<newline><newline>"
Comment.Single:  "// regex"
Text:  "<newline><newline>"
Name.Function:  "blah"
Punctuation:  "("
Literal.String.Regex:  "/abc/"
Punctuation:  ");"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/abc/"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/abc/"
Punctuation:  "."
Name.Other:  "match"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// math"
Text:  "<newline><newline>"
Name.Function:  "blah"
Punctuation:  "("
Literal.Number.Integer:  "1"
Operator:  "/"
Literal.Number.Integer:  "2"
Punctuation:  ");"
Text:  " "
Comment.Single:  "//comment"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Operator:  "/"
Literal.Number.Integer:  "1"
Operator:  "/"
Punctuation:  "."
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline><newline>"
Name.Other:  "x"
Operator:  "="
Literal.String.Regex:  "/1/"
Punctuation:  ";"
Text:  " "
Comment.Single:  "// regex"
Text:  "<newline>"
Name.Other:  "x"
Operator:  "="
Literal.Number.Integer:  "1"
Operator:  "/"
Name.Other:  "a"
Operator:  "/"
Name.Other:  "g"
Punctuation:  ";"
Text:  " "
Comment.Single:  "// division"
Text:  "<newline>"
Name.Other:  "x"
Operator:  "="
Name.Other:  "a"
Operator:  "/"
Name.Other:  "a"
Operator:  "/"
Name.Other:  "g"
Punctuation:  ";"
Text:  " "
Comment.Single:  "// division"
Text:  "<newline><newline>"
Comment.Single:  "// real-world"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Operator:  "/"
Punctuation:  "("
Literal.Number.Integer:  "1"
Operator:  "+"
Name.Builtin:  "Math"
Punctuation:  "."
Name.Function:  "sqrt"
Punctuation:  "("
Name.Other:  "sum"
Punctuation:  "));"
Text:  " "
Comment.Single:  "// convert to number between 1-0"
Text:  "<newline>"
Keyword:  "return"
Text:  " "
Name.Builtin:  "Math"
Punctuation:  "."
Name.Function:  "round"
Punctuation:  "(("
Name.Other:  "num"
Text:  " "
Operator:  "/"
Text:  " "
Name.Other:  "den"
Punctuation:  ")"
Text:  " "
Operator:  "*"
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ")"
Operator:  "/"
Literal.Number.Integer:  "100"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// generator"
Text:  "<newline>"
Keyword.Declaration:  "function"
Operator:  "*"
Text:  " "
Name.Function:  "range"
Punctuation:  "("
Keyword:  "from"
Punctuation:  ","
Text:  " "
Name.Other:  "to"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>  "
Name.Other:  "to"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline>  "
Name.Function:  "while "
Punctuation:  "("
Keyword:  "from"
Text:  " "
Operator:  ">"
Text:  " "
Name.Other:  "to"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "yield"
Text:  " "
Keyword:  "from"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// string interpolation"
Text:  "<newline>"
Literal.String.Double:  "`this is "
Punctuation:  "${"
Literal.String.Delimiter:  "\""
Literal.String.Double:  "sparta"
Literal.String.Delimiter:  "\""
Punctuation:  "."
Name.Function:  "toUpperCase"
Punctuation:  "()}"
Literal.String.Double:  "`"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// nasty string interpolation"
Text:  "<newline>"
Literal.String.Double:  "`this<newline> "
Literal.String.Escape:  "\\`"
Literal.String.Double:  " "
Literal.String.Escape:  "\\$"
Literal.String.Double:  "{2} $"
Literal.String.Escape:  "\\`"
Literal.String.Double:  " is<newline> "
Punctuation:  "${"
Literal.String.Delimiter:  "\""
Literal.String.Double:  "sparta"
Literal.String.Delimiter:  "\""
Punctuation:  "."
Name.Function:  "toUpperCase"
Punctuation:  "()"
Text:  " "
Operator:  "+"
Text:  " "
Keyword.Declaration:  "function"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Literal.String.Double:  " + \"h\"}`"
Punctuation:  ";"
Text:  "<newline>"
Literal.String.Double:  "`hello "
Punctuation:  "${"
Literal.String.Delimiter:  "\""
Literal.String.Double:  "${re}"
Literal.String.Delimiter:  "\""
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "`curs"
Punctuation:  "${"
Literal.Number.Integer:  "1"
Punctuation:  "}"
Literal.String.Double:  "on`"
Punctuation:  "}"
Literal.String.Double:  "`"
Punctuation:  ";"
Text:  "<newline><newline>"
Literal.String.Double:  "`$`"
Punctuation:  ";"
Text:  "<newline>"
Literal.String.Double:  "`$"
Punctuation:  "${"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "}"
Literal.String.Double:  "`"
Punctuation:  ";"
Text:  "<newline><newline>"
Literal.String.Double:  "`"
Punctuation:  "${"
Text:  "<newline>  "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "multiline template"
Literal.String.Delimiter:  "'"
Text:  "<newline>"
Punctuation:  "}"
Literal.String.Double:  "`"
Punctuation:  ";"
Text:  "<newline>"
Literal.String.Double:  "`"
Punctuation:  "${"
Text:  "<newline>  "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "2"
Text:  "<newline>"
Punctuation:  "}"
Literal.String.Double:  "`"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "notATernary"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "`"
Punctuation:  "${"
Name.Other:  "obj"
Punctuation:  "?."
Name.Other:  "prop"
Punctuation:  "}"
Literal.String.Double:  "`"
Punctuation:  ";"
Text:  "<newline><newline>"
Punctuation:  "@("
Keyword.Declaration:  "function"
Punctuation:  "("
Name.Other:  "thing"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name.Other:  "thing"
Punctuation:  ";"
Text:  " "
Punctuation:  "})"
Text:  "<newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "Person"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "@"
Name.Decorator:  "deprecate"
Text:  "<newline>  "
Name.Function:  "facepalm"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>  "
Punctuation:  "@"
Name.Decorator:  "deprecate"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "We stopped facepalming"
Literal.String.Delimiter:  "'"
Punctuation:  ")"
Text:  "<newline>  "
Name.Function:  "facepalmHard"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>  "
Punctuation:  "@"
Name.Decorator:  "deprecate"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "We stopped facepalming"
Literal.String.Delimiter:  "'"
Punctuation:  ","
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "url"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "http://knowyourmeme.com/memes/facepalm"
Literal.String.Delimiter:  "'"
Text:  " "
Punctuation:  "})"
Text:  "<newline>  "
Name.Function:  "facepalmHarder"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// ES6 module"
Text:  "<newline>"
Keyword:  "import"
Text:  " "
Operator:  "*"
Text:  " "
Keyword:  "as"
Text:  " "
Name.Other:  "foo"
Text:  " "
Keyword:  "from"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "foo"
Literal.String.Delimiter:  "'"
Text:  "<newline>"
Keyword:  "import"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Other:  "bar"
Text:  " "
Keyword:  "as"
Text:  " "
Name.Other:  "baz"
Text:  " "
Punctuation:  "}"
Text:  " "
Keyword:  "from"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "bar"
Literal.String.Delimiter:  "'"
Text:  "<newline>"
Keyword:  "export"
Text:  " "
Operator:  "*"
Text:  " "
Keyword:  "from"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "baz"
Literal.String.Delimiter:  "'"
Text:  "<newline>"
Keyword:  "export"
Text:  " "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "hoge"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>"
Keyword:  "export"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "fuga"
Text:  " "
Keyword.Declaration:  "extends"
Text:  " "
Name.Class:  "baz"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Function:  "constructor "
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "super"
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Keyword:  "async"
Text:  " "
Name.Function:  "doit "
Punctuation:  "("
Name.Other:  "stuff"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "await"
Text:  " "
Name.Function:  "stuff"
Punctuation:  "()"
Text:  "<newline>    "
Keyword:  "this"
Punctuation:  "."
Name.Function:  "dont"
Punctuation:  "("
Name.Other:  "stuff"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Name.Function:  "dont "
Punctuation:  "("
Name.Other:  "stuff"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Other:  "arguments"
Punctuation:  "."
Name.Other:  "length"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Name.Function:  "eval"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "false"
Literal.String.Delimiter:  "'"
Punctuation:  ")"
Text:  "<newline>"
Name.Builtin:  "global"
Punctuation:  "."
Name.Other:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "*"
Text:  " "
Punctuation:  "["
Name.Builtin:  "Symbol"
Punctuation:  "."
Name.Other:  "iterator"
Punctuation:  "]"
Text:  " "
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Name.Function:  "for "
Punctuation:  "("
Keyword.Declaration:  "const"
Text:  " "
Name.Other:  "x"
Text:  " "
Keyword:  "of"
Text:  " "
Name.Builtin:  "global"
Punctuation:  "."
Name.Other:  "foo"
Punctuation:  ")"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>"
Comment.Single:  "// ES6 numbers"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myBin"
Text:  "   "
Operator:  "="
Text:  " "
Literal.Number.Bin:  "0b10"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myOct"
Text:  "   "
Operator:  "="
Text:  " "
Literal.Number.Oct:  "0o67"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// ES6 regexes"
Text:  "<newline><newline>"
Keyword.Declaration:  "let"
Text:  " "
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/abc/u"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "let"
Text:  " "
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/abc/y"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// Unicode example"
Text:  "<newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "\u0152uvre"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Function:  "r\u00E9sumer"
Punctuation:  "("
Name.Other:  "\u8BED\u8A00"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "fran\u00E7ais"
Literal.String.Delimiter:  "\""
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Other:  "\u4E66\u540D"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "Les Mis\u00E9rables"
Literal.String.Delimiter:  "\""
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Other:  "unicodeClass"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "\u0152uvre"
Punctuation:  "()"
Text:  "<newline><newline>"
Comment.Single:  "// Nullish coalescing operator (??)"
Text:  "<newline>"
Keyword.Declaration:  "let"
Text:  " "
Name.Other:  "ret"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Delimiter:  "\"\""
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "let"
Text:  " "
Name.Other:  "foo"
Punctuation:  ","
Text:  " "
Name.Other:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Name.Other:  "ret"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Double:  "`// "
Punctuation:  "${"
Name.Other:  "foo"
Text:  " "
Operator:  "??"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "Unk"
Literal.String.Delimiter:  "\""
Punctuation:  "}"
Literal.String.Double:  ": "
Punctuation:  "${"
Name.Other:  "bar"
Text:  " "
Operator:  "??"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "Just do it"
Literal.String.Delimiter:  "\""
Punctuation:  "}"
Literal.String.Double:  "`"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "ret"
Text:  " "
Operator:  "+="
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Escape:  "<newline>"
Literal.String.Delimiter:  "\""
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword.Declaration:  "let"
Text:  " "
Name.Other:  "baz"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "baz"
Text:  " "
Operator:  "??="
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "default"
Literal.String.Delimiter:  "'"
Punctuation:  ";"
Text:  "<newline>"
