Punctuation:  "<"
Name.Tag:  "header"
Text:  " "
Name.Attribute:  "className"
Punctuation:  "="
Literal.String:  "\"App-header\""
Punctuation:  ">"
Text:  "<newline>  Hello React!<newline>"
Punctuation:  "</"
Name.Tag:  "header"
Punctuation:  ">"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myDivElement"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "<"
Name.Tag:  "div"
Text:  " "
Name.Attribute:  "className"
Punctuation:  "="
Literal.String:  "\"foo\""
Text:  " "
Punctuation:  "/>;"
Text:  "<newline>"
Name.Other:  "ReactDOM"
Punctuation:  "."
Name.Function:  "render"
Punctuation:  "("
Name.Other:  "myDivElement"
Punctuation:  ","
Text:  " "
Name.Builtin:  "document"
Punctuation:  "."
Name.Function:  "getElementById"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "example"
Literal.String.Delimiter:  "'"
Punctuation:  "));"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "MyComponent"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "React"
Punctuation:  "."
Name.Function:  "createClass"
Punctuation:  "({"
Comment.Multiline:  "/*...*/"
Punctuation:  "});"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myElement"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "<"
Name.Class:  "MyComponent"
Text:  " "
Name.Attribute:  "someProperty"
Punctuation:  "="
Literal.String.Interpol:  "{"
Keyword.Constant:  "true"
Literal.String.Interpol:  "}"
Text:  " "
Punctuation:  "/>;"
Text:  "<newline>"
Name.Other:  "ReactDOM"
Punctuation:  "."
Name.Function:  "render"
Punctuation:  "("
Name.Other:  "myElement"
Punctuation:  ","
Text:  " "
Name.Builtin:  "document"
Punctuation:  "."
Name.Function:  "getElementById"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "example"
Literal.String.Delimiter:  "'"
Punctuation:  "));"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myElement"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "<"
Name.Class:  "MyComponent"
Text:  " "
Name.Attribute:  "someProperty"
Punctuation:  "="
Literal.String.Interpol:  "{"
Punctuation:  "{"
Name.Attribute:  "a"
Punctuation:  ":"
Keyword.Constant:  "true"
Punctuation:  "}."
Name.Other:  "a"
Literal.String.Interpol:  "}"
Text:  " "
Punctuation:  "/>;"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myElement"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "<"
Name.Class:  "MyComponent"
Text:  " "
Name.Attribute:  "someProperty"
Punctuation:  "="
Literal.String.Interpol:  "{"
Keyword.Declaration:  "function"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "a"
Punctuation:  ":"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Punctuation:  "};"
Text:  "<newline>  "
Keyword:  "return"
Text:  " "
Name.Other:  "x"
Punctuation:  "."
Name.Other:  "a"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Literal.String.Interpol:  "}"
Text:  " "
Punctuation:  "/>"
Text:  "<newline><newline>"
Name.Other:  "thing"
Punctuation:  "."
Name.Other:  "otherThing"
Operator:  "<"
Name.Other:  "MyComponent"
Punctuation:  "."
Name.Other:  "property"
Text:  " "
Comment.Single:  "// comment - this is comparison"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myElement"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "<"
Name.Class:  "MyComponent"
Text:  " "
Name.Attribute:  "thing"
Punctuation:  "="
Literal.String.Interpol:  "{"
Name.Other:  "thing"
Punctuation:  "."
Name.Other:  "otherThing"
Operator:  ">"
Literal.Number.Integer:  "2"
Literal.String.Interpol:  "}"
Punctuation:  ">"
Text:  "<newline>  hello, world!<newline>"
Punctuation:  "</"
Name.Class:  "MyComponent"
Punctuation:  ">"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "content"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "<"
Name.Class:  "Container"
Punctuation:  ">"
Literal.String.Interpol:  "{"
Name.Builtin:  "window"
Punctuation:  "."
Name.Other:  "isLoggedIn"
Text:  " "
Punctuation:  "?"
Text:  " "
Punctuation:  "<"
Name.Class:  "Nav"
Text:  " "
Punctuation:  "/>"
Text:  " "
Punctuation:  ":"
Text:  " "
Punctuation:  "<"
Name.Class:  "Login"
Text:  " "
Punctuation:  "/>"
Literal.String.Interpol:  "}"
Punctuation:  "</"
Name.Class:  "Container"
Punctuation:  ">;"
Text:  "<newline><newline>"
Comment.Single:  "// These two are equivalent in JSX for disabling a button"
Text:  "<newline>"
Punctuation:  "<"
Name.Tag:  "input"
Text:  " "
Name.Attribute:  "type"
Punctuation:  "="
Literal.String:  "\"button\""
Text:  " "
Name.Attribute:  "disabled"
Text:  " "
Punctuation:  "/>;"
Text:  "<newline>"
Punctuation:  "<"
Name.Tag:  "input"
Text:  " "
Name.Attribute:  "type"
Punctuation:  "="
Literal.String:  "\"button\""
Text:  " "
Name.Attribute:  "disabled"
Punctuation:  "="
Literal.String.Interpol:  "{"
Keyword.Constant:  "true"
Literal.String.Interpol:  "}"
Text:  " "
Punctuation:  "/>;"
Text:  "<newline><newline>"
Comment.Single:  "// And these two are equivalent in JSX for not disabling a button"
Text:  "<newline>"
Punctuation:  "<"
Name.Tag:  "input"
Text:  " "
Name.Attribute:  "type"
Punctuation:  "="
Literal.String:  "\"button\""
Text:  " "
Punctuation:  "/>;"
Text:  "<newline>"
Punctuation:  "<"
Name.Tag:  "input"
Text:  " "
Name.Attribute:  "type"
Punctuation:  "="
Literal.String:  "\"button\""
Text:  " "
Name.Attribute:  "disabled"
Punctuation:  "="
Literal.String.Interpol:  "{"
Keyword.Constant:  "false"
Literal.String.Interpol:  "}"
Text:  " "
Punctuation:  "/>;"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "App"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Punctuation:  "<"
Name.Class:  "Form"
Punctuation:  ">"
Text:  "<newline>    "
Punctuation:  "<"
Name.Class:  "Form"
Punctuation:  "."
Name.Class:  "Row"
Punctuation:  ">"
Text:  "<newline>      "
Punctuation:  "<"
Name.Class:  "Form"
Punctuation:  "."
Name.Class:  "Label"
Text:  " "
Punctuation:  "/>"
Text:  "<newline>      "
Punctuation:  "<"
Name.Class:  "Form"
Punctuation:  "."
Name.Class:  "Input"
Text:  " "
Punctuation:  "/>"
Text:  "<newline>    "
Punctuation:  "</"
Name.Class:  "Form"
Punctuation:  "."
Name.Class:  "Row"
Punctuation:  ">"
Text:  "<newline>  "
Punctuation:  "</"
Name.Class:  "Form"
Punctuation:  ">"
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "content"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Punctuation:  "<"
Name.Class:  "Nav"
Punctuation:  ">"
Text:  "<newline>    "
Literal.String.Interpol:  "{"
Comment.Multiline:  "/* child comment, put {} around */"
Literal.String.Interpol:  "}"
Text:  "<newline>    a slash-star that isn't a comment because this is html: /*<newline>    "
Punctuation:  "<"
Name.Class:  "Person"
Text:  "<newline>      "
Comment.Multiline:  "/* multi<newline>         line<newline>         comment */"
Text:  "<newline>      "
Name.Attribute:  "name"
Punctuation:  "="
Literal.String.Interpol:  "{"
Name.Builtin:  "window"
Punctuation:  "."
Name.Other:  "isLoggedIn"
Text:  " "
Punctuation:  "?"
Text:  " "
Name.Builtin:  "window"
Punctuation:  "."
Name.Other:  "name"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "''"
Literal.String.Interpol:  "}"
Text:  " "
Comment.Single:  "// end of line comment"
Text:  "<newline>    "
Punctuation:  "/>"
Text:  "<newline>  "
Punctuation:  "</"
Name.Class:  "Nav"
Punctuation:  ">"
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "thing"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "<"
Name.Class:  "A"
Text:  " "
Name.Attribute:  "b"
Punctuation:  "="
Literal.String.Interpol:  "{"
Keyword.Declaration:  "function"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "c"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "<"
Name.Class:  "D"
Text:  " "
Name.Attribute:  "e"
Punctuation:  "="
Literal.String.Interpol:  "{"
Keyword.Constant:  "true"
Literal.String.Interpol:  "}"
Punctuation:  ">"
Name.Entity:  "&quot;"
Punctuation:  "</"
Name.Class:  "D"
Punctuation:  ">;"
Text:  " "
Punctuation:  "}()"
Literal.String.Interpol:  "}"
Punctuation:  "/>"
Text:  "<newline><newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "LikeButton"
Text:  " "
Keyword.Declaration:  "extends"
Text:  " "
Name.Class:  "React"
Punctuation:  "."
Name.Other:  "Component"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Function:  "constructor"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "super"
Punctuation:  "();"
Text:  "<newline>    "
Keyword:  "this"
Punctuation:  "."
Name.Other:  "state"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name.Attribute:  "liked"
Punctuation:  ":"
Text:  " "
Keyword.Constant:  "false"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline>    "
Keyword:  "this"
Punctuation:  "."
Name.Other:  "handleClick"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "this"
Punctuation:  "."
Name.Other:  "handleClick"
Punctuation:  "."
Name.Function:  "bind"
Punctuation:  "("
Keyword:  "this"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Name.Function:  "handleClick"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "this"
Punctuation:  "."
Name.Function:  "setState"
Punctuation:  "({"
Name.Attribute:  "liked"
Punctuation:  ":"
Text:  " "
Operator:  "!"
Keyword:  "this"
Punctuation:  "."
Name.Other:  "state"
Punctuation:  "."
Name.Other:  "liked"
Punctuation:  "});"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Name.Function:  "render"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "const"
Text:  " "
Name.Other:  "text"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "this"
Punctuation:  "."
Name.Other:  "state"
Punctuation:  "."
Name.Other:  "liked"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "liked"
Literal.String.Delimiter:  "'"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "haven"
Literal.String.Escape:  "\\'"
Literal.String.Single:  "t liked"
Literal.String.Delimiter:  "'"
Punctuation:  ";"
Text:  "<newline>    "
Name.Function:  "return "
Punctuation:  "("
Text:  "<newline>      "
Punctuation:  "<"
Name.Tag:  "div"
Text:  " "
Name.Attribute:  "onClick"
Punctuation:  "="
Literal.String.Interpol:  "{"
Keyword:  "this"
Punctuation:  "."
Name.Other:  "handleClick"
Literal.String.Interpol:  "}"
Punctuation:  ">"
Text:  "<newline>        You "
Literal.String.Interpol:  "{"
Name.Other:  "text"
Literal.String.Interpol:  "}"
Text:  " this. Click to toggle.<newline>      "
Punctuation:  "</"
Name.Tag:  "div"
Punctuation:  ">"
Text:  "<newline>    "
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Other:  "ReactDOM"
Punctuation:  "."
Name.Function:  "render"
Punctuation:  "("
Text:  "<newline>  "
Punctuation:  "<"
Name.Class:  "LikeButton"
Text:  " "
Punctuation:  "/>,"
Text:  "<newline>  "
Name.Builtin:  "document"
Punctuation:  "."
Name.Function:  "getElementById"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "example"
Literal.String.Delimiter:  "'"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline>"
