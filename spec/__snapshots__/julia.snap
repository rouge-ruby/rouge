Comment:  "# Single line comments start with a hash (pound) symbol."
Text:  "<newline>"
Comment.Multiline:  "#= Multiline comments can be written<newline>   by putting '#=' before the text  and '=#'<newline>   after the text. They can also be nested.<newline>=#"
Text:  "<newline><newline>"
Comment:  "# There are several basic types of numbers."
Text:  "<newline>"
Literal.Number.Integer:  "3"
Text:  " "
Comment:  "# => 3 (Int64)"
Text:  "<newline>"
Literal.Number.Float:  "3.2"
Text:  " "
Comment:  "# => 3.2 (Float64)"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Name.Builtin:  "im"
Text:  " "
Comment:  "# => 2 + 1im (Complex{Int64})"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Operator:  "//"
Literal.Number.Integer:  "3"
Text:  " "
Comment:  "# => 2//3 (Rational{Int64})"
Text:  "<newline><newline>"
Comment:  "# All of the normal infix operators are available."
Text:  "<newline>"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment:  "# => 2"
Text:  "<newline>"
Literal.Number.Integer:  "8"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment:  "# => 7"
Text:  "<newline>"
Literal.Number.Integer:  "10"
Text:  " "
Operator:  "*"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Comment:  "# => 20"
Text:  "<newline>"
Literal.Number.Integer:  "35"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Comment:  "# => 7.0"
Text:  "<newline>"
Literal.Number.Integer:  "5"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Comment:  "# => 2.5 # dividing an Int by an Int always results in a Float"
Text:  "<newline>"
Name:  "div"
Other:  "("
Literal.Number.Integer:  "5"
Other:  ","
Text:  " "
Literal.Number.Integer:  "2"
Other:  ")"
Text:  " "
Comment:  "# => 2 # for a truncated result, use div"
Text:  "<newline>"
Literal.Number.Integer:  "5"
Text:  " "
Operator:  "\\"
Text:  " "
Literal.Number.Integer:  "35"
Text:  " "
Comment:  "# => 7.0"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "^"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Comment:  "# => 4 # power, not bitwise xor"
Text:  "<newline>"
Literal.Number.Integer:  "12"
Text:  " "
Operator:  "%"
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Comment:  "# => 2"
Text:  "<newline><newline>"
Comment:  "# Enforce precedence with parentheses"
Text:  "<newline>"
Other:  "("
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "3"
Other:  ")"
Text:  " "
Operator:  "*"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Comment:  "# => 8"
Text:  "<newline><newline>"
Comment:  "# Bitwise Operators"
Text:  "<newline>"
Operator:  "~"
Literal.Number.Integer:  "2"
Text:  " "
Comment:  "# => -3   # bitwise not"
Text:  "<newline>"
Literal.Number.Integer:  "3"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Comment:  "# => 1 # bitwise and"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "|"
Text:  " "
Literal.Number.Integer:  "4"
Text:  " "
Comment:  "# => 6 # bitwise or"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "$"
Text:  " "
Literal.Number.Integer:  "4"
Text:  " "
Comment:  "# => 6 # bitwise xor"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  ">>>"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment:  "# => 1 # logical shift right"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  ">>"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "  "
Comment:  "# => 1 # arithmetic shift right"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "<<"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "  "
Comment:  "# => 4 # logical/arithmetic shift left"
Text:  "<newline><newline>"
Comment:  "# You can use the bits function to see the binary representation of a number."
Text:  "<newline>"
Name:  "bits"
Other:  "("
Literal.Number.Integer:  "12345"
Other:  ")"
Text:  "<newline>"
Name:  "bits"
Other:  "("
Literal.Number.Float:  "12345.0"
Other:  ")"
Text:  "<newline><newline>"
Comment:  "# Boolean values are primitives"
Text:  "<newline>"
Name.Builtin:  "true"
Text:  "<newline>"
Name.Builtin:  "false"
Text:  "<newline><newline>"
Comment:  "# Boolean operators"
Text:  "<newline>"
Operator:  "!"
Name.Builtin:  "true"
Text:  " "
Comment:  "# => false"
Text:  "<newline>"
Operator:  "!"
Name.Builtin:  "false"
Text:  " "
Comment:  "# => true"
Text:  "<newline>"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment:  "# => true"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment:  "# => false"
Text:  "<newline>"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment:  "# => false"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment:  "# => true"
Text:  "<newline>"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Comment:  "# => true"
Text:  "<newline>"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Comment:  "# => false"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "<="
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Comment:  "# => true"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Comment:  "# => true"
Text:  "<newline>"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Comment:  "# => true"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Comment:  "# => false"
Text:  "<newline><newline>"
Comment:  "# Strings are created with \""
Text:  "<newline>"
Literal.String:  "\"This is a string.\""
Text:  "<newline><newline>"
Comment:  "# Character literals are written with '"
Text:  "<newline>"
Literal.String.Char:  "'a'"
Text:  "<newline><newline>"
Comment:  "# Some strings can be indexed like an array of characters"
Text:  "<newline>"
Literal.String:  "\"This is a string\""
Other:  "["
Literal.Number.Integer:  "1"
Other:  "]"
Text:  " "
Comment:  "# => 'T' # Julia indexes from 1"
Text:  "<newline><newline>"
Comment:  "# $ can be used for string interpolation:"
Text:  "<newline>"
Literal.String:  "\"2 + 2 = "
Literal.String.Interpol:  "$"
Literal.String:  "(2 + 2)\""
Text:  " "
Comment:  "# => \"2 + 2 = 4\""
Text:  "<newline><newline>"
Comment:  "# Another way to format strings is the printf macro."
Text:  "<newline>"
Name.Decorator:  "@printf"
Text:  " "
Literal.String:  "\"%d is less than %f\""
Text:  " "
Literal.Number.Float:  "4.5"
Text:  " "
Literal.Number.Float:  "5.3"
Text:  " "
Comment:  "# 5 is less than 5.300000"
Text:  "<newline><newline>"
Comment:  "# Printing is easy"
Text:  "<newline>"
Name:  "println"
Other:  "("
Literal.String:  "\"I'm Julia. Nice to meet you!\""
Other:  ")"
Text:  "<newline><newline>"
Comment:  "# You don't declare variables before assigning to them."
Text:  "<newline>"
Name:  "some_var"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Comment:  "# => 5"
Text:  "<newline>"
Name:  "some_var"
Text:  " "
Comment:  "# => 5"
Text:  "<newline><newline>"
Comment:  "# Accessing a previously unassigned variable is an error"
Text:  "<newline>"
Keyword:  "try"
Text:  "<newline>    "
Name:  "some_other_var"
Text:  " "
Comment:  "# => ERROR: some_other_var not defined"
Text:  "<newline>"
Keyword:  "catch"
Text:  " "
Name:  "e"
Text:  "<newline>    "
Name:  "println"
Other:  "("
Name:  "e"
Other:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# Variable names start with a letter or underscore."
Text:  "<newline>"
Comment:  "# After that, you can use letters, digits, underscores, and exclamation points."
Text:  "<newline>"
Name:  "SomeOtherVar123!"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "6"
Text:  " "
Comment:  "# => 6"
Text:  "<newline><newline>"
Comment:  "# You can also use certain unicode characters"
Text:  "<newline>"
Name:  "\u2603"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "8"
Text:  " "
Comment:  "# => 8"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "*"
Text:  " "
Name.Builtin:  "\u03C0"
Text:  " "
Comment:  "# => 6.283185307179586"
Text:  "<newline><newline>"
Comment:  "# Arrays store a sequence of values indexed by integers 1 through n:"
Text:  "<newline>"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "Int64"
Other:  "[]"
Text:  " "
Comment:  "# => 0-element Int64 Array"
Text:  "<newline><newline>"
Comment:  "# 1-dimensional array literals can be written with comma-separated values."
Text:  "<newline>"
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Other:  "["
Literal.Number.Integer:  "4"
Other:  ","
Text:  " "
Literal.Number.Integer:  "5"
Other:  ","
Text:  " "
Literal.Number.Integer:  "6"
Other:  "]"
Text:  " "
Comment:  "# => 3-element Int64 Array: [4, 5, 6]"
Text:  "<newline>"
Name:  "b"
Other:  "["
Literal.Number.Integer:  "1"
Other:  "]"
Text:  " "
Comment:  "# => 4"
Text:  "<newline>"
Name:  "b"
Other:  "["
Keyword:  "end"
Other:  "]"
Text:  " "
Comment:  "# => 6"
Text:  "<newline><newline>"
Comment:  "# 2-dimentional arrays use space-separated values and semicolon-separated rows."
Text:  "<newline>"
Name:  "matrix"
Text:  " "
Operator:  "="
Text:  " "
Other:  "["
Literal.Number.Integer:  "1"
Text:  " "
Literal.Number.Integer:  "2"
Other:  ";"
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Literal.Number.Integer:  "4"
Other:  "]"
Text:  " "
Comment:  "# => 2x2 Int64 Array: [1 2; 3 4]"
Text:  "<newline><newline>"
Comment:  "# Add stuff to the end of a list with push! and append!"
Text:  "<newline>"
Name:  "push!"
Other:  "("
Name:  "a"
Other:  ","
Literal.Number.Integer:  "1"
Other:  ")"
Text:  "     "
Comment:  "# => [1]"
Text:  "<newline>"
Name:  "append!"
Other:  "("
Name:  "a"
Other:  ","
Name:  "b"
Other:  ")"
Text:  " "
Comment:  "# => [1,2,4,3,4,5,6]"
Text:  "<newline><newline>"
Comment:  "# Function names that end in exclamations points indicate that they modify"
Text:  "<newline>"
Comment:  "# their argument."
Text:  "<newline>"
Name:  "sort"
Other:  "("
Name:  "arr"
Other:  ")"
Text:  " "
Comment:  "# => [4,5,6]; arr is still [5,4,6]"
Text:  "<newline>"
Name:  "sort!"
Other:  "("
Name:  "arr"
Other:  ")"
Text:  " "
Comment:  "# => [4,5,6]; arr is now [4,5,6]"
Text:  "<newline><newline>"
Comment:  "# You can initialize arrays from ranges"
Text:  "<newline>"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Other:  "["
Literal.Number.Integer:  "1"
Operator:  ":"
Literal.Number.Integer:  "5"
Other:  ";]"
Text:  " "
Comment:  "# => 5-element Int64 Array: [1,2,3,4,5]"
Text:  "<newline><newline>"
Comment:  "# You can look at ranges with slice syntax."
Text:  "<newline>"
Name:  "a"
Other:  "["
Literal.Number.Integer:  "1"
Operator:  ":"
Literal.Number.Integer:  "3"
Other:  "]"
Text:  " "
Comment:  "# => [1, 2, 3]"
Text:  "<newline>"
Name:  "a"
Other:  "["
Literal.Number.Integer:  "2"
Operator:  ":"
Keyword:  "end"
Other:  "]"
Text:  " "
Comment:  "# => [2, 3, 4, 5]"
Text:  "<newline><newline>"
Comment:  "# Tuples are immutable."
Text:  "<newline>"
Name:  "tup"
Text:  " "
Operator:  "="
Text:  " "
Other:  "("
Literal.Number.Integer:  "1"
Other:  ","
Text:  " "
Literal.Number.Integer:  "2"
Other:  ","
Text:  " "
Literal.Number.Integer:  "3"
Other:  ")"
Text:  " "
Comment:  "# => (1,2,3) # an (Int64,Int64,Int64) tuple."
Text:  "<newline><newline>"
Comment:  "# You can unpack tuples into variables"
Text:  "<newline>"
Name:  "a"
Other:  ","
Text:  " "
Name:  "b"
Other:  ","
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  " "
Other:  "("
Literal.Number.Integer:  "1"
Other:  ","
Text:  " "
Literal.Number.Integer:  "2"
Other:  ","
Text:  " "
Literal.Number.Integer:  "3"
Other:  ")"
Text:  " "
Comment:  "# => (1,2,3)  # a is now 1, b is now 2 and c is now 3"
Text:  "<newline><newline>"
Comment:  "# Tuples are created even if you leave out the parentheses"
Text:  "<newline>"
Name:  "d"
Other:  ","
Text:  " "
Name:  "e"
Other:  ","
Text:  " "
Name:  "f"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "4"
Other:  ","
Text:  " "
Literal.Number.Integer:  "5"
Other:  ","
Text:  " "
Literal.Number.Integer:  "6"
Text:  " "
Comment:  "# => (4,5,6)"
Text:  "<newline><newline>"
Comment:  "# A 1-element tuple is distinct from the value it contains"
Text:  "<newline>"
Other:  "("
Literal.Number.Integer:  "1"
Other:  ",)"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment:  "# => false"
Text:  "<newline>"
Other:  "("
Literal.Number.Integer:  "1"
Other:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment:  "# => true"
Text:  "<newline><newline>"
Comment:  "# Dictionaries store mappings"
Text:  "<newline>"
Name:  "empty_dict"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "Dict"
Other:  "()"
Text:  " "
Comment:  "# => Dict{Any,Any}()"
Text:  "<newline><newline>"
Comment:  "# You can create a dictionary using a literal"
Text:  "<newline>"
Name:  "filled_dict"
Text:  " "
Operator:  "="
Text:  " "
Other:  "["
Literal.String:  "\"one\""
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "1"
Other:  ","
Text:  " "
Literal.String:  "\"two\""
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "2"
Other:  ","
Text:  " "
Literal.String:  "\"three\""
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "3"
Other:  "]"
Text:  "<newline><newline>"
Comment:  "# Look up values with []"
Text:  "<newline>"
Name:  "filled_dict"
Other:  "["
Literal.String:  "\"one\""
Other:  "]"
Text:  " "
Comment:  "# => 1"
Text:  "<newline><newline>"
Comment:  "# Check for existence of keys in a dictionary with in, haskey"
Text:  "<newline>"
Keyword:  "in"
Other:  "(("
Literal.String:  "\"one\""
Other:  ","
Text:  " "
Literal.Number.Integer:  "1"
Other:  "),"
Text:  " "
Name:  "filled_dict"
Other:  ")"
Text:  " "
Comment:  "# => true"
Text:  "<newline><newline>"
Comment:  "# Initialize a set with values"
Text:  "<newline>"
Name:  "filled_set"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "Set"
Other:  "("
Literal.Number.Integer:  "1"
Other:  ","
Literal.Number.Integer:  "2"
Other:  ","
Literal.Number.Integer:  "2"
Other:  ","
Literal.Number.Integer:  "3"
Other:  ","
Literal.Number.Integer:  "4"
Other:  ")"
Text:  " "
Comment:  "# => Set{Int64}(1,2,3,4)"
Text:  "<newline>"
Name:  "setdiff"
Other:  "("
Keyword.Type:  "Set"
Other:  "("
Literal.Number.Integer:  "1"
Other:  ","
Literal.Number.Integer:  "2"
Other:  ","
Literal.Number.Integer:  "3"
Other:  ","
Literal.Number.Integer:  "4"
Other:  "),"
Keyword.Type:  "Set"
Other:  "("
Literal.Number.Integer:  "2"
Other:  ","
Literal.Number.Integer:  "3"
Other:  ","
Literal.Number.Integer:  "5"
Other:  "))"
Text:  " "
Comment:  "# => Set{Int64}(1,4)"
Text:  "<newline><newline>"
Comment:  "# Here is an if statement. Indentation is not meaningful in Julia."
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Name:  "some_var"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>    "
Name:  "println"
Other:  "("
Literal.String:  "\"some_var is totally bigger than 10.\""
Other:  ")"
Text:  "<newline>"
Keyword:  "elseif"
Text:  " "
Name:  "some_var"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "10"
Text:  "    "
Comment:  "# This elseif clause is optional."
Text:  "<newline>    "
Name:  "println"
Other:  "("
Literal.String:  "\"some_var is smaller than 10.\""
Other:  ")"
Text:  "<newline>"
Keyword:  "else"
Text:  "                    "
Comment:  "# The else clause is optional too."
Text:  "<newline>    "
Name:  "println"
Other:  "("
Literal.String:  "\"some_var is indeed 10.\""
Other:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# For loops iterate over iterables."
Text:  "<newline>"
Keyword:  "for"
Text:  " "
Name:  "animal"
Operator:  "="
Other:  "["
Literal.String:  "\"dog\""
Other:  ","
Text:  " "
Literal.String:  "\"cat\""
Other:  ","
Text:  " "
Literal.String:  "\"mouse\""
Other:  "]"
Text:  "<newline>    "
Name:  "println"
Other:  "("
Literal.String:  "\""
Literal.String.Interpol:  "$"
Literal.String:  "animal is a mammal\""
Other:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "for"
Text:  " "
Name:  "animal"
Text:  " "
Keyword:  "in"
Text:  " "
Other:  "["
Literal.String:  "\"dog\""
Other:  ","
Text:  " "
Literal.String:  "\"cat\""
Other:  ","
Text:  " "
Literal.String:  "\"mouse\""
Other:  "]"
Text:  "<newline>    "
Name:  "println"
Other:  "("
Literal.String:  "\""
Literal.String.Interpol:  "$"
Literal.String:  "animal is a mammal\""
Other:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "for"
Text:  " "
Name:  "a"
Text:  " "
Keyword:  "in"
Text:  " "
Other:  "["
Literal.String:  "\"dog\""
Operator:  "=>"
Literal.String:  "\"mammal\""
Other:  ","
Literal.String:  "\"cat\""
Operator:  "=>"
Literal.String:  "\"mammal\""
Other:  ","
Literal.String:  "\"mouse\""
Operator:  "=>"
Literal.String:  "\"mammal\""
Other:  "]"
Text:  "<newline>    "
Name:  "println"
Other:  "("
Literal.String:  "\""
Literal.String.Interpol:  "$"
Literal.String:  "(a[1]) is a "
Literal.String.Interpol:  "$"
Literal.String:  "(a[2])\""
Other:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "for"
Text:  " "
Other:  "("
Name:  "k"
Other:  ","
Name:  "v"
Other:  ")"
Text:  " "
Keyword:  "in"
Text:  " "
Other:  "["
Literal.String:  "\"dog\""
Operator:  "=>"
Literal.String:  "\"mammal\""
Other:  ","
Literal.String:  "\"cat\""
Operator:  "=>"
Literal.String:  "\"mammal\""
Other:  ","
Literal.String:  "\"mouse\""
Operator:  "=>"
Literal.String:  "\"mammal\""
Other:  "]"
Text:  "<newline>    "
Name:  "println"
Other:  "("
Literal.String:  "\""
Literal.String.Interpol:  "$"
Literal.String:  "k is a "
Literal.String.Interpol:  "$"
Literal.String:  "v\""
Other:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# While loops loop while a condition is true"
Text:  "<newline>"
Keyword:  "while"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "4"
Text:  "<newline>    "
Name:  "x"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "  "
Comment:  "# Shorthand for x = x + 1"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# The keyword 'function' creates new functions"
Text:  "<newline>"
Keyword:  "function"
Name.Function:  " add"
Other:  "("
Name:  "x"
Other:  ","
Text:  " "
Name:  "y"
Other:  ")"
Text:  "<newline>    "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "y"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# You can define functions that take a variable number of"
Text:  "<newline>"
Comment:  "# positional arguments"
Text:  "<newline>"
Keyword:  "function"
Name.Function:  " varargs"
Other:  "("
Name:  "args"
Operator:  "..."
Other:  ")"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "args"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# The ... is called a splat."
Text:  "<newline>"
Keyword.Type:  "Set"
Other:  "(["
Literal.Number.Integer:  "1"
Other:  ","
Literal.Number.Integer:  "2"
Other:  ","
Literal.Number.Integer:  "3"
Other:  "]"
Operator:  "..."
Other:  ")"
Text:  " "
Comment:  "# => Set{Int64}(1,2,3) # this is equivalent to Set(1,2,3)"
Text:  "<newline><newline>"
Comment:  "# You can define functions with optional positional arguments"
Text:  "<newline>"
Keyword:  "function"
Name.Function:  " defaults"
Other:  "("
Name:  "a"
Other:  ","
Name:  "b"
Other:  ","
Name:  "x"
Operator:  "="
Literal.Number.Integer:  "5"
Other:  ","
Name:  "y"
Operator:  "="
Literal.Number.Integer:  "6"
Other:  ")"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.String:  "\""
Literal.String.Interpol:  "$"
Literal.String:  "a "
Literal.String.Interpol:  "$"
Literal.String:  "b and "
Literal.String.Interpol:  "$"
Literal.String:  "x "
Literal.String.Interpol:  "$"
Literal.String:  "y\""
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# You can define functions that take keyword arguments"
Text:  "<newline>"
Keyword:  "function"
Name.Function:  " keyword_args"
Other:  "(;"
Name:  "k1"
Operator:  "="
Literal.Number.Integer:  "4"
Other:  ","
Name:  "name2"
Operator:  "="
Literal.String:  "\"hello\""
Other:  ")"
Text:  " "
Comment:  "# note the ;"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Other:  "["
Literal.String:  "\"k1\""
Operator:  "=>"
Name:  "k1"
Other:  ","
Literal.String:  "\"name2\""
Operator:  "=>"
Name:  "name2"
Other:  "]"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name:  "keyword_args"
Other:  "("
Name:  "name2"
Operator:  "="
Literal.String:  "\"ness\""
Other:  ")"
Text:  " "
Comment:  "# => [\"name2\"=>\"ness\",\"k1\"=>4]"
Text:  "<newline><newline>"
Comment:  "# You can combine all kinds of arguments in the same function"
Text:  "<newline>"
Keyword:  "function"
Name.Function:  " all_the_args"
Other:  "("
Name:  "normal_arg"
Other:  ","
Text:  " "
Name:  "optional_positional_arg"
Operator:  "="
Literal.Number.Integer:  "2"
Other:  ";"
Text:  " "
Name:  "keyword_arg"
Operator:  "="
Literal.String:  "\"foo\""
Other:  ")"
Text:  "<newline>    "
Name:  "println"
Other:  "("
Literal.String:  "\"normal arg: "
Literal.String.Interpol:  "$"
Literal.String:  "normal_arg\""
Other:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name:  "all_the_args"
Other:  "("
Literal.Number.Integer:  "1"
Other:  ","
Text:  " "
Literal.Number.Integer:  "3"
Other:  ","
Text:  " "
Name:  "keyword_arg"
Operator:  "="
Literal.Number.Integer:  "4"
Other:  ")"
Text:  "<newline><newline>"
Comment:  "# Julia has first class functions"
Text:  "<newline>"
Keyword:  "function"
Name.Function:  " create_adder"
Other:  "("
Name:  "x"
Other:  ")"
Text:  "<newline>    "
Name:  "adder"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "function"
Name.Function:  " "
Operator:  "("
Name:  "y"
Other:  ")"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "y"
Text:  "<newline>    "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# This is \"stabby lambda syntax\" for creating anonymous functions"
Text:  "<newline>"
Other:  "("
Name:  "x"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "x"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "2"
Other:  ")("
Literal.Number.Integer:  "3"
Other:  ")"
Text:  " "
Comment:  "# => true"
Text:  "<newline><newline>"
Comment:  "# This function is identical to create_adder implementation above."
Text:  "<newline>"
Keyword:  "function"
Name.Function:  " create_adder"
Other:  "("
Name:  "x"
Other:  ")"
Text:  "<newline>    "
Name:  "y"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "y"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# You can also name the internal function, if you want"
Text:  "<newline>"
Keyword:  "function"
Name.Function:  " create_adder"
Other:  "("
Name:  "x"
Other:  ")"
Text:  "<newline>    "
Keyword:  "function"
Name.Function:  " adder"
Other:  "("
Name:  "y"
Other:  ")"
Text:  "<newline>        "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "y"
Text:  "<newline>    "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# There are built-in higher order functions"
Text:  "<newline>"
Name:  "map"
Other:  "("
Name:  "add_10"
Other:  ","
Text:  " "
Other:  "["
Literal.Number.Integer:  "1"
Other:  ","
Literal.Number.Integer:  "2"
Other:  ","
Literal.Number.Integer:  "3"
Other:  "])"
Text:  " "
Comment:  "# => [11, 12, 13]"
Text:  "<newline>"
Name:  "filter"
Other:  "("
Name:  "x"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "x"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "5"
Other:  ","
Text:  " "
Other:  "["
Literal.Number.Integer:  "3"
Other:  ","
Text:  " "
Literal.Number.Integer:  "4"
Other:  ","
Text:  " "
Literal.Number.Integer:  "5"
Other:  ","
Text:  " "
Literal.Number.Integer:  "6"
Other:  ","
Text:  " "
Literal.Number.Integer:  "7"
Other:  "])"
Text:  " "
Comment:  "# => [6, 7]"
Text:  "<newline><newline>"
Comment:  "# We can use list comprehensions for nicer maps"
Text:  "<newline>"
Other:  "["
Name:  "add_10"
Other:  "("
Name:  "i"
Other:  ")"
Text:  " "
Keyword:  "for"
Text:  " "
Name:  "i"
Operator:  "="
Other:  "["
Literal.Number.Integer:  "1"
Other:  ","
Text:  " "
Literal.Number.Integer:  "2"
Other:  ","
Text:  " "
Literal.Number.Integer:  "3"
Other:  "]]"
Text:  " "
Comment:  "# => [11, 12, 13]"
Text:  "<newline>"
Other:  "["
Name:  "add_10"
Other:  "("
Name:  "i"
Other:  ")"
Text:  " "
Keyword:  "for"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Other:  "["
Literal.Number.Integer:  "1"
Other:  ","
Text:  " "
Literal.Number.Integer:  "2"
Other:  ","
Text:  " "
Literal.Number.Integer:  "3"
Other:  "]]"
Text:  " "
Comment:  "# => [11, 12, 13]"
Text:  "<newline><newline>"
Comment:  "# Julia has a type system."
Text:  "<newline>"
Name:  "typeof"
Other:  "("
Literal.Number.Integer:  "5"
Other:  ")"
Text:  " "
Comment:  "# => Int64"
Text:  "<newline><newline>"
Comment:  "# Types are first-class values"
Text:  "<newline>"
Name:  "typeof"
Other:  "("
Keyword.Type:  "Int64"
Other:  ")"
Text:  " "
Comment:  "# => DataType"
Text:  "<newline>"
Name:  "typeof"
Other:  "("
Keyword.Type:  "DataType"
Other:  ")"
Text:  " "
Comment:  "# => DataType"
Text:  "<newline><newline>"
Comment:  "# Types are used for documentation, optimizations, and dispatch."
Text:  "<newline>"
Name:  "type"
Text:  " "
Name:  "Tiger"
Text:  "<newline>  "
Name:  "taillength"
Operator:  "::"
Keyword.Type:  "Float64"
Text:  "<newline>  "
Name:  "coatcolor"
Text:  " "
Comment:  "# not including a type annotation is the same as `::Any`"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# abstract Name"
Text:  "<newline>"
Name:  "abstract"
Text:  " "
Name:  "Cat"
Text:  " "
Comment:  "# just a name and point in the type hierarchy"
Text:  "<newline><newline>"
Name:  "super"
Other:  "("
Keyword.Type:  "Int64"
Other:  ")"
Text:  " "
Comment:  "# => Signed"
Text:  "<newline>"
Name:  "super"
Other:  "("
Name:  "super"
Other:  "("
Keyword.Type:  "Signed"
Other:  "))"
Text:  " "
Comment:  "# => Number"
Text:  "<newline><newline>"
Comment:  "# <: is the subtyping operator"
Text:  "<newline>"
Name:  "type"
Text:  " "
Name:  "Lion"
Text:  " "
Operator:  "<:"
Text:  " "
Name:  "Cat"
Text:  " "
Comment:  "# Lion is a subtype of Cat"
Text:  "<newline>  "
Name:  "mane_color"
Text:  "<newline>  "
Name:  "roar"
Operator:  "::"
Keyword.Type:  "AbstractString"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# You can define more constructors for your type"
Text:  "<newline>"
Name:  "Lion"
Other:  "("
Name:  "roar"
Operator:  "::"
Keyword.Type:  "AbstractString"
Other:  ")"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Lion"
Other:  "("
Literal.String:  "\"green\""
Other:  ","
Name:  "roar"
Other:  ")"
Text:  "<newline><newline>"
Name:  "type"
Text:  " "
Name:  "Panther"
Text:  " "
Operator:  "<:"
Text:  " "
Name:  "Cat"
Text:  " "
Comment:  "# Panther is also a subtype of Cat"
Text:  "<newline>  "
Name:  "eye_color"
Text:  "<newline>  "
Name:  "Panther"
Other:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "new"
Other:  "("
Literal.String:  "\"green\""
Other:  ")"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# Definitions for Lion, Panther, Tiger"
Text:  "<newline>"
Keyword:  "function"
Name.Function:  " meow"
Other:  "("
Name:  "animal"
Operator:  "::"
Name:  "Lion"
Other:  ")"
Text:  "<newline>  "
Name:  "animal"
Operator:  "."
Name:  "roar"
Text:  " "
Comment:  "# access type properties using dot notation"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "mutable struct"
Name.Class:  " Foo"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment:  "# Code samples adapted from \"Learn Julia in Y Minutes\".  \"Learn Julia in Y"
Text:  "<newline>"
Comment:  "# Minutes\" is copyright Leah Hanson, and the original can be found at"
Text:  "<newline>"
Comment:  "# http://learnxinyminutes.com/docs/files/learnjulia.jl or"
Text:  "<newline>"
Comment:  "# https://github.com/adambard/learnxinyminutes-docs/blob/master/julia.html.markdown"
Text:  "<newline>"
Comment:  "#"
Text:  "<newline>"
Comment:  "# The use of \"Learn Julia in Y Minutes\" here in no way denotes endorsement by"
Text:  "<newline>"
Comment:  "# the author."
Text:  "<newline>"
Comment:  "#"
Text:  "<newline>"
Comment:  "# \"Learn Julia in Y Minutes\" is licensed under http://creativecommons.org/licenses/by-sa/3.0/legalcode"
Text:  "<newline><newline>"
Comment:  "# Unicode example"
Text:  "<newline>"
Keyword:  "mutable struct"
Name.Class:  " \u0152uvre"
Text:  " "
Keyword:  "end"
Text:  "<newline>"
Name:  "\u21F5"
Text:  " "
Operator:  "="
Text:  " "
Name:  "uppercase"
Text:  "<newline><newline>"
Keyword:  "function"
Name.Function:  " r\u00E9sumer_\u0153uvre"
Other:  "("
Name:  "\u4E66\u540D"
Operator:  "::"
Name:  "\u0152uvre"
Operator:  "="
Literal.String:  "\"Les Mis\u00E9rables\""
Other:  ")"
Text:  "<newline>    "
Name:  "\u8BED\u8A00"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"fran\u00E7ais\""
Text:  "<newline>    "
Keyword:  "for"
Text:  " "
Name:  "\u03D5"
Text:  " "
Name:  "\u2208"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ":"
Literal.Number.Integer:  "1"
Text:  "<newline>        "
Name:  "\u21F5"
Other:  "("
Name:  "\u8BED\u8A00"
Other:  ")"
Text:  " "
Comment:  "# \"FRAN\u00C7AIS\""
Text:  "<newline>    "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline>"
