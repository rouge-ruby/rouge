Comment.Multiline:  "/**<newline> * Nested<newline> /**<newline>  * Comments<newline>  */<newline>*/"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline> * This is a straightforward implementation of The Game of Life<newline> * See http://en.wikipedia.org/wiki/Conway's_Game_of_Life<newline> */"
Text:  "<newline>"
Keyword:  "package"
Text:  " "
Name.Namespace:  "life"
Text:  "<newline><newline>"
Comment.Multiline:  "/*<newline> * A field where cells live. Effectively immutable<newline> */"
Text:  "<newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "Field"
Punctuation:  "("
Text:  "<newline>        "
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "width"
Punctuation:  ":"
Text:  " "
Name.Class:  "Int"
Punctuation:  ","
Text:  "<newline>        "
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "height"
Punctuation:  ":"
Text:  " "
Name.Class:  "Int"
Punctuation:  ","
Text:  "<newline>        "
Comment.Single:  "// This function tells the constructor which cells are alive"
Text:  "<newline>        "
Comment.Single:  "// if init(i, j) is true, the cell (i, j) is alive"
Text:  "<newline>        "
Name:  "init"
Punctuation:  ":"
Text:  " "
Punctuation:  "("
Name.Class:  "Int"
Punctuation:  ","
Text:  " "
Name.Class:  "Int"
Punctuation:  ")"
Text:  " "
Punctuation:  "->"
Text:  " "
Name.Class:  "Boolean"
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "private"
Text:  " "
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "live"
Punctuation:  ":"
Text:  " "
Name.Class:  "Array"
Punctuation:  "<"
Name.Class:  "Array"
Punctuation:  "<"
Name.Class:  "Boolean"
Punctuation:  ">>"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Class:  "Array"
Punctuation:  "("
Name:  "height"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "->"
Text:  " "
Name.Class:  "Array"
Punctuation:  "("
Name:  "width"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "->"
Text:  " "
Name.Function:  "init"
Punctuation:  "("
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "j"
Punctuation:  ")"
Text:  " "
Punctuation:  "}"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword:  "private"
Text:  " "
Keyword:  "fun"
Text:  " "
Name.Function:  "liveCount"
Punctuation:  "("
Name:  "i"
Punctuation:  ":"
Text:  " "
Name.Class:  "Int"
Punctuation:  ","
Text:  " "
Name:  "j"
Punctuation:  ":"
Text:  " "
Name.Class:  "Int"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "="
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "0"
Operator:  ".."
Name:  "height"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "&&"
Text:  "<newline>            "
Name:  "j"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "0"
Operator:  ".."
Name:  "width"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "&&"
Text:  "<newline>            "
Name:  "live"
Punctuation:  "["
Name:  "i"
Punctuation:  "]["
Name:  "j"
Punctuation:  "])"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "else"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline><newline>    "
Comment.Single:  "// How many neighbors of (i, j) are alive?"
Text:  "<newline>    "
Keyword:  "fun"
Text:  " "
Name.Function:  "liveNeighbors"
Punctuation:  "("
Name:  "i"
Punctuation:  ":"
Text:  " "
Name.Class:  "Int"
Punctuation:  ","
Text:  " "
Name:  "j"
Punctuation:  ":"
Text:  " "
Name.Class:  "Int"
Punctuation:  ")"
Text:  " "
Punctuation:  "="
Text:  "<newline>            "
Name.Function:  "liveCount"
Punctuation:  "("
Name:  "i"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Punctuation:  "+"
Text:  "<newline>                    "
Name.Function:  "liveCount"
Punctuation:  "("
Name:  "i"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "j"
Punctuation:  ")"
Text:  " "
Punctuation:  "+"
Text:  "<newline>                    "
Name.Function:  "liveCount"
Punctuation:  "("
Name:  "i"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Punctuation:  "+"
Text:  "<newline>                    "
Name.Function:  "liveCount"
Punctuation:  "("
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Punctuation:  "+"
Text:  "<newline>                    "
Name.Function:  "liveCount"
Punctuation:  "("
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Punctuation:  "+"
Text:  "<newline>                    "
Name.Function:  "liveCount"
Punctuation:  "("
Name:  "i"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Punctuation:  "+"
Text:  "<newline>                    "
Name.Function:  "liveCount"
Punctuation:  "("
Name:  "i"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "j"
Punctuation:  ")"
Text:  " "
Punctuation:  "+"
Text:  "<newline>                    "
Name.Function:  "liveCount"
Punctuation:  "("
Name:  "i"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline><newline>    "
Comment.Single:  "// You can say field[i, j], and this function gets called"
Text:  "<newline>    "
Keyword:  "operator"
Text:  " "
Keyword:  "fun"
Text:  " "
Name.Function:  "get"
Punctuation:  "("
Name:  "i"
Punctuation:  ":"
Text:  " "
Name.Class:  "Int"
Punctuation:  ","
Text:  " "
Name:  "j"
Punctuation:  ":"
Text:  " "
Name.Class:  "Int"
Punctuation:  ")"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "live"
Punctuation:  "["
Name:  "i"
Punctuation:  "]["
Name:  "j"
Punctuation:  "]"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline> * This function takes the present state of the field<newline> * and returns a new field representing the next moment of time<newline> */"
Text:  "<newline>"
Keyword:  "fun"
Text:  " "
Name.Function:  "next"
Punctuation:  "("
Name:  "field"
Punctuation:  ":"
Text:  " "
Name.Class:  "Field"
Punctuation:  "):"
Text:  " "
Name.Class:  "Field"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Class:  "Field"
Punctuation:  "("
Name:  "field"
Punctuation:  "."
Name:  "width"
Punctuation:  ","
Text:  " "
Name:  "field"
Punctuation:  "."
Name:  "height"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "->"
Text:  "<newline>        "
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "n"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "field"
Punctuation:  "."
Name.Function:  "liveNeighbors"
Punctuation:  "("
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "j"
Punctuation:  ")"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "field"
Punctuation:  "["
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "j"
Punctuation:  "])"
Text:  "<newline>        "
Comment.Single:  "// (i, j) is alive"
Text:  "<newline>            "
Name:  "n"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "2"
Operator:  ".."
Literal.Number.Integer:  "3"
Text:  " "
Comment.Single:  "// It remains alive iff it has 2 or 3 neighbors"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>        "
Comment.Single:  "// (i, j) is dead"
Text:  "<newline>            "
Name:  "n"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Comment.Single:  "// A new cell is born if there are 3 neighbors alive"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name:  "`maven-publish-plugin`"
Text:  "<newline><newline>"
Comment.Multiline:  "/** A few colony examples here */"
Text:  "<newline>"
Keyword:  "fun"
Text:  " "
Name.Function:  "main"
Punctuation:  "("
Name:  "args"
Punctuation:  ":"
Text:  " "
Name.Class:  "Array"
Punctuation:  "<"
Name.Class:  "String"
Punctuation:  ">)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// Simplistic demo"
Text:  "<newline>    "
Name.Function:  "runGameOfLife"
Punctuation:  "("
Literal.String:  "\"***\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  "<newline>    "
Comment.Single:  "// \"Star burst\""
Text:  "<newline>    "
Name.Function:  "runGameOfLife"
Punctuation:  "("
Literal.String:  "\"\"\"<newline>        _______<newline>        ___*___<newline>        __***__<newline>        ___*___<newline>        _______<newline>    \"\"\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ")"
Text:  "<newline>    "
Comment.Single:  "// Stable colony"
Text:  "<newline>    "
Name.Function:  "runGameOfLife"
Punctuation:  "("
Literal.String:  "\"\"\"<newline>        _____<newline>        __*__<newline>        _*_*_<newline>        __*__<newline>        _____<newline>    \"\"\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  "<newline>    "
Comment.Single:  "// Stable from the step 2"
Text:  "<newline>    "
Name.Function:  "runGameOfLife"
Punctuation:  "("
Literal.String:  "\"\"\"<newline>        __**__<newline>        __**__<newline>        __**__<newline>    \"\"\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  "<newline>    "
Comment.Single:  "// Oscillating colony"
Text:  "<newline>    "
Name.Function:  "runGameOfLife"
Punctuation:  "("
Literal.String:  "\"\"\"<newline>        __**____<newline>        __**____<newline>        ____**__<newline>        ____**__<newline>    \"\"\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "6"
Punctuation:  ")"
Text:  "<newline>    "
Comment.Single:  "// A fancier oscillating colony"
Text:  "<newline>    "
Name.Function:  "runGameOfLife"
Punctuation:  "("
Literal.String:  "\"\"\"<newline>        -------------------<newline>        -------***---***---<newline>        -------------------<newline>        -----*----*-*----*-<newline>        -----*----*-*----*-<newline>        -----*----*-*----*-<newline>        -------***---***---<newline>        -------------------<newline>        -------***---***---<newline>        -----*----*-*----*-<newline>        -----*----*-*----*-<newline>        -----*----*-*----*-<newline>        -------------------<newline>        -------***---***---<newline>        -------------------<newline>    \"\"\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "data class"
Text:  " "
Name.Class:  "Point"
Punctuation:  "("
Name:  "x"
Punctuation:  ":"
Text:  " "
Name.Class:  "Float"
Punctuation:  ","
Text:  " "
Name:  "y"
Punctuation:  ":"
Text:  " "
Name.Class:  "Float"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "ExampleChild"
Punctuation:  "("
Name:  "x"
Punctuation:  ":"
Text:  " "
Name.Class:  "Int"
Punctuation:  "):"
Text:  " "
Name.Class:  "Parent"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "fun"
Text:  " "
Name.Function:  "something"
Punctuation:  "():"
Text:  " "
Name.Class:  "Thing"
Punctuation:  "<"
Name.Class:  "MyType"
Punctuation:  ">"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "thisThing"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Class:  "OtherThing"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name.Class:  "Thing"
Punctuation:  "<"
Name.Class:  "MyType"
Punctuation:  ">()"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// UTILITIES"
Text:  "<newline><newline>"
Keyword:  "fun"
Text:  " "
Name.Function:  "runGameOfLife"
Punctuation:  "("
Name:  "fieldText"
Punctuation:  ":"
Text:  " "
Name.Class:  "String"
Punctuation:  ","
Text:  " "
Name:  "steps"
Punctuation:  ":"
Text:  " "
Name.Class:  "Int"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "var"
Text:  " "
Name.Property:  "field"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Function:  "makeField"
Punctuation:  "("
Name:  "fieldText"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "step"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ".."
Name:  "steps"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Function:  "println"
Punctuation:  "("
Literal.String:  "\"Step: $step\""
Punctuation:  ")"
Text:  "<newline>        "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "0"
Operator:  ".."
Name:  "field"
Punctuation:  "."
Name:  "height"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "j"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "0"
Operator:  ".."
Name:  "field"
Punctuation:  "."
Name:  "width"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                "
Name.Function:  "print"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "field"
Punctuation:  "["
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "j"
Punctuation:  "])"
Text:  " "
Literal.String:  "\"*\""
Text:  " "
Keyword:  "else"
Text:  " "
Literal.String:  "\" \""
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>            "
Name.Function:  "println"
Punctuation:  "("
Literal.String:  "\"\""
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Name:  "field"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Function:  "next"
Punctuation:  "("
Name:  "field"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fun"
Text:  " "
Name.Function:  "makeField"
Punctuation:  "("
Name:  "s"
Punctuation:  ":"
Text:  " "
Name.Class:  "String"
Punctuation:  "):"
Text:  " "
Name.Class:  "Field"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "lines"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "s"
Punctuation:  "."
Name.Function:  "replace"
Punctuation:  "("
Literal.String:  "\" \""
Punctuation:  ","
Text:  " "
Literal.String:  "\"\""
Punctuation:  ")."
Name.Function:  "split"
Punctuation:  "("
Literal.String.Char:  "'<newline>'"
Punctuation:  ")."
Name.Function:  "filter"
Punctuation:  "({"
Text:  " "
Name:  "it"
Punctuation:  "."
Name.Function:  "isNotEmpty"
Punctuation:  "()"
Text:  " "
Punctuation:  "})"
Text:  "<newline>    "
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "longestLine"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "lines"
Punctuation:  "."
Name.Function:  "toList"
Punctuation:  "()."
Name.Function:  "maxBy"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "it"
Punctuation:  "."
Name:  "length"
Text:  " "
Punctuation:  "}"
Text:  " "
Operator:  "?:"
Text:  " "
Literal.String:  "\"\""
Text:  "<newline><newline>    "
Keyword:  "return"
Text:  " "
Name.Class:  "Field"
Punctuation:  "("
Name:  "longestLine"
Punctuation:  "."
Name:  "length"
Punctuation:  ","
Text:  " "
Name:  "lines"
Punctuation:  "."
Name:  "size"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "->"
Text:  " "
Name:  "lines"
Punctuation:  "["
Name:  "i"
Punctuation:  "]["
Name:  "j"
Punctuation:  "]"
Text:  " "
Punctuation:  "=="
Text:  " "
Literal.String.Char:  "'*'"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fun"
Text:  " "
Name.Function:  "`backtickedFunction`"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fun"
Text:  " "
Punctuation:  "<"
Name.Class:  "T"
Punctuation:  ","
Text:  " "
Name.Class:  "V"
Punctuation:  ">"
Text:  " "
Name.Function:  "genericFunction"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fun"
Text:  " "
Name.Class:  "String"
Punctuation:  "."
Name.Function:  "extensionFunction"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fun"
Text:  " "
Name.Class:  "`String`"
Punctuation:  "."
Name.Function:  "`backTickedExtensionFunction`"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fun"
Text:  " "
Punctuation:  "<"
Name.Class:  "T"
Punctuation:  ","
Text:  " "
Name.Class:  "V"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Class:  "Comparable"
Punctuation:  ">"
Text:  " "
Name.Class:  "String"
Punctuation:  "."
Name.Function:  "genericExtensionFunction"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fun"
Text:  " "
Name.Function:  "foo"
Punctuation:  "("
Name:  "supersedingStuff"
Punctuation:  ":"
Text:  " "
Name.Class:  "List"
Punctuation:  "<"
Name.Class:  "String"
Punctuation:  ">):"
Text:  " "
Name.Class:  "List"
Punctuation:  "<"
Name.Class:  "String"
Punctuation:  ">"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "supersedingStuff"
Punctuation:  "."
Name.Function:  "map"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "it"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "inline"
Text:  " "
Keyword:  "fun"
Text:  " "
Punctuation:  "<"
Keyword:  "reified"
Text:  " "
Name.Class:  "T"
Punctuation:  ">"
Text:  " "
Name.Function:  "membersOf"
Punctuation:  "()"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Class:  "T"
Operator:  "::"
Keyword:  "class"
Punctuation:  "."
Name:  "members"
Text:  "<newline>"
Keyword:  "public"
Text:  " "
Keyword.Declaration:  "interface"
Text:  " "
Name.Class:  "List"
Punctuation:  "<"
Keyword:  "out"
Text:  " "
Name.Class:  "E"
Punctuation:  ">"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Class:  "Collection"
Punctuation:  "<"
Name.Class:  "E"
Punctuation:  ">"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>"
Keyword:  "public"
Text:  " "
Keyword.Declaration:  "interface"
Text:  " "
Name.Class:  "Comparable"
Punctuation:  "<"
Keyword:  "in"
Text:  " "
Name.Class:  "T"
Punctuation:  ">"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>"
Name.Decorator:  "@Deprecated"
Punctuation:  "("
Literal.String:  "\"This is an annotation\""
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "fun"
Text:  " "
Name.Function:  "anAnnotatedFunction"
Punctuation:  "()"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "val"
Text:  " "
Punctuation:  "("
Name.Property:  "a"
Punctuation:  ","
Text:  " "
Name.Property:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "pair"
Text:  "<newline><newline>"
Name.Decorator:  "loop@"
Text:  " "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ".."
Literal.Number.Integer:  "100"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "j"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ".."
Literal.Number.Integer:  "100"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Operator:  ".."
Punctuation:  ".)"
Text:  " "
Keyword:  "break"
Name.Decorator:  "@loop"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "ints"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Function:  "listOf"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4_20"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "100L"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "123_345_678U"
Punctuation:  ")"
Text:  "<newline>"
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "bins"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Function:  "listOf"
Punctuation:  "("
Literal.Number.Bin:  "0b1"
Punctuation:  ","
Text:  " "
Literal.Number.Bin:  "0B0"
Punctuation:  ","
Text:  " "
Literal.Number.Bin:  "0b10_10_01"
Punctuation:  ","
Text:  " "
Literal.Number.Bin:  "0b10U"
Punctuation:  ","
Text:  " "
Literal.Number.Bin:  "0b10uL"
Punctuation:  ")"
Text:  "<newline>"
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "hexes"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Function:  "listOf"
Punctuation:  "("
Literal.Number.Hex:  "0xFF"
Punctuation:  ","
Text:  " "
Literal.Number.Hex:  "0Xa"
Punctuation:  ","
Text:  " "
Literal.Number.Hex:  "0x10L"
Punctuation:  ","
Text:  " "
Literal.Number.Hex:  "0X0UL"
Punctuation:  ")"
Text:  "<newline>"
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "exponents"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Function:  "listOf"
Punctuation:  "("
Literal.Number.Float:  "1e10"
Punctuation:  ","
Text:  " "
Punctuation:  "-"
Literal.Number.Float:  "1E10F"
Punctuation:  ","
Text:  " "
Literal.Number.Float:  "1.5e10"
Punctuation:  ","
Text:  " "
Literal.Number.Float:  "1e-10"
Punctuation:  ")"
Text:  "<newline>"
Keyword.Declaration:  "val"
Text:  " "
Name.Property:  "doublesAndFloats"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Function:  "listOf"
Punctuation:  "("
Literal.Number.Float:  "3.14"
Punctuation:  ","
Text:  " "
Literal.Number.Float:  ".99"
Punctuation:  ","
Text:  " "
Literal.Number.Float:  "22f"
Punctuation:  ","
Text:  " "
Literal.Number.Float:  "1_000.000_1"
Punctuation:  ","
Text:  " "
Literal.Number.Float:  "19.95F"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "// The ? is not an error #1760"
Text:  "<newline>"
Keyword:  "fun"
Text:  " "
Punctuation:  "<"
Name.Class:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Class:  "Any"
Punctuation:  ">"
Text:  " "
Name.Function:  "foo"
Punctuation:  "("
Name:  "a"
Punctuation:  ":"
Text:  " "
Name.Class:  "Array"
Punctuation:  "<"
Name.Class:  "T"
Punctuation:  "?>):"
Text:  " "
Name.Class:  "Int"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "a"
Punctuation:  "."
Name:  "size"
Text:  "<newline><newline>"
Comment.Single:  "// The < is not an error #1760"
Text:  "<newline>"
Keyword.Declaration:  "val"
Text:  " "
Punctuation:  "<"
Name.Class:  "T"
Punctuation:  ">"
Text:  " "
Name.Property:  "T"
Punctuation:  "."
Name:  "exhaustive"
Text:  " "
Keyword:  "get"
Punctuation:  "()"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "this"
Text:  "<newline><newline>"
Comment.Single:  "// The . in Map.Entry is not an error #1760"
Text:  "<newline>"
Keyword:  "fun"
Text:  " "
Name.Function:  "foo"
Punctuation:  "("
Name:  "props"
Punctuation:  ":"
Text:  " "
Name.Class:  "Iterable"
Punctuation:  "<"
Name.Class:  "Map"
Punctuation:  "."
Name.Class:  "Entry"
Punctuation:  "<"
Name.Class:  "String"
Punctuation:  ","
Text:  " "
Name.Class:  "JsonNode"
Punctuation:  ">>)"
Text:  " "
Punctuation:  "="
Text:  "<newline>    "
Name.Class:  "TODO"
Punctuation:  "()"
Text:  "<newline><newline>"
Comment.Single:  "// comment at EOF (#797)"
Text:  "<newline>"
