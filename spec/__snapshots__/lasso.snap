Comment.Preproc:  "<?LassoScript"
Text:  "<newline>"
Comment.Multiline:  "/* Lasso 8 */"
Text:  "<newline>  "
Keyword.Declaration:  "local"
Punctuation:  "("
Literal.String.Single:  "'query'"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'SELECT * FROM `'"
Operator:  "+"
Keyword.Declaration:  "var"
Punctuation:  ":"
Literal.String.Single:  "'table'"
Operator:  "+"
Literal.String.Single:  "'` WHERE `id` > 10<newline>    ORDER BY `Name` LIMIT 30'"
Punctuation:  ");"
Text:  "<newline>  "
Keyword:  "Inline"
Punctuation:  ":"
Text:  " "
Name.Attribute:  "-Username"
Operator:  "="
Name.Variable:  "$DBuser"
Punctuation:  ","
Text:  " "
Name.Attribute:  "-Password"
Operator:  "="
Name.Variable:  "$DBpass"
Punctuation:  ","
Text:  " "
Name.Attribute:  "-Database"
Operator:  "="
Name.Variable:  "$DBname"
Punctuation:  ","
Text:  " "
Name.Attribute:  "-sql"
Operator:  "="
Name.Variable.Instance:  "#query"
Punctuation:  ";"
Text:  "<newline>    "
Keyword.Declaration:  "var"
Punctuation:  "("
Literal.String.Double:  "\"class1.name\""
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name.Builtin:  "found_count"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "?"
Text:  " "
Literal.String.Double:  "\"subtotal\""
Text:  " "
Operator:  "|"
Text:  " "
Literal.String.Double:  "\"nonefound\""
Punctuation:  "),"
Text:  "<newline>        "
Literal.String.Double:  "\"total_amount\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "found_count"
Text:  " "
Operator:  "||"
Text:  " "
Literal.String.Double:  "\"No results\""
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "records"
Punctuation:  ";"
Text:  "<newline>      "
Name.Builtin:  "output"
Punctuation:  ":"
Text:  " "
Literal.String.Double:  "\"<tr>\""
Keyword:  "loop_count"
Literal.String.Double:  "\"</tr>\""
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "/"
Keyword:  "records"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "/"
Keyword:  "Inline"
Punctuation:  ";"
Text:  "<newline>"
Comment.Preproc:  "?>"
Name.Tag:  "<div"
Text:  " "
Name.Attribute:  "class="
Literal.String:  "\""
Comment.Preproc:  "["
Name.Variable:  "$class1.name"
Comment.Preproc:  "]"
Literal.String:  "\""
Name.Tag:  ">"
Comment.Preproc:  "["
Name.Variable:  "$total_amount"
Comment.Preproc:  "]"
Name.Tag:  "</div>"
Text:  "<newline>"
Comment.Preproc:  "<?lasso"
Text:  "<newline>"
Comment.Multiline:  "/* Lasso 9 */"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline>"
Comment.Preproc:  "[noprocess]"
Text:  " causes [delimiters] to be "
Comment.Preproc:  "<?=skipped?>"
Text:  " until the next "
Comment.Preproc:  "[/noprocess]"
Text:  "<newline>"
Comment.Preproc:  "["
Text:  "<newline>  "
Keyword.Declaration:  "define"
Text:  " "
Name.Function:  "strings.combine"
Punctuation:  "("
Name.Attribute:  "value"
Name.Label:  "::string"
Punctuation:  ","
Text:  " "
Name.Builtin.Pseudo:  "..."
Name.Attribute:  "other"
Punctuation:  ")"
Name.Label:  "::string"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "local"
Punctuation:  "("
Name:  "result"
Operator:  " ="
Text:  " "
Name.Variable.Instance:  "#value"
Operator:  "->"
Name.Other:  "append"
Punctuation:  "("
Name.Variable.Instance:  "#other"
Operator:  "->"
Name.Other:  "asString"
Operator:  "&"
Name.Other:  "trim"
Punctuation:  "))"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Keyword.Type:  "set"
Punctuation:  "("
Name.Variable.Instance:  "#result"
Punctuation:  ","
Text:  " "
Operator.Word:  "not"
Text:  " "
Name.Variable.Instance:  "#other"
Punctuation:  ","
Text:  " "
Operator:  "\\"
Name.Builtin.Pseudo:  "givenBlock"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Comment.Doc:  "/**! descriptive text */"
Text:  "<newline>  "
Keyword.Declaration:  "define"
Text:  " "
Name.Class:  "person"
Operator:  " => "
Keyword:  "type"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "parent"
Text:  " "
Name.Other:  "entity"
Text:  "<newline>    "
Keyword.Declaration:  "data"
Text:  " "
Name.Other:  "name"
Name.Label:  "::string"
Punctuation:  ","
Text:  " "
Keyword:  "protected"
Text:  " "
Name.Function:  "nickname"
Punctuation:  ","
Text:  " "
Name.Other:  "birthdate"
Text:  " "
Name.Label:  ":: date"
Text:  "<newline>    "
Keyword.Declaration:  "data"
Text:  " "
Keyword:  "private"
Text:  " "
Name.Function:  "ssn"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "null"
Text:  "<newline>    "
Keyword:  "private"
Text:  " "
Name.Function:  "showAge"
Punctuation:  "()"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword:  "frozen"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name.Builtin.Pseudo:  ".."
Name.Other:  "age"
Text:  " "
Punctuation:  "}"
Text:  "<newline>    "
Keyword:  "protected"
Text:  " "
Name.Function:  "fullName"
Punctuation:  "()"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Backtick:  "`\"`"
Text:  " "
Operator:  "+"
Text:  " "
Name.Builtin.Pseudo:  "."
Name.Other:  "nickname"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Backtick:  "`\"`"
Text:  " "
Operator:  "+"
Text:  " "
Name.Builtin.Pseudo:  "."
Name.Variable.Class:  "'name'"
Text:  "<newline>    "
Keyword:  "public"
Text:  " "
Name.Function:  "ssnListed"
Name.Label:  "::boolean"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Builtin.Pseudo:  "."
Name.Other:  "ssn"
Punctuation:  "()"
Text:  " "
Operator:  "?"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Operator:  "|"
Text:  " "
Keyword.Constant:  "false"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Keyword.Declaration:  "define"
Text:  " "
Name.Class:  "person"
Operator:  "->"
Name.Function:  "name="
Punctuation:  "("
Name.Attribute:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Builtin.Pseudo:  "."
Name.Variable.Class:  "'name'"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "#value"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Builtin.Pseudo:  "self"
Operator:  "->"
Name.Variable.Class:  "'name'"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Keyword.Declaration:  "define"
Text:  " "
Name.Class:  "bytes"
Operator:  "->"
Name.Function:  "+"
Punctuation:  "("
Name.Attribute:  "rhs"
Name.Label:  "::bytes"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "bytes"
Punctuation:  "("
Name.Builtin.Pseudo:  "self"
Punctuation:  ")"
Operator:  "->"
Name.Other:  "append"
Punctuation:  "("
Name.Variable.Instance:  "#rhs"
Punctuation:  ")"
Operator:  "&"
Text:  "<newline>"
Comment.Preproc:  "]"
Text:  " "
Comment:  "<!-- an HTML comment <?=disables delimiters?> as well -->"
Text:  "<newline>"
Comment.Preproc:  "[no_square_brackets]"
Text:  " disables [square brackets] for the rest of the file<newline>"
Comment.Preproc:  "<?="
Text:  "<newline>  "
Comment.Single:  "// query expression<newline>"
Text:  "  "
Keyword:  "with"
Text:  " "
Name:  "n"
Text:  " "
Keyword:  "in"
Text:  " "
Keyword.Type:  "array"
Punctuation:  "((:"
Operator:  "-"
Literal.Number.Integer:  "12"
Punctuation:  ","
Text:  " "
Literal.Number.Hex:  "0xABCD"
Punctuation:  ","
Text:  " "
Literal.Number.Float:  "3.14159e14"
Punctuation:  "),"
Text:  " "
Punctuation:  "(:"
Literal.Number:  "NaN"
Punctuation:  ","
Text:  " "
Operator:  "-"
Literal.Number:  "infinity"
Punctuation:  ","
Text:  " "
Literal.Number.Float:  ".57721"
Punctuation:  "))"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "swapped"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "pair"
Punctuation:  "("
Name.Variable.Instance:  "#n"
Operator:  "->\\"
Name.Other:  "second"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "#n"
Operator:  "->"
Name.Other:  "first"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "group"
Text:  " "
Name.Variable.Instance:  "#swapped"
Text:  " "
Keyword:  "by"
Text:  " "
Name.Variable.Instance:  "#n"
Operator:  "->"
Name.Other:  "first"
Text:  " "
Keyword:  "into"
Text:  " "
Name:  "t"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "key"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "#t"
Operator:  "->"
Name.Other:  "key"
Text:  "<newline>  "
Keyword:  "order"
Text:  " "
Keyword:  "by"
Text:  " "
Name.Variable.Instance:  "#key"
Text:  "<newline>  "
Keyword:  "select"
Text:  " "
Keyword.Type:  "pair"
Punctuation:  "("
Name.Variable.Instance:  "#key"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "#1"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "do"
Text:  " "
Punctuation:  "{^"
Text:  "<newline>    "
Name.Variable.Instance:  "#n"
Operator:  "->"
Name.Other:  "upperCase"
Text:  "<newline>  "
Punctuation:  "^}"
Text:  "<newline>"
Comment.Preproc:  "?>"
Text:  "<newline>"
