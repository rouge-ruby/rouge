Text:  "The "
Generic.Strong:  "**Scope**"
Text:  " class regulates lexical scoping within CoffeeScript. As you<newline>generate code, you create a tree of scopes in the same shape as the nested<newline>function bodies. Each scope knows about the variables declared within it,<newline>and has a reference to its parent enclosing scope. In this way, we know which<newline>variables are new and need to be declared with "
Literal.String.Backtick:  "`var`"
Text:  ", and which are shared<newline>with external scopes.<newline><newline>Import the helpers we plan to use.<newline><newline>    "
Punctuation:  "{"
Name.Other:  "extend"
Punctuation:  ","
Text:  " "
Name.Other:  "last"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "require"
Text:  " "
Literal.String:  "'./helpers'"
Text:  "<newline><newline>    "
Name.Other:  "exports"
Punctuation:  "."
Name.Attribute:  "Scope"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "class"
Text:  " "
Name.Other:  "Scope"
Text:  "<newline><newline>The "
Literal.String.Backtick:  "`root`"
Text:  " is the top-level "
Generic.Strong:  "**Scope**"
Text:  " object for a given file.<newline><newline>      "
Name.Variable.Instance:  "@"
Name.Attribute:  "root"
Operator:  ":"
Text:  " "
Name.Constant:  "null"
Text:  "<newline><newline>Initialize a scope with its parent, for lookups up the chain,<newline>as well as a reference to the "
Generic.Strong:  "**Block**"
Text:  " node it belongs to, which is<newline>where it should declare its variables, and a reference to the function that<newline>it belongs to.<newline><newline>      "
Name.Attribute:  "constructor"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Variable.Instance:  "@"
Name.Attribute:  "parent"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "expressions"
Punctuation:  ","
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "method"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "variables"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[{"
Name.Attribute:  "name"
Operator:  ":"
Text:  " "
Literal.String:  "'arguments'"
Punctuation:  ","
Text:  " "
Name.Attribute:  "type"
Operator:  ":"
Text:  " "
Literal.String:  "'arguments'"
Punctuation:  "}]"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "positions"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>        "
Name.Other:  "Scope"
Punctuation:  "."
Name.Attribute:  "root"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "this"
Text:  " "
Name.Other:  "unless"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "parent"
Text:  "<newline><newline>Adds a new variable or overrides an existing one.<newline><newline>      "
Name.Attribute:  "add"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Name.Other:  "type"
Punctuation:  ","
Text:  " "
Name.Other:  "immediate"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "parent"
Punctuation:  "."
Name.Attribute:  "add"
Text:  " "
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Name.Other:  "type"
Punctuation:  ","
Text:  " "
Name.Other:  "immediate"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "shared"
Text:  " "
Operator:  "and"
Text:  " "
Operator:  "not"
Text:  " "
Name.Other:  "immediate"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name.Attribute:  "Object"
Operator:  "::"
Name.Other:  "hasOwnProperty"
Punctuation:  "."
Name.Attribute:  "call"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "positions"
Punctuation:  ","
Text:  " "
Name.Other:  "name"
Text:  "<newline>          "
Name.Variable.Instance:  "@"
Name.Attribute:  "variables"
Punctuation:  "["
Name.Variable.Instance:  "@"
Name.Attribute:  "positions"
Punctuation:  "["
Name.Other:  "name"
Punctuation:  "]]."
Name.Attribute:  "type"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "type"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>          "
Name.Variable.Instance:  "@"
Name.Attribute:  "positions"
Punctuation:  "["
Name.Other:  "name"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "variables"
Punctuation:  "."
Name.Attribute:  "push"
Punctuation:  "({"
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Name.Other:  "type"
Punctuation:  "})"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline><newline>When "
Literal.String.Backtick:  "`super`"
Text:  " is called, we need to find the name of the current method we're<newline>in, so that we know how to invoke the same method of the parent class. This<newline>can get complicated if super is being called from an inner function.<newline>"
Literal.String.Backtick:  "`namedMethod`"
Text:  " will walk up the scope tree until it either finds the first<newline>function object that has a name filled in, or bottoms out.<newline><newline>      "
Name.Attribute:  "namedMethod"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "method"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "method"
Punctuation:  "."
Name.Attribute:  "name"
Text:  " "
Operator:  "or"
Text:  " "
Operator:  "!"
Name.Variable.Instance:  "@"
Name.Attribute:  "parent"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "parent"
Punctuation:  "."
Name.Attribute:  "namedMethod"
Punctuation:  "()"
Text:  "<newline><newline>Look up a variable name in lexical scope, and declare it if it does not<newline>already exist.<newline><newline>      "
Name.Attribute:  "find"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "name"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name.Constant:  "yes"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "check"
Text:  " "
Name.Other:  "name"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "add"
Text:  " "
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Literal.String:  "'var'"
Text:  "<newline>        "
Name.Constant:  "no"
Text:  "<newline><newline>Reserve a variable name as originating from a function parameter for this<newline>scope. No "
Literal.String.Backtick:  "`var`"
Text:  " required for internal references.<newline><newline>      "
Name.Attribute:  "parameter"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "name"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "shared"
Text:  " "
Operator:  "and"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "parent"
Punctuation:  "."
Name.Attribute:  "check"
Text:  " "
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Name.Constant:  "yes"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "add"
Text:  " "
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Literal.String:  "'param'"
Text:  "<newline><newline>Just check to see if a variable has already been declared, without reserving,<newline>walks up to the root scope.<newline><newline>      "
Name.Attribute:  "check"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "name"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Operator:  "!!"
Punctuation:  "("
Name.Variable.Instance:  "@"
Name.Attribute:  "type"
Punctuation:  "("
Name.Other:  "name"
Punctuation:  ")"
Text:  " "
Operator:  "or"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "parent"
Operator:  "?"
Punctuation:  "."
Name.Attribute:  "check"
Punctuation:  "("
Name.Other:  "name"
Punctuation:  "))"
Text:  "<newline><newline>Generate a temporary variable name at the given index.<newline><newline>      "
Name.Attribute:  "temporary"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Name.Other:  "index"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name.Other:  "name"
Punctuation:  "."
Name.Attribute:  "length"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>          "
Literal.String:  "'_'"
Text:  " "
Operator:  "+"
Text:  " "
Name.Other:  "name"
Text:  " "
Operator:  "+"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "index"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Other:  "index"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "else"
Text:  " "
Literal.String:  "''"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>          "
Literal.String:  "'_'"
Text:  " "
Operator:  "+"
Text:  " "
Punctuation:  "("
Name.Other:  "index"
Text:  " "
Operator:  "+"
Text:  " "
Name.Builtin:  "parseInt"
Text:  " "
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "36"
Punctuation:  ")."
Name.Attribute:  "toString"
Punctuation:  "("
Literal.Number.Integer:  "36"
Punctuation:  ")."
Name.Attribute:  "replace"
Text:  " "
Literal.String.Regex:  "/\\d/g"
Punctuation:  ","
Text:  " "
Literal.String:  "'a'"
Text:  "<newline><newline>Gets the type of a variable.<newline><newline>      "
Name.Attribute:  "type"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "name"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name.Other:  "v"
Punctuation:  "."
Name.Attribute:  "type"
Text:  " "
Keyword:  "for"
Text:  " "
Name.Other:  "v"
Text:  " "
Operator:  "in"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "variables"
Text:  " "
Keyword:  "when"
Text:  " "
Name.Other:  "v"
Punctuation:  "."
Name.Attribute:  "name"
Text:  " "
Operator:  "is"
Text:  " "
Name.Other:  "name"
Text:  "<newline>        "
Name.Constant:  "null"
Text:  "<newline><newline>If we need to store an intermediate result, find an available name for a<newline>compiler-generated variable. "
Literal.String.Backtick:  "`_var`"
Text:  ", "
Literal.String.Backtick:  "`_var2`"
Text:  ", and so on...<newline><newline>      "
Name.Attribute:  "freeVariable"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Name.Other:  "reserve"
Operator:  "="
Name.Constant:  "true"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Name.Other:  "index"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>        "
Name.Other:  "index"
Operator:  "++"
Text:  " "
Keyword:  "while"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "check"
Punctuation:  "(("
Name.Other:  "temp"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "temporary"
Text:  " "
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Name.Other:  "index"
Punctuation:  "))"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "add"
Text:  " "
Name.Other:  "temp"
Punctuation:  ","
Text:  " "
Literal.String:  "'var'"
Punctuation:  ","
Text:  " "
Name.Constant:  "yes"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Other:  "reserve"
Text:  "<newline>        "
Name.Other:  "temp"
Text:  "<newline><newline>Ensure that an assignment is made at the top of this scope<newline>(or at the top-level scope, if requested).<newline><newline>      "
Name.Attribute:  "assign"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Name.Other:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "add"
Text:  " "
Name.Other:  "name"
Punctuation:  ","
Text:  " "
Punctuation:  "{"
Name.Other:  "value"
Punctuation:  ","
Text:  " "
Name.Attribute:  "assigned"
Operator:  ":"
Text:  " "
Name.Constant:  "yes"
Punctuation:  "},"
Text:  " "
Name.Constant:  "yes"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "hasAssignments"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "yes"
Text:  "<newline><newline>Does this scope have any declared variables?<newline><newline>      "
Name.Attribute:  "hasDeclarations"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Operator:  "!!"
Name.Variable.Instance:  "@"
Name.Attribute:  "declaredVariables"
Punctuation:  "()."
Name.Attribute:  "length"
Text:  "<newline><newline>Return the list of variables first declared in this scope.<newline><newline>      "
Name.Attribute:  "declaredVariables"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Name.Other:  "realVars"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>        "
Name.Other:  "tempVars"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>        "
Keyword:  "for"
Text:  " "
Name.Other:  "v"
Text:  " "
Operator:  "in"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "variables"
Text:  " "
Keyword:  "when"
Text:  " "
Name.Other:  "v"
Punctuation:  "."
Name.Attribute:  "type"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'var'"
Text:  "<newline>          "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Other:  "v"
Punctuation:  "."
Name.Attribute:  "name"
Punctuation:  "."
Name.Attribute:  "charAt"
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'_'"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Other:  "tempVars"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Other:  "realVars"
Punctuation:  ")."
Name.Attribute:  "push"
Text:  " "
Name.Other:  "v"
Punctuation:  "."
Name.Attribute:  "name"
Text:  "<newline>        "
Name.Other:  "realVars"
Punctuation:  "."
Name.Attribute:  "sort"
Punctuation:  "()."
Name.Attribute:  "concat"
Text:  " "
Name.Other:  "tempVars"
Punctuation:  "."
Name.Attribute:  "sort"
Punctuation:  "()"
Text:  "<newline><newline>Return the list of assignments that are supposed to be made at the top<newline>of this scope.<newline><newline>      "
Name.Attribute:  "assignedVariables"
Operator:  ":"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Literal.String:  "\""
Literal.String.Interpol:  "\#{"
Name.Other:  "v"
Punctuation:  "."
Name.Attribute:  "name"
Literal.String.Interpol:  "}"
Literal.String:  " = "
Literal.String.Interpol:  "\#{"
Name.Other:  "v"
Punctuation:  "."
Name.Attribute:  "type"
Punctuation:  "."
Name.Attribute:  "value"
Literal.String.Interpol:  "}"
Literal.String:  "\""
Text:  " "
Keyword:  "for"
Text:  " "
Name.Other:  "v"
Text:  " "
Operator:  "in"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "variables"
Text:  " "
Keyword:  "when"
Text:  " "
Name.Other:  "v"
Punctuation:  "."
Name.Attribute:  "type"
Punctuation:  "."
Name.Attribute:  "assigned"
Text:  "<newline>"
