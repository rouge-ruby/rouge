Name.Variable:  "mitch"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name.Attribute:  "age"
Punctuation:  ":"
Text:  "    "
Literal.Number.Integer:  "21"
Text:  "<newline>    "
Name.Attribute:  "height"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "180cm"
Text:  "<newline>    "
Name.Attribute:  "pets"
Punctuation:  ":"
Text:  "   "
Punctuation:  "["
Literal.String:  "\\dog"
Punctuation:  ","
Text:  " "
Literal.String:  "\\goldfish"
Punctuation:  "]"
Text:  "<newline><newline>"
Name.Variable:  "phile"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>"
Name.Variable:  "phile"
Punctuation:  "{"
Name.Attribute:  "height"
Punctuation:  ","
Text:  " "
Name.Attribute:  "pets"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "mitch"
Text:  "<newline>"
Name.Variable:  "phile"
Punctuation:  "."
Name.Attribute:  "height"
Text:  " "
Comment.Single:  "#=> 180"
Text:  "<newline>"
Name.Variable:  "phile"
Punctuation:  "."
Name.Attribute:  "pets"
Text:  "   "
Comment.Single:  "#=> ['dog', 'goldfish']"
Text:  "<newline><newline>"
Name.Variable:  "a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "2"
Text:  " "
Literal.Number.Integer:  "7"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Literal.Number.Integer:  "8"
Punctuation:  "]"
Text:  "<newline>    "
Punctuation:  ".."
Name.Attribute:  "push"
Text:  " "
Literal.Number.Integer:  "3"
Text:  "<newline>    "
Punctuation:  ".."
Name.Attribute:  "shift"
Punctuation:  "!"
Text:  "<newline>    "
Punctuation:  ".."
Name.Attribute:  "sort"
Punctuation:  "!"
Text:  "<newline>"
Name.Variable:  "a"
Text:  " "
Comment.Single:  "#=> [1,3,7,8]"
Text:  "<newline><newline>"
Comment.Single:  "# Numbers"
Text:  "<newline>"
Keyword.Declaration:  "const"
Text:  " "
Name.Variable:  "PI"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "3.14"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Operator:  "~"
Literal.Number.Integer:  "1000"
Text:  "<newline>"
Literal.Number.Integer:  "16"
Operator:  "~"
Name.Variable:  "ff"
Text:  "<newline>"
Literal.Number.Integer:  "10e-15"
Text:  "<newline>"
Literal.Number.Integer:  "5_000m"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "5km"
Text:  " "
Operator:  "*"
Text:  " "
Literal.Number.Integer:  "1e3m"
Text:  "<newline>"
Literal.Number.Hex:  "0xAAff"
Text:  "<newline><newline>"
Comment.Single:  "# Some operators"
Text:  "<newline>"
Name.Variable:  "n"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "n"
Operator:  "++"
Text:  " "
Operator:  "-"
Text:  " "
Operator:  "++"
Name.Variable:  "n"
Text:  " "
Operator:  "-"
Text:  " "
Name.Variable:  "n"
Operator:  "--"
Text:  " "
Operator:  "+"
Text:  " "
Operator:  "--"
Name.Variable:  "n"
Text:  "<newline><newline>"
Literal.Number.Integer:  "14"
Text:  " "
Operator:  ".&."
Text:  " "
Literal.Number.Integer:  "9"
Text:  "   "
Comment.Single:  "#=> 8"
Text:  "<newline>"
Literal.Number.Integer:  "14"
Text:  " "
Operator:  ".|."
Text:  " "
Literal.Number.Integer:  "9"
Text:  "   "
Comment.Single:  "#=> 15"
Text:  "<newline>"
Literal.Number.Integer:  "14"
Text:  " "
Operator:  ".^."
Text:  " "
Literal.Number.Integer:  "9"
Text:  "   "
Comment.Single:  "#=> 7"
Text:  "<newline>"
Operator:  "~"
Literal.Number.Integer:  "9"
Text:  "         "
Comment.Single:  "#=> -10"
Text:  "<newline>"
Literal.Number.Integer:  "9"
Text:  "  "
Operator:  ".<<."
Text:  " "
Literal.Number.Integer:  "2"
Text:  "  "
Comment.Single:  "#=> 36"
Text:  "<newline>"
Operator:  "-"
Literal.Number.Integer:  "9"
Text:  " "
Operator:  ".>>."
Text:  " "
Literal.Number.Integer:  "2"
Text:  "  "
Comment.Single:  "#=> -3"
Text:  "<newline>"
Operator:  "-"
Literal.Number.Integer:  "9"
Text:  " "
Operator:  ".>>>."
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Comment.Single:  "#=> 1073741821"
Text:  "<newline><newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "4"
Text:  "<newline>"
Literal.Number.Integer:  "9"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "7"
Text:  "<newline>"
Literal.Number.Integer:  "8"
Text:  " "
Operator:  "<="
Text:  " "
Literal.Number.Integer:  "8"
Text:  "<newline>"
Literal.Number.Integer:  "7"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "8"
Text:  "<newline><newline>"
Literal.Number.Integer:  "4"
Text:  " "
Operator:  ">?"
Text:  " "
Literal.Number.Integer:  "8"
Text:  "     "
Comment.Single:  "#=> 8"
Text:  "<newline>"
Literal.Number.Integer:  "9"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Operator:  "<?"
Text:  " "
Literal.Number.Integer:  "6"
Text:  " "
Comment.Single:  "#=> 4"
Text:  "<newline><newline>"
Name.Constant:  "on"
Text:  " "
Operator:  "and"
Text:  " "
Name.Constant:  "off"
Text:  "<newline>"
Name.Constant:  "on"
Text:  " "
Operator:  "&&"
Text:  " "
Name.Constant:  "off"
Text:  "<newline><newline>"
Name.Constant:  "yes"
Text:  " "
Operator:  "or"
Text:  " "
Name.Constant:  "no"
Text:  "<newline>"
Name.Constant:  "yes"
Text:  " "
Operator:  "||"
Text:  " "
Name.Constant:  "no"
Text:  "<newline><newline>"
Operator:  "not"
Text:  " "
Name.Constant:  "false"
Text:  "<newline>"
Operator:  "!"
Name.Constant:  "false"
Text:  "<newline><newline>"
Name.Constant:  "false"
Text:  " "
Operator:  "xor"
Text:  " "
Name.Constant:  "true"
Text:  "<newline>"
Name.Constant:  "false"
Text:  " "
Operator:  "xor"
Text:  " "
Name.Constant:  "false"
Text:  "<newline>"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "xor"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "xor"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Variable:  "f"
Text:  " "
Operator:  "and"
Text:  " "
Name.Variable:  "g"
Text:  " "
Operator:  "or"
Text:  " "
Name.Variable:  "h"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Literal.Number.Integer:  "4"
Text:  "<newline><newline>"
Literal.Number.Integer:  "3"
Text:  " "
Keyword:  "in"
Text:  " "
Name.Variable:  "list"
Text:  "<newline>"
Literal.String:  "\\id"
Text:  " "
Keyword:  "of"
Text:  " "
Name.Attribute:  "id"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "23"
Punctuation:  ","
Text:  " "
Name.Attribute:  "name"
Punctuation:  ":"
Text:  " "
Literal.String:  "\\rogers"
Text:  "<newline><newline>"
Comment.Single:  "# Pipes"
Text:  "<newline>"
Punctuation:  "["
Literal.Number.Integer:  "1"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "]"
Text:  " "
Operator:  "|>"
Text:  " "
Name.Variable:  "reverse"
Text:  "<newline>"
Name.Variable:  "reverse"
Text:  " "
Operator:  "<|"
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "1"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "]"
Text:  "<newline>"
Literal.Number.Integer:  "4"
Text:  "<newline>"
Operator:  "|>"
Text:  " "
Punctuation:  "("
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>"
Operator:  "|>"
Text:  " "
Name.Variable:  "even"
Text:  "<newline><newline>"
Comment.Single:  "# Function calls"
Text:  "<newline>"
Name.Variable:  "add-two-times-two"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  " "
Operator:  ">>"
Text:  " "
Punctuation:  "("
Operator:  "*"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline><newline>"
Name.Variable:  "r"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "+"
Punctuation:  "...["
Literal.Number.Integer:  "4"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Literal.Number.Integer:  "6"
Punctuation:  "]"
Text:  "<newline>"
Name.Variable:  "t"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "typeof"
Punctuation:  "!"
Text:  " "
Punctuation:  "...["
Literal.String:  "\\b"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Punctuation:  "{}]"
Text:  "<newline>"
Name.Variable:  "c"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "~"
Punctuation:  "...["
Literal.Number.Integer:  "4"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  "]"
Text:  "<newline>"
Operator:  "++"
Punctuation:  "..."
Name.Variable:  "player"
Punctuation:  "<["
Literal.String:  "strength hp"
Punctuation:  "]>"
Text:  "<newline>"
Name.Variable:  "i"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Punctuation:  "...["
Name.Variable:  "some"
Punctuation:  ","
Text:  " "
Name.Variable:  "classes"
Punctuation:  "]"
Text:  "<newline>"
Name.Variable:  "c"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "^^"
Punctuation:  "...["
Name.Variable:  "copy"
Punctuation:  ","
Text:  " "
Name.Variable:  "these"
Punctuation:  ","
Text:  " "
Punctuation:  "{}]"
Text:  "<newline>"
Keyword:  "delete"
Text:  " "
Punctuation:  "..."
Name.Variable:  "list"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "]"
Text:  "<newline>"
Keyword:  "do"
Text:  " "
Punctuation:  "...["
Name.Variable:  "a"
Punctuation:  ","
Text:  " "
Name.Variable:  "b"
Punctuation:  ","
Text:  " "
Name.Variable:  "c"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# arguments shorthand &"
Text:  "<newline>"
Keyword.Declaration:  "->"
Text:  " "
Name.Builtin:  "&"
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Name.Builtin:  "&"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "&"
Name.Attribute:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name.Builtin:  "&"
Name.Attribute:  "b"
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "&"
Text:  "<newline><newline>"
Comment.Single:  "# Imports"
Text:  "<newline>"
Name.Variable:  "obj"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name.Attribute:  "one"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name.Attribute:  "two"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "obj"
Text:  " "
Operator:  "<<<"
Text:  " "
Name.Attribute:  "three"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "3"
Text:  "<newline>"
Punctuation:  "{"
Name.Attribute:  "go"
Punctuation:  ":"
Text:  " "
Name.Constant:  "true"
Punctuation:  "}"
Text:  " "
Operator:  "<<<<"
Text:  " "
Name.Builtin:  "window"
Text:  "<newline>"
Keyword:  "import"
Text:  " "
Name.Variable:  "obj"
Text:  "<newline>"
Name.Variable:  "obj2"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "^^"
Name.Variable:  "obj"
Text:  "<newline>"
Name.Variable:  "obj3"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "obj"
Text:  " "
Keyword:  "with"
Text:  " "
Name.Attribute:  "three"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "3"
Text:  "<newline><newline>"
Keyword:  "export"
Text:  " "
Name.Variable:  "func"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Declaration:  "->"
Text:  "<newline><newline>"
Keyword:  "require"
Punctuation:  "!"
Text:  " "
Punctuation:  "<["
Literal.String:  " fs path "
Punctuation:  "]>"
Text:  "<newline>"
Keyword:  "require"
Punctuation:  "!"
Text:  " "
Name.Attribute:  "jQuery"
Punctuation:  ":"
Text:  " "
Name.Variable:  "$"
Text:  "<newline>"
Keyword:  "require"
Punctuation:  "!"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Attribute:  "fs"
Punctuation:  ":"
Text:  " "
Name.Variable:  "filesystem"
Text:  "<newline>    "
Literal.String:  "'prelude-ls'"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Name.Variable:  "map"
Punctuation:  ","
Text:  " "
Name.Variable:  "id"
Punctuation:  "}"
Text:  "<newline>    "
Name.Attribute:  "path"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Name.Variable:  "join"
Punctuation:  ","
Text:  " "
Name.Variable:  "resolve"
Punctuation:  "}:"
Name.Variable:  "p"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Name.Attribute:  "property"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "# These shouldn't be highlighted as constants, since this is"
Text:  "<newline>"
Comment.Single:  "# totally legit in livescript"
Text:  "<newline>"
Punctuation:  "{"
Text:  " "
Name.Attribute:  "true"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name.Attribute:  "false"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "foo"
Punctuation:  "."
Name.Attribute:  "true"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "foo"
Punctuation:  "."
Name.Attribute:  "false"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "undefined"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "null"
Text:  "<newline>"
Punctuation:  "{"
Text:  " "
Name.Attribute:  "if"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name.Attribute:  "try"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name.Attribute:  "in"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "{"
Text:  " "
Name.Attribute:  "and"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name.Attribute:  "or"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name.Attribute:  "xor"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Name.Attribute:  "not"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  " "
Name.Attribute:  "is"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ","
Text:  " "
Name.Attribute:  "isnt"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "foo"
Punctuation:  "."
Name.Attribute:  "instanceof"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "foo"
Punctuation:  "."
Name.Attribute:  "typeof"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "finally"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "super"
Text:  "<newline><newline>"
Comment.Single:  "# These should"
Text:  "<newline>"
Punctuation:  "{"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ":"
Text:  " "
Name.Constant:  "true"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ":"
Text:  " "
Name.Constant:  "false"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "instanceof"
Text:  " "
Name.Builtin:  "Number"
Text:  "<newline>"
Keyword:  "typeof"
Text:  " "
Literal.String:  "\\foo"
Text:  "<newline><newline>"
Comment.Single:  "# These refer to builtins"
Text:  "<newline>"
Name.Builtin:  "window"
Punctuation:  "."
Name.Attribute:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "bar"
Punctuation:  "("
Name.Builtin:  "Array"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "# These are properties"
Text:  "<newline>"
Name.Variable:  "foo"
Punctuation:  "."
Name.Attribute:  "window"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "bar"
Punctuation:  "."
Name.Attribute:  "Array"
Text:  "<newline><newline>"
Comment.Single:  "# A more complicated comment with some `code` inside"
Text:  "<newline>"
Comment.Single:  "# ['TAG', 'value', line] ++ [column]"
Text:  "<newline>"
Comment.Single:  "#"
Text:  "<newline>"
Comment.Single:  "# [Jison](http://github.com/zaach/jison) generated [parser](../lib/parser.js)."
Text:  "<newline>"
Comment.Single:  "# { 1: true, 0: false }"
Text:  "<newline>"
Comment.Single:  "# 1 instanceof Number"
Text:  "<newline>"
Comment.Single:  "# typeof \\foo"
Text:  "<newline><newline>"
Comment.Multiline:  "/*<newline>A more complicated comment with some `code` inside<newline>['TAG', 'value', line] ++ [column]<newline><newline>[Jison](http://github.com/zaach/jison) generated [parser](../lib/parser.js).<newline>{ 1: true, 0: false }<newline>1 instanceof Number<newline>typeof \\foo<newline>*/"
Text:  "<newline><newline>"
Comment.Single:  "# Some interpolated values"
Text:  "<newline>"
Name.Variable:  "a-function"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "({"
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name.Variable:  "y"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{})"
Text:  " "
Keyword.Declaration:  "->"
Text:  " "
Literal.String:  "\""
Literal.String.Interpol:  "\#{"
Literal.String:  "\\#"
Literal.String.Interpol:  "}#"
Name.Variable:  "x"
Literal.String.Interpol:  "\#{"
Literal.String:  "\\,"
Literal.String.Interpol:  "}\#{"
Name.Variable:  "y"
Literal.String.Interpol:  "}"
Literal.String:  "\""
Text:  "<newline><newline>"
Keyword.Declaration:  "function"
Text:  " "
Name.Variable:  "detab"
Text:  " "
Name.Variable:  "str"
Punctuation:  ","
Text:  " "
Name.Variable:  "len"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Variable:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Variable:  "str"
Punctuation:  "."
Name.Attribute:  "replace"
Text:  " "
Name.Variable:  "detab"
Punctuation:  "["
Name.Variable:  "len"
Punctuation:  "]"
Operator:  "||="
Literal.String.Regex:  "//"
Literal.String.Escape:  "<newline>"
Literal.String.Regex:  "[^"
Literal.String.Escape:  "<newline>\\S"
Literal.String.Regex:  "]{1,"
Literal.String.Interpol:  "#"
Name.Variable:  "len"
Literal.String.Regex:  "}//g"
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Variable:  "str"
Text:  "<newline><newline>"
Comment.Single:  "# Erases all newlines and indentations."
Text:  "<newline>"
Name.Variable:  "unlines"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "(."
Name.Attribute:  "replace"
Text:  " "
Literal.String.Regex:  "/<newline>[^<newline>\\S]*/g"
Text:  " "
Literal.String:  "''"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "# Multiline regex"
Text:  "<newline><newline>"
Name.Variable:  "symbol"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "//<newline>  [-/^]= | [%+:*]{1,2}= | "
Literal.String.Escape:  "\\|"
Literal.String.Regex:  ">="
Text:  "  "
Comment.Single:  "# compound assign"
Literal.String.Regex:  "<newline>| "
Literal.String.Escape:  "\\."
Literal.String.Regex:  "(?:[&"
Literal.String.Escape:  "\\|\\^"
Literal.String.Regex:  "] | << | >>>?)"
Literal.String.Escape:  "\\."
Literal.String.Regex:  "=?"
Text:  " "
Comment.Single:  "# bitwise and shifts"
Literal.String.Regex:  "<newline>| "
Literal.String.Escape:  "\\."
Literal.String.Regex:  "{1,3}"
Text:  "                       "
Comment.Single:  "# dot / cascade / splat/placeholder/yada*3"
Literal.String.Regex:  "<newline>| "
Literal.String.Escape:  "\\^\\^"
Text:  "                          "
Comment.Single:  "# clone"
Literal.String.Regex:  "<newline>| "
Literal.String.Escape:  "\\*"
Literal.String.Regex:  "?<(?:--?|~~?)!?"
Text:  "             "
Comment.Single:  "# backcall"
Literal.String.Regex:  "<newline>| !?(?:--?|~~?)>"
Literal.String.Escape:  "\\*"
Literal.String.Regex:  "?"
Text:  "             "
Comment.Single:  "# function, bound function"
Literal.String.Regex:  "<newline>| ([-+&|:])"
Name.Variable:  "\\1"
Text:  "                   "
Comment.Single:  "# crement / logic / `prototype`"
Literal.String.Regex:  "<newline>| %%"
Text:  "                            "
Comment.Single:  "# mod"
Literal.String.Regex:  "<newline>| &"
Text:  "                             "
Comment.Single:  "# arguments"
Literal.String.Regex:  "<newline>| "
Literal.String.Escape:  "\\("
Literal.String.Regex:  "[^"
Literal.String.Escape:  "<newline>\\S"
Literal.String.Regex:  "]*"
Literal.String.Escape:  "\\)"
Text:  "                  "
Comment.Single:  "# call"
Literal.String.Regex:  "<newline>| [!=]==?"
Text:  "                       "
Comment.Single:  "# strict equality, deep equals"
Literal.String.Regex:  "<newline>| !?"
Literal.String.Escape:  "\\~"
Literal.String.Regex:  "="
Text:  "                         "
Comment.Single:  "# fuzzy equality"
Literal.String.Regex:  "<newline>| @@?"
Text:  "                           "
Comment.Single:  "# this / constructor"
Literal.String.Regex:  "<newline>| <"
Literal.String.Escape:  "\\["
Literal.String.Regex:  "(?:["
Literal.String.Escape:  "\\s\\S"
Literal.String.Regex:  "]*?"
Literal.String.Escape:  "\\]"
Literal.String.Regex:  ">)?"
Text:  "           "
Comment.Single:  "# words"
Literal.String.Regex:  "<newline>| <<<<?"
Text:  "                         "
Comment.Single:  "# import"
Literal.String.Regex:  "<newline>| <"
Literal.String.Escape:  "\\|"
Text:  "                           "
Comment.Single:  "# backpipe"
Literal.String.Regex:  "<newline>| [<>]== | <<= | >>="
Text:  "            "
Comment.Single:  "# deep {less,greater}-than-(or-equal-to)"
Literal.String.Regex:  "<newline>| << | >>"
Text:  "                       "
Comment.Single:  "# compose"
Literal.String.Regex:  "<newline>| [<>]"
Literal.String.Escape:  "\\?"
Literal.String.Regex:  "?=?"
Text:  "                     "
Comment.Single:  "# {less,greater}-than-(or-equal-to) / min/max"
Literal.String.Regex:  "<newline>| "
Literal.String.Escape:  "\\|"
Literal.String.Regex:  ">"
Text:  "                           "
Comment.Single:  "# pipe"
Literal.String.Regex:  "<newline>| "
Literal.String.Escape:  "\\|"
Text:  "                            "
Comment.Single:  "# case"
Literal.String.Regex:  "<newline>| =>"
Text:  "                            "
Comment.Single:  "# then"
Literal.String.Regex:  "<newline>| "
Literal.String.Escape:  "\\*\\*"
Literal.String.Regex:  " | "
Literal.String.Escape:  "\\^"
Text:  "                     "
Comment.Single:  "# pow"
Literal.String.Regex:  "<newline>| `"
Text:  "                             "
Comment.Single:  "# backticks"
Literal.String.Regex:  "<newline>| [^"
Literal.String.Escape:  "\\s"
Literal.String.Regex:  "#]?<newline>//g"
Text:  "<newline><newline>"
Comment.Single:  "# With some hex numbers and unicode"
Text:  "<newline>"
Literal.String.Regex:  "//<newline>    ( (?!"
Literal.String.Escape:  "\\s"
Literal.String.Regex:  ")[$"
Literal.String.Escape:  "\\xAA"
Literal.String.Regex:  "-"
Literal.String.Escape:  "\\uFFDC"
Literal.String.Regex:  "] )<newline>//ig"
Text:  "<newline><newline>"
Comment.Single:  "# Some single line regexes"
Text:  "<newline>"
Literal.String.Regex:  "/[^<newline>\\S]*(?:#.*)?/gimy"
Text:  "<newline>"
Name.Variable:  "multident"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/(?:\\s*#.*)*(?:<newline>([^<newline>\\S]*))*/g"
Text:  "<newline>"
Name.Variable:  "simplestr"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'|/g"
Text:  "<newline><newline>"
Comment.Single:  "# list of words"
Text:  "<newline>"
Punctuation:  "<["
Literal.String:  " , : -> else { assign } "
Punctuation:  "]>"
Text:  " "
Operator:  "++"
Text:  " "
Punctuation:  "<["
Literal.String:  "<newline>    do [ generator ] = ... | ! enum ( interface )<newline>    package private protected public static<newline>"
Punctuation:  "]>"
Text:  "<newline><newline>"
Name.Variable:  "js-keywords"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "<["
Literal.String:  "<newline>    true false null this void super return throw break continue<newline>    if else for while switch case default try catch finally<newline>    function class extends implements new do delete typeof in instanceof<newline>    let with var const import export debugger yield<newline>"
Punctuation:  "]>"
Text:  "<newline><newline>"
Name.Variable:  "exports"
Text:  " "
Operator:  "<<<"
Text:  "<newline><newline>    "
Name.Attribute:  "lex"
Punctuation:  ":"
Text:  " "
Punctuation:  "("
Text:  "<newline>        "
Name.Variable:  "code"
Text:  "<newline>        "
Name.Variable:  "options"
Text:  "<newline>    "
Punctuation:  ")"
Text:  " "
Keyword.Declaration:  "->"
Text:  " "
Punctuation:  "("
Operator:  "^^"
Name.Variable:  "exports"
Punctuation:  ")."
Name.Attribute:  "tokenize"
Text:  " "
Name.Variable:  "code"
Operator:  "||"
Literal.String:  "''"
Text:  " "
Name.Variable:  "options"
Operator:  "||"
Punctuation:  "{}"
Text:  "<newline><newline>    "
Name.Attribute:  "rewrite"
Punctuation:  ":"
Text:  " "
Punctuation:  "("
Name.Builtin:  "it"
Text:  " "
Operator:  "||"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  ")"
Text:  " "
Keyword.Declaration:  "->"
Text:  "<newline>        "
Name.Variable:  "first-pass"
Text:  " "
Name.Builtin:  "it"
Text:  "<newline>        "
Name.Builtin:  "it"
Punctuation:  "."
Name.Attribute:  "shift"
Punctuation:  "!"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Builtin:  "it"
Punctuation:  "."
Literal.Number.Integer:  "0"
Punctuation:  "?."
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'NEWLINE'"
Text:  "<newline>        "
Name.Builtin:  "it"
Text:  "<newline><newline>    "
Name.Attribute:  "tokenize"
Punctuation:  ":"
Text:  " "
Punctuation:  "("
Name.Variable:  "code"
Punctuation:  ","
Text:  " "
Name.Variable:  "o"
Punctuation:  ")"
Text:  " "
Keyword.Declaration:  "->"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "inter"
Text:  " "
Operator:  "or"
Text:  " "
Name.Variable:  "code"
Operator:  ".="
Name.Variable:  "replace"
Text:  " "
Literal.String.Regex:  "/[\\r\\u2028\\u2029\\uFEFF]/g"
Text:  " "
Literal.String:  "''"
Text:  "<newline>        "
Name.Variable:  "code"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'"
Literal.String.Escape:  "<newline>"
Literal.String:  "'"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "code"
Text:  "<newline>        "
Keyword:  "while"
Text:  " "
Name.Variable:  "c"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "code"
Punctuation:  "."
Name.Attribute:  "char-at"
Text:  " "
Name.Variable:  "i"
Text:  "<newline>            "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "variable-x"
Text:  "<newline>                "
Keyword:  "then"
Text:  " "
Keyword:  "throw"
Text:  " "
Keyword:  "new"
Text:  " "
Name.Builtin:  "Error"
Text:  " "
Literal.String:  "'Error'"
Text:  "<newline><newline>"
Keyword.Declaration:  "function"
Text:  " "
Name.Variable:  "ok"
Text:  " "
Name.Variable:  "token"
Punctuation:  ","
Text:  " "
Name.Variable:  "i"
Text:  "<newline>    "
Keyword:  "switch"
Text:  " "
Name.Variable:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "token"
Punctuation:  "."
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Keyword:  "|"
Text:  " "
Literal.String:  "\\,"
Text:  "                   "
Keyword:  "=>"
Text:  " "
Keyword:  "break"
Text:  "<newline>    "
Keyword:  "|"
Text:  " "
Literal.String:  "\\NEWLINE"
Text:  "             "
Keyword:  "=>"
Text:  " "
Keyword:  "return"
Text:  " "
Name.Constant:  "true"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable:  "inline"
Text:  "<newline>    "
Keyword:  "|"
Text:  " "
Literal.String:  "\\DEDENT"
Text:  "              "
Keyword:  "=>"
Text:  " "
Keyword:  "return"
Text:  " "
Name.Constant:  "true"
Text:  "<newline>    "
Keyword:  "|"
Text:  " "
Literal.String:  "\\POST_IF"
Text:  " "
Literal.String:  "\\FOR"
Text:  " "
Literal.String:  "\\WHILE"
Text:  " "
Keyword:  "=>"
Text:  " "
Keyword:  "return"
Text:  " "
Name.Variable:  "inline"
Text:  "<newline>    "
Keyword:  "|"
Text:  " "
Keyword:  "_"
Text:  "                    "
Keyword:  "=>"
Text:  " "
Keyword:  "return"
Text:  " "
Name.Constant:  "false"
Text:  "<newline>    "
Name.Variable:  "t1"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "tokens"
Punctuation:  "["
Name.Variable:  "i"
Operator:  "+"
Literal.Number.Integer:  "1"
Punctuation:  "]?."
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Name.Variable:  "t1"
Text:  " "
Operator:  "is"
Text:  " "
Operator:  "not"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "tag"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "\\,"
Text:  " "
Keyword:  "then"
Text:  " "
Literal.String:  "\\NEWLINE"
Text:  " "
Keyword:  "else"
Text:  " "
Literal.String:  "\\COMMENT"
Punctuation:  ")"
Text:  " "
Operator:  "and"
Text:  "<newline>    "
Literal.String:  "\\:"
Text:  " "
Operator:  "is"
Text:  " "
Operator:  "not"
Text:  " "
Name.Variable:  "tokens"
Punctuation:  "["
Keyword:  "if"
Text:  " "
Name.Variable:  "t1"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "\\("
Text:  " "
Keyword:  "then"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "index-of-pair"
Text:  " "
Name.Variable:  "tokens"
Punctuation:  ","
Text:  " "
Name.Variable:  "i"
Operator:  "+"
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Variable:  "i"
Operator:  "+"
Literal.Number.Integer:  "2"
Punctuation:  "]?."
Literal.Number.Integer:  "0"
Text:  "<newline><newline>"
Keyword.Declaration:  "!function"
Text:  " "
Name.Variable:  "go"
Text:  " "
Name.Variable:  "token"
Punctuation:  ","
Text:  " "
Name.Variable:  "i"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Variable:  "tokens"
Punctuation:  "."
Name.Attribute:  "splice"
Text:  " "
Name.Variable:  "i"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "["
Literal.String:  "'}'"
Text:  " "
Literal.String:  "''"
Text:  " "
Name.Variable:  "token"
Punctuation:  "."
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Name.Variable:  "token"
Punctuation:  "."
Literal.Number.Integer:  "3"
Punctuation:  "]"
Text:  "<newline><newline>"
Keyword:  "switch"
Text:  " "
Name.Variable:  "id"
Text:  "<newline>"
Keyword:  "case"
Text:  " "
Punctuation:  "<["
Literal.String:  " true false on off yes no null void arguments debugger "
Punctuation:  "]>"
Text:  "<newline>    "
Name.Variable:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'LITERAL'"
Text:  "<newline>"
Keyword:  "case"
Text:  " "
Punctuation:  "<["
Literal.String:  " new do typeof delete "
Punctuation:  "]>"
Text:  "<newline>    "
Name.Variable:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'UNARY'"
Text:  "<newline>"
Keyword:  "case"
Text:  " "
Literal.String:  "'yield'"
Text:  "<newline>    "
Name.Variable:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'YIELD'"
Text:  "<newline>"
Keyword:  "case"
Text:  " "
Literal.String:  "'return'"
Text:  " "
Literal.String:  "'throw'"
Text:  "<newline>    "
Name.Variable:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'HURL'"
Text:  "<newline>"
Keyword:  "case"
Text:  " "
Literal.String:  "'break'"
Text:  " "
Literal.String:  "'continue'"
Text:  "<newline>    "
Name.Variable:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'JUMP'"
Text:  "<newline>"
Keyword:  "case"
Text:  " "
Literal.String:  "'this'"
Text:  " "
Literal.String:  "'eval'"
Text:  " "
Literal.String:  "'super'"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Literal.String:  "'LITERAL'"
Text:  " "
Name.Variable:  "id"
Punctuation:  ","
Text:  " "
Name.Constant:  "true"
Text:  " "
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>"
Keyword:  "case"
Text:  " "
Literal.String:  "'in'"
Text:  " "
Literal.String:  "'of'"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "fget"
Text:  " "
Literal.String:  "'for'"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "fset"
Text:  " "
Literal.String:  "'for'"
Text:  " "
Name.Constant:  "false"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name.Variable:  "id"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'in'"
Text:  "<newline>            "
Name.Variable.Instance:  "@"
Name.Attribute:  "fset"
Text:  " "
Literal.String:  "'by'"
Text:  " "
Name.Constant:  "true"
Text:  "<newline>            "
Name.Variable:  "id"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "''"
Text:  "<newline>            "
Keyword:  "if"
Text:  " "
Name.Variable:  "last"
Punctuation:  "."
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'ID'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "["
Operator:  "*-"
Literal.Number.Integer:  "2"
Punctuation:  "]."
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "in"
Text:  " "
Punctuation:  "<["
Literal.String:  " , ] } "
Punctuation:  "]>"
Text:  "<newline>                "
Name.Variable:  "id"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "!"
Literal.Number.Integer:  "1"
Text:  "<newline>                "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "."
Name.Attribute:  "pop"
Punctuation:  "!"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "["
Operator:  "*-"
Literal.Number.Integer:  "1"
Punctuation:  "]."
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "','"
Text:  "<newline>        "
Keyword:  "break"
Text:  "<newline>    "
Keyword:  "fallthrough"
Text:  "<newline>"
Keyword:  "case"
Text:  " "
Literal.String:  "'and'"
Text:  " "
Literal.String:  "'or'"
Text:  " "
Literal.String:  "'xor'"
Text:  " "
Literal.String:  "'is'"
Text:  " "
Literal.String:  "'isnt'"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "unline"
Punctuation:  "!"
Text:  "<newline>    "
Name.Variable:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable:  "id"
Text:  " "
Keyword:  "in"
Text:  " "
Punctuation:  "<["
Literal.String:  " is isnt "
Punctuation:  "]>"
Text:  " "
Keyword:  "then"
Text:  " "
Literal.String:  "'COMPARE'"
Text:  " "
Keyword:  "else"
Text:  " "
Literal.String:  "'LOGIC'"
Text:  "<newline>    "
Name.Variable:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "'BIOP'"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable:  "last"
Punctuation:  "."
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'('"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "token"
Text:  " "
Name.Variable:  "tag"
Punctuation:  ","
Text:  " "
Keyword:  "switch"
Text:  " "
Name.Variable:  "id"
Text:  "<newline>    "
Keyword:  "|"
Text:  " "
Literal.String:  "'is'"
Text:  "   "
Keyword:  "=>"
Text:  " "
Literal.String:  "'==='"
Text:  "<newline>    "
Keyword:  "|"
Text:  " "
Literal.String:  "'isnt'"
Text:  " "
Keyword:  "=>"
Text:  " "
Literal.String:  "'!=='"
Text:  "<newline>    "
Keyword:  "|"
Text:  " "
Literal.String:  "'or'"
Text:  "   "
Keyword:  "=>"
Text:  " "
Literal.String:  "'||'"
Text:  "<newline>    "
Keyword:  "|"
Text:  " "
Literal.String:  "'and'"
Text:  "  "
Keyword:  "=>"
Text:  " "
Literal.String:  "'&&'"
Text:  "<newline>    "
Keyword:  "|"
Text:  " "
Literal.String:  "'xor'"
Text:  "  "
Keyword:  "=>"
Text:  " "
Literal.String:  "'xor'"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "last"
Punctuation:  "."
Name.Attribute:  "alias"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "true"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Variable:  "id"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>"
Keyword:  "case"
Text:  " "
Keyword:  "otherwise"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Name.Variable:  "rnum"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String.Regex:  "/[0-9]/"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "carp"
Text:  " "
Literal.String:  "\"invalid number base "
Literal.String.Interpol:  "#"
Name.Variable:  "radix"
Literal.String:  " (with number "
Literal.String.Interpol:  "#"
Name.Variable:  "rnum"
Literal.String:  "),<newline>           base must be from 2 to 36\""
Text:  "<newline><newline>"
Name.Variable.Instance:  "@"
Name.Attribute:  "validate"
Text:  " "
Literal.String.Regex:  "/^(?:[gimy]{1,4}|[?$]?)/"
Punctuation:  "."
Name.Attribute:  "exec"
Punctuation:  "("
Name.Variable:  "rest"
Punctuation:  ")."
Literal.Number.Integer:  "0"
Text:  "<newline><newline>"
Name.Variable:  "do-line"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name.Variable:  "code"
Punctuation:  ","
Text:  " "
Name.Variable:  "index"
Punctuation:  ")"
Text:  " "
Keyword.Declaration:  "->"
Text:  "<newline>    "
Punctuation:  "["
Name.Variable:  "input"
Punctuation:  ","
Text:  " "
Name.Variable:  "tabs"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name.Variable:  "MULTIDENT"
Text:  " "
Operator:  "<<<"
Text:  " "
Name.Attribute:  "last-index"
Punctuation:  ":"
Text:  " "
Name.Variable:  "index"
Punctuation:  ")."
Name.Attribute:  "exec"
Text:  " "
Name.Variable:  "code"
Text:  "<newline>    "
Punctuation:  "{"
Name.Variable:  "length"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "count-lines"
Text:  " "
Name.Variable:  "input"
Text:  "<newline>    "
Punctuation:  "{"
Name.Variable:  "last"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "this"
Text:  "<newline>    "
Name.Variable:  "last"
Text:  " "
Operator:  "<<<"
Text:  " "
Punctuation:  "{"
Operator:  "+"
Name.Variable:  "eol"
Punctuation:  ","
Text:  " "
Operator:  "+"
Name.Variable:  "spaced"
Punctuation:  "}"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Variable:  "length"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable:  "index"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "length"
Text:  " "
Operator:  ">="
Text:  " "
Name.Variable:  "code"
Punctuation:  "."
Name.Attribute:  "length"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name.Variable:  "tabs"
Text:  " "
Operator:  "and"
Text:  " "
Punctuation:  "("
Name.Variable.Instance:  "@"
Name.Attribute:  "emender"
Text:  " "
Operator:  "||="
Text:  " "
Literal.String.Regex:  "//[^"
Literal.String.Interpol:  "\#{"
Text:  " "
Name.Variable:  "tabs"
Punctuation:  "."
Name.Attribute:  "char-at"
Punctuation:  "!"
Text:  " "
Literal.String.Interpol:  "}"
Literal.String.Regex:  "]//"
Punctuation:  ")."
Name.Attribute:  "exec"
Text:  " "
Name.Variable:  "tabs"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "carp"
Text:  " "
Literal.String:  "\"contaminated indent "
Literal.String.Interpol:  "\#{"
Text:  " "
Name.Variable:  "escape"
Text:  " "
Name.Builtin:  "that"
Text:  " "
Literal.String.Interpol:  "}"
Literal.String:  "\""
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  ">"
Text:  " "
Name.Variable:  "delta"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "tabs"
Punctuation:  "."
Name.Attribute:  "length"
Text:  " "
Operator:  "-"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "dent"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "dedent"
Text:  " "
Operator:  "-"
Name.Variable:  "delta"
Text:  "<newline>        "
Name.Variable.Instance:  "@"
Name.Attribute:  "newline"
Punctuation:  "!"
Text:  "<newline>    "
Keyword:  "else"
Text:  "<newline>        "
Punctuation:  "["
Name.Variable:  "tag"
Punctuation:  ","
Text:  " "
Name.Variable:  "val"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "last"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name.Variable:  "tag"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'ASSIGN'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Variable:  "val"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String:  "''"
Text:  " "
Operator:  "not"
Text:  " "
Keyword:  "in"
Text:  " "
Punctuation:  "<["
Literal.String:  " = := += "
Punctuation:  "]>"
Text:  "<newline>        "
Operator:  "or"
Text:  " "
Name.Variable:  "val"
Text:  " "
Operator:  "is"
Text:  " "
Literal.String:  "'++'"
Text:  " "
Operator:  "and"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "tokens"
Punctuation:  "["
Operator:  "*-"
Literal.Number.Integer:  "2"
Punctuation:  "]."
Name.Attribute:  "spaced"
Text:  "<newline>        "
Operator:  "or"
Text:  " "
Name.Variable:  "tag"
Text:  " "
Keyword:  "in"
Text:  " "
Punctuation:  "<["
Literal.String:  " +- PIPE BACKPIPE COMPOSE DOT LOGIC MATH COMPARE RELATION<newline>                        SHIFT IN OF TO BY FROM EXTENDS IMPLEMENTS "
Punctuation:  "]>"
Text:  "<newline>            "
Keyword:  "return"
Text:  " "
Name.Variable:  "length"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name.Variable:  "delta"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "indent"
Text:  " "
Name.Variable:  "delta"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Variable.Instance:  "@"
Name.Attribute:  "newline"
Punctuation:  "!"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "fset"
Text:  " "
Literal.String:  "'for'"
Text:  " "
Name.Constant:  "false"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "fset"
Text:  " "
Literal.String:  "'by'"
Text:  " "
Name.Constant:  "false"
Text:  "<newline>    "
Name.Variable:  "length"
Text:  "<newline><newline>"
Keyword:  "try"
Text:  " "
Name.Builtin:  "Function"
Text:  " "
Literal.String:  "\"'use strict'; var "
Literal.String.Interpol:  "#"
Name.Variable:  "id"
Literal.String:  "\""
Text:  " "
Keyword:  "catch"
Text:  "<newline>    "
Name.Variable.Instance:  "@"
Name.Attribute:  "carp"
Text:  " "
Literal.String:  "\"invalid variable interpolation '"
Literal.String.Interpol:  "#"
Name.Variable:  "id"
Literal.String:  "'\""
Text:  "<newline>"
