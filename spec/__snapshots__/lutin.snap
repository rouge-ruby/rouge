Comment.Single:  "-- A simple node"
Text:  "<newline>"
Keyword:  "node"
Text:  " "
Name:  "gen_x_v2"
Punctuation:  "()"
Text:  " "
Keyword:  "returns"
Text:  " "
Punctuation:  "("
Name:  "x"
Operator:  ":"
Keyword.Type:  "real"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " <newline>  "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "{"
Text:  " "
Literal.Number.Integer:  "0"
Operator:  "."
Literal.Number.Integer:  "0"
Operator:  "<"
Name:  "x"
Text:  " "
Operator.Word:  "and"
Text:  " "
Name:  "x"
Operator:  "<"
Literal.Number.Integer:  "42"
Operator:  "."
Literal.Number.Integer:  "0"
Text:  " "
Keyword.Type:  "fby"
Text:  " "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "20"
Punctuation:  "]"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator.Word:  "pre"
Text:  " "
Name:  "x"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "-- Using run"
Text:  "<newline>"
Keyword:  "node"
Text:  " "
Name:  "up_and_down"
Punctuation:  "("
Name:  "min"
Operator:  ","
Text:  " "
Name:  "max"
Operator:  ","
Text:  " "
Name:  "delta"
Operator:  ":"
Keyword.Type:  "real"
Punctuation:  ")"
Text:  " "
Keyword:  "returns"
Text:  " "
Punctuation:  "("
Name:  "x"
Operator:  ":"
Keyword.Type:  "real"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  "   <newline>   "
Name:  "Between"
Punctuation:  "("
Name:  "x"
Operator:  ","
Text:  " "
Name:  "min"
Operator:  ","
Text:  " "
Name:  "max"
Punctuation:  ")"
Text:  "<newline> "
Keyword.Type:  "fby"
Text:  "<newline>   "
Keyword.Type:  "loop"
Text:  " <newline>     "
Keyword:  "exist"
Text:  " "
Name:  "lmin"
Operator:  ","
Text:  " "
Name:  "lmax"
Operator:  ","
Text:  " "
Name:  "ldelta"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "real"
Text:  " "
Keyword:  "in"
Text:  "<newline>     "
Keyword:  "run"
Text:  " "
Name:  "lmin"
Text:  "   "
Operator:  ":="
Text:  " "
Name:  "between"
Punctuation:  "("
Name:  "min"
Operator:  ","
Text:  " "
Operator.Word:  "pre"
Text:  " "
Name:  "x"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  "<newline>     "
Keyword:  "run"
Text:  " "
Name:  "lmax"
Text:  "   "
Operator:  ":="
Text:  " "
Name:  "between"
Punctuation:  "("
Operator.Word:  "pre"
Text:  " "
Name:  "x"
Operator:  ","
Text:  " "
Name:  "max"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  "<newline>     "
Keyword:  "run"
Text:  " "
Name:  "ldelta"
Text:  " "
Operator:  ":="
Text:  " "
Name:  "between"
Punctuation:  "("
Literal.Number.Integer:  "0"
Operator:  ".,"
Text:  " "
Name:  "delta"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Punctuation:  "{"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Keyword:  "run"
Text:  " "
Name:  "x"
Text:  " "
Operator:  ":="
Text:  " "
Name:  "up"
Punctuation:  "("
Operator.Word:  "pre"
Text:  " "
Name:  "x"
Operator:  ","
Text:  " "
Name:  "ldelta"
Punctuation:  ")"
Text:  "   "
Keyword:  "in"
Text:  " "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "lmax"
Text:  " "
Punctuation:  "}"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Keyword:  "run"
Text:  " "
Name:  "x"
Text:  " "
Operator:  ":="
Text:  " "
Name:  "down"
Punctuation:  "("
Operator.Word:  "pre"
Text:  " "
Name:  "x"
Operator:  ","
Text:  " "
Name:  "ldelta"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  " "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "x"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "lmin"
Text:  " "
Punctuation:  "}"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "     <newline><newline>"
Comment.Single:  "-- Prioritary choice"
Text:  "<newline>"
Keyword:  "node"
Text:  " "
Name:  "env2"
Punctuation:  "("
Name:  "Speed"
Operator:  ","
Name:  "Roof_Speed"
Operator:  ":"
Keyword.Type:  "real"
Punctuation:  ")"
Text:  " "
Keyword:  "returns"
Punctuation:  "("
Text:  "<newline>"
Name:  "Start"
Operator:  ","
Name:  "Parked"
Operator:  ","
Name:  "Rot"
Operator:  ","
Name:  "Tick"
Operator:  ","
Name:  "OnOff"
Operator:  ","
Name:  "Done"
Operator:  ":"
Keyword.Type:  "bool"
Punctuation:  ";"
Text:  " "
Name:  "Dist"
Operator:  ":"
Keyword.Type:  "real"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>   "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "{"
Text:  " "
Operator.Word:  "not"
Text:  " "
Punctuation:  "("
Name:  "OnOff"
Text:  " "
Operator.Word:  "and"
Text:  " "
Name:  "Start"
Punctuation:  ")"
Text:  " "
Punctuation:  "}"
Text:  " "
Comment.Single:  "-- H1"
Text:  "<newline>"
Operator:  "&>"
Text:  " "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "Parked"
Text:  " "
Operator:  "=>"
Text:  " "
Operator.Word:  "not"
Text:  " "
Name:  "Rot"
Text:  "     "
Punctuation:  "}"
Text:  " "
Comment.Single:  "-- H2"
Text:  "<newline>"
Operator:  "&>"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Keyword.Type:  "fby"
Text:  " "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Punctuation:  "("
Text:  " "
Name:  "Speed"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Operator:  "."
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "=>"
Text:  " "
Operator.Word:  "not"
Text:  " "
Name:  "Parked"
Text:  "    "
Punctuation:  ")"
Text:  " "
Comment.Single:  "-- H3"
Text:  "<newline>  "
Operator.Word:  "and"
Text:  " "
Punctuation:  "("
Text:  " "
Name:  "Roof_Speed"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Operator:  "."
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "=>"
Text:  " "
Operator.Word:  "not"
Text:  " "
Name:  "Done"
Text:  " "
Punctuation:  ")"
Text:  " "
Comment.Single:  "-- H4"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "-- Weigths"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "geneRotTick"
Punctuation:  "("
Name:  "Start"
Operator:  ","
Text:  " "
Name:  "Rot"
Operator:  ","
Text:  " "
Name:  "Tick"
Operator:  ","
Name:  "Danger"
Operator:  ":"
Keyword.Type:  "bool"
Punctuation:  ")"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "trace"
Text:  " "
Operator:  "="
Text:  "<newline> "
Keyword:  "let"
Text:  " "
Name:  "accel"
Text:  " "
Operator:  "="
Text:  "  "
Punctuation:  "{{"
Text:  " "
Operator:  "|"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ":"
Text:  " "
Operator.Word:  "not"
Text:  " "
Name:  "Rot"
Text:  " "
Operator:  "|"
Text:  " "
Literal.Number.Integer:  "5"
Operator:  ":"
Text:  " "
Name:  "Rot"
Text:  " "
Punctuation:  "}"
Text:  " "
Operator:  "&>"
Text:  " "
Punctuation:  "{"
Text:  " "
Operator:  "|"
Text:  " "
Literal.Number.Integer:  "5"
Operator:  ":"
Text:  " "
Operator.Word:  "not"
Text:  " "
Name:  "Tick"
Text:  " "
Operator:  "|"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ":"
Text:  " "
Name:  "Tick"
Text:  " "
Punctuation:  "}"
Text:  " "
Operator:  "&>"
Text:  "<newline>                 "
Name:  "Start"
Text:  " "
Operator:  "&>"
Text:  " "
Operator.Word:  "not"
Text:  " "
Name:  "Danger"
Text:  " "
Punctuation:  "}"
Text:  "<newline> "
Keyword:  "in"
Text:  "<newline> "
Keyword:  "let"
Text:  " "
Name:  "decel"
Text:  " "
Operator:  "="
Text:  "  "
Punctuation:  "{{"
Text:  " "
Operator:  "|"
Text:  " "
Literal.Number.Integer:  "5"
Operator:  ":"
Text:  " "
Operator.Word:  "not"
Text:  " "
Name:  "Rot"
Text:  " "
Operator:  "|"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ":"
Text:  " "
Name:  "Rot"
Text:  " "
Punctuation:  "}"
Text:  " "
Operator:  "&>"
Text:  " "
Punctuation:  "{"
Text:  " "
Operator:  "|"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ":"
Text:  " "
Operator.Word:  "not"
Text:  " "
Name:  "Tick"
Text:  " "
Operator:  "|"
Text:  " "
Literal.Number.Integer:  "5"
Operator:  ":"
Text:  " "
Name:  "Tick"
Text:  " "
Punctuation:  "}"
Text:  " "
Punctuation:  "}"
Text:  " "
Keyword:  "in"
Text:  "<newline> "
Keyword:  "let"
Text:  " "
Name:  "stop"
Text:  " "
Operator:  "="
Text:  " "
Operator.Word:  "not"
Text:  " "
Name:  "Rot"
Text:  " "
Operator.Word:  "and"
Text:  " "
Name:  "Tick"
Text:  " "
Keyword:  "in"
Text:  "<newline> "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "50"
Punctuation:  "]"
Text:  " "
Operator.Word:  "not"
Text:  " "
Name:  "Rot"
Text:  " "
Keyword.Type:  "fby"
Text:  " <newline> "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "0"
Operator:  ","
Literal.Number.Integer:  "300"
Punctuation:  "]"
Text:  " "
Name:  "accel"
Text:  " "
Keyword.Type:  "fby"
Text:  "<newline>        "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "0"
Operator:  ","
Literal.Number.Integer:  "300"
Punctuation:  "]"
Text:  " "
Name:  "decel"
Text:  " "
Keyword.Type:  "fby"
Text:  "<newline>        "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "60"
Operator:  ","
Literal.Number.Integer:  "300"
Punctuation:  "]"
Text:  " "
Name:  "stop"
Text:  " <newline>        "
Punctuation:  "}"
Text:  "<newline>        <newline>"
Comment.Single:  "-- Macros with trace"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "OnceBefore"
Punctuation:  "("
Name:  "condition"
Operator:  ","
Name:  "event"
Operator:  ":"
Keyword.Type:  "bool"
Punctuation:  ")"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "trace"
Text:  " "
Operator:  "="
Text:  " <newline>    "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "{"
Text:  " "
Operator.Word:  "not"
Text:  " "
Punctuation:  "("
Name:  "event"
Text:  " "
Operator.Word:  "and"
Text:  " "
Name:  "condition"
Punctuation:  ")}"
Text:  " "
Keyword.Type:  "fby"
Text:  "<newline>    "
Name:  "event"
Text:  " "
Operator.Word:  "and"
Text:  " "
Name:  "condition"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "when"
Punctuation:  "("
Name:  "condition"
Operator:  ":"
Keyword.Type:  "bool"
Punctuation:  ";"
Text:  " "
Name:  "BODY"
Operator:  ":"
Keyword.Type:  "trace"
Punctuation:  ")"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "trace"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword.Type:  "loop"
Text:  " "
Punctuation:  "{"
Text:  " <newline>    "
Operator:  "|"
Text:  " "
Keyword:  "assert"
Text:  " "
Name:  "condition"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "BODY"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Operator.Word:  "not"
Text:  " "
Name:  "condition"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "IfThenElse"
Punctuation:  "("
Name:  "condition"
Operator:  ":"
Keyword.Type:  "bool"
Punctuation:  ";"
Name:  "THEN"
Operator:  ","
Name:  "ELSE"
Operator:  ":"
Text:  " "
Keyword.Type:  "trace"
Punctuation:  ")"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "trace"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " <newline>   "
Operator:  "|>"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "condition"
Text:  " "
Operator:  "&>"
Text:  " "
Name:  "THEN"
Text:  " "
Punctuation:  "}"
Text:  "<newline>   "
Operator:  "|>"
Text:  " "
Name:  "ELSE"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "node"
Text:  " "
Name:  "test_when"
Punctuation:  "("
Name:  "condition"
Operator:  ":"
Keyword.Type:  "bool"
Punctuation:  ")"
Text:  " "
Keyword:  "returns"
Text:  " "
Punctuation:  "("
Name:  "res"
Operator:  ":"
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "when"
Punctuation:  "("
Name:  "condition"
Operator:  ","
Text:  " "
Name:  "integers"
Punctuation:  "("
Literal.Number.Integer:  "0"
Operator:  ","
Name:  "res"
Punctuation:  "))"
Text:  "<newline><newline>"
Keyword:  "node"
Text:  " "
Name:  "test_IfThenElse"
Punctuation:  "("
Name:  "condition"
Operator:  ":"
Keyword.Type:  "bool"
Punctuation:  ")"
Text:  " "
Keyword:  "returns"
Text:  " "
Punctuation:  "("
Name:  "res"
Operator:  ":"
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "IfThenElse"
Punctuation:  "("
Name:  "condition"
Operator:  ","
Text:  " "
Name:  "integers"
Punctuation:  "("
Literal.Number.Integer:  "0"
Operator:  ","
Name:  "res"
Punctuation:  ")"
Operator:  ","
Text:  " "
Name:  "integers"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "100"
Operator:  ","
Name:  "res"
Punctuation:  "))"
Text:  "<newline>"
