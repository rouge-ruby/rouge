Comment:  "# A comment<newline>"
Text:  "<newline>"
Name.Variable:  "VERSION"
Text:  " "
Operator:  ":="
Text:  " 0.1."
Punctuation:  "$("
Text:  "shell git log "
Name.Tag:  "--oneline"
Text:  " | "
Name.Builtin:  "wc"
Text:  " "
Name.Tag:  "-l"
Text:  " | "
Name.Builtin:  "sed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\"s/ //g\""
Punctuation:  ")"
Text:  "<newline><newline>"
Comment:  "# Simple assignments<newline>"
Name.Variable:  "LIST"
Operator:  "="
Text:  "\t\t\tParser Grammar Objects Python Modules Mac<newline>"
Name.Variable:  "STRING"
Operator:  "="
Text:  "\t\t\t"
Literal.String.Single:  "'--with-pydebug'"
Text:  "<newline>"
Name.Variable:  "NUMBER"
Operator:  "="
Text:  "\t\t\t2.6<newline>"
Name.Variable:  "DOT"
Operator:  "="
Text:  "\t\t\t.<newline>"
Name.Variable:  "DIR"
Operator:  "="
Text:  "\t\t\t/usr/local<newline>"
Name.Variable:  "DIR_LIST"
Operator:  "="
Text:  "\t\tModules/threadmodule.o  Modules/signalmodule.o <newline>"
Name.Variable:  "CMD_WITH_SWITCH"
Operator:  "="
Text:  "\tgcc "
Name.Tag:  "-pthread"
Text:  "<newline>"
Name.Variable:  "DIR_WITH_SWITCH"
Operator:  "="
Text:  "\t/usr/bin/install "
Name.Tag:  "-c"
Text:  "<newline>"
Name.Variable:  "ALL_SWITCHES"
Operator:  "="
Text:  "\t\t"
Name.Tag:  "-g"
Text:  " "
Name.Tag:  "-Wall"
Text:  " "
Name.Tag:  "-Wstrict-prototypes"
Text:  "<newline>"
Name.Variable:  "EMPTY"
Operator:  "="
Text:  "<newline><newline>"
Comment:  "# Interpolation<newline>"
Name.Variable:  "SINGLE_PARENS"
Operator:  "="
Text:  "\t\t"
Punctuation:  "$("
Text:  "CC"
Punctuation:  ")"
Text:  "<newline>"
Name.Variable:  "MULTI_PARENS"
Operator:  "="
Text:  "\t\t"
Punctuation:  "$("
Text:  "LOCALMODLIBS"
Punctuation:  ")"
Text:  " "
Punctuation:  "$("
Text:  "BASEMODLIBS"
Punctuation:  ")"
Text:  "<newline>"
Name.Variable:  "CMD_AND_PARENS"
Operator:  "="
Text:  "\t\tsvnversion "
Punctuation:  "$("
Text:  "srcdir"
Punctuation:  ")"
Text:  "<newline>"
Name.Variable:  "DIR_AND_PARENS"
Operator:  "="
Text:  "\t\t"
Punctuation:  "$("
Text:  "srcdir"
Punctuation:  ")"
Text:  "/Modules/makesetup<newline>"
Name.Variable:  "BRACES"
Operator:  "="
Text:  "\t\t\t"
Punctuation:  "${"
Text:  "INSTALL"
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "DIR_AND_BRACES"
Operator:  "=="
Text:  "\t"
Punctuation:  "${"
Text:  "prefix"
Punctuation:  "}"
Text:  "/man<newline>"
Name.Variable:  "BRACES_AND_SWITCH"
Operator:  "="
Text:  "\t"
Punctuation:  "${"
Text:  "INSTALL"
Punctuation:  "}"
Text:  " "
Name.Tag:  "-m"
Text:  " 644<newline><newline>"
Comment:  "# Multiline assignment<newline>"
Name.Variable:  "MULTI"
Operator:  "="
Text:  "\t"
Literal.String.Escape:  "\\"
Text:  "<newline>\tModules/config.o "
Literal.String.Escape:  "\\"
Text:  "<newline>\tModules/getpath.o "
Literal.String.Escape:  "\\"
Text:  "<newline>\tModules/main.o "
Literal.String.Escape:  "\\"
Text:  "<newline>\tModules/gcmodule.o<newline><newline>"
Name.Variable:  "MULTI_WITH_PARENS"
Operator:  "="
Text:  "\t"
Literal.String.Escape:  "\\"
Text:  "<newline>\tModules/getbuildinfo.o "
Literal.String.Escape:  "\\"
Text:  "<newline>\t"
Punctuation:  "$("
Text:  "PARSER_OBJS"
Punctuation:  ")"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t"
Punctuation:  "$("
Text:  "OBJECT_OBJS"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment:  "# Definition<newline>"
Name.Label:  "simple"
Operator:  ":"
Text:  "\t\t\t"
Name.Function:  "$(BUILDPYTHON) oldsharedmods sharedmods"
Text:  "<newline>"
Name.Label:  "$(interpol)"
Operator:  ":"
Text:  "\t\t"
Name.Function:  "Modules/python.o $(LIBRARY) $(LDLIBRARY)"
Text:  "<newline>"
Name.Label:  "multi dir/file.c"
Operator:  ":"
Text:  "\t"
Name.Function:  "Makefile.pre "
Text:  "\\<newline>"
Name.Function:  "\t\t\tModules/Setup.local"
Text:  "<newline><newline>"
Comment:  "# Commands<newline>"
Name.Label:  "commands"
Operator:  ":"
Text:  " "
Name.Function:  "$(SHELL) $(MAKESETUP) -c $(srcdir)/Modules/config.c.in"
Text:  "<newline>\t"
Punctuation:  "@"
Name.Builtin:  "echo"
Text:  " "
Literal.String.Double:  "\"The Makefile was updated, you may need to re-run make.\""
Text:  "<newline><newline>"
Name.Label:  "commands/complex"
Operator:  ":"
Text:  " "
Name.Function:  "$(srcdir)/Modules/Setup.dist"
Text:  "<newline>\t"
Punctuation:  "@"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-f"
Text:  " Modules/Setup"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t\t"
Name.Builtin:  "echo"
Text:  " "
Literal.String.Double:  "\"-----------------------------------------------\""
Punctuation:  ";"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t"
Keyword:  "fi"
Text:  "<newline><newline>"
Name.Label:  "commands_switch"
Operator:  ":"
Text:  "\t"
Name.Function:  "all platform"
Text:  "<newline>\t\t\t"
Punctuation:  "-"
Text:  "find "
Punctuation:  "$("
Text:  "srcdir"
Punctuation:  ")"
Text:  "/Lib "
Name.Tag:  "-name"
Text:  " "
Literal.String.Single:  "'*.py[co]'"
Text:  " "
Name.Tag:  "-print"
Text:  " | xargs "
Name.Builtin:  "rm"
Text:  " "
Name.Tag:  "-f"
Text:  "<newline><newline>"
Name.Label:  "frameworkaltinstallunixtools"
Operator:  ":"
Text:  "<newline>\t"
Name.Builtin:  "cd "
Text:  "Mac "
Operator:  "&&"
Text:  " "
Punctuation:  "$("
Text:  "MAKE"
Punctuation:  ")"
Text:  " altinstallunixtools "
Name.Variable:  "DESTDIR"
Operator:  "="
Literal.String.Double:  "\""
Punctuation:  "$("
Literal.String.Double:  "DESTDIR"
Punctuation:  ")"
Literal.String.Double:  "\""
Text:  "<newline><newline>"
Keyword:  "include"
Literal.String.Other:  " SubMake.make"
Text:  " "
Comment:  "# Insert lines from another file (which must exist)<newline>"
Keyword:  "-include"
Literal.String.Other:  " Maybe.make"
Text:  "  "
Comment:  "# Next 2 similar, but not an error if they doon't exist<newline>"
Keyword:  "sinclude"
Literal.String.Other:  " DynamicDependencies.make"
Text:  "<newline><newline>"
Comment:  "# Function expansions (including $(shell)) can occur anywhere<newline>"
Name.Label:  "$(shell echo VARIABLE) "
Operator:  ":"
Name.Function:  "= $(shell echo value)"
Text:  "<newline><newline>"
Name.Label:  "$(shell echo $(TARGET1)) $(TARGET2) target3"
Operator:  ":"
Text:  " \\<newline>"
Name.Function:  "\t$(shell echo $(DEPENDENCY1)) $(DEPENDENCY2) dependency3"
Text:  "<newline>\t"
Name.Builtin:  "touch"
Text:  " "
Punctuation:  "$("
Text:  "shell "
Name.Builtin:  "echo "
Text:  "target"
Operator:  "{"
Text:  "1..3"
Punctuation:  "}"
Operator:  ")"
Text:  "<newline>\t"
Punctuation:  "@"
Name.Builtin:  "echo"
Text:  " "
Punctuation:  "$("
Text:  "shell "
Name.Builtin:  "echo "
Text:  "1"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "@"
Name.Builtin:  "echo"
Text:  " "
Punctuation:  "$("
Text:  "shell "
Name.Builtin:  "echo "
Text:  "2 "
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "@"
Name.Builtin:  "echo"
Text:  " "
Punctuation:  "${"
Text:  "shell "
Name.Builtin:  "echo "
Text:  "3"
Punctuation:  "}"
Text:  "<newline>\t"
Punctuation:  "@"
Name.Builtin:  "echo"
Text:  " "
Punctuation:  "${"
Text:  "shell "
Name.Builtin:  "echo "
Text:  "4 "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment:  "# Many other built-in functions exist<newline>"
Name.Variable:  "OBJECT_GOALS"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "$("
Text:  "filter %.o,"
Punctuation:  "${"
Text:  "MAKECMDGOALS"
Punctuation:  "})"
Text:  "<newline><newline>"
Comment:  "# User-defined functions can be used via $(call)<newline>"
Name.Variable:  "reverse"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "$("
Text:  "2"
Punctuation:  ")"
Text:  " "
Punctuation:  "$("
Text:  "1"
Punctuation:  ")"
Text:  "<newline>"
Name.Variable:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "$("
Text:  "call reverse,a,b"
Punctuation:  ")"
Text:  " "
Comment:  "# foo contains 'b a'"
Text:  "<newline><newline>"
Comment:  "# Substitution references can be used when expanding variables<newline>"
Name.Variable:  "SOURCE"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "$("
Text:  "OBJECT:.o"
Operator:  "="
Text:  ".c"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment:  "# Alternative syntax for substitution references<newline>"
Name.Variable:  "foo"
Text:  " "
Operator:  "="
Text:  " input1.txt<newline>"
Name.Variable:  "bar"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "$("
Text:  "foo:input%.txt"
Operator:  "="
Text:  "output%.bin"
Punctuation:  ")"
Text:  " "
Comment:  "# set to 'output1.bin'"
Text:  "<newline><newline>"
Comment:  "# Conditionals<newline>"
Keyword:  "ifdef"
Text:  " "
Name.Variable:  "THING"
Text:  "<newline>"
Name.Variable:  "THING2"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "$("
Text:  "THING"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "else"
Text:  "<newline>"
Name.Variable:  "THING2"
Text:  " "
Operator:  "="
Text:  " default<newline>"
Keyword:  "endif"
Text:  "<newline><newline>"
Keyword:  "ifeq"
Text:  " "
Name.Variable:  "($(TARGET),special) "
Comment:  "# syntax variant: parentheses and separating comma<newline>"
Name.Variable:  "TARGET"
Text:  " "
Operator:  "="
Text:  " something_else<newline>"
Keyword:  "else"
Text:  "<newline>\t"
Keyword:  "ifneq"
Text:  " "
Name.Variable:  "'$(TARGET)' \"don't\" "
Comment:  "# syntax variant: either argument can be single or double quoted<newline>"
Name.Variable:  "TARGET"
Text:  " "
Operator:  "="
Text:  " be_silly<newline>\t"
Keyword:  "endif "
Comment:  "# and can be indented, even with tabs (so long as not in a recipe)<newline>"
Keyword:  "endif"
Text:  "<newline><newline>"
Name.Label:  "count"
Operator:  ":"
Text:  "<newline>\t"
Name.Builtin:  "echo "
Text:  "one<newline>\t"
Name.Builtin:  "echo "
Text:  "two<newline>"
Keyword:  "ifndef"
Text:  " "
Name.Variable:  "QUIET "
Comment:  "# conditionals can happen within recipes"
Text:  "<newline>\t"
Name.Builtin:  "echo "
Text:  "miss a few<newline>"
Keyword:  "endif"
Text:  "<newline>\t"
Name.Builtin:  "echo "
Text:  "one hundred<newline><newline>"
Comment:  "# Dollars must be escaped if a literal one is required<newline>"
Text:  "<newline>"
Name.Label:  "print_path"
Operator:  ":"
Text:  "<newline>\t"
Name.Builtin:  "echo"
Text:  " "
Name.Variable:  "$$"
Text:  "PATH<newline><newline>"
Comment:  "# The define Directive<newline>"
Keyword:  "define"
Text:  " "
Name.Variable:  "variable"
Text:  "<newline>"
Keyword:  "define"
Text:  " "
Name.Variable:  "variable ="
Text:  "<newline>"
Name.Label:  "define variable "
Operator:  ":"
Name.Function:  "="
Text:  "<newline>"
Name.Label:  "define variable "
Operator:  "::"
Name.Function:  "="
Text:  "<newline>"
Keyword:  "define"
Text:  " "
Name.Variable:  "variable +="
Text:  "<newline>"
Keyword:  "define"
Text:  " "
Name.Variable:  "variable ?="
Text:  "<newline><newline>"
Keyword:  "define"
Text:  " "
Name.Variable:  "PROGRAM_template ="
Text:  "<newline>\t"
Name.Label:  "$(1)"
Operator:  ":"
Text:  " "
Name.Function:  "$$($(1)_OBJS) $$($(1)_LIBS:%=-l%)"
Text:  "<newline>\tALL_OBJS +"
Operator:  "="
Text:  " "
Punctuation:  "$$($("
Text:  "1"
Punctuation:  ")"
Text:  "_OBJS"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "endef"
Text:  "<newline><newline>"
Comment:  "# Secondary expansion<newline>"
Name.Label:  ".SECONDEXPANSION"
Operator:  ":"
Text:  "<newline>"
Name.Variable:  "ONEVAR"
Text:  " "
Operator:  "="
Text:  " onefile<newline>"
Name.Variable:  "TWOVAR"
Text:  " "
Operator:  "="
Text:  " twofile<newline>"
Name.Label:  "myfile"
Operator:  ":"
Text:  " "
Name.Function:  "$(ONEVAR) $$(TWOVAR)"
Text:  "<newline><newline>"
Name.Label:  "main lib"
Operator:  ":"
Text:  " "
Name.Function:  "$$(patsubst %.c"
Punctuation:  ","
Name.Function:  "%.o"
Punctuation:  ","
Name.Function:  "$$($$@_SRCS))"
Text:  "<newline><newline>"
Comment:  "# The eval function<newline>"
Name.Function:  "$("
Name.Builtin:  "foreach"
Text:  " prog,"
Punctuation:  "$("
Text:  "PROGRAMS"
Punctuation:  ")"
Text:  ","
Punctuation:  "$("
Name.Builtin:  "eval"
Text:  " "
Punctuation:  "$("
Text:  "call PROGRAM_template,"
Punctuation:  "$("
Text:  "prog"
Punctuation:  "))))"
Text:  "<newline><newline>"
Comment:  "# The override Directive<newline>"
Name.Builtin:  "override"
Text:  " "
Keyword:  "define"
Text:  " "
Name.Variable:  "foo ="
Text:  "<newline>"
Keyword:  "endef"
Text:  "<newline><newline>"
Name.Builtin:  "override"
Text:  " "
Name.Variable:  "variable"
Text:  " "
Operator:  "="
Text:  " value<newline>"
Name.Builtin:  "override"
Text:  " "
Name.Variable:  "variable"
Text:  " "
Operator:  ":="
Text:  " value<newline>"
Name.Builtin:  "override"
Text:  " "
Name.Variable:  "variable"
Text:  " "
Operator:  "+="
Text:  " more text<newline>"
Name.Builtin:  "override"
Text:  " "
Name.Variable:  "CFLAGS"
Text:  " "
Operator:  "+="
Text:  " "
Name.Tag:  "-g"
Text:  "<newline><newline>"
Comment:  "# export/unexport<newline>"
Keyword:  "export "
Name.Variable:  "variable"
Text:  " "
Operator:  "="
Text:  " value<newline>"
Keyword:  "export "
Name.Variable:  "variable"
Text:  " "
Operator:  ":="
Text:  " value<newline>"
Keyword:  "export "
Name.Variable:  "variable"
Text:  " "
Operator:  "+="
Text:  " value<newline>"
Keyword:  "export"
Text:  " "
Name.Variable:  "variable"
Text:  "<newline>"
Keyword:  "unexport"
Text:  " "
Name.Variable:  "variable"
Text:  "<newline>"
