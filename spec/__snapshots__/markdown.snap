Name.Namespace:  "---"
Text:  "<newline>"
Name.Attribute:  "title"
Punctuation.Indicator:  ":"
Text:  " "
Literal.String.Double:  "\""
Literal.String:  "Markdown:"
Name.Variable:  " "
Literal.String:  "Syntax\""
Text:  "<newline>"
Name.Attribute:  "author"
Punctuation.Indicator:  ":"
Text:  " "
Literal.String:  "daringfireball.net"
Text:  "<newline>"
Name.Namespace:  "---"
Text:  "<newline><newline>"
Generic.Subheading:  "Markdown: Syntax<newline>================<newline>"
Text:  "<newline>"
Name.Tag:  "<ul"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"ProjectSubmenu\""
Name.Tag:  ">"
Text:  "<newline>    "
Name.Tag:  "<li><a"
Text:  " "
Name.Attribute:  "href="
Literal.String:  "\"/projects/markdown/\""
Text:  " "
Name.Attribute:  "title="
Literal.String:  "\"Markdown Project Page\""
Name.Tag:  ">"
Text:  "Main"
Name.Tag:  "</a></li>"
Text:  "<newline>    "
Name.Tag:  "<li><a"
Text:  " "
Name.Attribute:  "href="
Literal.String:  "\"/projects/markdown/basics\""
Text:  " "
Name.Attribute:  "title="
Literal.String:  "\"Markdown Basics\""
Name.Tag:  ">"
Text:  "Basics"
Name.Tag:  "</a></li>"
Text:  "<newline>    "
Name.Tag:  "<li><a"
Text:  " "
Name.Attribute:  "class="
Literal.String:  "\"selected\""
Text:  " "
Name.Attribute:  "title="
Literal.String:  "\"Markdown Syntax Documentation\""
Name.Tag:  ">"
Text:  "Syntax"
Name.Tag:  "</a></li>"
Text:  "<newline>    "
Name.Tag:  "<li><a"
Text:  " "
Name.Attribute:  "href="
Literal.String:  "\"/projects/markdown/license\""
Text:  " "
Name.Attribute:  "title="
Literal.String:  "\"Pricing and License Information\""
Name.Tag:  ">"
Text:  "License"
Name.Tag:  "</a></li>"
Text:  "<newline>    "
Name.Tag:  "<li><a"
Text:  " "
Name.Attribute:  "href="
Literal.String:  "\"/projects/markdown/dingus\""
Text:  " "
Name.Attribute:  "title="
Literal.String:  "\"Online Markdown Web Form\""
Name.Tag:  ">"
Text:  "Dingus"
Name.Tag:  "</a></li>"
Text:  "<newline>"
Name.Tag:  "</ul>"
Literal.String.Backtick:  "<newline><newline><newline>"
Punctuation:  "*"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Overview"
Punctuation:  "]("
Literal.String.Other:  "#overview"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Philosophy"
Punctuation:  "]("
Literal.String.Other:  "#philosophy"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Inline HTML"
Punctuation:  "]("
Literal.String.Other:  "#html"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Automatic Escaping for Special Characters"
Punctuation:  "]("
Literal.String.Other:  "#autoescape"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "*"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Block Elements"
Punctuation:  "]("
Literal.String.Other:  "#block"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Paragraphs and Line Breaks"
Punctuation:  "]("
Literal.String.Other:  "#p"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Headers"
Punctuation:  "]("
Literal.String.Other:  "#header"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Blockquotes"
Punctuation:  "]("
Literal.String.Other:  "#blockquote"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Lists"
Punctuation:  "]("
Literal.String.Other:  "#list"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Code Blocks"
Punctuation:  "]("
Literal.String.Other:  "#precode"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Horizontal Rules"
Punctuation:  "]("
Literal.String.Other:  "#hr"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "*"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Span Elements"
Punctuation:  "]("
Literal.String.Other:  "#span"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Links"
Punctuation:  "]("
Literal.String.Other:  "#link"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Emphasis"
Punctuation:  "]("
Literal.String.Other:  "#em"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Code"
Punctuation:  "]("
Literal.String.Other:  "#code"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Images"
Punctuation:  "]("
Literal.String.Other:  "#img"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "*"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Miscellaneous"
Punctuation:  "]("
Literal.String.Other:  "#misc"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Backslash Escapes"
Punctuation:  "]("
Literal.String.Other:  "#backslash"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "    *"
Text:  "   "
Punctuation:  "["
Name.Variable:  "Automatic Links"
Punctuation:  "]("
Literal.String.Other:  "#autolink"
Punctuation:  ")"
Literal.String.Backtick:  "<newline><newline><newline>"
Generic.Strong:  "**Note:**"
Text:  " This document is itself written using Markdown; you<newline>can "
Punctuation:  "["
Name.Variable:  "see the source for it by adding '.text' to the URL"
Punctuation:  "]["
Literal.String.Symbol:  "src"
Punctuation:  "]"
Text:  ".<newline><newline>  "
Punctuation:  "["
Literal.String.Symbol:  "src"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "/projects/markdown/syntax.text"
Text:  "<newline>"
Punctuation:  "<newline>* * *<newline>"
Text:  "<newline>"
Name.Tag:  "<h2"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"overview\""
Name.Tag:  ">"
Text:  "Overview"
Name.Tag:  "</h2>"
Text:  "<newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"philosophy\""
Name.Tag:  ">"
Text:  "Philosophy"
Name.Tag:  "</h3>"
Text:  "<newline><newline>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.<newline><newline>Readability, however, is emphasized above all else. A Markdown-formatted<newline>document should be publishable as-is, as plain text, without looking<newline>like it's been marked up with tags or formatting instructions. While<newline>Markdown's syntax has been influenced by several existing text-to-HTML<newline>filters -- including [Setext] [1], [atx] [2], [Textile] [3], [reStructuredText] [4],<newline>[Grutatext] [5], and [EtText] [6] -- the single biggest source of<newline>inspiration for Markdown's syntax is the format of plain text email.<newline><newline>  "
Punctuation:  "["
Literal.String.Symbol:  "1"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://docutils.sourceforge.net/mirror/setext.html"
Text:  "<newline>  "
Punctuation:  "["
Literal.String.Symbol:  "2"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://www.aaronsw.com/2002/atx/"
Text:  "<newline>  "
Punctuation:  "["
Literal.String.Symbol:  "3"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://textism.com/tools/textile/"
Text:  "<newline>  "
Punctuation:  "["
Literal.String.Symbol:  "4"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://docutils.sourceforge.net/rst.html"
Text:  "<newline>  "
Punctuation:  "["
Literal.String.Symbol:  "5"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://www.triptico.com/software/grutatxt.html"
Text:  "<newline>  "
Punctuation:  "["
Literal.String.Symbol:  "6"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://ettext.taint.org/doc/"
Text:  "<newline><newline>To this end, Markdown's syntax is comprised entirely of punctuation<newline>characters, which punctuation characters have been carefully chosen so<newline>as to look like what they mean. E.g., asterisks around a word actually<newline>look like "
Literal.String.Escape:  "\\*"
Text:  "emphasis"
Literal.String.Escape:  "\\*"
Text:  ". Markdown lists look like, well, lists. Even<newline>blockquotes look like quoted passages of text, assuming you've ever<newline>used email."
Literal.String.Backtick:  "<newline><newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"html\""
Name.Tag:  ">"
Text:  "Inline HTML"
Name.Tag:  "</h3>"
Text:  "<newline><newline>Markdown's syntax is intended for one purpose: to be used as a<newline>format for "
Generic.Emph:  "*writing*"
Text:  " for the web.<newline><newline>Markdown is not a replacement for HTML, or even close to it. Its<newline>syntax is very small, corresponding only to a very small subset of<newline>HTML tags. The idea is "
Generic.Emph:  "*not*"
Text:  " to create a syntax that makes it easier<newline>to insert HTML tags. In my opinion, HTML tags are already easy to<newline>insert. The idea for Markdown is to make it easy to read, write, and<newline>edit prose. HTML is a "
Generic.Emph:  "*publishing*"
Text:  " format; Markdown is a "
Generic.Emph:  "*writing*"
Text:  "<newline>format. Thus, Markdown's formatting syntax only addresses issues that<newline>can be conveyed in plain text.<newline><newline>For any markup that is not covered by Markdown's syntax, you simply<newline>use HTML itself. There's no need to preface it or delimit it to<newline>indicate that you're switching from Markdown to HTML; you just use<newline>the tags.<newline><newline>The only restrictions are that block-level HTML elements -- e.g. "
Literal.String.Backtick:  "`<div>`"
Text:  ",<newline>"
Literal.String.Backtick:  "`<table>`"
Text:  ", "
Literal.String.Backtick:  "`<pre>`"
Text:  ", "
Literal.String.Backtick:  "`<p>`"
Text:  ", etc. -- must be separated from surrounding<newline>content by blank lines, and the start and end tags of the block should<newline>not be indented with tabs or spaces. Markdown is smart enough not<newline>to add extra (unwanted) "
Literal.String.Backtick:  "`<p>`"
Text:  " tags around HTML block-level tags.<newline><newline>For example, to add an HTML table to a Markdown article:"
Literal.String.Backtick:  "<newline><newline>    This is a regular paragraph.<newline><newline>    <table><newline>        <tr><newline>            <td>Foo</td><newline>        </tr><newline>    </table><newline><newline>    This is another regular paragraph.<newline><newline>"
Text:  "highlighted:<newline><newline>This is a regular paragraph.<newline><newline>"
Name.Tag:  "<table>"
Text:  "<newline>    "
Name.Tag:  "<tr>"
Text:  "<newline>        "
Name.Tag:  "<td>"
Text:  "Foo"
Name.Tag:  "</td>"
Text:  "<newline>    "
Name.Tag:  "</tr>"
Text:  "<newline>"
Name.Tag:  "</table>"
Text:  "<newline><newline>This is another regular paragraph.<newline><newline>Note that Markdown formatting syntax is not processed within block-level<newline>HTML tags. E.g., you can't use Markdown-style "
Literal.String.Backtick:  "`*emphasis*`"
Text:  " inside an<newline>HTML block.<newline><newline>Span-level HTML tags -- e.g. "
Literal.String.Backtick:  "`<span>`"
Text:  ", "
Literal.String.Backtick:  "`<cite>`"
Text:  ", or "
Literal.String.Backtick:  "`<del>`"
Text:  " -- can be<newline>used anywhere in a Markdown paragraph, list item, or header. If you<newline>want, you can even use HTML tags instead of Markdown formatting; e.g. if<newline>you'd prefer to use HTML "
Literal.String.Backtick:  "`<a>`"
Text:  " or "
Literal.String.Backtick:  "`<img>`"
Text:  " tags instead of Markdown's<newline>link or image syntax, go right ahead.<newline><newline>Unlike block-level HTML tags, Markdown syntax "
Generic.Emph:  "*is*"
Text:  " processed within<newline>span-level tags."
Literal.String.Backtick:  "<newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"autoescape\""
Name.Tag:  ">"
Text:  "Automatic Escaping for Special Characters"
Name.Tag:  "</h3>"
Text:  "<newline><newline>In HTML, there are two characters that demand special treatment: "
Literal.String.Backtick:  "`<`"
Text:  "<newline>and "
Literal.String.Backtick:  "`&`"
Text:  ". Left angle brackets are used to start tags; ampersands are<newline>used to denote HTML entities. If you want to use them as literal<newline>characters, you must escape them as entities, e.g. "
Literal.String.Backtick:  "`&lt;`"
Text:  ", and<newline>"
Literal.String.Backtick:  "`&amp;`"
Text:  ".<newline><newline>Ampersands in particular are bedeviling for web writers. If you want to<newline>write about 'AT&T', you need to write '"
Literal.String.Backtick:  "`AT&amp;T`"
Text:  "'. You even need to<newline>escape ampersands within URLs. Thus, if you want to link to:"
Literal.String.Backtick:  "<newline><newline>    http://images.google.com/images?num=30&q=larry+bird<newline><newline>"
Text:  "http://images.google.com/images?num=30&q=larry+bird<newline><newline>you need to encode the URL as:"
Literal.String.Backtick:  "<newline><newline>    http://images.google.com/images?num=30&amp;q=larry+bird<newline><newline>"
Text:  "in your anchor tag "
Literal.String.Backtick:  "`href`"
Text:  " attribute. Needless to say, this is easy to<newline>forget, and is probably the single most common source of HTML validation<newline>errors in otherwise well-marked-up web sites.<newline><newline>Markdown allows you to use these characters naturally, taking care of<newline>all the necessary escaping for you. If you use an ampersand as part of<newline>an HTML entity, it remains unchanged; otherwise it will be translated<newline>into "
Literal.String.Backtick:  "`&amp;`"
Text:  ".<newline><newline>So, if you want to include a copyright symbol in your article, you can write:"
Literal.String.Backtick:  "<newline><newline>    &copy;<newline><newline>"
Name.Entity:  "&copy;"
Text:  "<newline><newline>and Markdown will leave it alone. But if you write:"
Literal.String.Backtick:  "<newline><newline>    AT&T<newline><newline>"
Text:  "AT&T<newline><newline>Markdown will translate it to:"
Literal.String.Backtick:  "<newline><newline>    AT&amp;T<newline><newline>"
Text:  "Similarly, because Markdown supports "
Punctuation:  "["
Name.Variable:  "inline HTML"
Punctuation:  "]("
Literal.String.Other:  "#html"
Punctuation:  ")"
Text:  ", if you use<newline>angle brackets as delimiters for HTML tags, Markdown will treat them as<newline>such. But if you write:"
Literal.String.Backtick:  "<newline><newline>    4 < 5<newline><newline>"
Text:  "highlighted:<newline><newline>4 < 5<newline><newline>Markdown will translate it to:"
Literal.String.Backtick:  "<newline><newline>    4 &lt; 5<newline><newline>"
Text:  "However, inside Markdown code spans and blocks, angle brackets and<newline>ampersands are "
Generic.Emph:  "*always*"
Text:  " encoded automatically. This makes it easy to use<newline>Markdown to write about HTML code. (As opposed to raw HTML, which is a<newline>terrible format for writing about HTML syntax, because every single "
Literal.String.Backtick:  "`<`"
Text:  "<newline>and "
Literal.String.Backtick:  "`&`"
Text:  " in your example code needs to be escaped.)"
Literal.String.Backtick:  "<newline><newline><newline>"
Punctuation:  "* * *<newline><newline>"
Text:  "<newline>"
Name.Tag:  "<h2"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"block\""
Name.Tag:  ">"
Text:  "Block Elements"
Name.Tag:  "</h2>"
Literal.String.Backtick:  "<newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"p\""
Name.Tag:  ">"
Text:  "Paragraphs and Line Breaks"
Name.Tag:  "</h3>"
Text:  "<newline><newline>A paragraph is simply one or more consecutive lines of text, separated<newline>by one or more blank lines. (A blank line is any line that looks like a<newline>blank line -- a line containing nothing but spaces or tabs is considered<newline>blank.) Normal paragraphs should not be indented with spaces or tabs.<newline><newline>The implication of the \"one or more consecutive lines of text\" rule is<newline>that Markdown supports \"hard-wrapped\" text paragraphs. This differs<newline>significantly from most other text-to-HTML formatters (including Movable<newline>Type's \"Convert Line Breaks\" option) which translate every line break<newline>character in a paragraph into a "
Literal.String.Backtick:  "`<br />`"
Text:  " tag.<newline><newline>When you "
Generic.Emph:  "*do*"
Text:  " want to insert a "
Literal.String.Backtick:  "`<br />`"
Text:  " break tag using Markdown, you<newline>end a line with two or more spaces, then type return.<newline><newline>Yes, this takes a tad more effort to create a "
Literal.String.Backtick:  "`<br />`"
Text:  ", but a simplistic<newline>\"every line break is a "
Literal.String.Backtick:  "`<br />`"
Text:  "\" rule wouldn't work for Markdown.<newline>Markdown's email-style "
Punctuation:  "["
Name.Variable:  "blockquoting"
Punctuation:  "]["
Literal.String.Symbol:  "bq"
Punctuation:  "]"
Text:  " and multi-paragraph "
Punctuation:  "["
Name.Variable:  "list items"
Punctuation:  "]["
Literal.String.Symbol:  "l"
Punctuation:  "]"
Text:  "<newline>work best -- and look better -- when you format them with hard breaks.<newline><newline>  "
Punctuation:  "["
Literal.String.Symbol:  "bq"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "#blockquote"
Text:  "<newline>  "
Punctuation:  "["
Literal.String.Symbol:  "l"
Punctuation:  "]:"
Text:  "  "
Literal.String.Other:  "#list"
Literal.String.Backtick:  "<newline><newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"header\""
Name.Tag:  ">"
Text:  "Headers"
Name.Tag:  "</h3>"
Text:  "<newline><newline>Markdown supports two styles of headers, [Setext] [1] and [atx] [2].<newline><newline>Setext-style headers are \"underlined\" using equal signs (for first-level<newline>headers) and dashes (for second-level headers). For example:"
Literal.String.Backtick:  "<newline><newline>    This is an H1<newline>    =============<newline><newline>    This is an H2<newline>    -------------<newline><newline>"
Text:  "highlighted:<newline><newline>"
Generic.Subheading:  "This is an H1<newline>=============<newline>"
Text:  "<newline>"
Generic.Heading:  "This is an H2<newline>-------------<newline>"
Text:  "<newline>Any number of underlining "
Literal.String.Backtick:  "`=`"
Text:  "'s or "
Literal.String.Backtick:  "`-`"
Text:  "'s will work.<newline><newline>Atx-style headers use 1-6 hash characters at the start of the line,<newline>corresponding to header levels 1-6. For example:"
Literal.String.Backtick:  "<newline><newline>    # This is an H1<newline><newline>    ## This is an H2<newline><newline>    ###### This is an H6<newline><newline>"
Text:  "highlighted:<newline><newline>"
Generic.Heading:  "# This is an H1"
Text:  "<newline><newline>"
Generic.Subheading:  "## This is an H2"
Text:  "<newline><newline>"
Generic.Subheading:  "###### This is an H6"
Text:  "<newline><newline>Optionally, you may \"close\" atx-style headers. This is purely<newline>cosmetic -- you can use this if you think it looks better. The<newline>closing hashes don't even need to match the number of hashes<newline>used to open the header. (The number of opening hashes<newline>determines the header level.) :"
Literal.String.Backtick:  "<newline><newline>    # This is an H1 #<newline><newline>    ## This is an H2 ##<newline><newline>    ### This is an H3 ######<newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"blockquote\""
Name.Tag:  ">"
Text:  "Blockquotes"
Name.Tag:  "</h3>"
Text:  "<newline><newline>Markdown uses email-style "
Literal.String.Backtick:  "`>`"
Text:  " characters for blockquoting. If you're<newline>familiar with quoting passages of text in an email message, then you<newline>know how to create a blockquote in Markdown. It looks best if you hard<newline>wrap the text and put a "
Literal.String.Backtick:  "`>`"
Text:  " before every line:"
Literal.String.Backtick:  "<newline><newline>    > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<newline>    > consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<newline>    > Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.<newline>    > <newline>    > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<newline>    > id sem consectetuer libero luctus adipiscing.<newline><newline>"
Generic.Traceback:  "> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,"
Text:  "<newline>"
Generic.Traceback:  "> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus."
Text:  "<newline>"
Generic.Traceback:  "> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus."
Text:  "<newline>"
Generic.Traceback:  "> "
Text:  "<newline>"
Generic.Traceback:  "> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse"
Text:  "<newline>"
Generic.Traceback:  "> id sem consectetuer libero luctus adipiscing."
Text:  "<newline><newline>Markdown allows you to be lazy and only put the "
Literal.String.Backtick:  "`>`"
Text:  " before the first<newline>line of a hard-wrapped paragraph:"
Literal.String.Backtick:  "<newline><newline>    > This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<newline>    consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<newline>    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.<newline><newline>    > Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<newline>    id sem consectetuer libero luctus adipiscing.<newline><newline>"
Text:  "Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by<newline>adding additional levels of "
Literal.String.Backtick:  "`>`"
Text:  ":"
Literal.String.Backtick:  "<newline><newline>    > This is the first level of quoting.<newline>    ><newline>    > > This is nested blockquote.<newline>    ><newline>    > Back to the first level.<newline><newline>"
Text:  "renders as:<newline>"
Generic.Traceback:  "<newline>> This is the first level of quoting."
Text:  "<newline>"
Generic.Traceback:  ">"
Text:  "<newline>"
Generic.Traceback:  "> > This is nested blockquote."
Text:  "<newline>"
Generic.Traceback:  ">"
Text:  "<newline>"
Generic.Traceback:  "> Back to the first level."
Text:  "<newline><newline>Blockquotes can contain other Markdown elements, including headers, lists,<newline>and code blocks:"
Literal.String.Backtick:  "<newline><newline>\t> ## This is a header.<newline>\t> <newline>\t> 1.   This is the first list item.<newline>\t> 2.   This is the second list item.<newline>\t> <newline>\t> Here's some example code:<newline>\t> <newline>\t>     return shell_exec(\"echo $input | $markdown_script\");<newline><newline>"
Text:  "Any decent text editor should make email-style quoting easy. For<newline>example, with BBEdit, you can make a selection and choose Increase<newline>Quote Level from the Text menu."
Literal.String.Backtick:  "<newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"list\""
Name.Tag:  ">"
Text:  "Lists"
Name.Tag:  "</h3>"
Text:  "<newline><newline>Markdown supports ordered (numbered) and unordered (bulleted) lists.<newline><newline>Unordered lists use asterisks, pluses, and hyphens -- interchangably<newline>-- as list markers:"
Literal.String.Backtick:  "<newline><newline>    *   Red<newline>    *   Green<newline>    *   Blue<newline><newline>"
Punctuation:  "*"
Text:  "   Red<newline>"
Punctuation:  "*"
Text:  "   Green<newline>"
Punctuation:  "*"
Text:  "   Blue<newline><newline>is equivalent to:"
Literal.String.Backtick:  "<newline><newline>    +   Red<newline>    +   Green<newline>    +   Blue<newline><newline>"
Punctuation:  "+"
Text:  "   Red<newline>"
Punctuation:  "+"
Text:  "   Green<newline>"
Punctuation:  "+"
Text:  "   Blue<newline><newline>and:"
Literal.String.Backtick:  "<newline><newline>    -   Red<newline>    -   Green<newline>    -   Blue<newline><newline>"
Punctuation:  "-"
Text:  "   Red<newline>"
Punctuation:  "-"
Text:  "   Green<newline>"
Punctuation:  "-"
Text:  "   Blue<newline><newline>Ordered lists use numbers followed by periods:"
Literal.String.Backtick:  "<newline><newline>    1.  Bird<newline>    2.  McHale<newline>    3.  Parish<newline><newline>"
Punctuation:  "1."
Text:  "  Bird<newline>"
Punctuation:  "2."
Text:  "  McHale<newline>"
Punctuation:  "3."
Text:  "  Parish<newline><newline>It's important to note that the actual numbers you use to mark the<newline>list have no effect on the HTML output Markdown produces. The HTML<newline>Markdown produces from the above list is:"
Literal.String.Backtick:  "<newline><newline>    <ol><newline>    <li>Bird</li><newline>    <li>McHale</li><newline>    <li>Parish</li><newline>    </ol><newline><newline>"
Text:  "If you instead wrote the list in Markdown like this:"
Literal.String.Backtick:  "<newline><newline>    1.  Bird<newline>    1.  McHale<newline>    1.  Parish<newline><newline>"
Text:  "or even:"
Literal.String.Backtick:  "<newline><newline>    3. Bird<newline>    1. McHale<newline>    8. Parish<newline><newline>"
Text:  "you'd get the exact same HTML output. The point is, if you want to,<newline>you can use ordinal numbers in your ordered Markdown lists, so that<newline>the numbers in your source match the numbers in your published HTML.<newline>But if you want to be lazy, you don't have to.<newline><newline>If you do use lazy list numbering, however, you should still start the<newline>list with the number 1. At some point in the future, Markdown may support<newline>starting ordered lists at an arbitrary number.<newline><newline>List markers typically start at the left margin, but may be indented by<newline>up to three spaces. List markers must be followed by one or more spaces<newline>or a tab.<newline><newline>To make lists look nice, you can wrap items with hanging indents:"
Literal.String.Backtick:  "<newline><newline>    *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<newline>        Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<newline>        viverra nec, fringilla in, laoreet vitae, risus.<newline>    *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<newline>        Suspendisse id sem consectetuer libero luctus adipiscing.<newline><newline>"
Punctuation:  "*"
Text:  "   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<newline>    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<newline>    viverra nec, fringilla in, laoreet vitae, risus.<newline>"
Punctuation:  "*"
Text:  "   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<newline>    Suspendisse id sem consectetuer libero luctus adipiscing.<newline><newline>But if you want to be lazy, you don't have to:"
Literal.String.Backtick:  "<newline><newline>    *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<newline>    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<newline>    viverra nec, fringilla in, laoreet vitae, risus.<newline>    *   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<newline>    Suspendisse id sem consectetuer libero luctus adipiscing.<newline><newline>"
Text:  "If list items are separated by blank lines, Markdown will wrap the<newline>items in "
Literal.String.Backtick:  "`<p>`"
Text:  " tags in the HTML output. For example, this input:"
Literal.String.Backtick:  "<newline><newline>    *   Bird<newline>    *   Magic<newline><newline>"
Text:  "will turn into:"
Literal.String.Backtick:  "<newline><newline>    <ul><newline>    <li>Bird</li><newline>    <li>Magic</li><newline>    </ul><newline><newline>"
Text:  "But this:"
Literal.String.Backtick:  "<newline><newline>    *   Bird<newline><newline>    *   Magic<newline><newline>"
Text:  "will turn into:"
Literal.String.Backtick:  "<newline><newline>    <ul><newline>    <li><p>Bird</p></li><newline>    <li><p>Magic</p></li><newline>    </ul><newline><newline>"
Text:  "List items may consist of multiple paragraphs. Each subsequent<newline>paragraph in a list item must be indented by either 4 spaces<newline>or one tab:"
Literal.String.Backtick:  "<newline><newline>    1.  This is a list item with two paragraphs. Lorem ipsum dolor<newline>        sit amet, consectetuer adipiscing elit. Aliquam hendrerit<newline>        mi posuere lectus.<newline><newline>        Vestibulum enim wisi, viverra nec, fringilla in, laoreet<newline>        vitae, risus. Donec sit amet nisl. Aliquam semper ipsum<newline>        sit amet velit.<newline><newline>    2.  Suspendisse id sem consectetuer libero luctus adipiscing.<newline><newline>"
Text:  "It looks nice if you indent every line of the subsequent<newline>paragraphs, but here again, Markdown will allow you to be<newline>lazy:"
Literal.String.Backtick:  "<newline><newline>    *   This is a list item with two paragraphs.<newline><newline>        This is the second paragraph in the list item. You're<newline>    only required to indent the first line. Lorem ipsum dolor<newline>    sit amet, consectetuer adipiscing elit.<newline><newline>    *   Another item in the same list.<newline><newline>"
Text:  "To put a blockquote within a list item, the blockquote's "
Literal.String.Backtick:  "`>`"
Text:  "<newline>delimiters need to be indented:"
Literal.String.Backtick:  "<newline><newline>    *   A list item with a blockquote:<newline><newline>        > This is a blockquote<newline>        > inside a list item.<newline><newline>"
Text:  "To put a code block within a list item, the code block needs<newline>to be indented "
Generic.Emph:  "*twice*"
Text:  " -- 8 spaces or two tabs:"
Literal.String.Backtick:  "<newline><newline>    *   A list item with a code block:<newline><newline>            <code goes here><newline><newline><newline>"
Text:  "It's worth noting that it's possible to trigger an ordered list by<newline>accident, by writing something like this:"
Literal.String.Backtick:  "<newline><newline>    1986. What a great season.<newline><newline>"
Text:  "In other words, a "
Generic.Emph:  "*number-period-space*"
Text:  " sequence at the beginning of a<newline>line. To avoid this, you can backslash-escape the period:"
Literal.String.Backtick:  "<newline><newline>    1986\\. What a great season.<newline><newline>"
Text:  "1986"
Literal.String.Escape:  "\\."
Text:  " What a great season."
Literal.String.Backtick:  "<newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"precode\""
Name.Tag:  ">"
Text:  "Code Blocks"
Name.Tag:  "</h3>"
Text:  "<newline><newline>Pre-formatted code blocks are used for writing about programming or<newline>markup source code. Rather than forming normal paragraphs, the lines<newline>of a code block are interpreted literally. Markdown wraps a code block<newline>in both "
Literal.String.Backtick:  "`<pre>`"
Text:  " and "
Literal.String.Backtick:  "`<code>`"
Text:  " tags.<newline><newline>To produce a code block in Markdown, simply indent every line of the<newline>block by at least 4 spaces or 1 tab. For example, given this input:"
Literal.String.Backtick:  "<newline><newline>    This is a normal paragraph:<newline><newline>        This is a code block.<newline><newline>"
Text:  "This is a normal paragraph:"
Literal.String.Backtick:  "<newline><newline>    This is a code block.<newline><newline>"
Text:  "Markdown will generate:"
Literal.String.Backtick:  "<newline><newline>    <p>This is a normal paragraph:</p><newline><newline>    <pre><code>This is a code block.<newline>    </code></pre><newline><newline>"
Text:  "One level of indentation -- 4 spaces or 1 tab -- is removed from each<newline>line of the code block. For example, this:"
Literal.String.Backtick:  "<newline><newline>    Here is an example of AppleScript:<newline><newline>        tell application \"Foo\"<newline>            beep<newline>        end tell<newline><newline>"
Text:  "will turn into:"
Literal.String.Backtick:  "<newline><newline>    <p>Here is an example of AppleScript:</p><newline><newline>    <pre><code>tell application \"Foo\"<newline>        beep<newline>    end tell<newline>    </code></pre><newline><newline>"
Text:  "A code block continues until it reaches a line that is not indented<newline>(or the end of the article).<newline><newline>Within a code block, ampersands ("
Literal.String.Backtick:  "`&`"
Text:  ") and angle brackets ("
Literal.String.Backtick:  "`<`"
Text:  " and "
Literal.String.Backtick:  "`>`"
Text:  ")<newline>are automatically converted into HTML entities. This makes it very<newline>easy to include example HTML source code using Markdown -- just paste<newline>it and indent it, and Markdown will handle the hassle of encoding the<newline>ampersands and angle brackets. For example, this:"
Literal.String.Backtick:  "<newline><newline>        <div class=\"footer\"><newline>            &copy; 2004 Foo Corporation<newline>        </div><newline><newline>"
Text:  "will turn into:"
Literal.String.Backtick:  "<newline><newline>    <pre><code>&lt;div class=\"footer\"&gt;<newline>        &amp;copy; 2004 Foo Corporation<newline>    &lt;/div&gt;<newline>    </code></pre><newline><newline>"
Text:  "Regular Markdown syntax is not processed within code blocks. E.g.,<newline>asterisks are just literal asterisks within a code block. This means<newline>it's also easy to use Markdown to write about Markdown's own syntax."
Literal.String.Backtick:  "<newline><newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"hr\""
Name.Tag:  ">"
Text:  "Horizontal Rules"
Name.Tag:  "</h3>"
Text:  "<newline><newline>You can produce a horizontal rule tag ("
Literal.String.Backtick:  "`<hr />`"
Text:  ") by placing three or<newline>more hyphens, asterisks, or underscores on a line by themselves. If you<newline>wish, you may use spaces between the hyphens or asterisks. Each of the<newline>following lines will produce a horizontal rule:"
Literal.String.Backtick:  "<newline><newline>    * * *<newline><newline>    ***<newline><newline>    *****<newline><newline>    - - -<newline><newline>    ---------------------------------------<newline><newline>"
Text:  "highlighted:<newline>"
Punctuation:  "<newline>* * *<newline><newline>***<newline><newline>*****<newline><newline>- - -<newline><newline>---------------------------------------<newline><newline>* * *<newline>"
Text:  "<newline>"
Name.Tag:  "<h2"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"span\""
Name.Tag:  ">"
Text:  "Span Elements"
Name.Tag:  "</h2>"
Text:  "<newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"link\""
Name.Tag:  ">"
Text:  "Links"
Name.Tag:  "</h3>"
Text:  "<newline><newline>Markdown supports two style of links: "
Generic.Emph:  "*inline*"
Text:  " and "
Generic.Emph:  "*reference*"
Text:  ".<newline><newline>In both styles, the link text is delimited by [square brackets].<newline><newline>To create an inline link, use a set of regular parentheses immediately<newline>after the link text's closing square bracket. Inside the parentheses,<newline>put the URL where you want the link to point, along with an "
Generic.Emph:  "*optional*"
Text:  "<newline>title for the link, surrounded in quotes. For example:"
Literal.String.Backtick:  "<newline><newline>    This is [an example](http://example.com/ \"Title\") inline link.<newline><newline>    [This link](http://example.net/) has no title attribute.<newline><newline>"
Text:  "This is "
Punctuation:  "["
Name.Variable:  "an example"
Punctuation:  "]("
Literal.String.Other:  "http://example.com/"
Text:  " "
Name.Namespace:  "\"Title\""
Punctuation:  ")"
Text:  " inline link.<newline><newline>"
Punctuation:  "["
Name.Variable:  "This link"
Punctuation:  "]("
Literal.String.Other:  "http://example.net/"
Punctuation:  ")"
Text:  " has no title attribute.<newline><newline>Will produce:"
Literal.String.Backtick:  "<newline><newline>    <p>This is <a href=\"http://example.com/\" title=\"Title\"><newline>    an example</a> inline link.</p><newline><newline>    <p><a href=\"http://example.net/\">This link</a> has no<newline>    title attribute.</p><newline><newline>"
Text:  "If you're referring to a local resource on the same server, you can<newline>use relative paths:"
Literal.String.Backtick:  "<newline><newline>    See my [About](/about/) page for details.   <newline><newline>"
Text:  "See my "
Punctuation:  "["
Name.Variable:  "About"
Punctuation:  "]("
Literal.String.Other:  "/about/"
Punctuation:  ")"
Text:  " page for details.   <newline><newline>Reference-style links use a second set of square brackets, inside<newline>which you place a label of your choosing to identify the link:"
Literal.String.Backtick:  "<newline><newline>    This is [an example][id] reference-style link.<newline><newline>"
Text:  "This is "
Punctuation:  "["
Name.Variable:  "an example"
Punctuation:  "]["
Literal.String.Symbol:  "id"
Punctuation:  "]"
Text:  " reference-style link.<newline><newline>You can optionally use a space to separate the sets of brackets:"
Literal.String.Backtick:  "<newline><newline>    This is [an example] [id] reference-style link.<newline><newline>"
Text:  "This is [an example] [id] reference-style link.<newline><newline>Then, anywhere in the document, you define your link label like this,<newline>on a line by itself:"
Literal.String.Backtick:  "<newline><newline>    [id]: http://example.com/  \"Optional Title Here\"<newline><newline>"
Text:  "highlighted:<newline><newline>"
Punctuation:  "["
Literal.String.Symbol:  "id"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://example.com/"
Text:  "  "
Name.Namespace:  "\"Optional Title Here\""
Text:  "<newline><newline>That is:<newline>"
Punctuation:  "<newline>*"
Text:  "   Square brackets containing the link identifier (optionally<newline>    indented from the left margin using up to three spaces);<newline>"
Punctuation:  "*"
Text:  "   followed by a colon;<newline>"
Punctuation:  "*"
Text:  "   followed by one or more spaces (or tabs);<newline>"
Punctuation:  "*"
Text:  "   followed by the URL for the link;<newline>"
Punctuation:  "*"
Text:  "   optionally followed by a title attribute for the link, enclosed<newline>    in double or single quotes, or enclosed in parentheses.<newline><newline>The following three link definitions are equivalent:"
Literal.String.Backtick:  "<newline><newline>\t[foo]: http://example.com/  \"Optional Title Here\"<newline>\t[foo]: http://example.com/  'Optional Title Here'<newline>\t[foo]: http://example.com/  (Optional Title Here)<newline><newline>"
Punctuation:  "["
Literal.String.Symbol:  "foo"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://example.com/"
Text:  "  "
Name.Namespace:  "\"Optional Title Here\""
Text:  "<newline>"
Punctuation:  "["
Literal.String.Symbol:  "foo"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://example.com/"
Text:  "  "
Name.Namespace:  "'Optional Title Here'"
Text:  "<newline>"
Punctuation:  "["
Literal.String.Symbol:  "foo"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://example.com/"
Text:  "  "
Name.Namespace:  "(Optional Title Here)"
Text:  "<newline><newline>"
Generic.Strong:  "**Note:**"
Text:  " There is a known bug in Markdown.pl 1.0.1 which prevents<newline>single quotes from being used to delimit link titles.<newline><newline>The link URL may, optionally, be surrounded by angle brackets:"
Literal.String.Backtick:  "<newline><newline>    [id]: <http://example.com/>  \"Optional Title Here\"<newline><newline>"
Punctuation:  "["
Literal.String.Symbol:  "id"
Punctuation:  "]:"
Text:  " "
Name.Tag:  "<"
Literal.String.Other:  "http://example.com/"
Name.Tag:  ">"
Text:  "  "
Name.Namespace:  "\"Optional Title Here\""
Text:  "<newline><newline>You can put the title attribute on the next line and use extra spaces<newline>or tabs for padding, which tends to look better with longer URLs:"
Literal.String.Backtick:  "<newline><newline>    [id]: http://example.com/longish/path/to/resource/here<newline>        \"Optional Title Here\"<newline><newline>"
Punctuation:  "["
Literal.String.Symbol:  "id"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://example.com/longish/path/to/resource/here"
Text:  "<newline>    "
Name.Namespace:  "\"Optional Title Here\""
Text:  "<newline><newline>Link definitions are only used for creating links during Markdown<newline>processing, and are stripped from your document in the HTML output.<newline><newline>Link definition names may consist of letters, numbers, spaces, and<newline>punctuation -- but they are "
Generic.Emph:  "*not*"
Text:  " case sensitive. E.g. these two<newline>links:"
Literal.String.Backtick:  "<newline><newline>\t[link text][a]<newline>\t[link text][A]<newline><newline>"
Text:  "are equivalent.<newline><newline>The "
Generic.Emph:  "*implicit link name*"
Text:  " shortcut allows you to omit the name of the<newline>link, in which case the link text itself is used as the name.<newline>Just use an empty set of square brackets -- e.g., to link the word<newline>\"Google\" to the google.com web site, you could simply write:"
Literal.String.Backtick:  "<newline><newline>\t[Google][]<newline><newline>"
Text:  "And then define the link:"
Literal.String.Backtick:  "<newline><newline>\t[Google]: http://google.com/<newline><newline>"
Text:  "Because link names may contain spaces, this shortcut even works for<newline>multiple words in the link text:"
Literal.String.Backtick:  "<newline><newline>\tVisit [Daring Fireball][] for more information.<newline><newline>"
Text:  "And then define the link:<newline>\t<newline>\t"
Punctuation:  "["
Literal.String.Symbol:  "Daring Fireball"
Punctuation:  "]:"
Text:  " "
Literal.String.Other:  "http://daringfireball.net/"
Text:  "<newline><newline>Link definitions can be placed anywhere in your Markdown document. I<newline>tend to put them immediately after each paragraph in which they're<newline>used, but if you want, you can put them all at the end of your<newline>document, sort of like footnotes.<newline><newline>Here's an example of reference links in action:"
Literal.String.Backtick:  "<newline><newline>    I get 10 times more traffic from [Google] [1] than from<newline>    [Yahoo] [2] or [MSN] [3].<newline><newline>      [1]: http://google.com/        \"Google\"<newline>      [2]: http://search.yahoo.com/  \"Yahoo Search\"<newline>      [3]: http://search.msn.com/    \"MSN Search\"<newline><newline>"
Text:  "Using the implicit link name shortcut, you could instead write:"
Literal.String.Backtick:  "<newline><newline>    I get 10 times more traffic from [Google][] than from<newline>    [Yahoo][] or [MSN][].<newline><newline>      [google]: http://google.com/        \"Google\"<newline>      [yahoo]:  http://search.yahoo.com/  \"Yahoo Search\"<newline>      [msn]:    http://search.msn.com/    \"MSN Search\"<newline><newline>"
Text:  "Both of the above examples will produce the following HTML output:"
Literal.String.Backtick:  "<newline><newline>    <p>I get 10 times more traffic from <a href=\"http://google.com/\"<newline>    title=\"Google\">Google</a> than from<newline>    <a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\">Yahoo</a><newline>    or <a href=\"http://search.msn.com/\" title=\"MSN Search\">MSN</a>.</p><newline><newline>"
Text:  "For comparison, here is the same paragraph written using<newline>Markdown's inline link style:"
Literal.String.Backtick:  "<newline><newline>    I get 10 times more traffic from [Google](http://google.com/ \"Google\")<newline>    than from [Yahoo](http://search.yahoo.com/ \"Yahoo Search\") or<newline>    [MSN](http://search.msn.com/ \"MSN Search\").<newline><newline>"
Text:  "The point of reference-style links is not that they're easier to<newline>write. The point is that with reference-style links, your document<newline>source is vastly more readable. Compare the above examples: using<newline>reference-style links, the paragraph itself is only 81 characters<newline>long; with inline-style links, it's 176 characters; and as raw HTML,<newline>it's 234 characters. In the raw HTML, there's more markup than there<newline>is text.<newline><newline>With Markdown's reference-style links, a source document much more<newline>closely resembles the final output, as rendered in a browser. By<newline>allowing you to move the markup-related metadata out of the paragraph,<newline>you can add links without interrupting the narrative flow of your<newline>prose."
Literal.String.Backtick:  "<newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"em\""
Name.Tag:  ">"
Text:  "Emphasis"
Name.Tag:  "</h3>"
Text:  "<newline><newline>Markdown treats asterisks ("
Literal.String.Backtick:  "`*`"
Text:  ") and underscores ("
Literal.String.Backtick:  "`_`"
Text:  ") as indicators of<newline>emphasis. Text wrapped with one "
Literal.String.Backtick:  "`*`"
Text:  " or "
Literal.String.Backtick:  "`_`"
Text:  " will be wrapped with an<newline>HTML "
Literal.String.Backtick:  "`<em>`"
Text:  " tag; double "
Literal.String.Backtick:  "`*`"
Text:  "'s or "
Literal.String.Backtick:  "`_`"
Text:  "'s will be wrapped with an HTML<newline>"
Literal.String.Backtick:  "`<strong>`"
Text:  " tag. E.g., this input:"
Literal.String.Backtick:  "<newline><newline>    *single asterisks*<newline><newline>    _single underscores_<newline><newline>    **double asterisks**<newline><newline>    __double underscores__<newline><newline>"
Text:  "will produce:"
Literal.String.Backtick:  "<newline><newline>    <em>single asterisks</em><newline><newline>    <em>single underscores</em><newline><newline>    <strong>double asterisks</strong><newline><newline>    <strong>double underscores</strong><newline><newline>"
Text:  "You can use whichever style you prefer; the lone restriction is that<newline>the same character must be used to open and close an emphasis span.<newline><newline>Emphasis can be used in the middle of a word:"
Literal.String.Backtick:  "<newline><newline>    un*frigging*believable<newline><newline>"
Text:  "un"
Generic.Emph:  "*frigging*"
Text:  "believable<newline><newline>But if you surround an "
Literal.String.Backtick:  "`*`"
Text:  " or "
Literal.String.Backtick:  "`_`"
Text:  " with spaces, it'll be treated as a<newline>literal asterisk or underscore.<newline><newline>To produce a literal asterisk or underscore at a position where it<newline>would otherwise be used as an emphasis delimiter, you can backslash<newline>escape it:"
Literal.String.Backtick:  "<newline><newline>    \\*this text is surrounded by literal asterisks\\*<newline><newline>"
Literal.String.Escape:  "\\*"
Text:  "this text is surrounded by literal asterisks"
Literal.String.Escape:  "\\*"
Literal.String.Backtick:  "<newline><newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"code\""
Name.Tag:  ">"
Text:  "Code"
Name.Tag:  "</h3>"
Text:  "<newline><newline>To indicate a span of code, wrap it with backtick quotes ("
Literal.String.Backtick:  "`` ` ``"
Text:  ").<newline>Unlike a pre-formatted code block, a code span indicates code within a<newline>normal paragraph. For example:"
Literal.String.Backtick:  "<newline><newline>    Use the `printf()` function.<newline><newline>"
Text:  "Use the "
Literal.String.Backtick:  "`printf()`"
Text:  " function.<newline><newline>will produce:"
Literal.String.Backtick:  "<newline><newline>    <p>Use the <code>printf()</code> function.</p><newline><newline>"
Text:  "To include a literal backtick character within a code span, you can use<newline>multiple backticks as the opening and closing delimiters:"
Literal.String.Backtick:  "<newline><newline>    ``There is a literal backtick (`) here.``<newline><newline>``There is a literal backtick (`) here.``"
Text:  "<newline><newline>which will produce this:"
Literal.String.Backtick:  "<newline><newline>    <p><code>There is a literal backtick (`) here.</code></p><newline><newline>"
Text:  "The backtick delimiters surrounding a code span may include spaces --<newline>one after the opening, one before the closing. This allows you to place<newline>literal backtick characters at the beginning or end of a code span:"
Literal.String.Backtick:  "<newline><newline>\tA single backtick in a code span: `` ` ``<newline>\t<newline>\tA backtick-delimited string in a code span: `` `foo` ``<newline><newline>"
Text:  "A single backtick in a code span: "
Literal.String.Backtick:  "`` ` ``"
Text:  "<newline><newline>A backtick-delimited string in a code span: "
Literal.String.Backtick:  "`` `foo` ``"
Text:  "<newline><newline>will produce:"
Literal.String.Backtick:  "<newline><newline>\t<p>A single backtick in a code span: <code>`</code></p><newline>\t<newline>\t<p>A backtick-delimited string in a code span: <code>`foo`</code></p><newline><newline>"
Text:  "With a code span, ampersands and angle brackets are encoded as HTML<newline>entities automatically, which makes it easy to include example HTML<newline>tags. Markdown will turn this:"
Literal.String.Backtick:  "<newline><newline>    Please don't use any `<blink>` tags.<newline><newline>"
Text:  "Please don't use any "
Literal.String.Backtick:  "`<blink>`"
Text:  " tags.<newline><newline>into:"
Literal.String.Backtick:  "<newline><newline>    <p>Please don't use any <code>&lt;blink&gt;</code> tags.</p><newline><newline>"
Text:  "You can write this:"
Literal.String.Backtick:  "<newline><newline>    `&#8212;` is the decimal-encoded equivalent of `&mdash;`.<newline><newline>`&#8212;`"
Text:  " is the decimal-encoded equivalent of "
Literal.String.Backtick:  "`&mdash;`"
Text:  ".<newline><newline>to produce:"
Literal.String.Backtick:  "<newline><newline>    <p><code>&amp;#8212;</code> is the decimal-encoded<newline>    equivalent of <code>&amp;mdash;</code>.</p><newline><newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"img\""
Name.Tag:  ">"
Text:  "Images"
Name.Tag:  "</h3>"
Text:  "<newline><newline>Admittedly, it's fairly difficult to devise a \"natural\" syntax for<newline>placing images into a plain text document format.<newline><newline>Markdown uses an image syntax that is intended to resemble the syntax<newline>for links, allowing for two styles: "
Generic.Emph:  "*inline*"
Text:  " and "
Generic.Emph:  "*reference*"
Text:  ".<newline><newline>Inline image syntax looks like this:"
Literal.String.Backtick:  "<newline><newline>    ![Alt text](/path/to/img.jpg)<newline><newline>    ![Alt text](/path/to/img.jpg \"Optional title\")<newline><newline>"
Punctuation:  "!["
Name.Variable:  "Alt text"
Punctuation:  "]("
Literal.String.Other:  "/path/to/img.jpg"
Punctuation:  ")"
Text:  "<newline><newline>"
Punctuation:  "!["
Name.Variable:  "Alt text"
Punctuation:  "]("
Literal.String.Other:  "/path/to/img.jpg"
Text:  " "
Name.Namespace:  "\"Optional title\""
Punctuation:  ")"
Text:  "<newline><newline>That is:<newline>"
Punctuation:  "<newline>*"
Text:  "   An exclamation mark: "
Literal.String.Backtick:  "`!`"
Text:  ";<newline>"
Punctuation:  "*"
Text:  "   followed by a set of square brackets, containing the "
Literal.String.Backtick:  "`alt`"
Text:  "<newline>    attribute text for the image;<newline>"
Punctuation:  "*"
Text:  "   followed by a set of parentheses, containing the URL or path to<newline>    the image, and an optional "
Literal.String.Backtick:  "`title`"
Text:  " attribute enclosed in double<newline>    or single quotes.<newline><newline>Reference-style image syntax looks like this:"
Literal.String.Backtick:  "<newline><newline>    ![Alt text][id]<newline><newline>"
Text:  "Where \"id\" is the name of a defined image reference. Image references<newline>are defined using syntax identical to link references:"
Literal.String.Backtick:  "<newline><newline>    [id]: url/to/image  \"Optional title attribute\"<newline><newline>"
Text:  "As of this writing, Markdown has no syntax for specifying the<newline>dimensions of an image; if this is important to you, you can simply<newline>use regular HTML "
Literal.String.Backtick:  "`<img>`"
Text:  " tags."
Literal.String.Backtick:  "<newline><newline><newline>"
Punctuation:  "* * *<newline><newline>"
Text:  "<newline>"
Name.Tag:  "<h2"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"misc\""
Name.Tag:  ">"
Text:  "Miscellaneous"
Name.Tag:  "</h2>"
Text:  "<newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"autolink\""
Name.Tag:  ">"
Text:  "Automatic Links"
Name.Tag:  "</h3>"
Text:  "<newline><newline>Markdown supports a shortcut style for creating \"automatic\" links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:"
Literal.String.Backtick:  "<newline><newline>    <http://example.com/><newline><newline>"
Name.Variable:  "<http://example.com/>"
Text:  "<newline>    <newline>Markdown will turn this into:"
Literal.String.Backtick:  "<newline><newline>    <a href=\"http://example.com/\">http://example.com/</a><newline><newline>"
Text:  "Automatic links for email addresses work similarly, except that<newline>Markdown will also perform a bit of randomized decimal and hex<newline>entity-encoding to help obscure your address from address-harvesting<newline>spambots. For example, Markdown will turn this:"
Literal.String.Backtick:  "<newline><newline>    <address@example.com><newline><newline>"
Name.Variable:  "<address@example.com>"
Text:  "<newline><newline>into something like this:"
Literal.String.Backtick:  "<newline><newline>    <a href=\"&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;<newline>    &#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;<newline>    &#109;\">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;<newline>    &#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a><newline><newline>"
Text:  "which will render in a browser as a clickable link to \"address@example.com\".<newline><newline>(This sort of entity-encoding trick will indeed fool many, if not<newline>most, address-harvesting bots, but it definitely won't fool all of<newline>them. It's better than nothing, but an address published in this way<newline>will probably eventually start receiving spam.)"
Literal.String.Backtick:  "<newline><newline><newline><newline>"
Name.Tag:  "<h3"
Text:  " "
Name.Attribute:  "id="
Literal.String:  "\"backslash\""
Name.Tag:  ">"
Text:  "Backslash Escapes"
Name.Tag:  "</h3>"
Text:  "<newline><newline>Markdown allows you to use backslash escapes to generate literal<newline>characters which would otherwise have special meaning in Markdown's<newline>formatting syntax. For example, if you wanted to surround a word<newline>with literal asterisks (instead of an HTML "
Literal.String.Backtick:  "`<em>`"
Text:  " tag), you can use<newline>backslashes before the asterisks, like this:"
Literal.String.Backtick:  "<newline><newline>    \\*literal asterisks\\*<newline><newline>"
Text:  "Markdown provides backslash escapes for the following characters:"
Literal.String.Backtick:  "<newline><newline>    \\   backslash<newline>    `   backtick<newline>    *   asterisk<newline>    _   underscore<newline>    {}  curly braces<newline>    []  square brackets<newline>    ()  parentheses<newline>    #   hash mark<newline>\t+\tplus sign<newline>\t-\tminus sign (hyphen)<newline>    .   dot<newline>    !   exclamation mark<newline><newline>"
Text:  "inline "
Literal.String.Backtick:  "``code``"
Text:  " and more inline "
Literal.String.Backtick:  "`code`"
Text:  "<newline>inline "
Literal.String.Backtick:  "`code`"
Text:  " and more inline "
Literal.String.Backtick:  "`code`"
Text:  "<newline>inline "
Literal.String.Backtick:  "`code that<newline>wraps a line`"
Text:  " and more "
Literal.String.Backtick:  "`inline code`"
Text:  "<newline><newline>extensions:<newline><newline>"
Punctuation:  "```"
Name.Label:  " ruby<newline>"
Name.Builtin:  "puts"
Text:  " "
Name.Variable.Instance:  "@foo"
Text:  "<newline><newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "bar"
Text:  "<newline>  "
Name.Builtin:  "puts"
Text:  " "
Operator:  "<<-"
Name.Constant:  "EOS"
Literal.String.Heredoc:  "<newline>    :foobar<newline>"
Name.Constant:  "  EOS"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline>"
Punctuation:  "```"
Text:  "<newline><newline>"
Punctuation:  "~~~"
Name.Label:  " latex<newline>"
Punctuation:  "{"
Keyword:  "\\it"
Text:  " holy cow, it's "
Keyword:  "\\LaTeX"
Text:  "!"
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "~~~"
Text:  "<newline><newline>"
Punctuation:  "```"
Name.Label:  " erb?parent=latex<newline>"
Punctuation:  "{"
Keyword:  "\\it"
Text:  " holy cow, it's "
Keyword:  "\\LaTex"
Text:  " with "
Comment.Preproc:  "<%="
Text:  " "
Name.Variable.Instance:  "@erb"
Text:  " "
Comment.Preproc:  "%>"
Text:  "!"
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "```"
Text:  "<newline><newline>"
Punctuation:  "```"
Name.Label:  " markdown<newline>"
Text:  "It's "
Generic.Strong:  "**markdownception**"
Text:  " "
Punctuation:  "["
Name.Variable:  "wtf"
Punctuation:  "]("
Literal.String.Other:  "/omg"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "```"
Text:  "<newline><newline>"
Punctuation:  "```"
Name.Label:  " somefakelexer<newline>"
Literal.String.Backtick:  "can't highlight me"
Text:  "<newline>"
Punctuation:  "```"
Text:  "<newline><newline>"
Punctuation:  "```"
Name.Label:  " json<newline>\"a string\""
Punctuation:  ":"
Text.Whitespace:  " "
Literal.String.Double:  "\"with a triple backtick: ```\""
Text:  "<newline>"
Punctuation:  "```"
Text:  "<newline><newline>"
Punctuation:  "````"
Name.Label:  " console<newline>"
Generic.Prompt:  "$"
Text.Whitespace:  " "
Text:  "hello "
Literal.String.Double:  "\"world\""
Text:  "<newline>"
Punctuation:  "````"
Text:  "<newline><newline>"
Punctuation:  "````"
Name.Label:  "markdown<newline>"
Text:  "Here is an example of "
Punctuation:  "["
Name.Variable:  "feature"
Punctuation:  "]("
Literal.String.Other:  "../feature.md"
Punctuation:  ")"
Text:  ":<newline><newline>"
Punctuation:  "```"
Name.Label:  "console<newline>"
Generic.Prompt:  "$"
Text.Whitespace:  " "
Name.Builtin:  "echo"
Text:  " "
Literal.String.Double:  "\"Sample feature output\""
Text:  "<newline>"
Punctuation:  "```"
Text:  "<newline>"
Punctuation:  "````"
Text:  "<newline><newline>"
Punctuation:  "["
Name.Variable:  "This is a link `with backticks`"
Punctuation:  "]("
Literal.String.Other:  "example.com"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "["
Name.Variable:  "This is a link to a TOML section `[with brackets]` (and backticks)"
Punctuation:  "]("
Literal.String.Other:  "example.com"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "["
Name.Variable:  "This is a link to a TOML section `[[with double brackets]]` (and backticks)"
Punctuation:  "]("
Literal.String.Other:  "example.com"
Punctuation:  ")"
Text:  "<newline>[This is not a link "
Literal.String.Backtick:  "`with backticks`"
Text:  "] (example.com)<newline><newline>This link has text before it, "
Punctuation:  "["
Name.Variable:  "it's over two (lines),<newline>has (parens too)"
Punctuation:  "]("
Literal.String.Other:  "example.com"
Punctuation:  ")"
Text:  ", and text after it.<newline><newline>[this is not a<newline>link]<newline>"
