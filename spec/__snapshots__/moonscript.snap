Comment.Preproc:  "#! /usr/bin/moon"
Text.Whitespace:  "<newline><newline>"
Comment.Single:  "-- A heap of sample Moonscript syntax"
Text.Whitespace:  "<newline><newline>"
Name:  "util"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Name.Builtin:  "require"
Text.Whitespace:  " "
Literal.String.Double:  "\"my.module\""
Text.Whitespace:  "<newline><newline>"
Keyword:  "import"
Text.Whitespace:  " "
Name.Class:  "SomeClass"
Punctuation:  ","
Text.Whitespace:  " "
Name:  "member"
Text.Whitespace:  " "
Name:  "from"
Text.Whitespace:  " "
Name:  "util"
Text.Whitespace:  "<newline>"
Keyword:  "import"
Text.Whitespace:  " "
Name:  "other"
Text.Whitespace:  " "
Name:  "from"
Text.Whitespace:  " "
Name.Builtin:  "require"
Text.Whitespace:  " "
Literal.String.Double:  "\"my.other_module\""
Text.Whitespace:  "<newline><newline>"
Name:  "a_table"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  "<newline>  "
Literal.String.Symbol:  "foo:"
Text.Whitespace:  " "
Literal.String.Single:  "'bar'"
Text.Whitespace:  "<newline>  "
Literal.String.Symbol:  "interpolated:"
Text.Whitespace:  " "
Literal.String.Double:  "\"foo-"
Literal.String.Interpol:  "\#{"
Name:  "other"
Punctuation:  "."
Name:  "stuff"
Text.Whitespace:  " "
Literal.Number.Integer:  "2"
Text.Whitespace:  " "
Operator:  "+"
Text.Whitespace:  " "
Literal.Number.Integer:  "3"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text.Whitespace:  "<newline>  "
Literal.String.Symbol:  "\"string-key\":"
Text.Whitespace:  " "
Literal.Number.Integer:  "2"
Text.Whitespace:  "<newline>  "
Literal.String.Symbol:  "do:"
Text.Whitespace:  " "
Literal.String.Single:  "'keyword'"
Text.Whitespace:  "<newline>"
Punctuation:  "}"
Text.Whitespace:  "<newline><newline>"
Name:  "short_table_def"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Literal.String.Symbol:  "foo:"
Text.Whitespace:  " "
Literal.String.Single:  "'bar'"
Punctuation:  ","
Text.Whitespace:  " "
Literal.String.Symbol:  "interpolated:"
Text.Whitespace:  " "
Literal.String.Double:  "\"foo-"
Literal.String.Interpol:  "\#{"
Name:  "other"
Punctuation:  "."
Name:  "stuff"
Text.Whitespace:  " "
Literal.Number.Integer:  "2"
Text.Whitespace:  " "
Operator:  "+"
Text.Whitespace:  " "
Literal.Number.Integer:  "3"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text.Whitespace:  "<newline>"
Name:  "scoped_table"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Literal.String.Symbol:  ":util"
Punctuation:  ","
Text.Whitespace:  " "
Literal.String.Symbol:  ":a_table"
Text.Whitespace:  "<newline><newline>"
Name:  "multiline_string"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Literal.String.Double:  "\"line 1<newline>  for the alliance!<newline>line2\""
Text.Whitespace:  "<newline><newline>"
Name:  "other_multiline_string"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Literal.String.Heredoc:  "[[ for<newline>the<newline>win<newline>]]"
Text.Whitespace:  "<newline><newline>"
Keyword.Declaration:  "local"
Text.Whitespace:  " "
Name:  "x"
Text.Whitespace:  "<newline>"
Keyword.Declaration:  "export"
Text.Whitespace:  " "
Name:  "y"
Text.Whitespace:  "<newline><newline>"
Name:  "x"
Text.Whitespace:  " "
Operator.Word:  "or"
Operator:  "="
Text.Whitespace:  " "
Literal.Number.Integer:  "1"
Text.Whitespace:  "<newline>"
Name:  "x"
Text.Whitespace:  " "
Operator:  "+="
Text.Whitespace:  " "
Literal.Number.Integer:  "1"
Text.Whitespace:  "<newline>"
Name:  "y"
Text.Whitespace:  " "
Operator.Word:  "and"
Operator:  "="
Text.Whitespace:  " "
Name:  "x"
Text.Whitespace:  "<newline><newline>"
Name:  "empty_function"
Text.Whitespace:  " "
Operator:  "->"
Text.Whitespace:  "<newline>"
Name:  "args_function"
Text.Whitespace:  " "
Punctuation:  "("
Name:  "arg1"
Punctuation:  ","
Text.Whitespace:  " "
Name:  "arg2"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "->"
Text.Whitespace:  " "
Name:  "arg1"
Text.Whitespace:  " "
Operator:  "+"
Text.Whitespace:  " "
Name:  "arg2"
Text.Whitespace:  "<newline>"
Name:  "var_args_function"
Text.Whitespace:  " "
Punctuation:  "("
Operator:  "..."
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "->"
Text.Whitespace:  " "
Name.Builtin:  "table.concat"
Text.Whitespace:  " "
Punctuation:  "{"
Operator:  "..."
Punctuation:  "},"
Text.Whitespace:  " "
Literal.String.Single:  "'|'"
Text.Whitespace:  "<newline><newline>"
Keyword:  "while"
Text.Whitespace:  " "
Name:  "cond"
Text.Whitespace:  " "
Operator:  "=="
Text.Whitespace:  " "
Keyword.Constant:  "true"
Text.Whitespace:  " "
Keyword:  "do"
Text.Whitespace:  " "
Name:  "empty_function"
Operator:  "!"
Text.Whitespace:  "<newline><newline>"
Name:  "comprehension"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Punctuation:  "["
Name:  "item"
Text.Whitespace:  " "
Operator:  "*"
Text.Whitespace:  " "
Literal.Number.Integer:  "2"
Text.Whitespace:  " "
Keyword:  "for"
Text.Whitespace:  " "
Name:  "i"
Punctuation:  ","
Text.Whitespace:  " "
Name:  "item"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  " "
Name.Builtin:  "ipairs"
Text.Whitespace:  " "
Name:  "items"
Text.Whitespace:  " "
Keyword:  "when"
Text.Whitespace:  " "
Name:  "item"
Text.Whitespace:  " "
Operator:  "!="
Text.Whitespace:  " "
Literal.Number.Integer:  "3"
Punctuation:  "]"
Text.Whitespace:  "<newline><newline>"
Keyword:  "for"
Text.Whitespace:  " "
Name:  "i"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Literal.Number.Integer:  "10"
Text.Whitespace:  "<newline>  "
Keyword:  "continue"
Text.Whitespace:  " "
Keyword:  "unless"
Text.Whitespace:  " "
Name:  "i"
Text.Whitespace:  " "
Operator:  "!="
Text.Whitespace:  " "
Literal.Number.Integer:  "2"
Text.Whitespace:  "<newline><newline>"
Name.Class:  "SomeClass"
Punctuation:  "("
Literal.Number.Hex:  "0xdeadbeef"
Punctuation:  ")"
Operator:  "\\"
Name:  "method"
Text.Whitespace:  " "
Literal.String.Single:  "'foo'"
Text.Whitespace:  "<newline><newline>"
Keyword:  "with"
Text.Whitespace:  " "
Name:  "a_table"
Text.Whitespace:  "<newline>  "
Punctuation:  "."
Name:  "foobar"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Punctuation:  "{}"
Text.Whitespace:  "<newline><newline>"
Keyword:  "switch"
Text.Whitespace:  " "
Name:  "i"
Text.Whitespace:  "<newline>  "
Keyword:  "when"
Text.Whitespace:  " "
Literal.Number.Integer:  "2"
Text.Whitespace:  "<newline>    "
Literal.String.Double:  "\"not first\""
Text.Whitespace:  "<newline><newline>"
Keyword:  "class"
Text.Whitespace:  " "
Name.Class:  "MyClass"
Text.Whitespace:  " "
Keyword:  "extends"
Text.Whitespace:  " "
Name.Class:  "SomeClass"
Text.Whitespace:  "<newline>  "
Literal.String.Symbol:  "new:"
Text.Whitespace:  " "
Punctuation:  "("
Name.Variable.Instance:  "@init"
Punctuation:  ","
Text.Whitespace:  " "
Name:  "arg2"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Literal.String.Single:  "'default'"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "=>"
Text.Whitespace:  "<newline>    "
Name.Variable.Instance:  "@derived"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Name.Variable.Instance:  "@init"
Text.Whitespace:  " "
Operator:  "+"
Text.Whitespace:  " "
Literal.Number.Integer:  "2"
Text.Whitespace:  "<newline>    "
Keyword:  "super"
Operator:  "!"
Text.Whitespace:  "<newline><newline>  "
Literal.String.Symbol:  "other:"
Text.Whitespace:  " "
Operator:  "=>"
Text.Whitespace:  "<newline>    "
Name.Variable.Instance:  "@@foo"
Text.Whitespace:  " "
Operator:  "+"
Text.Whitespace:  " "
Literal.Number.Integer:  "2"
Text.Whitespace:  "<newline>    "
Name.Variable.Instance:  "@"
Text.Whitespace:  "<newline>"
