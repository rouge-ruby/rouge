Comment:  "# Examples taken from http://nimrod-by-example.github.io/, which is public"
Text:  "<newline>"
Comment:  "# domain : https://github.com/flaviut/nimrod-by-example/blob/master/LICENCE"
Text:  "<newline>"
Keyword:  "import"
Text:  " "
Name:  "tables"
Punctuation:  ","
Text:  " "
Name:  "strutils"
Text:  "<newline><newline>"
Keyword:  "var"
Text:  " "
Name:  "wordFrequencies"
Text:  " "
Operator:  "="
Text:  " "
Name:  "initCountTable"
Operator:  "["
Keyword.Type:  "string"
Operator:  "]"
Punctuation:  "()"
Text:  "<newline><newline>"
Keyword:  "for"
Text:  " "
Name:  "line"
Text:  " "
Operator.Word:  "in"
Text:  " "
Name:  "stdin"
Punctuation:  "."
Name:  "lines"
Punctuation:  "():"
Text:  "<newline>  "
Keyword:  "for"
Text:  " "
Name:  "word"
Text:  " "
Operator.Word:  "in"
Text:  " "
Name:  "line"
Punctuation:  "."
Name:  "split"
Punctuation:  "("
Literal.String:  "\", \""
Punctuation:  "):"
Text:  "<newline>    "
Name:  "wordFrequencies"
Punctuation:  "."
Name:  "inc"
Punctuation:  "("
Name:  "word"
Punctuation:  ")"
Text:  "<newline><newline>"
Name:  "echo"
Punctuation:  "("
Literal.String:  "\"The most frequent word is: '\""
Punctuation:  ","
Text:  " "
Name:  "wordFrequencies"
Punctuation:  "."
Name:  "largest"
Punctuation:  ","
Literal.String:  "\"'\""
Punctuation:  ")"
Text:  "<newline><newline>"
Comment:  "# Looping:"
Text:  "<newline>"
Keyword:  "import"
Text:  " "
Name:  "math"
Text:  "<newline><newline>"
Name:  "randomize"
Punctuation:  "()"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "answer"
Text:  " "
Operator:  "="
Text:  " "
Name:  "random"
Punctuation:  "("
Literal.Number.Integer:  "10"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>"
Keyword:  "while"
Text:  " "
Keyword.Pseudo:  "true"
Punctuation:  ":"
Text:  "<newline>  "
Name:  "echo"
Text:  " "
Literal.String:  "\"I have a number from one to ten - what is it?\""
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "guess"
Text:  " "
Operator:  "="
Text:  " "
Name:  "parseInt"
Punctuation:  "("
Name:  "stdin"
Punctuation:  "."
Name:  "readline"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "guess"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "answer"
Punctuation:  "):"
Text:  "<newline>    "
Name:  "echo"
Text:  " "
Literal.String:  "\"Too low, try again\""
Text:  "<newline>  "
Keyword:  "elif"
Text:  " "
Punctuation:  "("
Name:  "guess"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "answer"
Punctuation:  "):"
Text:  "<newline>    "
Name:  "echo"
Text:  " "
Literal.String:  "\"Too high, try again\""
Text:  "<newline>  "
Keyword:  "else"
Punctuation:  ":"
Text:  "<newline>    "
Name:  "echo"
Text:  " "
Literal.String:  "\"Correct!\""
Text:  "<newline>    "
Keyword:  "break"
Text:  "<newline><newline>"
Comment:  "# OO Design"
Text:  "<newline>"
Keyword:  "type"
Text:  "<newline>  "
Name:  "Animal"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "ref"
Text:  " "
Keyword:  "object"
Text:  " "
Keyword:  "of"
Text:  " "
Name:  "RootObj"
Text:  "<newline>    "
Name:  "name"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "string"
Text:  "<newline>    "
Name:  "age"
Punctuation:  ":"
Text:  "  "
Keyword.Type:  "int"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "foo"
Text:  " "
Operator.Word:  "a_nd"
Text:  " "
Name:  "bar"
Text:  " "
Operator.Word:  "o_r"
Text:  " "
Name:  "baz"
Punctuation:  "):"
Text:  "<newline>  "
Name:  "doThing"
Punctuation:  "()"
Text:  "<newline><newline>"
Keyword:  "method"
Text:  " "
Name:  "vocalize"
Punctuation:  "("
Name:  "this"
Punctuation:  ":"
Text:  " "
Name:  "Animal"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"...\""
Text:  "<newline>"
Keyword:  "method"
Text:  " "
Name:  "ageHumanYrs"
Punctuation:  "("
Name:  "this"
Punctuation:  ":"
Text:  " "
Name:  "Animal"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Name:  "this"
Punctuation:  "."
Name:  "age"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "Dog"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "ref"
Text:  " "
Keyword:  "object"
Text:  " "
Keyword:  "of"
Text:  " "
Name:  "Animal"
Text:  "<newline><newline>"
Keyword:  "method"
Text:  " "
Name:  "vocalize"
Punctuation:  "("
Name:  "this"
Punctuation:  ":"
Text:  " "
Name:  "Dog"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"WOOF!\""
Text:  "<newline>"
Keyword:  "method"
Text:  " "
Name:  "ageHumanYrs"
Punctuation:  "("
Name:  "this"
Punctuation:  ":"
Text:  " "
Name:  "Dog"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Name:  "this"
Punctuation:  "."
Name:  "age"
Operator:  "*"
Literal.Number.Integer:  "7"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "Cat"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "ref"
Text:  " "
Keyword:  "object"
Text:  " "
Keyword:  "of"
Text:  " "
Name:  "Animal"
Text:  "<newline>"
Keyword:  "method"
Text:  " "
Name:  "vocalize"
Punctuation:  "("
Name:  "this"
Punctuation:  ":"
Text:  " "
Name:  "Cat"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"Meow\""
Text:  "<newline><newline>"
Keyword:  "var"
Text:  " "
Name:  "d"
Punctuation:  ":"
Text:  " "
Name:  "Dog"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Dog"
Punctuation:  "("
Name:  "name"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Rover\""
Punctuation:  ","
Text:  " "
Name:  "age"
Punctuation:  ":"
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Name:  "c"
Punctuation:  ":"
Text:  " "
Name:  "Cat"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Cat"
Punctuation:  "("
Name:  "name"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Felix\""
Punctuation:  ","
Text:  " "
Name:  "age"
Punctuation:  ":"
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  "<newline><newline>"
Name:  "echo"
Punctuation:  "("
Literal.String:  "\"Meet the pets, \""
Text:  " "
Operator:  "&"
Text:  " "
Name:  "d"
Punctuation:  "."
Name:  "name"
Text:  " "
Operator:  "&"
Text:  " "
Literal.String:  "\", and \""
Text:  " "
Operator:  "&"
Text:  " "
Name:  "c"
Punctuation:  "."
Name:  "name"
Text:  " "
Operator:  "&"
Text:  " "
Literal.String:  "\".\""
Punctuation:  ")"
Text:  "<newline>"
Name:  "echo"
Punctuation:  "("
Name:  "d"
Punctuation:  "."
Name:  "name"
Text:  " "
Operator:  "&"
Text:  " "
Literal.String:  "\" is \""
Text:  " "
Operator:  "&"
Text:  " "
Operator:  "$"
Name:  "d"
Punctuation:  "."
Name:  "ageHumanYrs"
Punctuation:  "()"
Text:  " "
Operator:  "&"
Text:  " "
Literal.String:  "\" and \""
Text:  " "
Operator:  "&"
Text:  " "
Name:  "c"
Punctuation:  "."
Name:  "name"
Text:  " "
Operator:  "&"
Text:  " "
Literal.String:  "\" is \""
Text:  " "
Operator:  "&"
Text:  " "
Operator:  "$"
Name:  "c"
Punctuation:  "."
Name:  "ageHumanYrs"
Punctuation:  "())"
Text:  "<newline><newline>"
Comment:  "# Adding some less widely-used language features to test edge cases"
Text:  "<newline>"
Keyword:  "var"
Text:  "<newline>  "
Name:  "x"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "int"
Text:  "<newline>  "
Name:  "y"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "3"
Text:  "<newline><newline>"
Comment:  "# Underscores not significant in keywords; this should appear as the above"
Text:  "<newline>"
Keyword:  "v_a_r"
Text:  " "
Name:  "z"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "i_n_t"
Text:  "<newline><newline>"
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "4"
Text:  "<newline>"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "4"
Text:  "<newline><newline>"
Name:  "assert"
Punctuation:  "("
Name:  "x"
Operator:  "=="
Name:  "z"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "proc "
Name.Function:  "this_is_a_proc"
Punctuation:  "(){."
Name:  "inline"
Punctuation:  ".}"
Operator:  "="
Text:  "<newline>  "
Name:  "echo"
Text:  " "
Literal.String:  "\"But since underscores are optional in proc names it gets called.\""
Text:  "<newline><newline>"
Comment:  "# Even with camelCase"
Text:  "<newline>"
Name:  "thisIsAProc"
Punctuation:  "()"
Text:  "<newline><newline>"
Comment:  "# Type suffixes"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Name:  "xu"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "3'u"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Name:  "yu"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "3u"
Text:  "<newline><newline>"
Comment:  "# and with floats"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Name:  "xf"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "3.0f32"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Name:  "yf"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "3'f32"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Name:  "xf2"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "3f64"
Text:  "<newline>"
