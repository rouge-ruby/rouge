Comment:  "# inline comments"
Text:  "<newline>"
Comment:  "# another inline comment"
Text:  "<newline><newline>"
Comment:  "# inline comment after empty line"
Text:  "<newline><newline>  "
Comment:  "# inline comment after white-space"
Text:  "<newline><newline>"
Literal.Number.Integer:  "12"
Text:  " "
Comment:  "# EOL comment"
Text:  "<newline><newline>"
Comment:  "/* multi-line"
Error:  "<newline>"
Comment:  " * comment"
Error:  "<newline>"
Comment:  " */"
Text:  "<newline><newline>"
Literal.Number.Integer:  "0"
Text:  "<newline><newline>"
Literal.Number.Integer:  "47"
Text:  "<newline><newline>"
Keyword.Constant:  "null"
Text:  "<newline><newline>"
Keyword.Constant:  "true"
Text:  "<newline><newline>"
Keyword.Constant:  "false"
Text:  "<newline><newline>"
Name.Variable:  "ab"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "q"
Text:  "<newline><newline>"
Literal.Number.Integer:  "42"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "24"
Text:  "<newline><newline>"
Literal.Number.Integer:  "12"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "*"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline><newline>"
Name.Variable:  "a"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "42"
Text:  " "
Operator:  "||"
Text:  " "
Name.Variable:  "b"
Text:  " "
Operator:  "<="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline><newline>"
Name.Variable:  "b"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Operator:  "&&"
Text:  " "
Literal.Number.Integer:  "42"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "12"
Text:  "<newline><newline>"
Literal.String.Double:  "\"this is a string\""
Text:  "<newline><newline>"
Literal.String.Double:  "\"antiquotation "
Literal.String.Interpol:  "${"
Keyword.Reserved:  "toString"
Text:  " "
Punctuation:  "("
Name.Variable:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "7"
Punctuation:  ")"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text:  "<newline><newline>"
Literal.String.Double:  "\"escaped chars "
Literal.String.Escape:  "<newline>"
Literal.String.Double:  " "
Literal.String.Escape:  "\\r"
Literal.String.Double:  " "
Literal.String.Escape:  "\\t"
Literal.String.Double:  " "
Literal.String.Escape:  "\\q"
Literal.String.Double:  " "
Literal.String.Escape:  "\\$"
Literal.String.Double:  "{q}\""
Text:  "<newline><newline>"
Literal.String.Double:  "''escaped chars "
Literal.String.Escape:  "''<newline>"
Literal.String.Double:  " "
Literal.String.Escape:  "''\\r"
Literal.String.Double:  " "
Literal.String.Escape:  "''\\t"
Literal.String.Double:  " "
Literal.String.Escape:  "''\\q"
Literal.String.Double:  " "
Literal.String.Escape:  "'''"
Literal.String.Double:  " "
Literal.String.Escape:  "''$"
Literal.String.Double:  "{q}''"
Text:  "<newline>"
Operator:  "++"
Text:  " "
Literal.String.Double:  "''raw chars \" <newline> \\r \\t \\q''"
Text:  "<newline><newline>"
Comment:  "# Examples from https://nixos.org/nix/manual/#idm140737318143152"
Text:  "<newline><newline>"
Literal.String.Double:  "\"--with-freetype2-library="
Literal.String.Interpol:  "${"
Name.Variable:  "freetype"
Literal.String.Interpol:  "}"
Literal.String.Double:  "/lib\""
Text:  "<newline><newline>"
Literal.String.Double:  "\"--with-freetype2-library=\""
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "freetype"
Text:  " "
Operator:  "+"
Text:  " "
Literal.String.Double:  "\"/lib\""
Text:  "<newline><newline>"
Name.Variable:  "configureFlags"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>  "
Literal.String.Double:  "\"-system-zlib\""
Text:  "<newline>  "
Literal.String.Double:  "\"-system-libpng\""
Text:  "<newline>  "
Literal.String.Double:  "\"-system-libjpeg\""
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "threadSupport"
Text:  " "
Keyword:  "then"
Text:  " "
Literal.String.Double:  "\"-thread\""
Text:  " "
Keyword:  "else"
Text:  " "
Literal.String.Double:  "\"-no-thread\""
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "]"
Text:  " "
Operator:  "++"
Text:  " "
Name.Variable:  "stdenv"
Operator:  "."
Name.Variable:  "lib"
Operator:  "."
Name.Variable:  "optionals"
Text:  " "
Name.Variable:  "openglSupport"
Text:  " "
Punctuation:  "["
Text:  "<newline>  "
Literal.String.Double:  "\"-dlopen-opengl\""
Text:  "<newline>  "
Literal.String.Double:  "\"-L"
Literal.String.Interpol:  "${"
Name.Variable:  "mesa"
Literal.String.Interpol:  "}"
Literal.String.Double:  "/lib\""
Text:  "<newline>  "
Literal.String.Double:  "\"-I"
Literal.String.Interpol:  "${"
Name.Variable:  "mesa"
Literal.String.Interpol:  "}"
Literal.String.Double:  "/include\""
Text:  "<newline>  "
Literal.String.Double:  "\"-L"
Literal.String.Interpol:  "${"
Name.Variable:  "libXmu"
Literal.String.Interpol:  "}"
Literal.String.Double:  "/lib\""
Text:  "<newline>  "
Literal.String.Double:  "\"-I"
Literal.String.Interpol:  "${"
Name.Variable:  "libXmu"
Literal.String.Interpol:  "}"
Literal.String.Double:  "/include\""
Text:  "<newline>"
Punctuation:  "];"
Text:  "<newline><newline>"
Comment:  "# indented string"
Text:  "<newline>"
Name.Variable:  "indented"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "''"
Error:  "<newline>"
Literal.String.Double:  "  This is the first line."
Error:  "<newline>"
Literal.String.Double:  "  This is the second line."
Error:  "<newline>"
Literal.String.Double:  "    This is the third line."
Error:  "<newline>"
Literal.String.Double:  "''"
Punctuation:  ";"
Text:  "<newline><newline>"
Name.Variable:  "stdenv"
Operator:  "."
Name.Variable:  "mkDerivation"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Variable:  "postInstall"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Literal.String.Double:  "''"
Error:  "<newline>"
Literal.String.Double:  "      mkdir $out/bin $out/etc"
Error:  "<newline>"
Literal.String.Double:  "      cp foo $out/bin"
Error:  "<newline>"
Literal.String.Double:  "      echo \"Hello World\" > $out/etc/foo.conf"
Error:  "<newline>"
Literal.String.Double:  "      "
Literal.String.Interpol:  "${"
Keyword:  "if"
Text:  " "
Name.Variable:  "enableBar"
Text:  " "
Keyword:  "then"
Text:  " "
Literal.String.Double:  "\"cp bar $out/bin\""
Text:  " "
Keyword:  "else"
Text:  " "
Literal.String.Double:  "\"\""
Literal.String.Interpol:  "}"
Error:  "<newline>"
Literal.String.Double:  "    ''"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Variable:  "reference"
Text:  "<newline><newline>"
Name.Variable:  "_12"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"twelve\""
Text:  "<newline><newline>"
Name.Variable:  "__blah"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "_12"
Text:  "<newline><newline>"
Name.Variable:  "variableX"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "_12"
Text:  "<newline><newline>"
Name.Variable:  "variable-y"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "variableX"
Text:  " "
Comment:  "# note that the '-' character may be part of the variable name"
Text:  "<newline><newline>"
Name.Variable:  "__variable__z_"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "variable-y"
Text:  "<newline><newline><newline>"
Comment:  "# paths"
Text:  "<newline><newline>"
Literal.String.Other:  "/bin/sh"
Text:  "<newline><newline>"
Literal.String.Other:  "./builder.sh"
Text:  "<newline><newline>"
Literal.String.Other:  "../xyzzy/fnord.nix"
Text:  "<newline><newline>"
Literal.String.Other:  "~/foo"
Text:  "<newline><newline>"
Literal.String.Other:  "local/file"
Text:  "<newline><newline>"
Literal.String.Other:  "./."
Text:  " "
Comment:  "# current directory"
Text:  "<newline><newline>"
Literal.String.Other:  "/."
Text:  " "
Comment:  "# root directory"
Text:  "<newline><newline>"
Error:  "~"
Text:  " "
Comment:  "# not a path"
Text:  "<newline><newline>"
Operator:  "."
Text:  " "
Comment:  "# not a path"
Text:  "<newline><newline>"
Operator:  "/"
Text:  " "
Comment:  "# not a path"
Text:  "<newline><newline>"
Comment:  "# uri"
Text:  "<newline><newline>"
Literal.String.Other:  "https://nixos.org/nixos/manual/index.html"
Text:  "<newline><newline>"
Literal.String.Other:  "git+https://nixos.org/nixos/manual/index.html"
Text:  "<newline><newline>"
Literal.String.Other:  "file:///tmp/nixos"
Text:  "<newline><newline>"
Comment:  "# lists"
Text:  "<newline><newline>"
Punctuation:  "["
Text:  " "
Literal.Number.Integer:  "123"
Text:  " "
Literal.String.Other:  "./foo.nix"
Text:  " "
Literal.String.Double:  "\"abc\""
Text:  " "
Punctuation:  "("
Name.Variable:  "f"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "y"
Punctuation:  ";"
Text:  " "
Punctuation:  "})"
Text:  " "
Punctuation:  "]"
Text:  "<newline><newline>"
Punctuation:  "["
Text:  " "
Literal.Number.Integer:  "123"
Text:  " "
Literal.String.Other:  "./foo.nix"
Text:  " "
Literal.String.Double:  "\"abc\""
Text:  " "
Name.Variable:  "f"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "y"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  " "
Punctuation:  "]"
Text:  "<newline><newline>"
Comment:  "# sets"
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "123"
Punctuation:  ";"
Text:  "<newline>  "
Name.Variable:  "text"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Hello\""
Punctuation:  ";"
Text:  "<newline>  "
Name.Variable:  "y"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "f"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "bla"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "456"
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Name.Variable:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Foo\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "b"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Bar\""
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Operator:  "."
Name.Variable:  "a"
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Name.Variable:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Foo\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "b"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Bar\""
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Operator:  "."
Name.Variable:  "c"
Text:  " "
Name.Variable:  "or"
Text:  " "
Literal.String.Double:  "\"Xyzzy\""
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Literal.String.Double:  "\"foo "
Literal.String.Interpol:  "${"
Name.Variable:  "bar"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "123"
Punctuation:  ";"
Text:  " "
Literal.String.Double:  "\"nix-1.0\""
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "456"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Operator:  "."
Literal.String.Double:  "\"foo "
Literal.String.Interpol:  "${"
Name.Variable:  "bar"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Name.Variable:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "123"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Operator:  "."
Punctuation:  "${"
Name.Variable:  "bar"
Punctuation:  "}"
Text:  " "
Name.Variable:  "or"
Text:  " "
Literal.Number.Integer:  "456"
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Punctuation:  "${"
Keyword:  "if"
Text:  " "
Name.Variable:  "foo"
Text:  " "
Keyword:  "then"
Text:  " "
Literal.String.Double:  "\"bar\""
Text:  " "
Keyword:  "else"
Text:  " "
Keyword.Constant:  "null"
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment:  "# recursive sets"
Text:  "<newline><newline>"
Keyword.Reserved:  "rec"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "y"
Punctuation:  ";"
Text:  "<newline>  "
Name.Variable:  "y"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "123"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Operator:  "."
Name.Variable:  "x"
Text:  "<newline><newline>"
Comment:  "# let-expressions"
Text:  "<newline><newline>"
Keyword.Declaration:  "let"
Text:  "<newline>  "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"foo\""
Punctuation:  ";"
Text:  "<newline>  "
Name.Variable:  "y"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"bar\""
Punctuation:  ";"
Text:  "<newline>"
Keyword.Namespace:  "in"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "y"
Text:  "<newline><newline>"
Keyword.Declaration:  "let"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "123"
Punctuation:  ";"
Text:  " "
Keyword.Namespace:  "in"
Text:  "<newline>"
Punctuation:  "{"
Text:  " "
Keyword.Namespace:  "inherit"
Text:  " "
Name.Variable:  "x"
Punctuation:  ";"
Text:  "<newline>  "
Name.Variable:  "y"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "456"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment:  "# functions"
Text:  "<newline><newline>"
Name.Variable:  "pattern"
Punctuation:  ":"
Text:  " "
Name.Variable:  "body"
Text:  "<newline><newline>"
Keyword.Declaration:  "let"
Text:  " "
Name.Variable:  "negate"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "x"
Punctuation:  ":"
Text:  " "
Operator:  "!"
Name.Variable:  "x"
Punctuation:  ";"
Text:  "<newline>    "
Name.Variable:  "concat"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "x"
Punctuation:  ":"
Text:  " "
Name.Variable:  "y"
Punctuation:  ":"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "y"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Namespace:  "in"
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable:  "negate"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Variable:  "concat"
Text:  " "
Literal.String.Double:  "\"foo\""
Text:  " "
Literal.String.Double:  "\"bar\""
Text:  " "
Keyword:  "else"
Text:  " "
Literal.String.Double:  "\"\""
Text:  "<newline><newline>"
Keyword.Reserved:  "map"
Text:  " "
Punctuation:  "("
Name.Variable:  "concat"
Text:  " "
Literal.String.Double:  "\"foo\""
Punctuation:  ")"
Text:  " "
Punctuation:  "["
Text:  " "
Literal.String.Double:  "\"bar\""
Text:  " "
Literal.String.Double:  "\"bla\""
Text:  " "
Literal.String.Double:  "\"abc\""
Text:  " "
Punctuation:  "]"
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Punctuation:  ","
Text:  " "
Name.Variable:  "y"
Punctuation:  ","
Text:  " "
Name.Variable:  "z"
Text:  " "
Punctuation:  "}:"
Text:  " "
Name.Variable:  "z"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "y"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "x"
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Punctuation:  ","
Text:  " "
Name.Variable:  "y"
Punctuation:  ","
Text:  " "
Name.Variable:  "z"
Punctuation:  ","
Text:  " "
Operator:  "..."
Text:  " "
Punctuation:  "}:"
Text:  " "
Name.Variable:  "z"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "y"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "x"
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Punctuation:  ","
Text:  " "
Name.Variable:  "y"
Text:  " "
Operator:  "?"
Text:  " "
Literal.String.Double:  "\"foo\""
Punctuation:  ","
Text:  " "
Name.Variable:  "z"
Text:  " "
Operator:  "?"
Text:  " "
Literal.String.Double:  "\"bar\""
Text:  " "
Punctuation:  "}:"
Text:  " "
Name.Variable:  "z"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "y"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "x"
Text:  "<newline><newline>"
Name.Variable:  "args"
Operator:  "@"
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Punctuation:  ","
Text:  " "
Name.Variable:  "y"
Punctuation:  ","
Text:  " "
Name.Variable:  "z"
Punctuation:  ","
Text:  " "
Operator:  "..."
Text:  " "
Punctuation:  "}:"
Text:  " "
Name.Variable:  "z"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "y"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "args"
Operator:  "."
Name.Variable:  "a"
Text:  "<newline><newline>"
Keyword.Declaration:  "let"
Text:  " "
Name.Variable:  "concat"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Punctuation:  ","
Text:  " "
Name.Variable:  "y"
Text:  " "
Punctuation:  "}:"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "y"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Namespace:  "in"
Text:  " "
Name.Variable:  "concat"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"foo\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "y"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"bar\""
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "let"
Text:  " "
Name.Variable:  "add"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "__functor"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "self"
Punctuation:  ":"
Text:  " "
Name.Variable:  "x"
Punctuation:  ":"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "self"
Operator:  "."
Name.Variable:  "x"
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>    "
Name.Variable:  "inc"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "add"
Text:  " "
Operator:  "//"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword.Namespace:  "in"
Text:  " "
Name.Variable:  "inc"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline><newline>"
Comment:  "# conditionals"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Name.Variable:  "e1"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Variable:  "e2"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Variable:  "e3"
Text:  "<newline><newline>"
Comment:  "# assertions"
Text:  "<newline><newline>"
Keyword.Reserved:  "assert"
Text:  " "
Name.Variable:  "e1"
Punctuation:  ";"
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Comment:  "# with-expressions"
Text:  "<newline><newline>"
Keyword.Namespace:  "with"
Text:  " "
Name.Variable:  "e1"
Punctuation:  ";"
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Keyword.Declaration:  "let"
Text:  " "
Name.Variable:  "as"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"foo\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "y"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"bar\""
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword.Namespace:  "in"
Text:  " "
Keyword.Namespace:  "with"
Text:  " "
Name.Variable:  "as"
Punctuation:  ";"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "y"
Text:  "<newline><newline>"
Keyword.Namespace:  "with"
Text:  " "
Punctuation:  "("
Keyword.Reserved:  "import"
Text:  " "
Literal.String.Other:  "./definitions.nix"
Punctuation:  ");"
Text:  " "
Operator:  "..."
Text:  "<newline><newline>"
Comment:  "# Operators"
Text:  "<newline>"
Comment:  "# https://nixos.org/nix/manual/#sec-language-operators"
Text:  "<newline><newline>"
Name.Variable:  "e"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "attrpath"
Text:  " "
Name.Variable:  "or"
Text:  " "
Name.Variable:  "def"
Text:  "<newline><newline>"
Name.Variable:  "e1"
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Name.Variable:  "e"
Text:  " "
Operator:  "?"
Text:  " "
Name.Variable:  "attrpath"
Text:  "<newline><newline>"
Name.Variable:  "e1"
Text:  " "
Operator:  "++"
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Name.Variable:  "e1"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Operator:  "!"
Text:  " "
Name.Variable:  "e"
Text:  "<newline><newline>"
Name.Variable:  "e1"
Text:  " "
Operator:  "//"
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Name.Variable:  "e1"
Text:  " "
Operator:  "=="
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Name.Variable:  "e1"
Text:  " "
Operator:  "!="
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Name.Variable:  "e1"
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Name.Variable:  "e1"
Text:  " "
Operator:  "||"
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Name.Variable:  "e1"
Text:  " "
Operator:  "->"
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Keyword.Namespace:  "with"
Text:  " "
Name.Variable:  "e1"
Punctuation:  ";"
Text:  " "
Name.Variable:  "e2"
Text:  "<newline><newline>"
Keyword.Declaration:  "let"
Text:  " "
Name.Variable:  "as"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"foo\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "y"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"bar\""
Punctuation:  ";"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword.Namespace:  "in"
Text:  " "
Keyword.Namespace:  "with"
Text:  " "
Name.Variable:  "as"
Punctuation:  ";"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "y"
Text:  "<newline><newline>"
Keyword.Namespace:  "with"
Text:  " "
Punctuation:  "("
Keyword.Reserved:  "import"
Text:  " "
Literal.String.Other:  "./definitions.nix"
Punctuation:  ");"
Text:  " "
Operator:  "..."
Text:  "<newline><newline>"
Punctuation:  "{"
Text:  " "
Name.Variable:  "stdenv"
Punctuation:  ","
Text:  " "
Name.Variable:  "fetchurl"
Punctuation:  ","
Text:  " "
Name.Variable:  "perl"
Text:  " "
Punctuation:  "}:"
Text:  " "
Comment:  "# 1"
Text:  "<newline><newline>"
Name.Variable:  "stdenv"
Operator:  "."
Name.Variable:  "mkDerivation"
Text:  " "
Punctuation:  "{"
Text:  " "
Comment:  "# 2"
Text:  "<newline>  "
Name.Variable:  "name"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"hello-2.1.1\""
Punctuation:  ";"
Text:  " "
Comment:  "# 1: String"
Text:  "<newline>  "
Comment:  "# 2: Multiline string"
Text:  "<newline>  "
Name.Variable:  "configureFlags"
Text:  "  "
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Error:  "<newline>"
Literal.String.Double:  "  \""
Punctuation:  ";"
Text:  "<newline>  "
Name.Variable:  "meta"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment:  "# 3: Indented string"
Text:  "<newline>    "
Name.Variable:  "description"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "'' # part of the string"
Error:  "<newline>"
Literal.String.Double:  "    A contrived example of a Nix expression, suitable for testing the lexer for"
Error:  "<newline>"
Literal.String.Double:  "    Rouge."
Error:  "<newline>"
Literal.String.Double:  "    ''"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline>  "
Name.Variable:  "builder"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Other:  "./builder.sh"
Punctuation:  ";"
Text:  " "
Comment:  "# 4"
Text:  "<newline>  "
Name.Variable:  "src"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "fetchurl"
Text:  " "
Punctuation:  "{"
Text:  " "
Comment:  "# 5"
Text:  "<newline>    "
Name.Variable:  "url"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Other:  "ftp://ftp.nluug.nl/pub/gnu/hello/hello-2.1.1.tar.gz"
Punctuation:  ";"
Text:  "<newline>    "
Name.Variable:  "md5"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"70c9ccf9fac07f762c24f2df2290784d\""
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline>  "
Keyword.Namespace:  "inherit"
Text:  " "
Name.Variable:  "perl"
Punctuation:  ";"
Text:  " "
Comment:  "# 6"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
