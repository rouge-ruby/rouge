Comment:  "(* method calls *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "object"
Text:  "<newline>  "
Keyword:  "val"
Text:  " "
Keyword:  "mutable"
Text:  " "
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "]"
Text:  "<newline><newline>  "
Name:  "method"
Text:  " "
Name:  "pop"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "match"
Text:  " "
Name:  "v"
Text:  " "
Keyword:  "with"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name:  "hd"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "tl"
Text:  " "
Operator:  "->"
Text:  "<newline>      "
Name:  "v"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "tl"
Punctuation:  ";"
Text:  "<newline>      "
Name.Class:  "Some"
Text:  " "
Name:  "hd"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Operator:  "->"
Text:  " "
Name.Class:  "None"
Text:  "<newline><newline>  "
Name:  "method"
Text:  " "
Name:  "push"
Text:  " "
Name:  "hd"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "v"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "hd"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "v"
Text:  "<newline>"
Keyword:  "end"
Text:  " "
Punctuation:  ";;"
Text:  "<newline><newline>"
Name:  "s"
Operator:  "#"
Name:  "pop"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>"
Name:  "s"
Operator:  "#"
Name:  "push"
Text:  " "
Literal.Number.Integer:  "4"
Text:  " "
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "ok"
Text:  " "
Operator:  "="
Text:  " "
Name.Tag:  "`Ok"
Punctuation:  ";;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "("
Name:  "a"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "->"
Punctuation:  "("
Name:  "a"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  "<newline><newline>"
Comment:  "(* local opens *)"
Text:  "<newline>"
Name.Namespace:  "M"
Punctuation:  "."
Name.Namespace:  "N"
Punctuation:  ".("
Name:  "f"
Text:  " "
Name:  "x"
Punctuation:  ");;"
Text:  "<newline>"
Name.Namespace:  "M"
Punctuation:  "."
Name.Namespace:  "N"
Punctuation:  ".{"
Name:  "f"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "};;"
Text:  "<newline>"
Name.Namespace:  "M"
Punctuation:  "."
Name.Namespace:  "N"
Punctuation:  ".["
Literal.Number.Integer:  "0"
Punctuation:  "];;"
Text:  "<newline><newline>"
Comment:  "(* polymorphic variant starting with a lowercase char *)"
Text:  "<newline>"
Name.Tag:  "`max"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* identifiers can start with an underscore *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "M"
Punctuation:  "."
Name:  "_x"
Punctuation:  ";;"
Text:  "<newline><newline><newline>"
Comment:  "(***********************************************************************)"
Text:  "<newline>"
Comment:  "(*                                                                     *)"
Text:  "<newline>"
Comment:  "(*                           Objective Caml                            *)"
Text:  "<newline>"
Comment:  "(*                                                                     *)"
Text:  "<newline>"
Comment:  "(*            Pierre Weis, projet Cristal, INRIA Rocquencourt          *)"
Text:  "<newline>"
Comment:  "(*                                                                     *)"
Text:  "<newline>"
Comment:  "(*  Copyright 1996 Institut National de Recherche en Informatique et   *)"
Text:  "<newline>"
Comment:  "(*  en Automatique.  All rights reserved.  This file is distributed    *)"
Text:  "<newline>"
Comment:  "(*  under the terms of the GNU Library General Public License, with    *)"
Text:  "<newline>"
Comment:  "(*  the special exception on linking described in file ../LICENSE.     *)"
Text:  "<newline>"
Comment:  "(*                                                                     *)"
Text:  "<newline>"
Comment:  "(***********************************************************************)"
Text:  "<newline><newline>"
Comment:  "(* $Id: format.ml,v 1.65 2005/09/26 10:13:08 weis Exp $ *)"
Text:  "<newline><newline>"
Comment:  "(**************************************************************<newline><newline>  Data structures definitions.<newline><newline> **************************************************************)"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "size"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "external"
Text:  " "
Name:  "size_of_int"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"%identity\""
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "external"
Text:  " "
Name:  "int_of_size"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"%identity\""
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Tokens are one of the following : *)"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "pp_token"
Text:  " "
Operator:  "="
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_text"
Text:  " "
Keyword:  "of"
Text:  " "
Keyword.Type:  "string"
Text:  "            "
Comment:  "(* normal text *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_break"
Text:  " "
Keyword:  "of"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "*"
Text:  " "
Keyword.Type:  "int"
Text:  "        "
Comment:  "(* complete break *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_tbreak"
Text:  " "
Keyword:  "of"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "*"
Text:  " "
Keyword.Type:  "int"
Text:  "       "
Comment:  "(* go to next tabulation *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_stab"
Text:  "                      "
Comment:  "(* set a tabulation *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_begin"
Text:  " "
Keyword:  "of"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "*"
Text:  " "
Name:  "block_type"
Text:  " "
Comment:  "(* beginning of a block *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_end"
Text:  "                       "
Comment:  "(* end of a block *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_tbegin"
Text:  " "
Keyword:  "of"
Text:  " "
Name:  "tblock"
Text:  "          "
Comment:  "(* beginning of a tabulation block *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_tend"
Text:  "                      "
Comment:  "(* end of a tabulation block *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_newline"
Text:  "                   "
Comment:  "(* to force a newline inside a block *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_if_newline"
Text:  "                "
Comment:  "(* to do something only if this very<newline>                                  line has been broken *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_open_tag"
Text:  " "
Keyword:  "of"
Text:  " "
Keyword.Type:  "string"
Text:  "        "
Comment:  "(* opening a tag name *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_close_tag"
Text:  "                 "
Comment:  "(* closing the most recently opened tag *)"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "tag"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "string"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "block_type"
Text:  " "
Operator:  "="
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_hbox"
Text:  "   "
Comment:  "(* Horizontal block no line breaking *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_vbox"
Text:  "   "
Comment:  "(* Vertical block each break leads to a new line *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_hvbox"
Text:  "  "
Comment:  "(* Horizontal-vertical block: same as vbox, except if this block<newline>               is small enough to fit on a single line *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_hovbox"
Text:  " "
Comment:  "(* Horizontal or Vertical block: breaks lead to new line<newline>               only when necessary to print the content of the block *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_box"
Text:  "    "
Comment:  "(* Horizontal or Indent block: breaks lead to new line<newline>               only when necessary to print the content of the block, or<newline>               when it leads to a new indentation of the current line *)"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Pp_fits"
Text:  "   "
Comment:  "(* Internal usage: when a block fits on a single line *)"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "tblock"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Pp_tbox"
Text:  " "
Keyword:  "of"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Keyword.Type:  "list"
Text:  " "
Name:  "ref"
Text:  "  "
Comment:  "(* Tabulation box *)"
Text:  "<newline>"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* The Queue:<newline>   contains all formatting elements.<newline>   elements are tuples (size, token, length), where<newline>   size is set when the size of the block is known<newline>   len is the declared length of the token. *)"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "pp_queue_elem"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "elem_size"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "size"
Punctuation:  ";"
Text:  " "
Name:  "token"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "pp_token"
Punctuation:  ";"
Text:  " "
Name:  "length"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Text:  "<newline>"
Punctuation:  "};;"
Text:  "<newline><newline>"
Comment:  "(* Scan stack:<newline>   each element is (left_total, queue element) where left_total<newline>   is the value of pp_left_total when the element has been enqueued. *)"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "pp_scan_elem"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Scan_elem"
Text:  " "
Keyword:  "of"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "*"
Text:  " "
Name:  "pp_queue_elem"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Formatting stack:<newline>   used to break the lines while printing tokens.<newline>   The formatting stack contains the description of<newline>   the currently active blocks. *)"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "pp_format_elem"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Format_elem"
Text:  " "
Keyword:  "of"
Text:  " "
Name:  "block_type"
Text:  " "
Operator:  "*"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* General purpose queues, used in the formatter. *)"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Keyword:  "'"
Name:  "a"
Text:  " "
Name:  "queue_elem"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "|"
Text:  " "
Name.Class:  "Nil"
Text:  " "
Operator:  "|"
Text:  " "
Name.Class:  "Cons"
Text:  " "
Keyword:  "of"
Text:  " "
Keyword:  "'"
Name:  "a"
Text:  " "
Name:  "queue_cell"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Keyword:  "'"
Name:  "a"
Text:  " "
Name:  "queue_cell"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Keyword:  "mutable"
Text:  " "
Name:  "head"
Text:  " "
Operator:  ":"
Text:  " "
Keyword:  "'"
Name:  "a"
Punctuation:  ";"
Text:  " "
Keyword:  "mutable"
Text:  " "
Name:  "tail"
Text:  " "
Operator:  ":"
Text:  " "
Keyword:  "'"
Name:  "a"
Text:  " "
Name:  "queue_elem"
Punctuation:  "};;"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Keyword:  "'"
Name:  "a"
Text:  " "
Name:  "queue"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "insert"
Text:  " "
Operator:  ":"
Text:  " "
Keyword:  "'"
Name:  "a"
Text:  " "
Name:  "queue_elem"
Punctuation:  ";"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "body"
Text:  " "
Operator:  ":"
Text:  " "
Keyword:  "'"
Name:  "a"
Text:  " "
Name:  "queue_elem"
Text:  "<newline>"
Punctuation:  "};;"
Text:  "<newline><newline>"
Comment:  "(* The formatter specific tag handling functions. *)"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "formatter_tag_functions"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline> "
Name:  "mark_open_tag"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "tag"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ";"
Text:  "<newline> "
Name:  "mark_close_tag"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "tag"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ";"
Text:  "<newline> "
Name:  "print_open_tag"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "tag"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ";"
Text:  "<newline> "
Name:  "print_close_tag"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "tag"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ";"
Text:  "<newline><newline>"
Punctuation:  "};;"
Text:  "<newline><newline>"
Comment:  "(* A formatter with all its machinery. *)"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "formatter"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_scan_stack"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "pp_scan_elem"
Text:  " "
Keyword.Type:  "list"
Punctuation:  ";"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_format_stack"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "pp_format_elem"
Text:  " "
Keyword.Type:  "list"
Punctuation:  ";"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_tbox_stack"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "tblock"
Text:  " "
Keyword.Type:  "list"
Punctuation:  ";"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_tag_stack"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "tag"
Text:  " "
Keyword.Type:  "list"
Punctuation:  ";"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_mark_stack"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "tag"
Text:  " "
Keyword.Type:  "list"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Global variables: default initialization is<newline>    set_margin 78<newline>    set_min_space_left 0. *)"
Text:  "<newline> "
Comment:  "(* Value of right margin. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_margin"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Minimal space left before margin, when opening a block. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_min_space_left"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Maximum value of indentation:<newline>    no blocks can be opened further. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_max_indent"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Space remaining on the current line. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_space_left"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Current value of indentation. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_current_indent"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* True when the line has been broken by the pretty-printer. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_is_new_line"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "bool"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Total width of tokens already printed. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_left_total"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Total width of tokens ever put in queue. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_right_total"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Current number of opened blocks. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_curr_depth"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Maximum number of blocks which can be simultaneously opened. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_max_boxes"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Ellipsis string. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_ellipsis"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Output function. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_output_function"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Flushing function. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_flush_function"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "unit"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Output of new lines. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_output_newline"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "unit"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Output of indentation spaces. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_output_spaces"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Are tags printed ? *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_print_tags"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "bool"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Are tags marked ? *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_mark_tags"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "bool"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* Find opening and closing markers of tags. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_mark_open_tag"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "tag"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ";"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_mark_close_tag"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "tag"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ";"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_print_open_tag"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "tag"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ";"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_print_close_tag"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "tag"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ";"
Text:  "<newline> "
Comment:  "(* The pretty-printer queue. *)"
Text:  "<newline> "
Keyword:  "mutable"
Text:  " "
Name:  "pp_queue"
Text:  " "
Operator:  ":"
Text:  " "
Name:  "pp_queue_elem"
Text:  " "
Name:  "queue"
Text:  "<newline>"
Punctuation:  "};;"
Text:  "<newline><newline>"
Comment:  "(**************************************************************<newline><newline>  Auxilliaries and basic functions.<newline><newline> **************************************************************)"
Text:  "<newline><newline><newline>"
Comment:  "(* Queues auxilliaries. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "make_queue"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "insert"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Nil"
Punctuation:  ";"
Text:  " "
Name:  "body"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Nil"
Punctuation:  "};;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "clear_queue"
Text:  " "
Name:  "q"
Text:  " "
Operator:  "="
Text:  " "
Name:  "q"
Operator:  "."
Name:  "insert"
Text:  " "
Operator:  "<-"
Text:  " "
Name.Class:  "Nil"
Punctuation:  ";"
Text:  " "
Name:  "q"
Operator:  "."
Name:  "body"
Text:  " "
Operator:  "<-"
Text:  " "
Name.Class:  "Nil"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "add_queue"
Text:  " "
Name:  "x"
Text:  " "
Name:  "q"
Text:  " "
Operator:  "="
Text:  "<newline> "
Keyword:  "let"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Cons"
Text:  " "
Punctuation:  "{"
Name:  "head"
Text:  " "
Operator:  "="
Text:  " "
Name:  "x"
Punctuation:  ";"
Text:  " "
Name:  "tail"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Nil"
Punctuation:  "}"
Text:  " "
Keyword:  "in"
Text:  "<newline> "
Keyword:  "match"
Text:  " "
Name:  "q"
Text:  " "
Keyword:  "with"
Text:  "<newline> "
Operator:  "|"
Text:  " "
Punctuation:  "{"
Name:  "insert"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Cons"
Text:  " "
Name:  "cell"
Punctuation:  "}"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "q"
Operator:  "."
Name:  "insert"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "c"
Punctuation:  ";"
Text:  " "
Name:  "cell"
Operator:  "."
Name:  "tail"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "c"
Text:  "<newline> "
Comment:  "(* Invariant: when insert is Nil body should be Nil. *)"
Text:  "<newline> "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "q"
Operator:  "."
Name:  "insert"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "c"
Punctuation:  ";"
Text:  " "
Name:  "q"
Operator:  "."
Name:  "body"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "c"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "exception"
Text:  " "
Name.Class:  "Empty_queue"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "peek_queue"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "function"
Text:  "<newline> "
Operator:  "|"
Text:  " "
Punctuation:  "{"
Name:  "body"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Cons"
Text:  " "
Punctuation:  "{"
Name:  "head"
Text:  " "
Operator:  "="
Text:  " "
Name:  "x"
Punctuation:  "}}"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "x"
Text:  "<newline> "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Keyword:  "raise"
Text:  " "
Name.Class:  "Empty_queue"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "take_queue"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "function"
Text:  "<newline> "
Operator:  "|"
Text:  " "
Punctuation:  "{"
Name:  "body"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Cons"
Text:  " "
Punctuation:  "{"
Name:  "head"
Text:  " "
Operator:  "="
Text:  " "
Name:  "x"
Punctuation:  ";"
Text:  " "
Name:  "tail"
Text:  " "
Operator:  "="
Text:  " "
Name:  "tl"
Punctuation:  "}}"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "q"
Text:  " "
Operator:  "->"
Text:  "<newline>    "
Name:  "q"
Operator:  "."
Name:  "body"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "tl"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "tl"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Nil"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "q"
Operator:  "."
Name:  "insert"
Text:  " "
Operator:  "<-"
Text:  " "
Name.Class:  "Nil"
Punctuation:  ";"
Text:  " "
Comment:  "(* Maintain the invariant. *)"
Text:  "<newline>    "
Name:  "x"
Text:  "<newline> "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Keyword:  "raise"
Text:  " "
Name.Class:  "Empty_queue"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Enter a token in the pretty-printer queue. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_enqueue"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "({"
Name:  "length"
Text:  " "
Operator:  "="
Text:  " "
Name:  "len"
Punctuation:  "}"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "token"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_right_total"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_right_total"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "len"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "add_queue"
Text:  " "
Name:  "token"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_queue"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_clear_queue"
Text:  " "
Name:  "state"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_left_total"
Text:  " "
Operator:  "<-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_right_total"
Text:  " "
Operator:  "<-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "clear_queue"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_queue"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Pp_infinity: large value for default tokens size.<newline><newline>   Pp_infinity is documented as being greater than 1e10; to avoid<newline>   confusion about the word ``greater'', we choose pp_infinity greater<newline>   than 1e10 + 1; for correct handling of tests in the algorithm,<newline>   pp_infinity must be even one more than 1e10 + 1; let's stand on the<newline>   safe side by choosing 1.e10+10.<newline><newline>   Pp_infinity could probably be 1073741823 that is 2^30 - 1, that is<newline>   the minimal upper bound for integers; now that max_int is defined,<newline>   this limit could also be defined as max_int - 1.<newline><newline>   However, before setting pp_infinity to something around max_int, we<newline>   must carefully double-check all the integer arithmetic operations<newline>   that involve pp_infinity, since any overflow would wreck havoc the<newline>   pretty-printing algorithm's invariants. Given that this arithmetic<newline>   correctness check is difficult and error prone and given that 1e10<newline>   + 1 is in practice large enough, there is no need to attempt to set<newline>   pp_infinity to the theoretically maximum limit. Is it not worth the<newline>   burden ! *)"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_infinity"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1000000010"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Output functions for the formatter. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_output_string"
Text:  " "
Name:  "state"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_output_function"
Text:  " "
Name:  "s"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "("
Name.Namespace:  "String"
Punctuation:  "."
Name:  "length"
Text:  " "
Name:  "s"
Punctuation:  ")"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "pp_output_newline"
Text:  " "
Name:  "state"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_output_newline"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_display_blanks"
Text:  " "
Name:  "state"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_output_spaces"
Text:  " "
Name:  "n"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To format a break, indenting a new line. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "break_new_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "offset"
Text:  " "
Name:  "width"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_output_newline"
Text:  " "
Name:  "state"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_is_new_line"
Text:  " "
Operator:  "<-"
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "indent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "width"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "offset"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Comment:  "(* Don't indent more than pp_max_indent. *)"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "real_indent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "min"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_indent"
Text:  " "
Name:  "indent"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_current_indent"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "real_indent"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_current_indent"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "pp_display_blanks"
Text:  " "
Name:  "state"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_current_indent"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To force a line break inside a block: no offset is added. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "break_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "width"
Text:  " "
Operator:  "="
Text:  " "
Name:  "break_new_line"
Text:  " "
Name:  "state"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name:  "width"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To format a break that fits on the current line. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "break_same_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "width"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "width"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "pp_display_blanks"
Text:  " "
Name:  "state"
Text:  " "
Name:  "width"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To indent no more than pp_max_indent, if one tries to open a block<newline>   beyond pp_max_indent, then the block is rejected on the left<newline>   by simulating a break. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_force_break_line"
Text:  " "
Name:  "state"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "match"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_format_stack"
Text:  " "
Keyword:  "with"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Format_elem"
Text:  " "
Punctuation:  "("
Name:  "bl_ty"
Operator:  ","
Text:  " "
Name:  "width"
Punctuation:  ")"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name:  "width"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Keyword:  "then"
Text:  "<newline>         "
Punctuation:  "("
Keyword:  "match"
Text:  " "
Name:  "bl_ty"
Text:  " "
Keyword:  "with"
Text:  "<newline>          "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_fits"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_hbox"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "break_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "width"
Punctuation:  ")"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "pp_output_newline"
Text:  " "
Name:  "state"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To skip a token, if the previous line has been broken. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_skip_token"
Text:  " "
Name:  "state"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Comment:  "(* When calling pp_skip_token the queue cannot be empty. *)"
Text:  "<newline>    "
Keyword:  "match"
Text:  " "
Name:  "take_queue"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_queue"
Text:  " "
Keyword:  "with"
Text:  "<newline>    "
Punctuation:  "{"
Name:  "elem_size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "size"
Punctuation:  ";"
Text:  " "
Name:  "length"
Text:  " "
Operator:  "="
Text:  " "
Name:  "len"
Punctuation:  "}"
Text:  " "
Operator:  "->"
Text:  "<newline>       "
Name:  "state"
Operator:  "."
Name:  "pp_left_total"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_left_total"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "len"
Punctuation:  ";"
Text:  "<newline>       "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "int_of_size"
Text:  " "
Name:  "size"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(**************************************************************<newline><newline>  The main pretting printing functions.<newline><newline> **************************************************************)"
Text:  "<newline><newline>"
Comment:  "(* To format a token. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "format_pp_token"
Text:  " "
Name:  "state"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "function"
Text:  "<newline><newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_text"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "->"
Text:  "<newline>      "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "size"
Punctuation:  ";"
Text:  "<newline>      "
Name:  "pp_output_string"
Text:  " "
Name:  "state"
Text:  " "
Name:  "s"
Punctuation:  ";"
Text:  "<newline>      "
Name:  "state"
Operator:  "."
Name:  "pp_is_new_line"
Text:  " "
Operator:  "<-"
Text:  " "
Name.Builtin.Pseudo:  "false"
Text:  "<newline><newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_begin"
Text:  " "
Punctuation:  "("
Name:  "off"
Operator:  ","
Text:  " "
Name:  "ty"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "insertion_point"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name:  "insertion_point"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_indent"
Text:  " "
Keyword:  "then"
Text:  "<newline>         "
Comment:  "(* can't open a block right there. *)"
Text:  "<newline>         "
Keyword:  "begin"
Text:  " "
Name:  "pp_force_break_line"
Text:  " "
Name:  "state"
Text:  " "
Keyword:  "end"
Punctuation:  ";"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "offset"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "off"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "bl_type"
Text:  " "
Operator:  "="
Text:  "<newline>       "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "ty"
Text:  " "
Keyword:  "with"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_vbox"
Text:  " "
Operator:  "->"
Text:  " "
Name.Class:  "Pp_vbox"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "size"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "ty"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Class:  "Pp_fits"
Text:  "<newline>       "
Keyword:  "end"
Text:  " "
Keyword:  "in"
Text:  "<newline>       "
Name:  "state"
Operator:  "."
Name:  "pp_format_stack"
Text:  " "
Operator:  "<-"
Text:  "<newline>        "
Name.Class:  "Format_elem"
Text:  " "
Punctuation:  "("
Name:  "bl_type"
Operator:  ","
Text:  " "
Name:  "offset"
Punctuation:  ")"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_format_stack"
Text:  "<newline><newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_end"
Text:  " "
Operator:  "->"
Text:  "<newline>      "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_format_stack"
Text:  " "
Keyword:  "with"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "::"
Text:  " "
Punctuation:  "("
Name:  "y"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "l"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ls"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_format_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "ls"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Comment:  "(* No more block to close. *)"
Text:  "<newline>      "
Keyword:  "end"
Text:  "<newline><newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_tbegin"
Text:  " "
Punctuation:  "("
Name.Class:  "Pp_tbox"
Text:  " "
Name:  "_"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "tbox"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>      "
Name:  "state"
Operator:  "."
Name:  "pp_tbox_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "tbox"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_tbox_stack"
Text:  "<newline><newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_tend"
Text:  " "
Operator:  "->"
Text:  "<newline>      "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_tbox_stack"
Text:  " "
Keyword:  "with"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "ls"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_tbox_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "ls"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Comment:  "(* No more tabulation block to close. *)"
Text:  "<newline>      "
Keyword:  "end"
Text:  "<newline><newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_stab"
Text:  " "
Operator:  "->"
Text:  "<newline>     "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_tbox_stack"
Text:  " "
Keyword:  "with"
Text:  "<newline>     "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_tbox"
Text:  " "
Name:  "tabs"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "add_tab"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "function"
Text:  "<newline>          "
Operator:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "["
Name:  "n"
Punctuation:  "]"
Text:  "<newline>          "
Operator:  "|"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "l"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ls"
Text:  " "
Operator:  "->"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "x"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "ls"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "add_tab"
Text:  " "
Name:  "n"
Text:  " "
Name:  "l"
Text:  " "
Keyword:  "in"
Text:  "<newline>        "
Name:  "tabs"
Text:  " "
Operator:  ":="
Text:  " "
Name:  "add_tab"
Text:  " "
Punctuation:  "("
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Punctuation:  ")"
Text:  " "
Operator:  "!"
Name:  "tabs"
Text:  "<newline>     "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Comment:  "(* No opened tabulation block. *)"
Text:  "<newline>     "
Keyword:  "end"
Text:  "<newline><newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_tbreak"
Text:  " "
Punctuation:  "("
Name:  "n"
Operator:  ","
Text:  " "
Name:  "off"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "insertion_point"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_tbox_stack"
Text:  " "
Keyword:  "with"
Text:  "<newline>      "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_tbox"
Text:  " "
Name:  "tabs"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  "<newline>         "
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "find"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "function"
Text:  "<newline>           "
Operator:  "|"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "l"
Text:  " "
Operator:  "->"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "x"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "n"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "x"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "find"
Text:  " "
Name:  "n"
Text:  " "
Name:  "l"
Text:  "<newline>           "
Operator:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Operator:  "->"
Text:  " "
Keyword:  "raise"
Text:  " "
Name.Class:  "Not_found"
Text:  " "
Keyword:  "in"
Text:  "<newline>         "
Keyword:  "let"
Text:  " "
Name:  "tab"
Text:  " "
Operator:  "="
Text:  "<newline>             "
Keyword:  "match"
Text:  " "
Operator:  "!"
Name:  "tabs"
Text:  " "
Keyword:  "with"
Text:  "<newline>             "
Operator:  "|"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "l"
Text:  " "
Operator:  "->"
Text:  "<newline>                "
Keyword:  "begin"
Text:  " "
Keyword:  "try"
Text:  " "
Name:  "find"
Text:  " "
Name:  "insertion_point"
Text:  " "
Operator:  "!"
Name:  "tabs"
Text:  " "
Keyword:  "with"
Text:  " "
Name.Class:  "Not_found"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "x"
Text:  " "
Keyword:  "end"
Text:  "<newline>             "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "insertion_point"
Text:  " "
Keyword:  "in"
Text:  "<newline>         "
Keyword:  "let"
Text:  " "
Name:  "offset"
Text:  " "
Operator:  "="
Text:  " "
Name:  "tab"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "insertion_point"
Text:  " "
Keyword:  "in"
Text:  "<newline>         "
Keyword:  "if"
Text:  " "
Name:  "offset"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "break_same_line"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "offset"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "n"
Punctuation:  ")"
Text:  " "
Keyword:  "else"
Text:  "<newline>          "
Name:  "break_new_line"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "tab"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "off"
Punctuation:  ")"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  "<newline>      "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Comment:  "(* No opened tabulation block. *)"
Text:  "<newline>      "
Keyword:  "end"
Text:  "<newline><newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_newline"
Text:  " "
Operator:  "->"
Text:  "<newline>     "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_format_stack"
Text:  " "
Keyword:  "with"
Text:  "<newline>     "
Operator:  "|"
Text:  " "
Name.Class:  "Format_elem"
Text:  " "
Punctuation:  "("
Name:  "_"
Operator:  ","
Text:  " "
Name:  "width"
Punctuation:  ")"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "break_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "width"
Text:  "<newline>     "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "pp_output_newline"
Text:  " "
Name:  "state"
Text:  "<newline>     "
Keyword:  "end"
Text:  "<newline><newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_if_newline"
Text:  " "
Operator:  "->"
Text:  "<newline>     "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_current_indent"
Text:  " "
Operator:  "!="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  "<newline>     "
Keyword:  "then"
Text:  " "
Name:  "pp_skip_token"
Text:  " "
Name:  "state"
Text:  "<newline><newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_break"
Text:  " "
Punctuation:  "("
Name:  "n"
Operator:  ","
Text:  " "
Name:  "off"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>     "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_format_stack"
Text:  " "
Keyword:  "with"
Text:  "<newline>     "
Operator:  "|"
Text:  " "
Name.Class:  "Format_elem"
Text:  " "
Punctuation:  "("
Name:  "ty"
Operator:  ","
Text:  " "
Name:  "width"
Punctuation:  ")"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  "<newline>        "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "ty"
Text:  " "
Keyword:  "with"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_hovbox"
Text:  " "
Operator:  "->"
Text:  "<newline>           "
Keyword:  "if"
Text:  " "
Name:  "size"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  "<newline>           "
Keyword:  "then"
Text:  " "
Name:  "break_new_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "off"
Text:  " "
Name:  "width"
Text:  "<newline>           "
Keyword:  "else"
Text:  " "
Name:  "break_same_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "n"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_box"
Text:  " "
Operator:  "->"
Text:  "<newline>           "
Comment:  "(* Have the line just been broken here ? *)"
Text:  "<newline>           "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_is_new_line"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "break_same_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "n"
Text:  " "
Keyword:  "else"
Text:  "<newline>           "
Keyword:  "if"
Text:  " "
Name:  "size"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  "<newline>            "
Keyword:  "then"
Text:  " "
Name:  "break_new_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "off"
Text:  " "
Name:  "width"
Text:  " "
Keyword:  "else"
Text:  "<newline>           "
Comment:  "(* break the line here leads to new indentation ? *)"
Text:  "<newline>           "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_current_indent"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "width"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "off"
Text:  "<newline>           "
Keyword:  "then"
Text:  " "
Name:  "break_new_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "off"
Text:  " "
Name:  "width"
Text:  "<newline>           "
Keyword:  "else"
Text:  " "
Name:  "break_same_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "n"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_hvbox"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "break_new_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "off"
Text:  " "
Name:  "width"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_fits"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "break_same_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "n"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_vbox"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "break_new_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "off"
Text:  " "
Name:  "width"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_hbox"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "break_same_line"
Text:  " "
Name:  "state"
Text:  " "
Name:  "n"
Text:  "<newline>        "
Keyword:  "end"
Text:  "<newline>     "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Comment:  "(* No opened block. *)"
Text:  "<newline>     "
Keyword:  "end"
Text:  "<newline><newline>   "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_open_tag"
Text:  " "
Name:  "tag_name"
Text:  " "
Operator:  "->"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "marker"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_mark_open_tag"
Text:  " "
Name:  "tag_name"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Name:  "pp_output_string"
Text:  " "
Name:  "state"
Text:  " "
Name:  "marker"
Punctuation:  ";"
Text:  "<newline>      "
Name:  "state"
Operator:  "."
Name:  "pp_mark_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "tag_name"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_mark_stack"
Text:  "<newline><newline>   "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_close_tag"
Text:  " "
Operator:  "->"
Text:  "<newline>      "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_mark_stack"
Text:  " "
Keyword:  "with"
Text:  "<newline>      "
Operator:  "|"
Text:  " "
Name:  "tag_name"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "tags"
Text:  " "
Operator:  "->"
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Name:  "marker"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_mark_close_tag"
Text:  " "
Name:  "tag_name"
Text:  " "
Keyword:  "in"
Text:  "<newline>          "
Name:  "pp_output_string"
Text:  " "
Name:  "state"
Text:  " "
Name:  "marker"
Punctuation:  ";"
Text:  "<newline>          "
Name:  "state"
Operator:  "."
Name:  "pp_mark_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "tags"
Text:  "<newline>      "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Comment:  "(* No more tag to close. *)"
Text:  "<newline>      "
Keyword:  "end"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Print if token size is known or printing is delayed.<newline>   Size is known when not negative.<newline>   Printing is delayed when the text waiting in the queue requires<newline>   more room to format than exists on the current line. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "advance_left"
Text:  " "
Name:  "state"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "try"
Text:  "<newline>     "
Keyword:  "match"
Text:  " "
Name:  "peek_queue"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_queue"
Text:  " "
Keyword:  "with"
Text:  "<newline>      "
Punctuation:  "{"
Name:  "elem_size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "size"
Punctuation:  ";"
Text:  " "
Name:  "token"
Text:  " "
Operator:  "="
Text:  " "
Name:  "tok"
Punctuation:  ";"
Text:  " "
Name:  "length"
Text:  " "
Operator:  "="
Text:  " "
Name:  "len"
Punctuation:  "}"
Text:  " "
Operator:  "->"
Text:  "<newline>       "
Keyword:  "let"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "int_of_size"
Text:  " "
Name:  "size"
Text:  " "
Keyword:  "in"
Text:  "<newline>       "
Keyword:  "if"
Text:  " "
Name:  "not"
Text:  "<newline>        "
Punctuation:  "("
Name:  "size"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "&&"
Text:  "<newline>         "
Punctuation:  "("
Name:  "state"
Operator:  "."
Name:  "pp_right_total"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_left_total"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Punctuation:  "))"
Text:  "<newline>        "
Keyword:  "then"
Text:  " "
Keyword:  "begin"
Text:  "<newline>         "
Name:  "ignore"
Punctuation:  "("
Name:  "take_queue"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_queue"
Punctuation:  ");"
Text:  "<newline>         "
Name:  "format_pp_token"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "pp_infinity"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "size"
Punctuation:  ")"
Text:  " "
Name:  "tok"
Punctuation:  ";"
Text:  "<newline>         "
Name:  "state"
Operator:  "."
Name:  "pp_left_total"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "len"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_left_total"
Punctuation:  ";"
Text:  "<newline>         "
Name:  "advance_left"
Text:  " "
Name:  "state"
Text:  "<newline>        "
Keyword:  "end"
Text:  "<newline>    "
Keyword:  "with"
Text:  " "
Name.Class:  "Empty_queue"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "enqueue_advance"
Text:  " "
Name:  "state"
Text:  " "
Name:  "tok"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_enqueue"
Text:  " "
Name:  "state"
Text:  " "
Name:  "tok"
Punctuation:  ";"
Text:  " "
Name:  "advance_left"
Text:  " "
Name:  "state"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To enqueue a string : try to advance. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "make_queue_elem"
Text:  " "
Name:  "size"
Text:  " "
Name:  "tok"
Text:  " "
Name:  "len"
Text:  " "
Operator:  "="
Text:  "<newline> "
Punctuation:  "{"
Name:  "elem_size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "size"
Punctuation:  ";"
Text:  " "
Name:  "token"
Text:  " "
Operator:  "="
Text:  " "
Name:  "tok"
Punctuation:  ";"
Text:  " "
Name:  "length"
Text:  " "
Operator:  "="
Text:  " "
Name:  "len"
Punctuation:  "};;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "enqueue_string_as"
Text:  " "
Name:  "state"
Text:  " "
Name:  "size"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "len"
Text:  " "
Operator:  "="
Text:  " "
Name:  "int_of_size"
Text:  " "
Name:  "size"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Name:  "enqueue_advance"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "make_queue_elem"
Text:  " "
Name:  "size"
Text:  " "
Punctuation:  "("
Name.Class:  "Pp_text"
Text:  " "
Name:  "s"
Punctuation:  ")"
Text:  " "
Name:  "len"
Punctuation:  ");;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "enqueue_string"
Text:  " "
Name:  "state"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "len"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "length"
Text:  " "
Name:  "s"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Name:  "enqueue_string_as"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Name:  "len"
Punctuation:  ")"
Text:  " "
Name:  "s"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Routines for scan stack<newline>   determine sizes of blocks. *)"
Text:  "<newline><newline>"
Comment:  "(* The scan_stack is never empty. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "scan_stack_bottom"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "q_elem"
Text:  " "
Operator:  "="
Text:  " "
Name:  "make_queue_elem"
Text:  " "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Class:  "Pp_text"
Text:  " "
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Punctuation:  "["
Name.Class:  "Scan_elem"
Text:  " "
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "1"
Operator:  ","
Text:  " "
Name:  "q_elem"
Punctuation:  ")];;"
Text:  "<newline><newline>"
Comment:  "(* Set size of blocks on scan stack:<newline>   if ty = true then size of break is set else size of block is set;<newline>   in each case pp_scan_stack is popped. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "clear_scan_stack"
Text:  " "
Name:  "state"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_scan_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "scan_stack_bottom"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Pattern matching on scan stack is exhaustive,<newline>   since scan_stack is never empty.<newline>   Pattern matching on token in scan stack is also exhaustive,<newline>   since scan_push is used on breaks and opening of boxes. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "set_size"
Text:  " "
Name:  "state"
Text:  " "
Name:  "ty"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "match"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_scan_stack"
Text:  " "
Keyword:  "with"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Scan_elem"
Text:  "<newline>        "
Punctuation:  "("
Name:  "left_tot"
Operator:  ","
Text:  "<newline>         "
Punctuation:  "({"
Name:  "elem_size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "size"
Punctuation:  ";"
Text:  " "
Name:  "token"
Text:  " "
Operator:  "="
Text:  " "
Name:  "tok"
Punctuation:  "}"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "queue_elem"
Punctuation:  "))"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "t"
Text:  " "
Operator:  "->"
Text:  "<newline>       "
Keyword:  "let"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "int_of_size"
Text:  " "
Name:  "size"
Text:  " "
Keyword:  "in"
Text:  "<newline>       "
Comment:  "(* test if scan stack contains any data that is not obsolete. *)"
Text:  "<newline>       "
Keyword:  "if"
Text:  " "
Name:  "left_tot"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_left_total"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "clear_scan_stack"
Text:  " "
Name:  "state"
Text:  " "
Keyword:  "else"
Text:  "<newline>        "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "tok"
Text:  " "
Keyword:  "with"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_break"
Text:  " "
Punctuation:  "("
Name:  "_"
Operator:  ","
Text:  " "
Name:  "_"
Punctuation:  ")"
Text:  " "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_tbreak"
Text:  " "
Punctuation:  "("
Name:  "_"
Operator:  ","
Text:  " "
Name:  "_"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>           "
Keyword:  "if"
Text:  " "
Name:  "ty"
Text:  " "
Keyword:  "then"
Text:  "<newline>            "
Keyword:  "begin"
Text:  "<newline>             "
Name:  "queue_elem"
Operator:  "."
Name:  "elem_size"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "size_of_int"
Text:  " "
Punctuation:  "("
Name:  "state"
Operator:  "."
Name:  "pp_right_total"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "size"
Punctuation:  ");"
Text:  "<newline>             "
Name:  "state"
Operator:  "."
Name:  "pp_scan_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "t"
Text:  "<newline>            "
Keyword:  "end"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Pp_begin"
Text:  " "
Punctuation:  "("
Name:  "_"
Operator:  ","
Text:  " "
Name:  "_"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  "<newline>           "
Keyword:  "if"
Text:  " "
Name:  "not"
Text:  " "
Name:  "ty"
Text:  " "
Keyword:  "then"
Text:  "<newline>            "
Keyword:  "begin"
Text:  "<newline>             "
Name:  "queue_elem"
Operator:  "."
Name:  "elem_size"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "size_of_int"
Text:  " "
Punctuation:  "("
Name:  "state"
Operator:  "."
Name:  "pp_right_total"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "size"
Punctuation:  ");"
Text:  "<newline>             "
Name:  "state"
Operator:  "."
Name:  "pp_scan_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "t"
Text:  "<newline>            "
Keyword:  "end"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Comment:  "(* scan_push is only used for breaks and boxes. *)"
Text:  "<newline>        "
Keyword:  "end"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Comment:  "(* scan_stack is never empty. *)"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Push a token on scan stack. If b is true set_size is called. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "scan_push"
Text:  " "
Name:  "state"
Text:  " "
Name:  "b"
Text:  " "
Name:  "tok"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_enqueue"
Text:  " "
Name:  "state"
Text:  " "
Name:  "tok"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "b"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "set_size"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_scan_stack"
Text:  " "
Operator:  "<-"
Text:  "<newline>     "
Name.Class:  "Scan_elem"
Text:  " "
Punctuation:  "("
Name:  "state"
Operator:  "."
Name:  "pp_right_total"
Operator:  ","
Text:  " "
Name:  "tok"
Punctuation:  ")"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_scan_stack"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To open a new block :<newline>   the user may set the depth bound pp_max_boxes<newline>   any text nested deeper is printed as the ellipsis string. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_open_box_gen"
Text:  " "
Name:  "state"
Text:  " "
Name:  "indent"
Text:  " "
Name:  "br_ty"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "elem"
Text:  " "
Operator:  "="
Text:  "<newline>        "
Name:  "make_queue_elem"
Text:  "<newline>          "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Punctuation:  "("
Operator:  "-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_right_total"
Punctuation:  "))"
Text:  "<newline>          "
Punctuation:  "("
Name.Class:  "Pp_begin"
Text:  " "
Punctuation:  "("
Name:  "indent"
Operator:  ","
Text:  " "
Name:  "br_ty"
Punctuation:  "))"
Text:  "<newline>          "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Name:  "scan_push"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "false"
Text:  " "
Name:  "elem"
Text:  " "
Keyword:  "else"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  "<newline>    "
Keyword:  "then"
Text:  " "
Name:  "enqueue_string"
Text:  " "
Name:  "state"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_ellipsis"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* The box which is always opened. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_open_sys_box"
Text:  " "
Name:  "state"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_box_gen"
Text:  " "
Name:  "state"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Class:  "Pp_hovbox"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Close a block, setting sizes of its subblocks. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_close_box"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "then"
Text:  "<newline>     "
Keyword:  "begin"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  " "
Keyword:  "then"
Text:  "<newline>       "
Keyword:  "begin"
Text:  "<newline>        "
Name:  "pp_enqueue"
Text:  " "
Name:  "state"
Text:  "<newline>          "
Punctuation:  "{"
Name:  "elem_size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "size_of_int"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Name:  "token"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Pp_end"
Punctuation:  ";"
Text:  " "
Name:  "length"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "};"
Text:  "<newline>        "
Name:  "set_size"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  " "
Name:  "set_size"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "false"
Text:  "<newline>       "
Keyword:  "end"
Punctuation:  ";"
Text:  "<newline>      "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>     "
Keyword:  "end"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Open a tag, pushing it on the tag stack. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_open_tag"
Text:  " "
Name:  "state"
Text:  " "
Name:  "tag_name"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_print_tags"
Text:  " "
Keyword:  "then"
Text:  " "
Keyword:  "begin"
Text:  "<newline>      "
Name:  "state"
Operator:  "."
Name:  "pp_tag_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "tag_name"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_tag_stack"
Punctuation:  ";"
Text:  "<newline>      "
Name:  "state"
Operator:  "."
Name:  "pp_print_open_tag"
Text:  " "
Name:  "tag_name"
Text:  " "
Keyword:  "end"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_mark_tags"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Name:  "pp_enqueue"
Text:  " "
Name:  "state"
Text:  "<newline>        "
Punctuation:  "{"
Name:  "elem_size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "size_of_int"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Name:  "token"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Pp_open_tag"
Text:  " "
Name:  "tag_name"
Punctuation:  ";"
Text:  " "
Name:  "length"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "};;"
Text:  "<newline><newline>"
Comment:  "(* Close a tag, popping it from the tag stack. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_close_tag"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_mark_tags"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Name:  "pp_enqueue"
Text:  " "
Name:  "state"
Text:  "<newline>        "
Punctuation:  "{"
Name:  "elem_size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "size_of_int"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  " "
Name:  "token"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Pp_close_tag"
Punctuation:  ";"
Text:  " "
Name:  "length"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "};"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_print_tags"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_tag_stack"
Text:  " "
Keyword:  "with"
Text:  "<newline>      "
Operator:  "|"
Text:  " "
Name:  "tag_name"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "tags"
Text:  " "
Operator:  "->"
Text:  "<newline>          "
Name:  "state"
Operator:  "."
Name:  "pp_print_close_tag"
Text:  " "
Name:  "tag_name"
Punctuation:  ";"
Text:  "<newline>          "
Name:  "state"
Operator:  "."
Name:  "pp_tag_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "tags"
Text:  "<newline>      "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Comment:  "(* No more tag to close. *)"
Text:  "<newline>      "
Keyword:  "end"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_print_tags"
Text:  " "
Name:  "state"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_print_tags"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "b"
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_mark_tags"
Text:  " "
Name:  "state"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_mark_tags"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "b"
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_get_print_tags"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_print_tags"
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_get_mark_tags"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_mark_tags"
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_tags"
Text:  " "
Name:  "state"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_set_print_tags"
Text:  " "
Name:  "state"
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  " "
Name:  "pp_set_mark_tags"
Text:  " "
Name:  "state"
Text:  " "
Name:  "b"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_get_formatter_tag_functions"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>   "
Name:  "mark_open_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_mark_open_tag"
Punctuation:  ";"
Text:  "<newline>   "
Name:  "mark_close_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_mark_close_tag"
Punctuation:  ";"
Text:  "<newline>   "
Name:  "print_open_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_print_open_tag"
Punctuation:  ";"
Text:  "<newline>   "
Name:  "print_close_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_print_close_tag"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "};;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_formatter_tag_functions"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "{"
Text:  "<newline>     "
Name:  "mark_open_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "mot"
Punctuation:  ";"
Text:  "<newline>     "
Name:  "mark_close_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "mct"
Punctuation:  ";"
Text:  "<newline>     "
Name:  "print_open_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pot"
Punctuation:  ";"
Text:  "<newline>     "
Name:  "print_close_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pct"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Operator:  "="
Text:  "<newline>   "
Name:  "state"
Operator:  "."
Name:  "pp_mark_open_tag"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "mot"
Punctuation:  ";"
Text:  "<newline>   "
Name:  "state"
Operator:  "."
Name:  "pp_mark_close_tag"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "mct"
Punctuation:  ";"
Text:  "<newline>   "
Name:  "state"
Operator:  "."
Name:  "pp_print_open_tag"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "pot"
Punctuation:  ";"
Text:  "<newline>   "
Name:  "state"
Operator:  "."
Name:  "pp_print_close_tag"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "pct"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Initialize pretty-printer. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_rinit"
Text:  " "
Name:  "state"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_clear_queue"
Text:  " "
Name:  "state"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "clear_scan_stack"
Text:  " "
Name:  "state"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_format_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_tbox_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_tag_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_mark_stack"
Text:  " "
Operator:  "<-"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_current_indent"
Text:  " "
Operator:  "<-"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<-"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_space_left"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "pp_open_sys_box"
Text:  " "
Name:  "state"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Flushing pretty-printer queue. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_flush_queue"
Text:  " "
Name:  "state"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "while"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "do"
Text:  "<newline>     "
Name:  "pp_close_box"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  "<newline>    "
Keyword:  "done"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_right_total"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "pp_infinity"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "advance_left"
Text:  " "
Name:  "state"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "b"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "pp_output_newline"
Text:  " "
Name:  "state"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "pp_rinit"
Text:  " "
Name:  "state"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(**************************************************************<newline><newline>  Procedures to format objects, and use boxes<newline><newline> **************************************************************)"
Text:  "<newline><newline>"
Comment:  "(* To format a string. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_as_size"
Text:  " "
Name:  "state"
Text:  " "
Name:  "size"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  "<newline>  "
Keyword:  "then"
Text:  " "
Name:  "enqueue_string_as"
Text:  " "
Name:  "state"
Text:  " "
Name:  "size"
Text:  " "
Name:  "s"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_as"
Text:  " "
Name:  "state"
Text:  " "
Name:  "isize"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "pp_print_as_size"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Name:  "isize"
Punctuation:  ")"
Text:  " "
Name:  "s"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_string"
Text:  " "
Name:  "state"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "pp_print_as"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name.Namespace:  "String"
Punctuation:  "."
Name:  "length"
Text:  " "
Name:  "s"
Punctuation:  ")"
Text:  " "
Name:  "s"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To format an integer. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_int"
Text:  " "
Name:  "state"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_string"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "string_of_int"
Text:  " "
Name:  "i"
Punctuation:  ");;"
Text:  "<newline><newline>"
Comment:  "(* To format a float. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_float"
Text:  " "
Name:  "state"
Text:  " "
Name:  "f"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_string"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "string_of_float"
Text:  " "
Name:  "f"
Punctuation:  ");;"
Text:  "<newline><newline>"
Comment:  "(* To format a boolean. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_bool"
Text:  " "
Name:  "state"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_string"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "string_of_bool"
Text:  " "
Name:  "b"
Punctuation:  ");;"
Text:  "<newline><newline>"
Comment:  "(* To format a char. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_char"
Text:  " "
Name:  "state"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "create"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Name:  "s"
Operator:  "."
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "c"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_print_as"
Text:  " "
Name:  "state"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name:  "s"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Opening boxes. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_open_hbox"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_box_gen"
Text:  " "
Name:  "state"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Class:  "Pp_hbox"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "pp_open_vbox"
Text:  " "
Name:  "state"
Text:  " "
Name:  "indent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_box_gen"
Text:  " "
Name:  "state"
Text:  " "
Name:  "indent"
Text:  " "
Name.Class:  "Pp_vbox"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "pp_open_hvbox"
Text:  " "
Name:  "state"
Text:  " "
Name:  "indent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_box_gen"
Text:  " "
Name:  "state"
Text:  " "
Name:  "indent"
Text:  " "
Name.Class:  "Pp_hvbox"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "pp_open_hovbox"
Text:  " "
Name:  "state"
Text:  " "
Name:  "indent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_box_gen"
Text:  " "
Name:  "state"
Text:  " "
Name:  "indent"
Text:  " "
Name.Class:  "Pp_hovbox"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "pp_open_box"
Text:  " "
Name:  "state"
Text:  " "
Name:  "indent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_box_gen"
Text:  " "
Name:  "state"
Text:  " "
Name:  "indent"
Text:  " "
Name.Class:  "Pp_box"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Print a new line after printing all queued text<newline>   (same for print_flush but without a newline). *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_newline"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_flush_queue"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_flush_function"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "pp_print_flush"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_flush_queue"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "false"
Punctuation:  ";"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_flush_function"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To get a newline when one does not want to close the current block. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_force_newline"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  " "
Keyword:  "then"
Text:  "<newline>    "
Name:  "enqueue_advance"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "make_queue_elem"
Text:  " "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Name.Class:  "Pp_newline"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ");;"
Text:  "<newline><newline>"
Comment:  "(* To format something if the line has just been broken. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_if_newline"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  " "
Keyword:  "then"
Text:  "<newline>    "
Name:  "enqueue_advance"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "make_queue_elem"
Text:  " "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Name.Class:  "Pp_if_newline"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ");;"
Text:  "<newline><newline>"
Comment:  "(* Breaks: indicate where a block may be broken.<newline>   If line is broken then offset is added to the indentation of the current<newline>   block else (the value of) width blanks are printed.<newline>   To do (?) : add a maximum width and offset value. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_break"
Text:  " "
Name:  "state"
Text:  " "
Name:  "width"
Text:  " "
Name:  "offset"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  " "
Keyword:  "then"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "elem"
Text:  " "
Operator:  "="
Text:  "<newline>      "
Name:  "make_queue_elem"
Text:  "<newline>        "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Punctuation:  "("
Operator:  "-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_right_total"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "("
Name.Class:  "Pp_break"
Text:  " "
Punctuation:  "("
Name:  "width"
Operator:  ","
Text:  " "
Name:  "offset"
Punctuation:  "))"
Text:  "<newline>        "
Name:  "width"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Name:  "scan_push"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "true"
Text:  " "
Name:  "elem"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_space"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_break"
Text:  " "
Name:  "state"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "pp_print_cut"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_break"
Text:  " "
Name:  "state"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Tabulation boxes. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_open_tbox"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  " "
Keyword:  "then"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "elem"
Text:  " "
Operator:  "="
Text:  "<newline>      "
Name:  "make_queue_elem"
Text:  " "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Class:  "Pp_tbegin"
Text:  " "
Punctuation:  "("
Name.Class:  "Pp_tbox"
Text:  " "
Punctuation:  "("
Name:  "ref"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ")))"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Name:  "enqueue_advance"
Text:  " "
Name:  "state"
Text:  " "
Name:  "elem"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Close a tabulation block. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_close_tbox"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "then"
Text:  " "
Keyword:  "begin"
Text:  "<newline>   "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  " "
Keyword:  "then"
Text:  "<newline>     "
Keyword:  "let"
Text:  " "
Name:  "elem"
Text:  " "
Operator:  "="
Text:  " "
Name:  "make_queue_elem"
Text:  " "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Name.Class:  "Pp_tend"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "in"
Text:  "<newline>     "
Name:  "enqueue_advance"
Text:  " "
Name:  "state"
Text:  " "
Name:  "elem"
Punctuation:  ";"
Text:  "<newline>     "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "end"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Print a tabulation break. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_tbreak"
Text:  " "
Name:  "state"
Text:  " "
Name:  "width"
Text:  " "
Name:  "offset"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  " "
Keyword:  "then"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "elem"
Text:  " "
Operator:  "="
Text:  "<newline>      "
Name:  "make_queue_elem"
Text:  "<newline>        "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Punctuation:  "("
Operator:  "-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_right_total"
Punctuation:  "))"
Text:  "<newline>        "
Punctuation:  "("
Name.Class:  "Pp_tbreak"
Text:  " "
Punctuation:  "("
Name:  "width"
Operator:  ","
Text:  " "
Name:  "offset"
Punctuation:  "))"
Text:  "<newline>        "
Name:  "width"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Name:  "scan_push"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "true"
Text:  " "
Name:  "elem"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_print_tab"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_tbreak"
Text:  " "
Name:  "state"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_tab"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  " "
Keyword:  "then"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "elem"
Text:  " "
Operator:  "="
Text:  "<newline>      "
Name:  "make_queue_elem"
Text:  " "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Name.Class:  "Pp_stab"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Name:  "enqueue_advance"
Text:  " "
Name:  "state"
Text:  " "
Name:  "elem"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(**************************************************************<newline><newline>  Procedures to control the pretty-printers<newline><newline> **************************************************************)"
Text:  "<newline><newline>"
Comment:  "(* Fit max_boxes. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_max_boxes"
Text:  " "
Name:  "state"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "n"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To know the current maximum number of boxes allowed. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_get_max_boxes"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_over_max_boxes"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_curr_depth"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_boxes"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Ellipsis. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_ellipsis_text"
Text:  " "
Name:  "state"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_ellipsis"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "s"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "pp_get_ellipsis_text"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_ellipsis"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To set the margin of pretty-printer. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_limit"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "pp_infinity"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "n"
Text:  " "
Keyword:  "else"
Text:  " "
Name:  "pred"
Text:  " "
Name:  "pp_infinity"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_min_space_left"
Text:  " "
Name:  "state"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "then"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_limit"
Text:  " "
Name:  "n"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_min_space_left"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "n"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_max_indent"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_min_space_left"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "pp_rinit"
Text:  " "
Name:  "state"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Initially, we have :<newline>  pp_max_indent = pp_margin - pp_min_space_left, and<newline>  pp_space_left = pp_margin. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_max_indent"
Text:  " "
Name:  "state"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "pp_set_min_space_left"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "n"
Punctuation:  ");;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_get_max_indent"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_indent"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_margin"
Text:  " "
Name:  "state"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "then"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_limit"
Text:  " "
Name:  "n"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "n"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "new_max_indent"
Text:  " "
Operator:  "="
Text:  "<newline>        "
Comment:  "(* Try to maintain max_indent to its actual value. *)"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_indent"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  "<newline>        "
Keyword:  "then"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_max_indent"
Text:  " "
Keyword:  "else"
Text:  "<newline>        "
Comment:  "(* If possible maintain pp_min_space_left to its actual value,<newline>           if this leads to a too small max_indent, take half of the<newline>           new margin, if it is greater than 1. *)"
Text:  "<newline>         "
Name:  "max"
Text:  " "
Punctuation:  "("
Name:  "max"
Text:  " "
Punctuation:  "("
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_min_space_left"
Punctuation:  ")"
Text:  "<newline>                  "
Punctuation:  "("
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "))"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Comment:  "(* Rebuild invariants. *)"
Text:  "<newline>    "
Name:  "pp_set_max_indent"
Text:  " "
Name:  "state"
Text:  " "
Name:  "new_max_indent"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_get_margin"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_margin"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_formatter_output_functions"
Text:  " "
Name:  "state"
Text:  " "
Name:  "f"
Text:  " "
Name:  "g"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "state"
Operator:  "."
Name:  "pp_output_function"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "f"
Punctuation:  ";"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_flush_function"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "g"
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_get_formatter_output_functions"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Punctuation:  "("
Name:  "state"
Operator:  "."
Name:  "pp_output_function"
Operator:  ","
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_flush_function"
Punctuation:  ");;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_all_formatter_output_functions"
Text:  " "
Name:  "state"
Text:  "<newline>    "
Operator:  "~"
Name:  "out"
Operator:  ":"
Name:  "f"
Text:  " "
Operator:  "~"
Name:  "flush"
Operator:  ":"
Name:  "g"
Text:  " "
Operator:  "~"
Name:  "newline"
Operator:  ":"
Name:  "h"
Text:  " "
Operator:  "~"
Name:  "spaces"
Operator:  ":"
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "pp_set_formatter_output_functions"
Text:  " "
Name:  "state"
Text:  " "
Name:  "f"
Text:  " "
Name:  "g"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "state"
Operator:  "."
Name:  "pp_output_newline"
Text:  " "
Operator:  "<-"
Text:  " "
Punctuation:  "("
Keyword:  "function"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "h"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ");"
Text:  "<newline>  "
Name:  "state"
Operator:  "."
Name:  "pp_output_spaces"
Text:  " "
Operator:  "<-"
Text:  " "
Punctuation:  "("
Keyword:  "function"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "i"
Text:  " "
Name:  "n"
Punctuation:  ");;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_get_all_formatter_output_functions"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Punctuation:  "("
Name:  "state"
Operator:  "."
Name:  "pp_output_function"
Operator:  ","
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_flush_function"
Operator:  ","
Text:  "<newline>   "
Name:  "state"
Operator:  "."
Name:  "pp_output_newline"
Operator:  ","
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_output_spaces"
Punctuation:  ");;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_set_formatter_out_channel"
Text:  " "
Name:  "state"
Text:  " "
Name:  "os"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "state"
Operator:  "."
Name:  "pp_output_function"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "output"
Text:  " "
Name:  "os"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "state"
Operator:  "."
Name:  "pp_flush_function"
Text:  " "
Operator:  "<-"
Text:  " "
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "flush"
Text:  " "
Name:  "os"
Punctuation:  ");;"
Text:  "<newline><newline>"
Comment:  "(**************************************************************<newline><newline>  Creation of specific formatters<newline><newline> **************************************************************)"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "default_pp_mark_open_tag"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"<\""
Text:  " "
Operator:  "^"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "^"
Text:  " "
Literal.String.Double:  "\">\""
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "default_pp_mark_close_tag"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"</\""
Text:  " "
Operator:  "^"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "^"
Text:  " "
Literal.String.Double:  "\">\""
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "default_pp_print_open_tag"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "default_pp_print_close_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "default_pp_print_open_tag"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "pp_make_formatter"
Text:  " "
Name:  "f"
Text:  " "
Name:  "g"
Text:  " "
Name:  "h"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline> "
Comment:  "(* The initial state of the formatter contains a dummy box. *)"
Text:  "<newline> "
Keyword:  "let"
Text:  " "
Name:  "pp_q"
Text:  " "
Operator:  "="
Text:  " "
Name:  "make_queue"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Keyword:  "in"
Text:  "<newline> "
Keyword:  "let"
Text:  " "
Name:  "sys_tok"
Text:  " "
Operator:  "="
Text:  "<newline>   "
Name:  "make_queue_elem"
Text:  " "
Punctuation:  "("
Name:  "size_of_int"
Text:  " "
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Class:  "Pp_begin"
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "0"
Operator:  ","
Text:  " "
Name.Class:  "Pp_hovbox"
Punctuation:  "))"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "in"
Text:  "<newline> "
Name:  "add_queue"
Text:  " "
Name:  "sys_tok"
Text:  " "
Name:  "pp_q"
Punctuation:  ";"
Text:  "<newline> "
Keyword:  "let"
Text:  " "
Name:  "sys_scan_stack"
Text:  " "
Operator:  "="
Text:  "<newline>     "
Punctuation:  "("
Name.Class:  "Scan_elem"
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "1"
Operator:  ","
Text:  " "
Name:  "sys_tok"
Punctuation:  "))"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "scan_stack_bottom"
Text:  " "
Keyword:  "in"
Text:  "<newline> "
Punctuation:  "{"
Name:  "pp_scan_stack"
Text:  " "
Operator:  "="
Text:  " "
Name:  "sys_scan_stack"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_format_stack"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_tbox_stack"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_tag_stack"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_mark_stack"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_margin"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "78"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_min_space_left"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_max_indent"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "78"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_space_left"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "78"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_current_indent"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_is_new_line"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_left_total"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_right_total"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_curr_depth"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_max_boxes"
Text:  " "
Operator:  "="
Text:  " "
Name:  "max_int"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_ellipsis"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\".\""
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_output_function"
Text:  " "
Operator:  "="
Text:  " "
Name:  "f"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_flush_function"
Text:  " "
Operator:  "="
Text:  " "
Name:  "g"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_output_newline"
Text:  " "
Operator:  "="
Text:  " "
Name:  "h"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_output_spaces"
Text:  " "
Operator:  "="
Text:  " "
Name:  "i"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_print_tags"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "false"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_mark_tags"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "false"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_mark_open_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "default_pp_mark_open_tag"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_mark_close_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "default_pp_mark_close_tag"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_print_open_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "default_pp_print_open_tag"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_print_close_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "default_pp_print_close_tag"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "pp_queue"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_q"
Text:  "<newline> "
Punctuation:  "};;"
Text:  "<newline><newline>"
Comment:  "(* Default function to output spaces. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "blank_line"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "make"
Text:  " "
Literal.Number.Integer:  "80"
Text:  " "
Keyword:  "'"
Text:  " "
Keyword:  "'"
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "display_blanks"
Text:  " "
Name:  "state"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "then"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "<="
Text:  " "
Literal.Number.Integer:  "80"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_output_function"
Text:  " "
Name:  "blank_line"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name:  "n"
Text:  " "
Keyword:  "else"
Text:  "<newline>     "
Keyword:  "begin"
Text:  "<newline>      "
Name:  "state"
Operator:  "."
Name:  "pp_output_function"
Text:  " "
Name:  "blank_line"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Literal.Number.Integer:  "80"
Punctuation:  ";"
Text:  "<newline>      "
Name:  "display_blanks"
Text:  " "
Name:  "state"
Text:  " "
Punctuation:  "("
Name:  "n"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "80"
Punctuation:  ")"
Text:  "<newline>     "
Keyword:  "end"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Default function to output new lines. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "display_newline"
Text:  " "
Name:  "state"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Name:  "state"
Operator:  "."
Name:  "pp_output_function"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "\""
Text:  " "
Literal.Number.Integer:  "0"
Text:  "  "
Literal.Number.Integer:  "1"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "make_formatter"
Text:  " "
Name:  "f"
Text:  " "
Name:  "g"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "ff"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_make_formatter"
Text:  " "
Name:  "f"
Text:  " "
Name:  "g"
Text:  " "
Name:  "ignore"
Text:  " "
Name:  "ignore"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Name:  "ff"
Operator:  "."
Name:  "pp_output_newline"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "display_newline"
Text:  " "
Name:  "ff"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "ff"
Operator:  "."
Name:  "pp_output_spaces"
Text:  " "
Operator:  "<-"
Text:  " "
Name:  "display_blanks"
Text:  " "
Name:  "ff"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "ff"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "formatter_of_out_channel"
Text:  " "
Name:  "oc"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "make_formatter"
Text:  " "
Punctuation:  "("
Name:  "output"
Text:  " "
Name:  "oc"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "flush"
Text:  " "
Name:  "oc"
Punctuation:  ");;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "formatter_of_buffer"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "make_formatter"
Text:  " "
Punctuation:  "("
Name.Namespace:  "Buffer"
Punctuation:  "."
Name:  "add_substring"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Name:  "ignore"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "stdbuf"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "Buffer"
Punctuation:  "."
Name:  "create"
Text:  " "
Literal.Number.Integer:  "512"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "str_formatter"
Text:  " "
Operator:  "="
Text:  " "
Name:  "formatter_of_buffer"
Text:  " "
Name:  "stdbuf"
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "std_formatter"
Text:  " "
Operator:  "="
Text:  " "
Name:  "formatter_of_out_channel"
Text:  " "
Name:  "stdout"
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "err_formatter"
Text:  " "
Operator:  "="
Text:  " "
Name:  "formatter_of_out_channel"
Text:  " "
Name:  "stderr"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "flush_str_formatter"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "pp_flush_queue"
Text:  " "
Name:  "str_formatter"
Text:  " "
Name.Builtin.Pseudo:  "false"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "Buffer"
Punctuation:  "."
Name:  "contents"
Text:  " "
Name:  "stdbuf"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Name.Namespace:  "Buffer"
Punctuation:  "."
Name:  "reset"
Text:  " "
Name:  "stdbuf"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "s"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(**************************************************************<newline><newline>  Basic functions on the standard formatter<newline><newline> **************************************************************)"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "open_hbox"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_hbox"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "open_vbox"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_vbox"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "open_hvbox"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_hvbox"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "open_hovbox"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_hovbox"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "open_box"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_box"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "close_box"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_close_box"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "open_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_tag"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "close_tag"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_close_tag"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_as"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_as"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_string"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_string"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_int"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_int"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_float"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_float"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_char"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_char"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_bool"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_bool"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_break"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_break"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_cut"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_cut"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_space"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_space"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "force_newline"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_force_newline"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_flush"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_flush"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_newline"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_newline"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_if_newline"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_if_newline"
Text:  " "
Name:  "std_formatter"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "open_tbox"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_open_tbox"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "close_tbox"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_close_tbox"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_tbreak"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_tbreak"
Text:  " "
Name:  "std_formatter"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_tab"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_set_tab"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "print_tab"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_print_tab"
Text:  " "
Name:  "std_formatter"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_margin"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_set_margin"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "get_margin"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_get_margin"
Text:  " "
Name:  "std_formatter"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_max_indent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_set_max_indent"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "get_max_indent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_get_max_indent"
Text:  " "
Name:  "std_formatter"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_max_boxes"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_set_max_boxes"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "get_max_boxes"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_get_max_boxes"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "over_max_boxes"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_over_max_boxes"
Text:  " "
Name:  "std_formatter"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_ellipsis_text"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_set_ellipsis_text"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "get_ellipsis_text"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pp_get_ellipsis_text"
Text:  " "
Name:  "std_formatter"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_formatter_out_channel"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_set_formatter_out_channel"
Text:  " "
Name:  "std_formatter"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_formatter_output_functions"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_set_formatter_output_functions"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "get_formatter_output_functions"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_get_formatter_output_functions"
Text:  " "
Name:  "std_formatter"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_all_formatter_output_functions"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_set_all_formatter_output_functions"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "get_all_formatter_output_functions"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_get_all_formatter_output_functions"
Text:  " "
Name:  "std_formatter"
Text:  "<newline><newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_formatter_tag_functions"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_set_formatter_tag_functions"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "get_formatter_tag_functions"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_get_formatter_tag_functions"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_print_tags"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_set_print_tags"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "get_print_tags"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_get_print_tags"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_mark_tags"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_set_mark_tags"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "get_mark_tags"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_get_mark_tags"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "set_tags"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Name:  "pp_set_tags"
Text:  " "
Name:  "std_formatter"
Text:  "<newline>"
Punctuation:  ";;"
Text:  "<newline><newline><newline>"
Comment:  "(**************************************************************<newline><newline>  Printf implementation.<newline><newline> **************************************************************)"
Text:  "<newline><newline>"
Comment:  "(* Error messages when processing formats. *)"
Text:  "<newline><newline>"
Comment:  "(* Trailer: giving up at character number ... *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "giving_up"
Text:  " "
Name:  "mess"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Literal.String.Double:  "\"fprintf: \""
Text:  " "
Operator:  "^"
Text:  " "
Name:  "mess"
Text:  " "
Operator:  "^"
Text:  " "
Literal.String.Double:  "\" ``\""
Text:  " "
Operator:  "^"
Text:  " "
Name:  "fmt"
Text:  " "
Operator:  "^"
Text:  " "
Literal.String.Double:  "\"'', \\<newline>   giving up at character number \""
Text:  " "
Operator:  "^"
Text:  " "
Name:  "string_of_int"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "^"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "<"
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "length"
Text:  " "
Name:  "fmt"
Text:  "<newline>   "
Keyword:  "then"
Text:  " "
Literal.String.Double:  "\" (\""
Text:  " "
Operator:  "^"
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "make"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Operator:  "^"
Text:  " "
Literal.String.Double:  "\").\""
Text:  "<newline>   "
Keyword:  "else"
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "make"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Literal.String.Char:  "'.'"
Punctuation:  ");;"
Text:  "<newline><newline>"
Comment:  "(* When an invalid format deserves a special error explanation. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "format_invalid_arg"
Text:  " "
Name:  "mess"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "invalid_arg"
Text:  " "
Punctuation:  "("
Name:  "giving_up"
Text:  " "
Name:  "mess"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Punctuation:  ");;"
Text:  "<newline><newline>"
Comment:  "(* Standard invalid format. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "invalid_format"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "format_invalid_arg"
Text:  " "
Literal.String.Double:  "\"bad format\""
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Cannot find a valid integer into that format. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "invalid_integer"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "invalid_arg"
Text:  " "
Punctuation:  "("
Name:  "giving_up"
Text:  " "
Literal.String.Double:  "\"bad integer specification\""
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Punctuation:  ");;"
Text:  "<newline><newline>"
Comment:  "(* Finding an integer out of a sub-string of the format. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "format_int_of_string"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "sz"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "int_of_string"
Text:  " "
Name:  "s"
Text:  " "
Keyword:  "with"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Failure"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "invalid_integer"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Name:  "size_of_int"
Text:  " "
Name:  "sz"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Getting strings out of buffers. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "get_buffer_out"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  "<newline> "
Keyword:  "let"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "Buffer"
Punctuation:  "."
Name:  "contents"
Text:  " "
Name:  "b"
Text:  " "
Keyword:  "in"
Text:  "<newline> "
Name.Namespace:  "Buffer"
Punctuation:  "."
Name:  "reset"
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  "<newline> "
Name:  "s"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* [ppf] is supposed to be a pretty-printer that outputs in buffer [b]:<newline>   to extract contents of [ppf] as a string we flush [ppf] and get the string<newline>   out of [b]. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "string_out"
Text:  " "
Name:  "b"
Text:  " "
Name:  "ppf"
Text:  " "
Operator:  "="
Text:  "<newline> "
Name:  "pp_flush_queue"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "false"
Punctuation:  ";"
Text:  "<newline> "
Name:  "get_buffer_out"
Text:  " "
Name:  "b"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* Applies [printer] to a formatter that outputs on a fresh buffer,<newline>   then returns the resulting material. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "exstring"
Text:  " "
Name:  "printer"
Text:  " "
Name:  "arg"
Text:  " "
Operator:  "="
Text:  "<newline> "
Keyword:  "let"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "Buffer"
Punctuation:  "."
Name:  "create"
Text:  " "
Literal.Number.Integer:  "512"
Text:  " "
Keyword:  "in"
Text:  "<newline> "
Keyword:  "let"
Text:  " "
Name:  "ppf"
Text:  " "
Operator:  "="
Text:  " "
Name:  "formatter_of_buffer"
Text:  " "
Name:  "b"
Text:  " "
Keyword:  "in"
Text:  "<newline> "
Name:  "printer"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "arg"
Punctuation:  ";"
Text:  "<newline> "
Name:  "string_out"
Text:  " "
Name:  "b"
Text:  " "
Name:  "ppf"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* To turn out a character accumulator into the proper string result. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "implode_rev"
Text:  " "
Name:  "s0"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "function"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "s0"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name:  "l"
Text:  " "
Operator:  "->"
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "concat"
Text:  " "
Literal.String.Double:  "\"\""
Text:  " "
Punctuation:  "("
Name.Namespace:  "List"
Punctuation:  "."
Name:  "rev"
Text:  " "
Punctuation:  "("
Name:  "s0"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "l"
Punctuation:  "));;"
Text:  "<newline><newline>"
Keyword:  "external"
Text:  " "
Name:  "format_to_string"
Text:  " "
Operator:  ":"
Text:  " "
Punctuation:  "("
Keyword:  "'"
Name:  "a"
Operator:  ","
Text:  " "
Keyword:  "'"
Name:  "b"
Operator:  ","
Text:  " "
Keyword:  "'"
Name:  "c"
Operator:  ","
Text:  " "
Keyword:  "'"
Name:  "d"
Punctuation:  ")"
Text:  " "
Name:  "format4"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"%identity\""
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(* [fprintf_out] is the printf-like function generator: given the<newline>   - [str] flag that tells if we are printing into a string,<newline>   - the [out] function that has to be called at the end of formatting,<newline>   it generates a [fprintf] function that takes as arguments a [ppf]<newline>   formatter and a printing format to print the rest of arguments<newline>   according to the format.<newline>   Regular [fprintf]-like functions of this module are obtained via partial<newline>   applications of [fprintf_out]. *)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "mkprintf"
Text:  " "
Name:  "str"
Text:  " "
Name:  "get_out"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "kprintf"
Text:  " "
Name:  "k"
Text:  " "
Name:  "fmt"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "fmt"
Text:  " "
Operator:  "="
Text:  " "
Name:  "format_to_string"
Text:  " "
Name:  "fmt"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "len"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "length"
Text:  " "
Name:  "fmt"
Text:  " "
Keyword:  "in"
Text:  "<newline><newline>    "
Keyword:  "let"
Text:  " "
Name:  "kpr"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "v"
Text:  " "
Operator:  "="
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "ppf"
Text:  " "
Operator:  "="
Text:  " "
Name:  "get_out"
Text:  " "
Name:  "fmt"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "print_as"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ref"
Text:  " "
Name.Class:  "None"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "pp_print_as_char"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  "<newline>          "
Keyword:  "match"
Text:  " "
Operator:  "!"
Name:  "print_as"
Text:  " "
Keyword:  "with"
Text:  "<newline>          "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "pp_print_char"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "c"
Text:  "<newline>          "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "->"
Text:  "<newline>             "
Name:  "pp_print_as_size"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "size"
Text:  " "
Punctuation:  "("
Name.Namespace:  "String"
Punctuation:  "."
Name:  "make"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name:  "c"
Punctuation:  ");"
Text:  "<newline>             "
Name:  "print_as"
Text:  " "
Operator:  ":="
Text:  " "
Name.Class:  "None"
Text:  "<newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "pp_print_as_string"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  "<newline>          "
Keyword:  "match"
Text:  " "
Operator:  "!"
Name:  "print_as"
Text:  " "
Keyword:  "with"
Text:  "<newline>          "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "pp_print_string"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "s"
Text:  "<newline>          "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "->"
Text:  "<newline>             "
Name:  "pp_print_as_size"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "size"
Text:  " "
Name:  "s"
Punctuation:  ";"
Text:  "<newline>             "
Name:  "print_as"
Text:  " "
Operator:  ":="
Text:  " "
Name.Class:  "None"
Text:  " "
Keyword:  "in"
Text:  "<newline><newline>      "
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Namespace:  "Obj"
Punctuation:  "."
Name:  "magic"
Text:  " "
Punctuation:  "("
Name:  "k"
Text:  " "
Name:  "ppf"
Punctuation:  ")"
Text:  " "
Keyword:  "else"
Text:  "<newline>        "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  "%"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>            "
Name.Namespace:  "Printf"
Punctuation:  "."
Name:  "scan_format"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "v"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Name:  "cont_s"
Text:  " "
Name:  "cont_a"
Text:  " "
Name:  "cont_t"
Text:  " "
Name:  "cont_f"
Text:  " "
Name:  "cont_m"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  "@"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>            "
Keyword:  "let"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "succ"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  "<newline>            "
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "invalid_format"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "else"
Text:  "<newline>            "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Keyword:  "'"
Punctuation:  "["
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Name:  "do_pp_open_box"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Keyword:  "'"
Punctuation:  "]"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Name:  "pp_close_box"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>               "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Keyword:  "'"
Punctuation:  "{"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Name:  "do_pp_open_tag"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Keyword:  "'"
Punctuation:  "}"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Name:  "pp_close_tag"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>               "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Keyword:  "'"
Text:  " "
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Name:  "pp_print_space"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>               "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  ","
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Name:  "pp_print_cut"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>               "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  "?"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Name:  "pp_print_flush"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>               "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Literal.String.Char:  "'.'"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Name:  "pp_print_newline"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>               "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Literal.String.Char:  "'<newline>'"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Name:  "pp_force_newline"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>               "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Keyword:  "'"
Punctuation:  ";"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Name:  "do_pp_break"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  "<"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Keyword:  "let"
Text:  " "
Name:  "got_size"
Text:  " "
Name:  "size"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>                 "
Name:  "print_as"
Text:  " "
Operator:  ":="
Text:  " "
Name.Class:  "Some"
Text:  " "
Name:  "size"
Punctuation:  ";"
Text:  "<newline>                 "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "skip_gt"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  "<newline>               "
Name:  "get_int"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Name:  "got_size"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  "@"
Keyword:  "'"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "->"
Text:  "<newline>               "
Name:  "pp_print_as_char"
Text:  " "
Name:  "c"
Punctuation:  ";"
Text:  "<newline>               "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>            "
Operator:  "|"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "invalid_format"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  "<newline>            "
Keyword:  "end"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "->"
Text:  "<newline>           "
Name:  "pp_print_as_char"
Text:  " "
Name:  "c"
Punctuation:  ";"
Text:  "<newline>           "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline><newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "cont_s"
Text:  " "
Name:  "n"
Text:  " "
Name:  "s"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>        "
Name:  "pp_print_as_string"
Text:  " "
Name:  "s"
Punctuation:  ";"
Text:  " "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  "<newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "cont_a"
Text:  " "
Name:  "n"
Text:  " "
Name:  "printer"
Text:  " "
Name:  "arg"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name:  "str"
Text:  " "
Keyword:  "then"
Text:  "<newline>          "
Name:  "pp_print_as_string"
Text:  " "
Punctuation:  "(("
Name.Namespace:  "Obj"
Punctuation:  "."
Name:  "magic"
Text:  " "
Name:  "printer"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "unit"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ")"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Name:  "arg"
Punctuation:  ")"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>          "
Name:  "printer"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "arg"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  "<newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "cont_t"
Text:  " "
Name:  "n"
Text:  " "
Name:  "printer"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name:  "str"
Text:  " "
Keyword:  "then"
Text:  "<newline>          "
Name:  "pp_print_as_string"
Text:  " "
Punctuation:  "(("
Name.Namespace:  "Obj"
Punctuation:  "."
Name:  "magic"
Text:  " "
Name:  "printer"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "unit"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ")"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ")"
Text:  "<newline>        "
Keyword:  "else"
Text:  "<newline>          "
Name:  "printer"
Text:  " "
Name:  "ppf"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  "<newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "cont_f"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>        "
Name:  "pp_print_flush"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  " "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  "<newline><newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "cont_m"
Text:  " "
Name:  "n"
Text:  " "
Name:  "sfmt"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>        "
Name:  "kprintf"
Text:  " "
Punctuation:  "("
Name.Namespace:  "Obj"
Punctuation:  "."
Name:  "magic"
Text:  " "
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Punctuation:  "))"
Text:  " "
Name:  "sfmt"
Text:  "<newline><newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "get_int"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  "<newline>       "
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "invalid_integer"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "else"
Text:  "<newline>       "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Keyword:  "'"
Text:  " "
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "get_int"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Name:  "c"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  "%"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Name:  "cont_s"
Text:  " "
Name:  "n"
Text:  " "
Name:  "s"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "c"
Text:  " "
Punctuation:  "("
Name:  "format_int_of_string"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Name:  "s"
Punctuation:  ")"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  "<newline>          "
Operator.Word:  "and"
Text:  " "
Name:  "cont_a"
Text:  " "
Name:  "n"
Text:  " "
Name:  "printer"
Text:  " "
Name:  "arg"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "invalid_integer"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  "<newline>          "
Operator.Word:  "and"
Text:  " "
Name:  "cont_t"
Text:  " "
Name:  "n"
Text:  " "
Name:  "printer"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "invalid_integer"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  "<newline>          "
Operator.Word:  "and"
Text:  " "
Name:  "cont_f"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "invalid_integer"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  "<newline>          "
Operator.Word:  "and"
Text:  " "
Name:  "cont_m"
Text:  " "
Name:  "n"
Text:  " "
Name:  "sfmt"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "invalid_integer"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  "<newline>          "
Name.Namespace:  "Printf"
Punctuation:  "."
Name:  "scan_format"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "v"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Name:  "cont_s"
Text:  " "
Name:  "cont_a"
Text:  " "
Name:  "cont_t"
Text:  " "
Name:  "cont_f"
Text:  " "
Name:  "cont_m"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "get"
Text:  " "
Name:  "j"
Text:  " "
Operator:  "="
Text:  "<newline>           "
Keyword:  "if"
Text:  " "
Name:  "j"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "invalid_integer"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "j"
Text:  " "
Keyword:  "else"
Text:  "<newline>           "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "j"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>           "
Operator:  "|"
Text:  " "
Keyword:  "'"
Literal.Number.Integer:  "0"
Keyword:  "'"
Text:  " "
Operator:  ".."
Text:  " "
Keyword:  "'"
Literal.Number.Integer:  "9"
Keyword:  "'"
Text:  " "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  "-"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "get"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "j"
Punctuation:  ")"
Text:  "<newline>           "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  "<newline>             "
Keyword:  "let"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "="
Text:  "<newline>             "
Keyword:  "if"
Text:  " "
Name:  "j"
Text:  " "
Operator:  "="
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "size_of_int"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "else"
Text:  "<newline>                "
Name:  "format_int_of_string"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "("
Name.Namespace:  "String"
Punctuation:  "."
Name:  "sub"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "("
Name:  "j"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "i"
Punctuation:  "))"
Text:  " "
Keyword:  "in"
Text:  "<newline>             "
Name:  "c"
Text:  " "
Name:  "size"
Text:  " "
Name:  "n"
Text:  " "
Name:  "j"
Text:  " "
Keyword:  "in"
Text:  "<newline>          "
Name:  "get"
Text:  " "
Name:  "i"
Text:  "<newline><newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "skip_gt"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>       "
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "invalid_format"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "else"
Text:  "<newline>       "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Keyword:  "'"
Text:  " "
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "skip_gt"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  ">"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "succ"
Text:  " "
Name:  "i"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "invalid_format"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  "<newline><newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "get_box_kind"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>       "
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Class:  "Pp_box"
Operator:  ","
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "else"
Text:  "<newline>       "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Keyword:  "'"
Name:  "h'"
Text:  " "
Operator:  "->"
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "succ"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  "<newline>          "
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Class:  "Pp_hbox"
Operator:  ","
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "else"
Text:  "<newline>          "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>          "
Operator:  "|"
Text:  " "
Keyword:  "'"
Name:  "o'"
Text:  " "
Operator:  "->"
Text:  "<newline>             "
Keyword:  "let"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "succ"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  "<newline>             "
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Name:  "format_invalid_arg"
Text:  " "
Literal.String.Double:  "\"bad box format\""
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "else"
Text:  "<newline>             "
Keyword:  "begin"
Text:  " "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>             "
Operator:  "|"
Text:  " "
Keyword:  "'"
Name:  "v'"
Text:  " "
Operator:  "->"
Text:  " "
Name.Class:  "Pp_hovbox"
Operator:  ","
Text:  " "
Name:  "succ"
Text:  " "
Name:  "i"
Text:  "<newline>             "
Operator:  "|"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "->"
Text:  "<newline>                "
Name:  "format_invalid_arg"
Text:  "<newline>                  "
Punctuation:  "("
Literal.String.Double:  "\"bad box name ho\""
Text:  " "
Operator:  "^"
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "make"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name:  "c"
Punctuation:  ")"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "end"
Text:  "<newline>          "
Operator:  "|"
Text:  " "
Keyword:  "'"
Name:  "v'"
Text:  " "
Operator:  "->"
Text:  " "
Name.Class:  "Pp_hvbox"
Operator:  ","
Text:  " "
Name:  "succ"
Text:  " "
Name:  "i"
Text:  "<newline>          "
Operator:  "|"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "->"
Text:  " "
Name.Class:  "Pp_hbox"
Operator:  ","
Text:  " "
Name:  "i"
Text:  "<newline>          "
Keyword:  "end"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Keyword:  "'"
Name:  "b'"
Text:  " "
Operator:  "->"
Text:  " "
Name.Class:  "Pp_box"
Operator:  ","
Text:  " "
Name:  "succ"
Text:  " "
Name:  "i"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Keyword:  "'"
Name:  "v'"
Text:  " "
Operator:  "->"
Text:  " "
Name.Class:  "Pp_vbox"
Operator:  ","
Text:  " "
Name:  "succ"
Text:  " "
Name:  "i"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name.Class:  "Pp_box"
Operator:  ","
Text:  " "
Name:  "i"
Text:  "<newline><newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "get_tag_name"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  "<newline>       "
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "get"
Text:  " "
Name:  "accu"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Name:  "j"
Text:  " "
Operator:  "="
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name:  "j"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  "<newline>        "
Keyword:  "then"
Text:  " "
Name:  "c"
Text:  " "
Punctuation:  "("
Name:  "implode_rev"
Text:  " "
Punctuation:  "("
Name.Namespace:  "String"
Punctuation:  "."
Name:  "sub"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "("
Name:  "j"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "i"
Punctuation:  "))"
Text:  " "
Name:  "accu"
Punctuation:  ")"
Text:  " "
Name:  "n"
Text:  " "
Name:  "j"
Text:  " "
Keyword:  "else"
Text:  "<newline>        "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "j"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  ">"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "c"
Text:  " "
Punctuation:  "("
Name:  "implode_rev"
Text:  " "
Punctuation:  "("
Name.Namespace:  "String"
Punctuation:  "."
Name:  "sub"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "("
Name:  "j"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "i"
Punctuation:  "))"
Text:  " "
Name:  "accu"
Punctuation:  ")"
Text:  " "
Name:  "n"
Text:  " "
Name:  "j"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  "%"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Name:  "s0"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "sub"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "("
Name:  "j"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Name:  "cont_s"
Text:  " "
Name:  "n"
Text:  " "
Name:  "s"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "get"
Text:  " "
Punctuation:  "("
Name:  "s"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "s0"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "accu"
Punctuation:  ")"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Name:  "i"
Text:  "<newline>          "
Operator.Word:  "and"
Text:  " "
Name:  "cont_a"
Text:  " "
Name:  "n"
Text:  " "
Name:  "printer"
Text:  " "
Name:  "arg"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>            "
Keyword:  "let"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  "<newline>              "
Keyword:  "if"
Text:  " "
Name:  "str"
Text:  "<newline>              "
Keyword:  "then"
Text:  " "
Punctuation:  "("
Name.Namespace:  "Obj"
Punctuation:  "."
Name:  "magic"
Text:  " "
Name:  "printer"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "unit"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ")"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Name:  "arg"
Text:  "<newline>              "
Keyword:  "else"
Text:  " "
Name:  "exstring"
Text:  " "
Name:  "printer"
Text:  " "
Name:  "arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>            "
Name:  "get"
Text:  " "
Punctuation:  "("
Name:  "s"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "s0"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "accu"
Punctuation:  ")"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Name:  "i"
Text:  "<newline>          "
Operator.Word:  "and"
Text:  " "
Name:  "cont_t"
Text:  " "
Name:  "n"
Text:  " "
Name:  "printer"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>            "
Keyword:  "let"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "="
Text:  "<newline>              "
Keyword:  "if"
Text:  " "
Name:  "str"
Text:  "<newline>              "
Keyword:  "then"
Text:  " "
Punctuation:  "("
Name.Namespace:  "Obj"
Punctuation:  "."
Name:  "magic"
Text:  " "
Name:  "printer"
Text:  " "
Operator:  ":"
Text:  " "
Keyword.Type:  "unit"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ")"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  "<newline>              "
Keyword:  "else"
Text:  " "
Name:  "exstring"
Text:  " "
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "printer"
Text:  " "
Name:  "ppf"
Punctuation:  ")"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Keyword:  "in"
Text:  "<newline>            "
Name:  "get"
Text:  " "
Punctuation:  "("
Name:  "s"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "s0"
Text:  " "
Operator:  "::"
Text:  " "
Name:  "accu"
Punctuation:  ")"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Name:  "i"
Text:  "<newline>          "
Operator.Word:  "and"
Text:  " "
Name:  "cont_f"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>            "
Name:  "format_invalid_arg"
Text:  " "
Literal.String.Double:  "\"bad tag name specification\""
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  "<newline>          "
Operator.Word:  "and"
Text:  " "
Name:  "cont_m"
Text:  " "
Name:  "n"
Text:  " "
Name:  "sfmt"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>            "
Name:  "format_invalid_arg"
Text:  " "
Literal.String.Double:  "\"bad tag name specification\""
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  "<newline>          "
Name.Namespace:  "Printf"
Punctuation:  "."
Name:  "scan_format"
Text:  " "
Name:  "fmt"
Text:  " "
Name:  "v"
Text:  " "
Name:  "n"
Text:  " "
Name:  "j"
Text:  " "
Name:  "cont_s"
Text:  " "
Name:  "cont_a"
Text:  " "
Name:  "cont_t"
Text:  " "
Name:  "cont_f"
Text:  " "
Name:  "cont_m"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "get"
Text:  " "
Name:  "accu"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "j"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  "<newline>       "
Name:  "get"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Name:  "i"
Text:  "<newline><newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "do_pp_break"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>       "
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Keyword:  "begin"
Text:  " "
Name:  "pp_print_space"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  " "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "end"
Text:  " "
Keyword:  "else"
Text:  "<newline>       "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  "<"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "got_nspaces"
Text:  " "
Name:  "nspaces"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>            "
Name:  "get_int"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "("
Name:  "got_offset"
Text:  " "
Name:  "nspaces"
Punctuation:  ")"
Text:  "<newline>          "
Operator.Word:  "and"
Text:  " "
Name:  "got_offset"
Text:  " "
Name:  "nspaces"
Text:  " "
Name:  "offset"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>            "
Name:  "pp_print_break"
Text:  " "
Name:  "ppf"
Text:  " "
Punctuation:  "("
Name:  "int_of_size"
Text:  " "
Name:  "nspaces"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name:  "int_of_size"
Text:  " "
Name:  "offset"
Punctuation:  ");"
Text:  "<newline>            "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "skip_gt"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  "<newline>          "
Name:  "get_int"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Name:  "got_nspaces"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "pp_print_space"
Text:  " "
Name:  "ppf"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  " "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  "<newline><newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "do_pp_open_box"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>       "
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Keyword:  "begin"
Text:  " "
Name:  "pp_open_box_gen"
Text:  " "
Name:  "ppf"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Class:  "Pp_box"
Punctuation:  ";"
Text:  " "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "end"
Text:  " "
Keyword:  "else"
Text:  "<newline>       "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  "<"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Name:  "kind"
Operator:  ","
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  " "
Name:  "get_box_kind"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Name:  "got_size"
Text:  " "
Name:  "size"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>            "
Name:  "pp_open_box_gen"
Text:  " "
Name:  "ppf"
Text:  " "
Punctuation:  "("
Name:  "int_of_size"
Text:  " "
Name:  "size"
Punctuation:  ")"
Text:  " "
Name:  "kind"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "skip_gt"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  "<newline>          "
Name:  "get_int"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Name:  "got_size"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "pp_open_box_gen"
Text:  " "
Name:  "ppf"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Class:  "Pp_box"
Punctuation:  ";"
Text:  " "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  "<newline><newline>      "
Operator.Word:  "and"
Text:  " "
Name:  "do_pp_open_tag"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>       "
Keyword:  "if"
Text:  " "
Name:  "i"
Text:  " "
Operator:  ">="
Text:  " "
Name:  "len"
Text:  " "
Keyword:  "then"
Text:  " "
Keyword:  "begin"
Text:  " "
Name:  "pp_open_tag"
Text:  " "
Name:  "ppf"
Text:  " "
Literal.String.Double:  "\"\""
Punctuation:  ";"
Text:  " "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "end"
Text:  " "
Keyword:  "else"
Text:  "<newline>       "
Keyword:  "match"
Text:  " "
Name:  "fmt"
Operator:  "."
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "with"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Keyword:  "'"
Operator:  "<"
Keyword:  "'"
Text:  " "
Operator:  "->"
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Name:  "got_name"
Text:  " "
Name:  "tag_name"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Operator:  "="
Text:  "<newline>            "
Name:  "pp_open_tag"
Text:  " "
Name:  "ppf"
Text:  " "
Name:  "tag_name"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "skip_gt"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  "<newline>          "
Name:  "get_tag_name"
Text:  " "
Name:  "n"
Text:  " "
Punctuation:  "("
Name:  "succ"
Text:  " "
Name:  "i"
Punctuation:  ")"
Text:  " "
Name:  "got_name"
Text:  "<newline>       "
Operator:  "|"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "pp_open_tag"
Text:  " "
Name:  "ppf"
Text:  " "
Literal.String.Double:  "\"\""
Punctuation:  ";"
Text:  " "
Name:  "doprn"
Text:  " "
Name:  "n"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  "<newline><newline>      "
Name:  "doprn"
Text:  " "
Punctuation:  "("
Name.Namespace:  "Printf"
Punctuation:  "."
Name:  "index_of_int"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "in"
Text:  "<newline><newline>   "
Name.Namespace:  "Printf"
Punctuation:  "."
Name:  "kapr"
Text:  " "
Name:  "kpr"
Text:  " "
Name:  "fmt"
Text:  " "
Keyword:  "in"
Text:  "<newline><newline>  "
Name:  "kprintf"
Punctuation:  ";;"
Text:  "<newline><newline>"
Comment:  "(**************************************************************<newline><newline>  Defining [fprintf] and various flavors of [fprintf].<newline><newline> **************************************************************)"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "kfprintf"
Text:  " "
Name:  "k"
Text:  " "
Name:  "ppf"
Text:  " "
Operator:  "="
Text:  " "
Name:  "mkprintf"
Text:  " "
Name.Builtin.Pseudo:  "false"
Text:  " "
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "ppf"
Punctuation:  ")"
Text:  " "
Name:  "k"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "fprintf"
Text:  " "
Name:  "ppf"
Text:  " "
Operator:  "="
Text:  " "
Name:  "kfprintf"
Text:  " "
Name:  "ignore"
Text:  " "
Name:  "ppf"
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "printf"
Text:  " "
Name:  "fmt"
Text:  " "
Operator:  "="
Text:  " "
Name:  "fprintf"
Text:  " "
Name:  "std_formatter"
Text:  " "
Name:  "fmt"
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "eprintf"
Text:  " "
Name:  "fmt"
Text:  " "
Operator:  "="
Text:  " "
Name:  "fprintf"
Text:  " "
Name:  "err_formatter"
Text:  " "
Name:  "fmt"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "kbprintf"
Text:  " "
Name:  "k"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "mkprintf"
Text:  " "
Name.Builtin.Pseudo:  "false"
Text:  " "
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "formatter_of_buffer"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Name:  "k"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "bprintf"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "kbprintf"
Text:  " "
Name:  "ignore"
Text:  " "
Name:  "b"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "ksprintf"
Text:  " "
Name:  "k"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "Buffer"
Punctuation:  "."
Name:  "create"
Text:  " "
Literal.Number.Integer:  "512"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "k"
Text:  " "
Name:  "ppf"
Text:  " "
Operator:  "="
Text:  " "
Name:  "k"
Text:  " "
Punctuation:  "("
Name:  "string_out"
Text:  " "
Name:  "b"
Text:  " "
Name:  "ppf"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Name:  "mkprintf"
Text:  " "
Name.Builtin.Pseudo:  "true"
Text:  " "
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "formatter_of_buffer"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Name:  "k"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "kprintf"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ksprintf"
Punctuation:  ";;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "sprintf"
Text:  " "
Name:  "fmt"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ksprintf"
Text:  " "
Punctuation:  "("
Keyword:  "fun"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "->"
Text:  " "
Name:  "s"
Punctuation:  ")"
Text:  " "
Name:  "fmt"
Punctuation:  ";;"
Text:  "<newline><newline>"
Name:  "at_exit"
Text:  " "
Name:  "print_flush"
Punctuation:  ";;"
Text:  "<newline>"
