Comment.Single:  "// Long sample Pascal Program referenced from<newline>// http://sandbox.mc.edu/~bennet/cs404/doc/sched.pas<newline>"
Text:  "<newline>"
Comment.Multiline:  "(**************************************************************************<newline> *<newline> * This program maintains a small work schedule covering the hours 8-6.<newline> * It processes the following commands:<newline> *<newline> * sched employee startday endday starthour endhour<newline> *        The  employee is added to the schedule in the range of days and<newline> *        hours  indicated.<newline> *<newline> * clear startday endday starthour endhour<newline> *        The  part  of the schedule indicated is cleared  any assignment<newline> *        of an employee during those hours is removed.<newline> *<newline> * unsched employee<newline> *        Remove  the  employee  from all places in the schedule to which<newline> *        s/he has been assigned.<newline> *<newline> * print<newline> *        Print  the  schedule. Show a table with days along the top, and<newline> *        hours  down  the  side,  giving  the scheduled employee in each<newline> *        position.<newline> *<newline> * total employee<newline> *        Print  the  total hours for which the employee is scheduled. If<newline> *        the employee does not appear in the table, the total is 0.<newline> *<newline> * quit<newline> *        Terminate the program.<newline> **************************************************************************)"
Text:  "<newline><newline>"
Keyword:  "PROGRAM"
Text:  " "
Name:  "a1"
Text:  " "
Punctuation:  "("
Name:  "input"
Punctuation:  ","
Name:  "output"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "USES"
Text:  " "
Name:  "dayio"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "CONST"
Text:  "<newline>        "
Comment.Multiline:  "{ Open positions in the schedule. }"
Text:  "<newline>        "
Name:  "NotScheduled"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "'        '"
Punctuation:  ";"
Text:  "<newline><newline>        "
Comment.Multiline:  "{ Max length of an employee name. }"
Text:  "<newline>        "
Name:  "EmployeeMaxLen"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "8"
Punctuation:  ";"
Text:  "<newline><newline>        "
Comment.Multiline:  "{ Hours in a day. }"
Text:  "<newline>        "
Name:  "FirstHour"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "8"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "LastHour"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "17"
Punctuation:  ";"
Text:  "          "
Comment.Multiline:  "{ 5:00 PM in 24-hour time }"
Text:  "<newline>        "
Name:  "PastLastHour"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "18"
Punctuation:  ";"
Text:  "      "
Comment.Multiline:  "{ One past, for while loops. }"
Text:  "<newline><newline>        "
Comment.Multiline:  "{ How much room to allow for each day in the table. }"
Text:  "<newline>        "
Name:  "TableDayWidth"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "9"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "TYPE"
Text:  "<newline>        "
Comment.Multiline:  "{ The employee name type. }"
Text:  "<newline>        "
Name:  "EmployeeType"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "string"
Punctuation:  "["
Name:  "EmployeeMaxLen"
Punctuation:  "];"
Text:  "<newline><newline>        "
Comment.Multiline:  "{ The type of the schedule ARRAY. }"
Text:  "<newline>        "
Comment.Multiline:  "{ HourType = FirstHour..LastHour; }"
Text:  "<newline>        "
Name:  "HourType"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "8..17"
Punctuation:  ";"
Text:  "<newline>        "
Name:  "ScheduleType"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "ARRAY"
Text:  " "
Punctuation:  "["
Name:  "HourType"
Punctuation:  ","
Text:  " "
Name:  "DayType"
Punctuation:  "]"
Text:  " "
Keyword:  "OF"
Text:  " "
Name:  "EmployeeType"
Punctuation:  ";"
Text:  "<newline>        "
Comment.Multiline:  "{ HourScanType = FirstHour..PastLastHour; }"
Text:  "<newline>        "
Name:  "HourScanType"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "8..18"
Punctuation:  ";"
Text:  "<newline><newline>    "
Comment.Multiline:  "(***********************************************************************<newline>     * Procedure to read the next non-blank.  It skips leading blanks, then<newline>     * reads the string up to the first blank or eoln.<newline>     ***********************************************************************)"
Text:  "<newline>    "
Keyword:  "PROCEDURE"
Text:  " "
Name:  "ReadString"
Punctuation:  "("
Keyword:  "VAR"
Text:  " "
Name:  "Str"
Punctuation:  ":"
Text:  " "
Keyword:  "string"
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "VAR"
Text:  "<newline>            "
Name:  "Ch"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "char"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "BEGIN"
Text:  "<newline>            "
Name:  "Ch"
Text:  " "
Punctuation:  ":="
Text:  " "
Literal.String:  "' '"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "WHILE"
Text:  " "
Punctuation:  "("
Name:  "Ch"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "' '"
Punctuation:  ")"
Text:  " "
Keyword:  "AND"
Text:  " "
Keyword:  "NOT"
Text:  " "
Name:  "eoln"
Text:  " "
Keyword:  "DO"
Text:  "<newline>                "
Keyword:  "read"
Punctuation:  "("
Name:  "Ch"
Punctuation:  ");"
Text:  "<newline><newline>            "
Keyword:  "IF"
Text:  " "
Name:  "Ch"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "' '"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                "
Comment.Multiline:  "{ There is no command on this line. }"
Text:  "<newline>                "
Name:  "Str"
Text:  " "
Punctuation:  ":="
Text:  " "
Literal.String:  "''"
Text:  "<newline>            "
Keyword:  "ELSE"
Text:  "<newline>                "
Keyword:  "BEGIN"
Text:  "<newline>                    "
Comment.Multiline:  "{ Read the beast. }"
Text:  "<newline>                    "
Name:  "Str"
Text:  " "
Punctuation:  ":="
Text:  " "
Literal.String:  "''"
Punctuation:  ";"
Text:  "<newline>                    "
Keyword:  "WHILE"
Text:  " "
Punctuation:  "("
Name:  "Ch"
Text:  " "
Punctuation:  "<>"
Text:  " "
Literal.String:  "' '"
Punctuation:  ")"
Text:  " "
Keyword:  "AND"
Text:  " "
Keyword:  "NOT"
Text:  " "
Name:  "eoln"
Text:  " "
Keyword:  "DO"
Text:  "<newline>                        "
Keyword:  "BEGIN"
Text:  "<newline>                            "
Name:  "Str"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Str"
Text:  " "
Punctuation:  "+"
Text:  " "
Name:  "Ch"
Punctuation:  ";"
Text:  "<newline>                            "
Keyword:  "read"
Punctuation:  "("
Name:  "Ch"
Punctuation:  ")"
Text:  "<newline>                        "
Keyword:  "END"
Punctuation:  ";"
Text:  "<newline><newline>                    "
Keyword:  "IF"
Text:  " "
Name:  "Ch"
Text:  " "
Punctuation:  "<>"
Text:  " "
Literal.String:  "' '"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                        "
Comment.Multiline:  "{ Command ended at eoln. }"
Text:  "<newline>                        "
Name:  "Str"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Str"
Text:  " "
Punctuation:  "+"
Text:  " "
Name:  "Ch"
Text:  "<newline>                "
Keyword:  "END"
Text:  "<newline>        "
Keyword:  "END"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "{ ReadString }"
Text:  "<newline><newline>    "
Comment.Multiline:  "(***********************************************************************<newline>     * Procedure to read the arguments held in common by the sched<newline>     * clear commands.  Returns them through the arguments.  If there<newline>     * is some error, that is reported through the argument error.<newline>     *  Precondition: Following the read pointer, the input contains<newline>     *    two days of the week, then two integers.  If all days are present and<newline>     *    correct, the integers must be present and correct.<newline>     *  Postcondition: If both strings are recognized day names,<newline>     *    they are read, and the integers are read as well, and their values<newline>     *    are loaded into StartDay, EndDay, StartHour, and EndHour, and Error<newline>     *    is set to false.  The hours are mapped to 24-hour clock time under<newline>     *    the rule that hours less than 6 are PM, and others are AM.  If a day<newline>     *    is missing or not recognized, the rest of the input line is<newline>     *    discarded, and Error is set to true.  If there is extra information<newline>     *    on the line, it is discared.  The read pointer is left at the start<newline>     *    of the following line.<newline>     ***********************************************************************)"
Text:  "<newline>    "
Keyword:  "PROCEDURE"
Text:  " "
Name:  "ReadSchedClrArgs"
Punctuation:  "("
Text:  "<newline>            "
Keyword:  "VAR"
Text:  " "
Name:  "StartDay"
Punctuation:  ","
Text:  " "
Name:  "EndDay"
Punctuation:  ":"
Text:  " "
Name:  "DayType"
Punctuation:  ";"
Text:  "      "
Comment.Multiline:  "{ Input days. }"
Text:  "<newline>            "
Keyword:  "VAR"
Text:  " "
Name:  "StartHour"
Punctuation:  ","
Text:  " "
Name:  "EndHour"
Punctuation:  ":"
Text:  " "
Name:  "HourType"
Punctuation:  ";"
Text:  "   "
Comment.Multiline:  "{ Input hour range. }"
Text:  "<newline>            "
Keyword:  "VAR"
Text:  " "
Name:  "Error"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "boolean"
Punctuation:  ");"
Text:  "                "
Comment.Multiline:  "{ Input error indicator.}"
Text:  "<newline>        "
Keyword:  "VAR"
Text:  "<newline>            "
Name:  "InputHour"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "integer"
Punctuation:  ";"
Text:  "                 "
Comment.Multiline:  "{ Input hour value. }"
Text:  "<newline><newline>        "
Comment.Multiline:  "{ Map time to 24-hours based on the AM/PM rules. }"
Text:  "<newline>        "
Keyword:  "FUNCTION"
Text:  " "
Name:  "MapTo24"
Punctuation:  "("
Name:  "Hour"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "integer"
Punctuation:  "):"
Text:  " "
Name:  "HourType"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "CONST"
Text:  "<newline>                "
Comment.Multiline:  "{ AM/PM time cut-off. }"
Text:  "<newline>                "
Name:  "LastPM"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "5"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "BEGIN"
Text:  "<newline>                "
Keyword:  "IF"
Text:  " "
Name:  "Hour"
Text:  " "
Punctuation:  "<="
Text:  " "
Name:  "LastPM"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                    "
Name:  "MapTo24"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Hour"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number:  "12"
Text:  "<newline>                "
Keyword:  "ELSE"
Text:  "<newline>                    "
Name:  "MapTo24"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Hour"
Text:  "<newline>            "
Keyword:  "END"
Punctuation:  ";"
Text:  "<newline><newline>        "
Keyword:  "BEGIN"
Text:  " "
Comment.Multiline:  "{ ReadSchedClrArgs }"
Text:  "<newline>            "
Comment.Multiline:  "{ Read the days. }"
Text:  "<newline>            "
Name:  "ReadDay"
Punctuation:  "("
Name:  "input"
Punctuation:  ","
Text:  " "
Name:  "StartDay"
Punctuation:  ");"
Text:  "<newline>            "
Name:  "ReadDay"
Punctuation:  "("
Name:  "input"
Punctuation:  ","
Text:  " "
Name:  "EndDay"
Punctuation:  ");"
Text:  "<newline><newline>            "
Comment.Multiline:  "{ See if they both worked. }"
Text:  "<newline>            "
Keyword:  "IF"
Text:  " "
Punctuation:  "("
Name:  "StartDay"
Text:  " "
Punctuation:  "<>"
Text:  " "
Name:  "BadDay"
Punctuation:  ")"
Text:  " "
Keyword:  "AND"
Text:  " "
Punctuation:  "("
Name:  "EndDay"
Text:  " "
Punctuation:  "<>"
Text:  " "
Name:  "BadDay"
Punctuation:  ")"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                "
Keyword:  "BEGIN"
Text:  "<newline>                    "
Comment.Multiline:  "{ It worked.  Read the hours. }"
Text:  "<newline>                    "
Keyword:  "read"
Punctuation:  "("
Name:  "InputHour"
Punctuation:  ");"
Text:  "<newline>                    "
Name:  "StartHour"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "MapTo24"
Punctuation:  "("
Name:  "InputHour"
Punctuation:  ");"
Text:  "<newline>                    "
Keyword:  "read"
Punctuation:  "("
Name:  "InputHour"
Punctuation:  ");"
Text:  "<newline>                    "
Name:  "EndHour"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "MapTo24"
Punctuation:  "("
Name:  "InputHour"
Punctuation:  ");"
Text:  "<newline><newline>                    "
Comment.Multiline:  "{ Report success }"
Text:  "<newline>                    "
Name:  "Error"
Text:  " "
Punctuation:  ":="
Text:  " "
Name.Builtin:  "FALSE"
Text:  "<newline>                "
Keyword:  "END"
Text:  "<newline>            "
Keyword:  "ELSE"
Text:  "<newline>                "
Comment.Multiline:  "(* Something went wrong, seriously wrong. *)"
Text:  "<newline>                "
Name:  "Error"
Text:  " "
Punctuation:  ":="
Text:  " "
Name.Builtin:  "TRUE"
Punctuation:  ";"
Text:  "<newline><newline>            "
Comment.Multiline:  "(* We're done with this line. *)"
Text:  "<newline>            "
Name:  "readln"
Text:  "<newline>        "
Keyword:  "END"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "{ ReadSchedClrArgs }"
Text:  "<newline><newline>    "
Comment.Multiline:  "{****************************************************************<newline>     * PROCEDURE to print headers of each day.<newline>     *  Precondition: None.<newline>     *  Postcondition: A header line with the days of the week has<newline>     *    been printed.  The<newline>     ****************************************************************}"
Text:  "<newline>    "
Keyword:  "PROCEDURE"
Text:  " "
Name:  "WriteDaysHeader"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "CONST"
Text:  "<newline><newline>            "
Comment.Multiline:  "{ How many spaces to move over before printing days-of<newline>              the week header. }"
Text:  "<newline>            "
Name:  "DaysHeadMoveOver"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "6"
Punctuation:  ";"
Text:  "<newline><newline>            "
Comment.Multiline:  "{ How much room to assume is needed by each day string. }"
Text:  "<newline>            "
Name:  "AllowForDay"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "3"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "VAR"
Text:  "<newline>            "
Name:  "Day"
Punctuation:  ":"
Text:  " "
Name:  "DayType"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "BEGIN"
Text:  "<newline>            "
Keyword:  "write"
Punctuation:  "("
Literal.String:  "' '"
Punctuation:  ":"
Text:  " "
Name:  "DaysHeadMoveOver"
Punctuation:  ");"
Text:  "<newline><newline>            "
Keyword:  "FOR"
Text:  " "
Name:  "Day"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Sun"
Text:  " "
Keyword:  "TO"
Text:  " "
Name:  "Sat"
Text:  " "
Keyword:  "DO"
Text:  "<newline>                "
Keyword:  "BEGIN"
Text:  "<newline>                    "
Keyword:  "write"
Punctuation:  "("
Literal.String:  "'[ '"
Punctuation:  ");"
Text:  "<newline>                    "
Name:  "WriteDay"
Punctuation:  "("
Name:  "output"
Punctuation:  ","
Text:  " "
Name:  "Day"
Punctuation:  ");"
Text:  "<newline>                    "
Keyword:  "write"
Punctuation:  "("
Literal.String:  "' ]'"
Punctuation:  ","
Text:  " "
Literal.String:  "' '"
Punctuation:  ":"
Text:  " "
Name:  "TableDayWidth"
Text:  " "
Punctuation:  "-"
Text:  " "
Name:  "AllowForDay"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number:  "4"
Punctuation:  ")"
Text:  "<newline>                "
Keyword:  "END"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "writeln"
Text:  "<newline>        "
Keyword:  "END"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "{ WriteDaysHeader }"
Text:  "<newline><newline>    "
Comment.Multiline:  "{****************************************************************<newline>     * Function that tells if a pending schedule is legal.<newline>     * Its arguments are those of sched, excluding the employee name.<newline>     *  Precondition: FirstHour and LastHour are in range.<newline>     *  Postcondition: If the indicated area of the schedule contains<newline>     *    blanks in each entry, then return true, else false.<newline>     *  Note: Schedule is sent by VAR for efficiency -- it is not<newline>     *    changed.<newline>     ****************************************************************}"
Text:  "<newline>    "
Keyword:  "FUNCTION"
Text:  " "
Name:  "SchedLegal"
Punctuation:  "("
Text:  "<newline>            "
Keyword:  "VAR"
Text:  " "
Name:  "Schedule"
Punctuation:  ":"
Text:  " "
Name:  "ScheduleType"
Punctuation:  ";"
Text:  "     "
Comment.Multiline:  "{ Schedule to check. }"
Text:  "<newline>                "
Name:  "StartDay"
Punctuation:  ","
Text:  " "
Name:  "EndDay"
Punctuation:  ":"
Text:  " "
Name:  "DayType"
Punctuation:  ";"
Text:  "  "
Comment.Multiline:  "{ Days in question. }"
Text:  "<newline>                "
Name:  "FirstHour"
Punctuation:  ","
Text:  " "
Name:  "LastHour"
Punctuation:  ":"
Text:  "        "
Comment.Multiline:  "{ Hours in question. }"
Text:  "<newline>                        "
Name:  "HourType"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "boolean"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "VAR"
Text:  "<newline>            "
Name:  "ConflictFound"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "boolean"
Punctuation:  ";"
Text:  "         "
Comment.Multiline:  "{ Tell if one found. }"
Text:  "<newline>            "
Name:  "DayScan"
Punctuation:  ":"
Text:  " "
Name:  "DayType"
Punctuation:  ";"
Text:  "               "
Comment.Multiline:  "{ Go through the days. }"
Text:  "<newline>            "
Name:  "HourScan"
Punctuation:  ":"
Text:  " "
Name:  "HourScanType"
Punctuation:  ";"
Text:  "         "
Comment.Multiline:  "{ Go through the hours. }"
Text:  "<newline>        "
Keyword:  "BEGIN"
Text:  "<newline>            "
Comment.Multiline:  "{ Scan the days. }"
Text:  "<newline>            "
Name:  "DayScan"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "StartDay"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "ConflictFound"
Text:  " "
Punctuation:  ":="
Text:  " "
Name.Builtin:  "FALSE"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "REPEAT"
Text:  "<newline>                "
Comment.Multiline:  "{ For this day, scan the times. }"
Text:  "<newline>                "
Name:  "HourScan"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "FirstHour"
Punctuation:  ";"
Text:  "<newline>                "
Keyword:  "WHILE"
Text:  " "
Keyword:  "NOT"
Text:  " "
Name:  "ConflictFound"
Text:  " "
Keyword:  "AND"
Text:  "<newline>                                "
Punctuation:  "("
Name:  "HourScan"
Text:  " "
Punctuation:  "<="
Text:  " "
Name:  "LastHour"
Punctuation:  ")"
Text:  " "
Keyword:  "DO"
Text:  " "
Keyword:  "BEGIN"
Text:  "<newline>                    "
Comment.Multiline:  "{ Conflict? }"
Text:  "<newline>                    "
Name:  "ConflictFound"
Text:  " "
Punctuation:  ":="
Text:  "<newline>                            "
Name:  "Schedule"
Punctuation:  "["
Name:  "HourScan"
Punctuation:  ","
Text:  " "
Name:  "DayScan"
Punctuation:  "]"
Text:  " "
Punctuation:  "<>"
Text:  " "
Name:  "NotScheduled"
Punctuation:  ";"
Text:  "<newline><newline>                    "
Comment.Multiline:  "{ Next one. }"
Text:  "<newline>                    "
Name:  "HourScan"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "HourScan"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number:  "1"
Text:  "<newline>                "
Keyword:  "END"
Punctuation:  ";"
Text:  "<newline><newline>                "
Comment.Multiline:  "{ Next Day. }"
Text:  "<newline>                "
Name:  "DayScan"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "succ"
Punctuation:  "("
Name:  "DayScan"
Punctuation:  ")"
Text:  "<newline>            "
Keyword:  "UNTIL"
Text:  " "
Name:  "ConflictFound"
Text:  " "
Keyword:  "or"
Text:  " "
Punctuation:  "("
Name:  "DayScan"
Text:  " "
Punctuation:  ">"
Text:  " "
Name:  "EndDay"
Punctuation:  ");"
Text:  "<newline><newline>            "
Comment.Multiline:  "{ And the answer is.. }"
Text:  "<newline>            "
Name:  "SchedLegal"
Text:  " "
Punctuation:  ":="
Text:  " "
Keyword:  "not"
Text:  " "
Name:  "ConflictFound"
Text:  "<newline>        "
Keyword:  "END"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "{ SchedLegal }"
Text:  "<newline><newline>    "
Comment.Multiline:  "{****************************************************************<newline>     * This takes care of most of the work of the clear and sched<newline>     * commands.  Its arguments are those of sched, with blanks in<newline>     * Employee for the clear.  It places this name in each indicated<newline>     * postion.<newline>     *  Precondition: FirstHour and LastHour are in range.<newline>     *  Postcondition: The area of the schedule is changed to show<newline>     *    the indicated employee.<newline>     *  Note: This will replace any old entry, so the sched command<newline>     *    should call SchedLegal above to make sure the operation<newline>     *    is legal before calling this routine.<newline>     ****************************************************************}"
Text:  "<newline>    "
Keyword:  "PROCEDURE"
Text:  " "
Name:  "SetSchedPart"
Punctuation:  "("
Text:  "<newline>            "
Keyword:  "VAR"
Text:  " "
Name:  "Schedule"
Punctuation:  ":"
Text:  " "
Name:  "ScheduleType"
Punctuation:  ";"
Text:  "     "
Comment.Multiline:  "{ Set me! Set me! }"
Text:  "<newline>                "
Name:  "Employee"
Punctuation:  ":"
Text:  " "
Name:  "EmployeeType"
Punctuation:  ";"
Text:  "     "
Comment.Multiline:  "{ Who gets to work. }"
Text:  "<newline>                "
Name:  "StartDay"
Punctuation:  ","
Text:  " "
Name:  "EndDay"
Punctuation:  ":"
Text:  " "
Name:  "DayType"
Punctuation:  ";"
Text:  "  "
Comment.Multiline:  "{ Days in question. }"
Text:  "<newline>                "
Name:  "FirstHour"
Punctuation:  ","
Text:  " "
Name:  "LastHour"
Punctuation:  ":"
Text:  "        "
Comment.Multiline:  "{ Hours in question. }"
Text:  "<newline>                                "
Name:  "HourType"
Punctuation:  ");"
Text:  "<newline>        "
Keyword:  "VAR"
Text:  "<newline>            "
Name:  "DayScan"
Punctuation:  ":"
Text:  " "
Name:  "DayType"
Punctuation:  ";"
Text:  "               "
Comment.Multiline:  "{ Go through the days. }"
Text:  "<newline>            "
Name:  "HourScan"
Punctuation:  ":"
Text:  " "
Name:  "HourType"
Punctuation:  ";"
Text:  "             "
Comment.Multiline:  "{ Go through the hours. }"
Text:  "<newline>        "
Keyword:  "BEGIN"
Text:  "<newline>            "
Keyword:  "for"
Text:  " "
Name:  "DayScan"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "StartDay"
Text:  " "
Keyword:  "to"
Text:  " "
Name:  "EndDay"
Text:  " "
Keyword:  "do"
Text:  "<newline>                "
Keyword:  "for"
Text:  " "
Name:  "HourScan"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "FirstHour"
Text:  " "
Keyword:  "to"
Text:  " "
Name:  "LastHour"
Text:  " "
Keyword:  "do"
Text:  "<newline>                    "
Name:  "Schedule"
Punctuation:  "["
Name:  "HourScan"
Punctuation:  ","
Text:  " "
Name:  "DayScan"
Punctuation:  "]"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Employee"
Text:  "<newline>        "
Keyword:  "END"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "{ SetSchedPart }"
Text:  "<newline><newline>    "
Comment.Multiline:  "{****************************************************************<newline>     * Perform the sched command.<newline>     *  Precondition: The read pointer is followed by the arguments<newline>     *    for the sched command.<newline>     *  Postcondition: The arguments have been read and echoed, and the<newline>     *    read pointer is on the next line.  The sched command has been<newline>     *    performed with appropriate messages.<newline>     * Note: DayMap is passed by VAR for efficiency -- it is not<newline>     *    changed.<newline>     ****************************************************************}"
Text:  "<newline>    "
Keyword:  "PROCEDURE"
Text:  " "
Name:  "DoSched"
Punctuation:  "("
Text:  "<newline>            "
Keyword:  "VAR"
Text:  " "
Name:  "Schedule"
Punctuation:  ":"
Text:  " "
Name:  "ScheduleType"
Punctuation:  ");"
Text:  "    "
Comment.Multiline:  "{ Change this. }"
Text:  "<newline>        "
Keyword:  "VAR"
Text:  "<newline>            "
Name:  "Employee"
Punctuation:  ":"
Text:  " "
Name:  "EmployeeType"
Punctuation:  ";"
Text:  "         "
Comment.Multiline:  "{ Input employee name. }"
Text:  "<newline>            "
Name:  "StartDay"
Punctuation:  ","
Text:  " "
Name:  "EndDay"
Punctuation:  ":"
Text:  " "
Name:  "DayType"
Punctuation:  ";"
Text:  "      "
Comment.Multiline:  "{ Input days. }"
Text:  "<newline>            "
Name:  "StartHour"
Punctuation:  ","
Text:  " "
Name:  "EndHour"
Punctuation:  ":"
Text:  " "
Name:  "HourType"
Punctuation:  ";"
Text:  "   "
Comment.Multiline:  "{ Input hour range. }"
Text:  "<newline>            "
Name:  "Error"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "boolean"
Punctuation:  ";"
Text:  "                 "
Comment.Multiline:  "{ Input error indicator.}"
Text:  "<newline>        "
Keyword:  "BEGIN"
Text:  "<newline>            "
Comment.Multiline:  "{ Read the employee name }"
Text:  "<newline>            "
Name:  "ReadString"
Punctuation:  "("
Name:  "Employee"
Punctuation:  ");"
Text:  "<newline><newline>            "
Comment.Multiline:  "{ Read all the other arguments, and recieve error<newline>               indication. }"
Text:  "<newline>            "
Name:  "ReadSchedClrArgs"
Punctuation:  "("
Name:  "StartDay"
Punctuation:  ","
Text:  " "
Name:  "EndDay"
Punctuation:  ","
Text:  " "
Name:  "StartHour"
Punctuation:  ","
Text:  " "
Name:  "EndHour"
Punctuation:  ","
Text:  " "
Name:  "Error"
Punctuation:  ");"
Text:  "<newline><newline>            "
Comment.Multiline:  "{ For errors, let 'em know.  Otherwise, do it. }"
Text:  "<newline>            "
Keyword:  "IF"
Text:  " "
Name:  "Error"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                "
Keyword:  "writeln"
Punctuation:  "("
Literal.String:  "'*** Un-recognized day code.  '"
Punctuation:  ","
Text:  "<newline>                    "
Literal.String:  "'Command not performed. ***'"
Punctuation:  ")"
Text:  "<newline>            "
Keyword:  "ELSE"
Text:  "<newline>                "
Comment.Multiline:  "{ See if the scheduling is legal. }"
Text:  "<newline>                "
Keyword:  "IF"
Text:  " "
Name:  "SchedLegal"
Punctuation:  "("
Name:  "Schedule"
Punctuation:  ","
Text:  " "
Name:  "StartDay"
Punctuation:  ","
Text:  " "
Name:  "EndDay"
Punctuation:  ","
Text:  "<newline>                                        "
Name:  "StartHour"
Punctuation:  ","
Text:  " "
Name:  "EndHour"
Punctuation:  ")"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                    "
Keyword:  "BEGIN"
Text:  "<newline>                        "
Comment.Multiline:  "{ Legal.  Do it and admit it. }"
Text:  "<newline>                        "
Name:  "SetSchedPart"
Punctuation:  "("
Name:  "Schedule"
Punctuation:  ","
Text:  " "
Name:  "Employee"
Punctuation:  ","
Text:  "<newline>                                "
Name:  "StartDay"
Punctuation:  ","
Text:  " "
Name:  "EndDay"
Punctuation:  ","
Text:  " "
Name:  "StartHour"
Punctuation:  ","
Text:  " "
Name:  "EndHour"
Punctuation:  ");"
Text:  "<newline>                        "
Keyword:  "writeln"
Punctuation:  "("
Literal.String:  "'>>> '"
Punctuation:  ","
Text:  " "
Name:  "Employee"
Punctuation:  ","
Text:  " "
Literal.String:  "' scheduled. <<<'"
Punctuation:  ")"
Text:  "<newline>                    "
Keyword:  "END"
Text:  "<newline>                "
Keyword:  "ELSE"
Text:  "<newline>                    "
Comment.Multiline:  "{ Not legal. }"
Text:  "<newline>                    "
Keyword:  "writeln"
Punctuation:  "("
Literal.String:  "'*** Conflicts with existing schedule.  '"
Punctuation:  ","
Text:  "<newline>                        "
Literal.String:  "'Command not performed. ***'"
Punctuation:  ")"
Text:  "<newline>        "
Keyword:  "END"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "{ DoSched }"
Text:  "<newline><newline>    "
Comment.Multiline:  "{****************************************************************<newline>     * Perform the clear command.<newline>     *  Precondition: The read pointer is followed by the arguments<newline>     *    for the clear command.<newline>     *  Postcondition: The arguments have been read and echoed, and the<newline>     *    read pointer is on the next line.  The clear command has been<newline>     *    performed with appropriate messages.<newline>     * Note: DayMap is passed by VAR for efficiency -- it is not<newline>     *    changed.<newline>     ****************************************************************}"
Text:  "<newline>    "
Keyword:  "PROCEDURE"
Text:  " "
Name:  "DoClear"
Punctuation:  "("
Text:  "<newline>            "
Keyword:  "VAR"
Text:  " "
Name:  "Schedule"
Punctuation:  ":"
Text:  " "
Name:  "ScheduleType"
Punctuation:  ");"
Text:  "    "
Comment.Multiline:  "{ Change this. }"
Text:  "<newline>        "
Keyword:  "VAR"
Text:  "<newline>            "
Name:  "StartDay"
Punctuation:  ","
Text:  " "
Name:  "EndDay"
Punctuation:  ":"
Text:  " "
Name:  "DayType"
Punctuation:  ";"
Text:  "      "
Comment.Multiline:  "{ Input days. }"
Text:  "<newline>            "
Name:  "StartHour"
Punctuation:  ","
Text:  " "
Name:  "EndHour"
Punctuation:  ":"
Text:  " "
Name:  "HourType"
Punctuation:  ";"
Text:  "   "
Comment.Multiline:  "{ Input hour range. }"
Text:  "<newline>            "
Name:  "Error"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "boolean"
Punctuation:  ";"
Text:  "                 "
Comment.Multiline:  "{ Input error indicator.}"
Text:  "<newline>        "
Keyword:  "BEGIN"
Text:  "<newline>            "
Comment.Multiline:  "{ Read the arguments, and recieve error indication. }"
Text:  "<newline>            "
Name:  "ReadSchedClrArgs"
Punctuation:  "("
Name:  "StartDay"
Punctuation:  ","
Text:  " "
Name:  "EndDay"
Punctuation:  ","
Text:  " "
Name:  "StartHour"
Punctuation:  ","
Text:  " "
Name:  "EndHour"
Punctuation:  ","
Text:  " "
Name:  "Error"
Punctuation:  ");"
Text:  "<newline><newline>            "
Comment.Multiline:  "{ For errors, let 'em know.  Otherwise, do it. }"
Text:  "<newline>            "
Keyword:  "IF"
Text:  " "
Name:  "Error"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                "
Keyword:  "writeln"
Punctuation:  "("
Literal.String:  "'*** Un-recognized day code.  '"
Punctuation:  ","
Text:  "<newline>                    "
Literal.String:  "'Command not performed. ***'"
Punctuation:  ")"
Text:  "<newline>            "
Keyword:  "ELSE"
Text:  "<newline>                "
Keyword:  "BEGIN"
Text:  "<newline>                    "
Name:  "SetSchedPart"
Punctuation:  "("
Name:  "Schedule"
Punctuation:  ","
Text:  " "
Name:  "NotScheduled"
Punctuation:  ","
Text:  " "
Name:  "StartDay"
Punctuation:  ","
Text:  " "
Name:  "EndDay"
Punctuation:  ","
Text:  "<newline>                        "
Name:  "StartHour"
Punctuation:  ","
Text:  " "
Name:  "EndHour"
Punctuation:  ");"
Text:  "<newline>                    "
Keyword:  "writeln"
Punctuation:  "("
Literal.String:  "'>>> Clear performed. <<<'"
Punctuation:  ");"
Text:  "<newline>                "
Keyword:  "END"
Text:  " "
Comment.Multiline:  "{ DoClear }"
Text:  "<newline>        "
Keyword:  "END"
Punctuation:  ";"
Text:  "<newline><newline>    "
Comment.Multiline:  "{****************************************************************<newline>     * Peform the unsched command.<newline>     *  Precondition: The read pointer is followed by an employee<newline>     *    name.<newline>     *  Postcondition: The argument has been read and echoed, and the<newline>     *    read pointer is on the next line.  The employee read has been<newline>     *    removed from Schedule.<newline>     ****************************************************************}"
Text:  "<newline>    "
Keyword:  "PROCEDURE"
Text:  " "
Name:  "DoUnsched"
Punctuation:  "("
Text:  "<newline>            "
Keyword:  "VAR"
Text:  " "
Name:  "Schedule"
Punctuation:  ":"
Text:  " "
Name:  "ScheduleType"
Punctuation:  ");"
Text:  "        "
Comment.Multiline:  "{ Remove from. }"
Text:  "<newline>        "
Keyword:  "VAR"
Text:  "<newline>            "
Name:  "Employee"
Punctuation:  ":"
Text:  " "
Name:  "EmployeeType"
Punctuation:  ";"
Text:  "             "
Comment.Multiline:  "{ To remove. }"
Text:  "<newline>            "
Name:  "Day"
Punctuation:  ":"
Text:  " "
Name:  "DayType"
Punctuation:  ";"
Text:  "                       "
Comment.Multiline:  "{ Column scanner. }"
Text:  "<newline>            "
Name:  "Hour"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "integer"
Punctuation:  ";"
Text:  "                      "
Comment.Multiline:  "{ Row scanner. }"
Text:  "<newline>            "
Name:  "Found"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "boolean"
Punctuation:  ";"
Text:  "                     "
Comment.Multiline:  "{ Presence indicator }"
Text:  "<newline>        "
Keyword:  "BEGIN"
Text:  "<newline>            "
Comment.Multiline:  "{ Read the employee. }"
Text:  "<newline>            "
Name:  "readln"
Punctuation:  "("
Name:  "Employee"
Punctuation:  ");"
Text:  "<newline><newline>            "
Comment.Multiline:  "{ Remove! Remove! }"
Text:  "<newline>            "
Name:  "Found"
Text:  " "
Punctuation:  ":="
Text:  " "
Name.Builtin:  "FALSE"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "FOR"
Text:  " "
Name:  "Day"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Sun"
Text:  " "
Keyword:  "TO"
Text:  " "
Name:  "Sat"
Text:  " "
Keyword:  "DO"
Text:  "<newline>                "
Keyword:  "FOR"
Text:  " "
Name:  "Hour"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "FirstHour"
Text:  " "
Keyword:  "TO"
Text:  " "
Name:  "LastHour"
Text:  " "
Keyword:  "DO"
Text:  "<newline>                    "
Keyword:  "IF"
Text:  " "
Name:  "Schedule"
Punctuation:  "["
Name:  "Hour"
Punctuation:  ","
Text:  " "
Name:  "Day"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "Employee"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                        "
Keyword:  "BEGIN"
Text:  "<newline>                            "
Comment.Multiline:  "{ Remove. }"
Text:  "<newline>                            "
Name:  "Schedule"
Punctuation:  "["
Name:  "Hour"
Punctuation:  ","
Text:  " "
Name:  "Day"
Punctuation:  "]"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "NotScheduled"
Punctuation:  ";"
Text:  "<newline><newline>                            "
Comment.Multiline:  "{ Note. }"
Text:  "<newline>                            "
Name:  "Found"
Text:  " "
Punctuation:  ":="
Text:  " "
Name.Builtin:  "TRUE"
Text:  "<newline>                        "
Keyword:  "END"
Punctuation:  ";"
Text:  "<newline><newline>            "
Comment.Multiline:  "{ Warn if not found. Else just state. }"
Text:  "<newline>            "
Keyword:  "IF"
Text:  " "
Name:  "Found"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                "
Keyword:  "write"
Punctuation:  "("
Literal.String:  "'>>> '"
Punctuation:  ","
Text:  " "
Name:  "Employee"
Punctuation:  ","
Text:  " "
Literal.String:  "' removed from schedule. <<<'"
Punctuation:  ")"
Text:  "<newline>            "
Keyword:  "ELSE"
Text:  "<newline>                "
Keyword:  "write"
Punctuation:  "("
Literal.String:  "'>>> '"
Punctuation:  ","
Text:  " "
Name:  "Employee"
Punctuation:  ","
Text:  "<newline>                                    "
Literal.String:  "' was not on the schedule. <<<'"
Punctuation:  ")"
Text:  "<newline>        "
Keyword:  "END"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "{ DoUnsched }"
Text:  "<newline><newline>    "
Comment.Multiline:  "{****************************************************************<newline>     * Peform the print command.<newline>     *  Precondition: None.<newline>     *  Postcondition: Schedule has been printed to output.<newline>     ****************************************************************}"
Text:  "<newline>    "
Keyword:  "PROCEDURE"
Text:  " "
Name:  "DoPrint"
Punctuation:  "("
Text:  "<newline>            "
Keyword:  "VAR"
Text:  " "
Name:  "Schedule"
Punctuation:  ":"
Text:  " "
Name:  "ScheduleType"
Punctuation:  ");"
Text:  "        "
Comment.Multiline:  "{ Print me. }"
Text:  "<newline>        "
Keyword:  "VAR"
Text:  "<newline>            "
Name:  "Hour"
Punctuation:  ":"
Text:  " "
Name:  "HourType"
Punctuation:  ";"
Text:  "                     "
Comment.Multiline:  "{ Hour scan. }"
Text:  "<newline>            "
Name:  "Day"
Punctuation:  ":"
Text:  " "
Name:  "DayType"
Punctuation:  ";"
Text:  "                       "
Comment.Multiline:  "{ Day scan. }"
Text:  "<newline><newline>        "
Comment.Multiline:  "{ Map from 24-hour time to 12-hour time.  Arguments less than<newline>          13 are simply returned, arguments greater than 12 are<newline>          reduced by 12 and returned. }"
Text:  "<newline>        "
Keyword:  "FUNCTION"
Text:  " "
Name:  "Map24to12"
Punctuation:  "("
Name:  "HourType"
Punctuation:  ":"
Text:  " "
Name:  "HourType"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "integer"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "BEGIN"
Text:  "<newline>                "
Keyword:  "IF"
Text:  " "
Name:  "Hour"
Text:  " "
Punctuation:  "<"
Text:  " "
Literal.Number:  "13"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                    "
Name:  "Map24to12"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Hour"
Text:  "<newline>                "
Keyword:  "ELSE"
Text:  "<newline>                    "
Name:  "Map24to12"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Hour"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number:  "12"
Text:  "<newline>            "
Keyword:  "END"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "BEGIN"
Text:  "<newline>            "
Name:  "readln"
Punctuation:  ";"
Text:  "<newline>            "
Name:  "WriteDaysHeader"
Punctuation:  ";"
Text:  "<newline><newline>            "
Keyword:  "FOR"
Text:  " "
Name:  "Hour"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "FirstHour"
Text:  " "
Keyword:  "TO"
Text:  " "
Name:  "LastHour"
Text:  " "
Keyword:  "DO"
Text:  "<newline>                "
Keyword:  "BEGIN"
Text:  "<newline>                    "
Keyword:  "write"
Punctuation:  "("
Name:  "Map24to12"
Punctuation:  "("
Name:  "Hour"
Punctuation:  "):"
Literal.Number:  "2"
Punctuation:  ","
Text:  " "
Literal.String:  "':00 '"
Punctuation:  ");"
Text:  "<newline>                    "
Keyword:  "FOR"
Text:  " "
Name:  "Day"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Sun"
Text:  " "
Keyword:  "TO"
Text:  " "
Name:  "Sat"
Text:  " "
Keyword:  "DO"
Text:  "<newline>                        "
Keyword:  "write"
Punctuation:  "("
Name:  "Schedule"
Punctuation:  "["
Name:  "Hour"
Punctuation:  ","
Text:  " "
Name:  "Day"
Punctuation:  "],"
Text:  "<newline>                            "
Literal.String:  "' '"
Punctuation:  ":"
Text:  " "
Name:  "TableDayWidth"
Text:  " "
Punctuation:  "-"
Text:  " "
Name:  "length"
Punctuation:  "("
Name:  "Schedule"
Punctuation:  "["
Name:  "Hour"
Punctuation:  ","
Text:  " "
Name:  "Day"
Punctuation:  "]));"
Text:  "<newline>                    "
Keyword:  "writeln"
Text:  "<newline>                "
Keyword:  "END"
Text:  "<newline>        "
Keyword:  "END"
Punctuation:  ";"
Text:  "<newline><newline>    "
Comment.Multiline:  "{****************************************************************<newline>     * Peform the total command.<newline>     *  Precondition: The read pointer is followed by an employee<newline>     *    name.<newline>     *  Postcondition: The argument has been read and echoed, and the<newline>     *    read pointer is on the next line.  The total scheduled hours<newline>     *    for the employee read has been printed.<newline>     ****************************************************************}"
Text:  "<newline>    "
Keyword:  "PROCEDURE"
Text:  " "
Name:  "DoTotal"
Punctuation:  "("
Text:  "<newline>            "
Keyword:  "VAR"
Text:  " "
Name:  "Schedule"
Punctuation:  ":"
Text:  " "
Name:  "ScheduleType"
Punctuation:  ");"
Text:  "        "
Comment.Multiline:  "{ The schedule. }"
Text:  "<newline>        "
Keyword:  "VAR"
Text:  "<newline>            "
Name:  "Employee"
Punctuation:  ":"
Text:  " "
Name:  "EmployeeType"
Punctuation:  ";"
Text:  "             "
Comment.Multiline:  "{ To remove. }"
Text:  "<newline>            "
Name:  "Day"
Punctuation:  ":"
Text:  " "
Name:  "DayType"
Punctuation:  ";"
Text:  "                       "
Comment.Multiline:  "{ Column scanner. }"
Text:  "<newline>            "
Name:  "Hour"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "integer"
Punctuation:  ";"
Text:  "                      "
Comment.Multiline:  "{ Row scanner. }"
Text:  "<newline>            "
Name:  "Total"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "integer"
Punctuation:  ";"
Text:  "                     "
Comment.Multiline:  "{ Total intgers. }"
Text:  "<newline>        "
Keyword:  "BEGIN"
Text:  "<newline>            "
Comment.Multiline:  "{ Read the employee. }"
Text:  "<newline>            "
Name:  "readln"
Punctuation:  "("
Name:  "Employee"
Punctuation:  ");"
Text:  "<newline><newline>            "
Comment.Multiline:  "{ Do the sum. }"
Text:  "<newline>            "
Name:  "Total"
Text:  " "
Punctuation:  ":="
Text:  " "
Literal.Number:  "0"
Punctuation:  ";"
Text:  "<newline>            "
Keyword:  "FOR"
Text:  " "
Name:  "Day"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Sun"
Text:  " "
Keyword:  "TO"
Text:  " "
Name:  "Sat"
Text:  " "
Keyword:  "DO"
Text:  "<newline>                "
Keyword:  "FOR"
Text:  " "
Name:  "Hour"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "FirstHour"
Text:  " "
Keyword:  "TO"
Text:  " "
Name:  "LastHour"
Text:  " "
Keyword:  "DO"
Text:  "<newline>                    "
Keyword:  "IF"
Text:  " "
Name:  "Schedule"
Punctuation:  "["
Name:  "Hour"
Punctuation:  ","
Text:  " "
Name:  "Day"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "Employee"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                        "
Name:  "Total"
Text:  " "
Punctuation:  ":="
Text:  " "
Name:  "Total"
Text:  " "
Punctuation:  "+"
Text:  " "
Literal.Number:  "1"
Punctuation:  ";"
Text:  "<newline><newline>            "
Comment.Multiline:  "{ Write the total. }"
Text:  "<newline>            "
Keyword:  "writeln"
Punctuation:  "("
Literal.String:  "'>>> '"
Punctuation:  ","
Text:  " "
Name:  "Employee"
Punctuation:  ","
Text:  "<newline>                "
Literal.String:  "' is scheduled for '"
Punctuation:  ","
Text:  " "
Name:  "Total"
Punctuation:  ":"
Literal.Number:  "1"
Punctuation:  ","
Text:  " "
Literal.String:  "' hours. <<<<'"
Punctuation:  ")"
Text:  "<newline>        "
Keyword:  "END"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "{ DoTotal }"
Text:  "<newline><newline>    "
Comment.Multiline:  "{*****************************************************************<newline>     * Main line.<newline>     *****************************************************************}"
Text:  "<newline><newline>    "
Keyword:  "VAR"
Text:  "<newline>        "
Comment.Multiline:  "{ The schedule. }"
Text:  "<newline>        "
Name:  "Schedule"
Punctuation:  ":"
Text:  " "
Name:  "ScheduleType"
Punctuation:  ";"
Text:  "<newline><newline>        "
Comment.Multiline:  "{ Main loop continue flag. }"
Text:  "<newline>        "
Name:  "KeepRunning"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "boolean"
Punctuation:  ";"
Text:  "<newline><newline>        "
Comment.Multiline:  "{ Command input local to main. }"
Text:  "<newline>        "
Name:  "Command"
Punctuation:  ":"
Text:  " "
Keyword:  "string"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "BEGIN"
Text:  "<newline>        "
Comment.Multiline:  "{ Clear the schedule. }"
Text:  "<newline>        "
Name:  "SetSchedPart"
Punctuation:  "("
Name:  "Schedule"
Punctuation:  ","
Text:  " "
Name:  "NotScheduled"
Punctuation:  ","
Text:  " "
Name:  "Sun"
Punctuation:  ","
Text:  " "
Name:  "Sat"
Punctuation:  ","
Text:  " "
Name:  "FirstHour"
Punctuation:  ","
Text:  " "
Name:  "LastHour"
Punctuation:  ");"
Text:  "<newline><newline>        "
Comment.Multiline:  "{ Do the commands. }"
Text:  "<newline>        "
Keyword:  "write"
Punctuation:  "("
Literal.String:  "'==> '"
Punctuation:  ");"
Text:  "<newline>        "
Name:  "ReadString"
Punctuation:  "("
Name:  "Command"
Punctuation:  ");"
Text:  "<newline>        "
Name:  "KeepRunning"
Text:  " "
Punctuation:  ":="
Text:  " "
Name.Builtin:  "TRUE"
Punctuation:  ";"
Text:  "<newline>        "
Keyword:  "WHILE"
Text:  " "
Name:  "KeepRunning"
Text:  " "
Keyword:  "DO"
Text:  "<newline>            "
Keyword:  "BEGIN"
Text:  "<newline>                "
Keyword:  "IF"
Text:  " "
Name:  "Command"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "'sched'"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                    "
Name:  "DoSched"
Punctuation:  "("
Name:  "Schedule"
Punctuation:  ")"
Text:  "<newline>                "
Keyword:  "ELSE"
Text:  " "
Keyword:  "IF"
Text:  " "
Name:  "Command"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "'clear'"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                    "
Name:  "DoClear"
Punctuation:  "("
Name:  "Schedule"
Punctuation:  ")"
Text:  "<newline>                "
Keyword:  "ELSE"
Text:  " "
Keyword:  "IF"
Text:  " "
Name:  "Command"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "'unsched'"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                    "
Name:  "DoUnsched"
Punctuation:  "("
Name:  "Schedule"
Punctuation:  ")"
Text:  "<newline>                "
Keyword:  "ELSE"
Text:  " "
Keyword:  "IF"
Text:  " "
Name:  "Command"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "'print'"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                    "
Name:  "DoPrint"
Punctuation:  "("
Name:  "Schedule"
Punctuation:  ")"
Text:  "<newline>                "
Keyword:  "ELSE"
Text:  " "
Keyword:  "IF"
Text:  " "
Name:  "Command"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "'total'"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                    "
Name:  "DoTotal"
Punctuation:  "("
Name:  "Schedule"
Punctuation:  ")"
Text:  "<newline>                "
Keyword:  "ELSE"
Text:  " "
Keyword:  "IF"
Text:  " "
Name:  "Command"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String:  "'quit'"
Text:  " "
Keyword:  "THEN"
Text:  "<newline>                    "
Keyword:  "BEGIN"
Text:  "<newline>                        "
Keyword:  "writeln"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword:  "writeln"
Punctuation:  "("
Literal.String:  "'>>> Program terminating. <<<'"
Punctuation:  ");"
Text:  "<newline>                        "
Name:  "KeepRunning"
Text:  " "
Punctuation:  ":="
Text:  " "
Name.Builtin:  "FALSE"
Text:  "<newline>                    "
Keyword:  "END"
Text:  "<newline>                "
Keyword:  "ELSE"
Text:  "<newline>                    "
Comment.Multiline:  "{ Command not recognized. }"
Text:  "<newline>                    "
Keyword:  "BEGIN"
Text:  "<newline>                        "
Name:  "readln"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword:  "writeln"
Punctuation:  ";"
Text:  "<newline>                        "
Keyword:  "writeln"
Punctuation:  "("
Literal.String:  "'*** Command '"
Punctuation:  ","
Text:  " "
Name:  "Command"
Punctuation:  ","
Text:  "<newline>                                                    "
Literal.String:  "' not recognized. ***'"
Punctuation:  ");"
Text:  "<newline>                    "
Keyword:  "END"
Punctuation:  ";"
Text:  "<newline><newline>                "
Comment.Multiline:  "{ Go to a new page for next'n. }"
Text:  "<newline>                "
Keyword:  "write"
Punctuation:  "("
Literal.String:  "'==> '"
Punctuation:  ");"
Text:  "<newline>                "
Name:  "ReadString"
Punctuation:  "("
Name:  "Command"
Punctuation:  ")"
Text:  "<newline>            "
Keyword:  "END"
Text:  "<newline>    "
Keyword:  "END"
Punctuation:  "."
Text:  "<newline><newline>"
Comment.Single:  "-- Hex numbers<newline>"
Keyword:  "function"
Text:  " "
Name:  "UnicodeToISO_8859_9"
Punctuation:  "("
Name:  "Unicode"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "cardinal"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "integer"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "begin"
Text:  "<newline>  "
Keyword:  "case"
Text:  " "
Name:  "Unicode"
Text:  " "
Keyword:  "of"
Text:  "<newline>  "
Literal.Number:  "0..255"
Punctuation:  ":"
Text:  " "
Name:  "Result"
Punctuation:  ":="
Name:  "Unicode"
Punctuation:  ";"
Text:  "<newline>  "
Literal.Number.Hex:  "$011E"
Punctuation:  ":"
Text:  " "
Name:  "Result"
Punctuation:  ":="
Text:  " "
Literal.Number.Hex:  "$D0"
Punctuation:  ";"
Text:  "<newline>  "
Literal.Number.Hex:  "$0130"
Punctuation:  ":"
Text:  " "
Name:  "Result"
Punctuation:  ":="
Text:  " "
Literal.Number.Hex:  "$DD"
Punctuation:  ";"
Text:  "<newline>  "
Literal.Number.Hex:  "$015E"
Punctuation:  ":"
Text:  " "
Name:  "Result"
Punctuation:  ":="
Text:  " "
Literal.Number.Hex:  "$DE"
Punctuation:  ";"
Text:  "<newline>  "
Literal.Number.Hex:  "$011F"
Punctuation:  ":"
Text:  " "
Name:  "Result"
Punctuation:  ":="
Text:  " "
Literal.Number.Hex:  "$F0"
Punctuation:  ";"
Text:  "<newline>  "
Literal.Number.Hex:  "$0131"
Punctuation:  ":"
Text:  " "
Name:  "Result"
Punctuation:  ":="
Text:  " "
Literal.Number.Hex:  "$FD"
Punctuation:  ";"
Text:  "<newline>  "
Literal.Number.Hex:  "$015F"
Punctuation:  ":"
Text:  " "
Name:  "Result"
Punctuation:  ":="
Text:  " "
Literal.Number.Hex:  "$FE"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "else"
Text:  " "
Name:  "Result"
Punctuation:  ":=-"
Literal.Number:  "1"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "end"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "end"
Punctuation:  ";"
Text:  "<newline>"
