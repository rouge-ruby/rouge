Comment.Single:  "#! /usr/bin/env perl"
Text:  "<newline><newline>"
Comment.Single:  "# common regex delimiters"
Text:  "<newline>"
Keyword:  "sub "
Name.Function:  "substitutionOperator"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Literal.String.Regex:  "s!\\\\!\\\\\\\\!g"
Punctuation:  ";"
Text:  "<newline>    "
Literal.String.Regex:  "s!\\\\!\\\\\\\\!g"
Punctuation:  ";"
Text:  "<newline>    "
Literal.String.Regex:  "s!\"!\\\\\"!g"
Punctuation:  ";"
Text:  "<newline>    "
Literal.String.Regex:  "s!\\(!\\\\\\(!g"
Punctuation:  ";"
Text:  "<newline>    "
Literal.String.Regex:  "s!\\)!\\\\\\)!g"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Variable:  "$a"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s/foo/bar/"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$b"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s!foo!bar!"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$c"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s@foo@bar@"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$d"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s\\foo\\bar\\"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "# balanced regex delimiters"
Text:  "<newline>"
Name.Variable:  "$e"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s{foo}{bar}"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$f"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s(foo)(bar)"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$g"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s<foo><bar>"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$h"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s[foo][bar]"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "# balanced regex delimiters with whitespace"
Text:  "<newline>"
Name.Variable:  "$i"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s{foo} {bar}"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$j"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s<foo>\t\t<bar>"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$k"
Text:  " "
Operator:  "=~"
Text:  "<newline>\t"
Literal.String.Regex:  "s(foo)<newline><newline>\t(bar)"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$l"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s{foo} <bar>"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$m"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s(foo) !bar!"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$n"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s[foo] $bar$"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "# /x modifier after regex delimiters"
Text:  "<newline>"
Name.Variable:  "$o"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s{<newline>\t\t\t\tfoo<newline>\t\t\t } {bar}x"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$p"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "s%<newline>  foo<newline>  %bar%x"
Punctuation:  ";"
Text:  "<newline>  "
Comment.Single:  "#"
Text:  "<newline>"
Comment.Single:  "# arbitrary regex delimiters"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$re_1"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "m,This should match,"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$re_2"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "m aSo should thisa"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Name.Variable:  "$filename"
Text:  " "
Operator.Word:  "and"
Text:  " "
Name.Variable:  "$filename"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "m,usr/share/doc/[^/]+/examples/,"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "# keys in hashes aren't match as regular expressions"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "%countries"
Text:  " "
Operator:  "="
Text:  "  "
Punctuation:  "("
Text:  " "
Literal.String:  "england"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "English"
Punctuation:  "',"
Text:  "<newline>                   "
Literal.String:  "france"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "French"
Punctuation:  "',"
Text:  "<newline>                   "
Literal.String:  "spain"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "Spanish"
Punctuation:  "',"
Text:  "<newline>                   "
Literal.String:  "china"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "Chinese"
Punctuation:  "',"
Text:  "<newline>                   "
Literal.String:  "germany"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "German"
Punctuation:  "',"
Text:  "<newline>                   "
Literal.String:  "mozambique"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "Mozambican"
Punctuation:  "');"
Text:  "<newline><newline>"
Comment.Single:  "# transliterations"
Text:  "<newline>"
Name.Variable:  "say"
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "food"
Punctuation:  "\""
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "tr/o/e/r"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$r"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "tr ^y^z^"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$s"
Text:  " "
Operator:  "=~"
Text:  " "
Literal.String.Regex:  "y/[]|/()&/"
Punctuation:  ";"
Text:  " "
Comment.Single:  "# \"backward\" compatible"
Text:  "<newline><newline><newline>"
Comment.Single:  "# quoted strings"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "foo"
Punctuation:  "';"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "foo"
Literal.String.Escape:  "\\'"
Literal.String.Single:  "s bar"
Punctuation:  "';"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "foo\\bar"
Punctuation:  "';"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "foo"
Literal.String.Escape:  "\\\\"
Literal.String.Single:  "bar"
Punctuation:  "';"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "foo"
Punctuation:  "\";"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "foo "
Literal.String.Escape:  "\\\""
Literal.String.Double:  " bar"
Punctuation:  "\";"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "foo"
Literal.String.Escape:  "\\b"
Literal.String.Double:  "ar"
Punctuation:  "\";"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "foo "
Literal.String.Escape:  "\\057"
Literal.String.Double:  " "
Literal.String.Escape:  "\\x7f"
Literal.String.Double:  " "
Literal.String.Escape:  "\\x{263a}"
Literal.String.Double:  " "
Literal.String.Escape:  "\\cC"
Literal.String.Double:  " "
Literal.String.Escape:  "\\N{GREEK SMALL LETTER SIGMA}"
Literal.String.Double:  " bar"
Punctuation:  "\";"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "invalid escape "
Literal.String.Escape:  "\\"
Literal.String.Double:  "w"
Punctuation:  "\";"
Text:  "<newline><newline>"
Keyword:  "print"
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "a: "
Punctuation:  "\";"
Text:  "<newline>"
Keyword:  "print"
Text:  " "
Name.Variable:  "$a"
Punctuation:  ","
Text:  " "
Punctuation:  "\""
Literal.String.Double:  " - "
Punctuation:  "\";"
Text:  "<newline>"
Keyword:  "print"
Text:  " "
Name.Variable:  "$a"
Punctuation:  ","
Text:  " "
Punctuation:  "\""
Literal.String.Escape:  "<newline>"
Punctuation:  "\";"
Text:  "<newline><newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$str1"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "This is a "
Literal.String.Interpol:  "${"
Text:  " "
Literal.String.Interpol:  "string"
Text:  " "
Literal.String.Interpol:  "}"
Literal.String.Double:  " with fancy interpolation."
Punctuation:  "\""
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$cmd1"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "`"
Literal.String.Backtick:  "So is "
Literal.String.Interpol:  "@{"
Text:  " "
Literal.String.Interpol:  "this"
Text:  " "
Literal.String.Interpol:  "}"
Literal.String.Backtick:  " one."
Punctuation:  "`"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$str2"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "This is a "
Literal.String.Interpol:  "$string"
Literal.String.Double:  " with plain interpolation."
Punctuation:  "\""
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$cmd2"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "`"
Literal.String.Backtick:  "So is "
Literal.String.Interpol:  "@this"
Literal.String.Backtick:  " one."
Punctuation:  "`"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$str3"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "A boring $string."
Punctuation:  "'"
Text:  "<newline><newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "@w"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  " "
Literal.String.Other:  "q!str4!"
Punctuation:  ","
Text:  " "
Literal.String.Other:  "qw< str5 str6 >"
Punctuation:  ","
Text:  " "
Literal.String.Other:  "qq(str7 $str1)"
Punctuation:  ","
Text:  " "
Literal.String.Other:  "qx`false`"
Punctuation:  ","
Text:  " "
Literal.String.Other:  "qr/foo/"
Text:  " "
Punctuation:  ");"
Text:  "<newline>"
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Other:  "qr/bar/"
Name.Variable:  "i"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "%x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  " "
Literal.String:  "q_ThisString"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "doesnt_overrun as if it were q-quoted"
Punctuation:  "\""
Text:  " "
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Single:  "# from http://gist.github.com/485595"
Text:  "<newline>"
Keyword:  "use"
Text:  " "
Name.Variable:  "strict"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "use"
Text:  " "
Name.Variable:  "warnings"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "use"
Text:  " "
Name.Namespace:  "Time::"
Name.Variable:  "HiRes"
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "usleep"
Punctuation:  "';"
Text:  "<newline><newline>"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "1"
Operator:  ".."
Literal.Number.Integer:  "5"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Builtin:  "open"
Text:  " "
Keyword:  "my"
Text:  " "
Name.Variable:  "$in"
Punctuation:  ","
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "<"
Punctuation:  "',"
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "/proc/sys/kernel/random/entropy_avail"
Punctuation:  "'"
Text:  " "
Operator.Word:  "or"
Text:  " "
Name.Builtin:  "die"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "print"
Text:  " "
Operator:  "<"
Name.Variable:  "$in"
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>    "
Name.Builtin:  "close"
Text:  " "
Name.Variable:  "$in"
Punctuation:  ";"
Text:  "<newline>    "
Name.Variable:  "usleep"
Text:  " "
Literal.Number.Integer:  "100_000"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "# other miscellaneous tests of numbers separated by _"
Text:  "<newline>"
Name.Variable:  "usleep"
Text:  " "
Literal.Number.Integer:  "100_000"
Punctuation:  ";"
Text:  "<newline>"
Literal.Number.Integer:  "100_000_000"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$nichts"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "0.005_006"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "print"
Text:  " "
Literal.Number.Float:  "900_800_700.005_006_007"
Punctuation:  ","
Text:  " "
Name.Variable.Global:  "$/"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "# numbers from `man 1 perlnumber`"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$n"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$n"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1234"
Punctuation:  ";"
Text:  "              "
Comment.Single:  "# decimal integer"
Text:  "<newline>"
Name.Variable:  "$n"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Bin:  "0b1110011"
Punctuation:  ";"
Text:  "         "
Comment.Single:  "# binary integer"
Text:  "<newline>"
Name.Variable:  "$n"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Oct:  "01234"
Punctuation:  ";"
Text:  "             "
Comment.Single:  "# octal integer"
Text:  "<newline>"
Name.Variable:  "$n"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Hex:  "0x1234"
Punctuation:  ";"
Text:  "            "
Comment.Single:  "# hexadecimal integer"
Text:  "<newline>"
Name.Variable:  "$n"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "12.34e-56"
Punctuation:  ";"
Text:  "         "
Comment.Single:  "# exponential notation"
Text:  "<newline>"
Name.Variable:  "$n"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "-12.34e56"
Punctuation:  "\";"
Text:  "       "
Comment.Single:  "# number specified as a string"
Text:  "<newline>"
Name.Variable:  "$n"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "\""
Literal.String.Double:  "1234"
Punctuation:  "\";"
Text:  "            "
Comment.Single:  "# number specified as a string"
Text:  "<newline><newline>"
Comment.Single:  "# other numbers"
Text:  "<newline>"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Text:  "<newline>    "
Operator:  "-"
Literal.Number.Integer:  "9876"
Punctuation:  ","
Text:  "<newline>    "
Operator:  "+"
Literal.Number.Integer:  "8765"
Punctuation:  ","
Text:  "<newline>    "
Operator:  "-"
Literal.Number.Float:  "9876.02"
Punctuation:  ","
Text:  "<newline>    "
Operator:  "-"
Literal.Number.Float:  "9876.02e+10"
Punctuation:  ","
Text:  "<newline>    "
Operator:  "+"
Literal.Number.Float:  "765_432e30"
Punctuation:  ","
Text:  "<newline>    "
Literal.Number.Integer:  "2002"
Operator:  "."
Punctuation:  ","
Text:  "<newline>    "
Literal.Number.Float:  ".2002"
Punctuation:  ","
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "print"
Text:  " "
Name.Variable.Global:  "$_"
Punctuation:  ","
Text:  " "
Punctuation:  "\""
Literal.String.Escape:  "<newline>"
Punctuation:  "\";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "# operators on numbers"
Text:  "<newline>"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Text:  "<newline>    "
Name.Variable:  "$n"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "300"
Punctuation:  ","
Text:  "<newline>    "
Name.Variable:  "$n"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "300"
Punctuation:  ","
Text:  "<newline>    "
Name.Variable:  "$n"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "300"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ","
Text:  "<newline>    "
Name.Variable:  "$n"
Text:  " "
Operator:  "*"
Text:  " "
Literal.Number.Integer:  "250"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Float:  "2.0"
Punctuation:  ","
Text:  "<newline>    "
Name.Variable:  "$n"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ","
Text:  "<newline>    "
Name.Variable:  "$n"
Text:  " "
Operator:  "!="
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ","
Text:  "<newline>    "
Name.Variable:  "$n"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ","
Text:  "<newline>    "
Name.Variable:  "$n"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ","
Text:  "<newline>    "
Name.Variable:  "$n"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ","
Text:  "<newline>    "
Name.Variable:  "$n"
Text:  " "
Operator:  "<="
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ","
Text:  "<newline>    "
Name.Variable:  "$n"
Text:  " "
Operator:  "%"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  "<newline>    "
Name.Builtin:  "abs"
Text:  " "
Name.Variable:  "$n"
Punctuation:  ","
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "print"
Text:  " "
Name.Variable.Global:  "$_"
Punctuation:  ","
Text:  " "
Punctuation:  "\""
Literal.String.Escape:  "<newline>"
Punctuation:  "\";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "=head1 Single Quote Breaker<newline><newline>That's all folks<newline><newline>=cut"
Text:  "<newline><newline>"
Keyword:  "sub "
Name.Function:  "foo"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "\""
Literal.String.Double:  "after the POD with the single quote, it's all still good"
Punctuation:  "\""
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "# operators"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$moduloOperation"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "$totalNumber"
Text:  " "
Operator:  "%"
Text:  " "
Name.Variable:  "$columns"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$moduloOperation"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "$addOperation"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "$totalNumber"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "$myOtherVar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "sub "
Name.Function:  "__END__but_not_really"
Text:  " "
Punctuation:  "{"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "# fat commas"
Text:  "<newline>"
Keyword:  "use"
Text:  " "
Name.Variable:  "constant"
Text:  " "
Literal.String:  "EMPTY_SPACE"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "'"
Literal.String.Single:  "&nbsp;"
Punctuation:  "';"
Text:  "<newline>"
Keyword:  "my"
Text:  " "
Name.Variable:  "%h"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  " "
Literal.String:  "FOO"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "23"
Text:  " "
Punctuation:  ");"
Text:  "<newline>"
Name.Variable:  "$text"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "format_text"
Punctuation:  "({"
Literal.String:  "FOO"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "23"
Punctuation:  ","
Text:  " "
Literal.String:  "BAR"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "30"
Punctuation:  "});"
Text:  "<newline>"
Name.Variable:  "foo"
Punctuation:  "("
Text:  "<newline>  "
Literal.String:  "sub"
Text:  " "
Comment.Single:  "# comment"
Text:  "<newline>      "
Comment.Single:  "# second comment"
Text:  "<newline>    "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "# sigils"
Text:  "<newline>"
Name.Variable:  "$"
Punctuation:  "{"
Text:  " "
Name.Variable:  "$sref"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "@"
Punctuation:  "{"
Text:  " "
Name.Variable:  "$aref"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "$#"
Punctuation:  "{"
Text:  " "
Name.Variable:  "$aref"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "%"
Punctuation:  "{"
Text:  " "
Name.Variable:  "$href"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "&"
Punctuation:  "{"
Text:  " "
Name.Variable:  "$cref"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "*"
Punctuation:  "{"
Text:  " "
Name.Variable:  "$gref"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "@$aref"
Punctuation:  "["
Text:  " "
Operator:  "..."
Text:  " "
Punctuation:  "]"
Text:  "<newline>"
Name.Variable:  "@$href"
Punctuation:  "{"
Text:  " "
Operator:  "..."
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "%$aref"
Punctuation:  "["
Text:  " "
Operator:  "..."
Text:  " "
Punctuation:  "]"
Text:  "<newline>"
Name.Variable:  "%$href"
Punctuation:  "{"
Text:  " "
Operator:  "..."
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Variable:  "$sref"
Operator:  "->"
Name.Variable.Global:  "$*"
Punctuation:  ";"
Text:  "  "
Comment.Single:  "# same as  ${ $sref }"
Text:  "<newline>"
Name.Variable:  "$aref"
Operator:  "->"
Name.Variable:  "@*"
Punctuation:  ";"
Text:  "  "
Comment.Single:  "# same as  @{ $aref }"
Text:  "<newline>"
Name.Variable:  "$aref"
Operator:  "->"
Name.Variable:  "$#*"
Punctuation:  ";"
Text:  " "
Comment.Single:  "# same as $\#{ $aref }"
Text:  "<newline>"
Name.Variable:  "$href"
Operator:  "->"
Name.Variable:  "%*"
Punctuation:  ";"
Text:  "  "
Comment.Single:  "# same as  %{ $href }"
Text:  "<newline>"
Name.Variable:  "$cref"
Operator:  "->"
Name.Variable:  "&*"
Punctuation:  ";"
Text:  "  "
Comment.Single:  "# same as  &{ $cref }"
Text:  "<newline>"
Name.Variable:  "$gref"
Operator:  "->"
Name.Variable:  "**"
Punctuation:  ";"
Text:  "  "
Comment.Single:  "# same as  *{ $gref }"
Text:  "<newline>"
Name.Variable:  "$aref"
Operator:  "->"
Name.Variable:  "@"
Punctuation:  "["
Text:  " "
Operator:  "..."
Text:  " "
Punctuation:  "];"
Text:  "  "
Comment.Single:  "# same as @$aref[ ... ]"
Text:  "<newline>"
Name.Variable:  "$href"
Operator:  "->"
Name.Variable:  "@"
Punctuation:  "{"
Text:  " "
Operator:  "..."
Text:  " "
Punctuation:  "};"
Text:  "  "
Comment.Single:  "# same as @$href{ ... }"
Text:  "<newline>"
Name.Variable:  "$aref"
Operator:  "->"
Name.Variable:  "%"
Punctuation:  "["
Text:  " "
Operator:  "..."
Text:  " "
Punctuation:  "];"
Text:  "  "
Comment.Single:  "# same as %$aref[ ... ]"
Text:  "<newline>"
Name.Variable:  "$href"
Operator:  "->"
Name.Variable:  "%"
Punctuation:  "{"
Text:  " "
Operator:  "..."
Text:  " "
Punctuation:  "};"
Text:  "  "
Comment.Single:  "# same as %$href{ ... }"
Text:  "<newline><newline>"
Comment.Preproc:  "__DATA__<newline><newline>This is just some end text; everything after DATA can be accessed<newline>by the <DATA> filehandle.  __END__ does the same thing, without the<newline>filehandle, but we can't test both in the same file.<newline>"
