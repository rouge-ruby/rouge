Name.Tag:  "<p>"
Text:  "It's html outside php!"
Name.Tag:  "</p>"
Text:  "<newline><newline><newline>"
Comment.Preproc:  "<?php"
Text:  " "
Comment.Multiline:  "/* Single statements */"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline><newline>"
Comment.Preproc:  "<?php"
Text:  " "
Keyword.Namespace:  "use"
Text:  " "
Name.Class:  "Foo"
Punctuation:  ","
Text:  " "
Name.Class:  "Bar"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline>"
Comment.Preproc:  "<?php"
Text:  " "
Keyword.Namespace:  "use"
Text:  " "
Comment.Multiline:  "/*Foo, */"
Name.Class:  "Bar"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline>"
Comment.Preproc:  "<?php"
Text:  " "
Keyword.Namespace:  "use"
Text:  " "
Name.Class:  "Class1"
Punctuation:  ","
Text:  " "
Name.Class:  "Class2"
Punctuation:  ";"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline>"
Comment.Preproc:  "<?php"
Text:  " "
Keyword:  "const"
Text:  " "
Name.Constant:  "FOO"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "42"
Punctuation:  ","
Text:  " "
Name.Constant:  "BAR"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "C"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline>"
Comment.Preproc:  "<?php"
Text:  " "
Keyword:  "const"
Text:  " "
Comment.Multiline:  "/*FOO = 42, */"
Name.Constant:  "BAR"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "C"
Punctuation:  ";"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline><newline><newline>"
Comment.Preproc:  "<?php"
Text:  " "
Comment.Multiline:  "/* Multiple statements */"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline><newline>"
Comment.Preproc:  "<?php"
Text:  "<newline>  "
Name.Builtin:  "file_put_contents"
Punctuation:  "("
Literal.String.Double:  "\"log.txt\""
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\u{FEFF}"
Literal.String.Double:  "===== D\u00E9but du fichier ====="
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "\""
Punctuation:  ");"
Text:  "<newline>  "
Name.Variable:  "$test"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "function"
Punctuation:  "("
Name.Variable:  "$a"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "$lambda"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Comment.Preproc:  "?>"
Text:  "<newline><newline><newline>"
Comment.Preproc:  "<?php"
Text:  " "
Comment.Multiline:  "/* Embedded PHP */"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline><newline>"
Name.Tag:  "<a"
Text:  " "
Name.Attribute:  "href="
Literal.String:  "\""
Comment.Preproc:  "<?="
Text:  " "
Name.Variable:  "$url"
Text:  " "
Comment.Preproc:  "?>"
Literal.String:  "\""
Name.Tag:  ">"
Text:  "I can close php tags and get html!"
Name.Tag:  "</a>"
Text:  "<newline><newline><newline>"
Comment.Preproc:  "<?php"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Comments */"
Text:  "<newline><newline>"
Comment.Single:  "# A comment"
Text:  "<newline>"
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Comment.Single:  "// Another comment"
Text:  "<newline>"
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Comment.Multiline:  "/* another comment */"
Text:  "<newline>"
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Comment.Multiline:  "/* a multi<newline>line comemnt<newline>followed by an empty comment */"
Text:  "<newline>"
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Comment.Multiline:  "/**/"
Text:  "<newline>"
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Comment.Doc:  "/**<newline> * doc block comment<newline> */"
Text:  "<newline>"
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Variable names */"
Text:  "<newline><newline>"
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Name.Variable:  "$\u0394"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Operator:  "++"
Name.Variable:  "$_\u0394"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "echo"
Text:  " "
Name.Variable:  "$\u0394\u0394"
Punctuation:  ";"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Numbers */"
Text:  "<newline><newline>"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>"
Literal.Number.Float:  "3.14"
Punctuation:  ";"
Text:  "<newline>"
Literal.Number.Float:  "1.414e10"
Punctuation:  ";"
Text:  "<newline>"
Literal.Number.Integer:  "1_000_000"
Punctuation:  ";"
Text:  "<newline>"
Literal.Number.Oct:  "007"
Punctuation:  ";"
Text:  "<newline>"
Literal.Number.Bin:  "0b1010"
Punctuation:  ";"
Text:  "<newline>"
Literal.Number.Hex:  "0xabcdef"
Punctuation:  ";"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Strings */"
Text:  "<newline><newline>"
Literal.String.Single:  "'A single-quoted string'"
Punctuation:  ";"
Text:  "<newline>"
Literal.String.Double:  "\"A double-quoted string\""
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// heredoc"
Text:  "<newline>"
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Heredoc:  "<<<EOF<newline>Some long string with $values<newline>EOF;"
Text:  "<newline><newline>"
Name.Variable:  "$b"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Heredoc:  "<<<'EOF'<newline>Some long string without $values<newline>EOF;"
Text:  "<newline><newline>"
Name.Variable:  "$c"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Heredoc:  "<<<EOF<newline>  Hello<newline>  EOF;"
Text:  "<newline><newline>"
Comment.Single:  "// Flexible heredoc"
Text:  "<newline>"
Name.Function:  "callingFunc"
Punctuation:  "("
Literal.String.Heredoc:  "<<<EOF<newline>    With a long string<newline>    EOF"
Punctuation:  ","
Text:  " "
Literal.String.Heredoc:  "<<<'EOF'<newline>    Another string<newline>    EOF"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Single:  "// Interpolation"
Text:  "<newline>"
Literal.String.Double:  "\"thing "
Literal.String.Interpol:  "{"
Name.Variable:  "$thing"
Operator:  "->"
Name.Function:  "other_thing"
Punctuation:  "()"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Functions */"
Text:  "<newline><newline>"
Keyword:  "function"
Text:  " "
Operator:  "&"
Name:  "byref"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Variable:  "$x"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "array"
Punctuation:  "();"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Variable:  "$x"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "public"
Text:  " "
Keyword:  "abstract"
Text:  " "
Keyword:  "function"
Text:  " "
Name:  "thing"
Punctuation:  "("
Keyword.Type:  "mysqli"
Text:  " "
Name.Variable:  "$mysqli"
Punctuation:  ","
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Constant:  "FOO"
Text:  " "
Operator:  "+"
Text:  " "
Name.Constant:  "BAR"
Punctuation:  ","
Text:  " "
Keyword.Type:  "?mysqli"
Text:  " "
Name.Variable:  "$mysqli"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "mysqli"
Text:  " "
Name.Variable:  "$mysqli"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "function"
Text:  " "
Name:  "sort_on"
Punctuation:  "("
Keyword.Type:  "array"
Text:  " "
Operator:  "&"
Name.Variable:  "$array"
Punctuation:  ","
Text:  " "
Keyword.Type:  "string"
Text:  " "
Name.Variable:  "$key"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Builtin:  "usort"
Punctuation:  "("
Name.Variable:  "$array"
Punctuation:  ","
Text:  " "
Keyword:  "function"
Text:  " "
Punctuation:  "("
Name.Variable:  "$a"
Punctuation:  ","
Text:  " "
Name.Variable:  "$b"
Punctuation:  ")"
Text:  " "
Keyword:  "use"
Punctuation:  "("
Name.Variable:  "$key"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Name.Variable:  "$a"
Text:  " "
Operator:  "<=>"
Text:  " "
Name.Variable:  "$b"
Punctuation:  ";"
Text:  " "
Punctuation:  "});"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// Function-like keywords."
Text:  "<newline>"
Keyword:  "isset"
Punctuation:  "("
Name.Variable:  "$foo"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "empty"
Punctuation:  "("
Name.Variable:  "$bar"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "unset"
Punctuation:  "("
Name.Variable:  "$baz"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "die"
Punctuation:  "("
Name.Variable:  "$qux"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Single:  "// No \"use\""
Text:  "<newline>"
Name.Variable:  "$example"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "function"
Text:  " "
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "some_fn"
Punctuation:  "("
Name.Variable:  "$message"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Single:  "// Inherit $message"
Text:  "<newline>"
Name.Variable:  "$example"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "function"
Text:  " "
Punctuation:  "()"
Text:  " "
Keyword:  "use"
Text:  " "
Punctuation:  "("
Name.Variable:  "$message"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "some_fn"
Punctuation:  "("
Name.Variable:  "$message"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Single:  "// A generator"
Text:  "<newline>"
Name.Variable:  "$gen"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword:  "function"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "yield"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "yield"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "})();"
Text:  "<newline><newline>"
Name.Variable:  "$fn"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "fn"
Punctuation:  "("
Name.Variable:  "$x"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword:  "fn"
Punctuation:  "("
Name.Variable:  "$y"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Variable:  "$x"
Text:  " "
Operator:  "*"
Text:  " "
Name.Variable:  "$y"
Text:  " "
Operator:  "+"
Text:  " "
Name.Variable:  "$z"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "fn"
Punctuation:  "("
Keyword.Type:  "array"
Text:  " "
Name.Variable:  "$x"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Variable:  "$x"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "static"
Text:  " "
Keyword:  "fn"
Punctuation:  "():"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Variable:  "$x"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "fn"
Punctuation:  "("
Name.Variable:  "$x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "42"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Variable:  "$x"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "fn"
Punctuation:  "("
Operator:  "&"
Name.Variable:  "$x"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Variable:  "$x"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "fn"
Operator:  "&"
Punctuation:  "("
Name.Variable:  "$x"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Variable:  "$x"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "fn"
Punctuation:  "("
Name.Variable:  "$x"
Punctuation:  ","
Text:  " "
Punctuation:  "..."
Name.Variable:  "$rest"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Variable:  "$rest"
Punctuation:  ";"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Classes */"
Text:  "<newline><newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "Foo"
Text:  " "
Keyword.Declaration:  "extends"
Text:  " "
Name.Class:  "AbstractFoo"
Text:  " "
Keyword.Declaration:  "implements"
Text:  " "
Name.Class:  "Bar"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "//Anonymous class example"
Text:  "<newline>"
Name.Variable:  "$app"
Operator:  "->"
Name.Function:  "setLogger"
Punctuation:  "("
Keyword:  "new"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Keyword.Declaration:  "implements"
Text:  " "
Name.Class:  "Logger"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "public"
Text:  " "
Keyword:  "function"
Text:  " "
Name:  "log"
Punctuation:  "("
Keyword.Type:  "string"
Text:  " "
Name.Variable:  "$msg"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "echo"
Text:  " "
Name.Variable:  "$msg"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "});"
Text:  "<newline><newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "ClassB"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Namespace:  "use"
Text:  " "
Name.Class:  "TraitA"
Punctuation:  ","
Text:  " "
Name.Class:  "TraitB"
Punctuation:  ","
Text:  " "
Name.Class:  "TraitC"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Class:  "TraitB"
Operator:  "::"
Name:  "foo"
Text:  " "
Keyword:  "insteadof"
Text:  " "
Name.Class:  "TraitA"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "Zip\\Zipp"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "Zip"
Text:  " "
Keyword.Declaration:  "extends"
Text:  " "
Name.Class:  "Archive"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "function"
Text:  " "
Name:  "out"
Punctuation:  "("
Name.Variable:  "$filename"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// Empty output"
Text:  "<newline>    "
Name.Variable:  "$file_data"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "array"
Punctuation:  "();"
Text:  " "
Comment.Single:  "// Data of the file part"
Text:  "<newline>    "
Name.Variable:  "$cd_data"
Text:  "   "
Operator:  "="
Text:  " "
Keyword:  "array"
Punctuation:  "();"
Text:  " "
Comment.Single:  "// Data of the central directory"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "User"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "public"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Variable:  "$id"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "public"
Text:  " "
Keyword.Type:  "?string"
Text:  " "
Name.Variable:  "$name"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "public"
Text:  " "
Keyword:  "function"
Text:  " "
Name:  "__construct"
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name.Variable:  "$id"
Punctuation:  ","
Text:  " "
Keyword.Type:  "?string"
Text:  " "
Name.Variable:  "$name"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "{"
Text:  "<newline>        "
Name.Variable:  "$this"
Operator:  "->"
Name:  "id"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "$id"
Punctuation:  ";"
Text:  "<newline>        "
Name.Variable:  "$this"
Operator:  "->"
Name:  "name"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "$name"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "C"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "private"
Text:  " "
Keyword:  "readonly"
Text:  " "
Name.Variable:  "$x"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "protected"
Text:  " "
Keyword:  "readonly"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Variable:  "$y"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "private"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Name.Variable:  "$z"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "public"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword.Type:  "?string"
Text:  " "
Name.Variable:  "$a"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"\""
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "public"
Text:  " "
Keyword:  "static"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Name.Variable:  "$b"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "public"
Text:  " "
Keyword:  "function"
Text:  " "
Name:  "__construct"
Punctuation:  "("
Text:  "<newline>        "
Keyword:  "public"
Text:  " "
Name.Variable:  "$foo"
Punctuation:  ","
Text:  "<newline>        "
Keyword:  "protected"
Text:  " "
Keyword:  "readonly"
Text:  " "
Name.Variable:  "$bar"
Punctuation:  ","
Text:  "<newline>        "
Keyword:  "private"
Text:  " "
Keyword:  "readonly"
Text:  " "
Keyword.Type:  "array"
Text:  " "
Name.Variable:  "$baz"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[],"
Text:  "<newline>        "
Keyword:  "private"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Name.Variable:  "$qux"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"\""
Punctuation:  ","
Text:  "<newline>    "
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Traits */"
Text:  "<newline><newline>"
Keyword.Declaration:  "trait"
Text:  " "
Name.Class:  "SomeTrait"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Single:  "// Some visibility"
Text:  "<newline>  "
Keyword:  "const"
Text:  " "
Name.Constant:  "PUBLIC_CONST_A"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "public"
Text:  " "
Keyword:  "const"
Text:  " "
Name.Constant:  "PUBLIC_CONST_B"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "protected"
Text:  " "
Keyword:  "const"
Text:  " "
Name.Constant:  "PROTECTED_CONST"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "private"
Text:  " "
Keyword:  "const"
Text:  " "
Name.Constant:  "PRIVATE_CONST"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ";"
Text:  "<newline><newline>  "
Keyword:  "function"
Text:  " "
Name:  "afunc"
Punctuation:  "("
Keyword.Type:  "string"
Text:  " "
Name.Variable:  "$arg"
Punctuation:  ","
Text:  " "
Keyword.Type:  "SomeInterface"
Text:  " "
Name.Variable:  "$arg2"
Punctuation:  ","
Text:  " "
Keyword.Type:  "callable"
Text:  " "
Name.Variable:  "$arg3"
Punctuation:  ","
Text:  " "
Keyword.Type:  "object"
Text:  " "
Name.Variable:  "$arg4"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "void"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "echo"
Text:  " "
Literal.String.Double:  "\"hello\""
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "<=>"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Keyword:  "echo"
Text:  " "
Literal.String.Double:  "\"yep!\""
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Interfaces */"
Text:  "<newline><newline>"
Keyword.Declaration:  "interface"
Text:  " "
Name.Class:  "SomeInterface"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "function"
Text:  " "
Name:  "interfaceFunc"
Punctuation:  "("
Keyword.Type:  "bool"
Text:  " "
Name.Variable:  "$arg"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "iterable"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "function"
Text:  " "
Name:  "nullableTypes"
Punctuation:  "("
Keyword.Type:  "?bool"
Text:  " "
Name.Variable:  "$arg"
Punctuation:  "):"
Text:  " "
Keyword.Type:  "?iterable"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Imports */"
Text:  "<newline><newline>"
Keyword.Namespace:  "use"
Text:  " "
Name.Class:  "some<newline>amespace\\ClassA"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Namespace:  "use"
Text:  " "
Name.Class:  "some<newline>amespace\\ClassB"
Text:  " "
Keyword:  "as"
Text:  " "
Name.Class:  "B"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Namespace:  "use"
Text:  " "
Keyword:  "function"
Text:  " "
Name.Function:  "some<newline>amespace\\fn_a"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Namespace:  "use"
Text:  " "
Keyword:  "const"
Text:  " "
Name.Class:  "some<newline>amespace\\ConstA"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Namespace:  "use"
Text:  " "
Name.Class:  "Class1"
Punctuation:  ","
Text:  " "
Comment.Multiline:  "/*Class2, */"
Name.Class:  "Class3"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword.Namespace:  "use"
Text:  " "
Name.Namespace:  "some<newline>amespace\\"
Punctuation:  "{"
Name.Class:  "ClassA"
Punctuation:  ","
Text:  " "
Name.Class:  "ClassB"
Punctuation:  ","
Text:  " "
Name.Class:  "ClassC"
Text:  " "
Keyword:  "as"
Text:  " "
Name.Class:  "C"
Punctuation:  "};"
Text:  "<newline>"
Keyword.Namespace:  "use"
Text:  " "
Keyword:  "function"
Text:  " "
Name.Namespace:  "some<newline>amespace\\"
Punctuation:  "{"
Name.Function:  "fn_a"
Punctuation:  ","
Text:  " "
Name.Function:  "fn_b"
Punctuation:  ","
Text:  " "
Name.Function:  "fn_c"
Punctuation:  "};"
Text:  "<newline>"
Keyword.Namespace:  "use"
Text:  " "
Keyword:  "const"
Text:  " "
Name.Namespace:  "some<newline>amespace\\"
Punctuation:  "{"
Name.Class:  "ConstA"
Punctuation:  ","
Text:  " "
Name.Class:  "ConstB"
Punctuation:  ","
Text:  " "
Name.Class:  "ConstC"
Punctuation:  "};"
Text:  "<newline>"
Keyword.Namespace:  "use"
Text:  " "
Name.Namespace:  "some<newline>ame\\"
Punctuation:  "{"
Keyword:  "function"
Text:  " "
Name.Function:  "some_fn"
Punctuation:  ","
Text:  " "
Keyword:  "const"
Text:  " "
Name.Constant:  "Foo\\BAR"
Punctuation:  ","
Text:  " "
Name.Class:  "SomeClass"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword.Namespace:  "use"
Text:  " "
Keyword:  "const"
Text:  " "
Name.Namespace:  "some<newline>amespace\\"
Punctuation:  "{"
Text:  "<newline>    "
Name.Class:  "ConstA"
Punctuation:  ","
Text:  "<newline>    "
Comment.Single:  "#ConstB,"
Text:  "<newline>    "
Name.Class:  "ConstC"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Namespaces */"
Text:  "<newline><newline>"
Keyword.Namespace:  "namespace"
Text:  " "
Name.Namespace:  "some<newline>amespace"
Punctuation:  ";"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Assignments */"
Text:  "<newline><newline>"
Keyword:  "list"
Punctuation:  "("
Name.Variable:  "$id1"
Punctuation:  ","
Text:  " "
Name.Variable:  "$name1"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "$data"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "];"
Text:  "<newline>"
Punctuation:  "["
Name.Variable:  "$id1"
Punctuation:  ","
Text:  " "
Name.Variable:  "$name1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "$data"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "];"
Text:  "<newline>"
Keyword:  "const"
Text:  " "
Name.Constant:  "A"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "f"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  " "
Name.Function:  "g"
Punctuation:  "("
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ","
Text:  " "
Name.Variable:  "$my_var"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "])),"
Text:  " "
Name.Constant:  "B"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"abc\""
Punctuation:  ";"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Conditionals */"
Text:  "<newline><newline>"
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name.Builtin:  "defined"
Punctuation:  "("
Literal.String.Single:  "'UNLOCK'"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Operator:  "!"
Name.Constant:  "UNLOCK"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "die"
Punctuation:  "();"
Text:  "<newline><newline>"
Keyword:  "if"
Punctuation:  "("
Name.Builtin:  "function_exists"
Punctuation:  "("
Literal.String.Single:  "'gzdeflate'"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Variable:  "$method"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "8"
Punctuation:  ";"
Text:  "<newline>  "
Name.Variable:  "$compressed_data"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "gzdeflate"
Punctuation:  "("
Name.Variable:  "$content"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "elseif"
Punctuation:  "("
Name.Builtin:  "function_exists"
Punctuation:  "("
Literal.String.Single:  "'bzcompress'"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Variable:  "$method"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "12"
Punctuation:  ";"
Text:  "<newline>  "
Name.Variable:  "$compressed_data"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "bzcompress"
Punctuation:  "("
Name.Variable:  "$content"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Variable:  "$compressed_data"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "$content"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "switch"
Punctuation:  "("
Name.Variable:  "$header_info"
Punctuation:  "["
Literal.String.Single:  "'compression_method'"
Punctuation:  "])"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "case"
Text:  " "
Literal.Number.Integer:  "0"
Operator:  ":"
Text:  "<newline>    "
Name.Variable:  "$content"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "$data"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>  "
Keyword:  "case"
Text:  " "
Literal.Number.Integer:  "8"
Operator:  ":"
Text:  "<newline>    "
Name.Variable:  "$content"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "gzinflate"
Punctuation:  "("
Name.Variable:  "$data"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>  "
Keyword:  "case"
Text:  " "
Literal.Number.Integer:  "12"
Operator:  ":"
Text:  "<newline>    "
Keyword:  "if"
Punctuation:  "("
Operator:  "!"
Name.Builtin:  "function_exists"
Punctuation:  "("
Literal.String.Single:  "'bzdecompress'"
Punctuation:  "))"
Text:  "<newline>      "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline><newline>  "
Keyword:  "default"
Operator:  ":"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Variable:  "$y"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "match"
Text:  " "
Punctuation:  "("
Name.Variable:  "$x"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  "<newline>  "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "=>"
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  "<newline>  "
Keyword:  "default"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Loops */"
Text:  "<newline><newline>"
Keyword:  "foreach"
Punctuation:  "("
Name.Variable:  "$this"
Operator:  "->"
Name:  "files"
Text:  " "
Keyword:  "as"
Text:  " "
Name.Variable:  "$name"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Variable:  "$file"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Variable:  "$content"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "$file"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "];"
Text:  "<newline>  "
Name.Variable:  "$fd"
Text:  " "
Literal.Number.Float:  "."
Operator:  "="
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\x50\\x4b\\x03\\x04"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  "                  "
Comment.Single:  "// Local file header signature"
Text:  "<newline>  "
Name.Variable:  "$fd"
Text:  " "
Literal.Number.Float:  "."
Operator:  "="
Text:  " "
Name.Builtin:  "pack"
Punctuation:  "("
Literal.String.Double:  "\"v\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "20"
Punctuation:  ");"
Text:  "                       "
Comment.Single:  "// Version needed to extract"
Text:  "<newline>  "
Name.Variable:  "$fd"
Text:  " "
Literal.Number.Float:  "."
Operator:  "="
Text:  " "
Name.Builtin:  "pack"
Punctuation:  "("
Literal.String.Double:  "\"V\""
Punctuation:  ","
Text:  " "
Name.Builtin:  "crc32"
Punctuation:  "("
Name.Variable:  "$content"
Punctuation:  "));"
Text:  "          "
Comment.Single:  "// crc-32"
Text:  "<newline>  "
Name.Variable:  "$fd"
Text:  " "
Literal.Number.Float:  "."
Operator:  "="
Text:  " "
Name.Builtin:  "pack"
Punctuation:  "("
Literal.String.Double:  "\"V\""
Punctuation:  ","
Text:  " "
Name.Builtin:  "strlen"
Punctuation:  "("
Name.Variable:  "$compressed_data"
Punctuation:  "));"
Text:  " "
Comment.Single:  "// Compressed size"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "while"
Punctuation:  "("
Name.Variable:  "$pos"
Text:  " "
Operator:  "<"
Text:  " "
Name.Builtin:  "strlen"
Punctuation:  "("
Name.Variable:  "$cdr"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Punctuation:  "("
Name.Builtin:  "substr"
Punctuation:  "("
Name.Variable:  "$cdr"
Punctuation:  ","
Text:  " "
Name.Variable:  "$pos"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\x50\\x4b\\x05\\x05"
Literal.String.Double:  "\""
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Variable:  "$tmp_info"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "unpack"
Punctuation:  "("
Literal.String.Single:  "'vsize'"
Punctuation:  ","
Text:  " "
Name.Builtin:  "substr"
Punctuation:  "("
Name.Variable:  "$cdr"
Punctuation:  ","
Text:  " "
Name.Variable:  "$pos"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "));"
Text:  "<newline>    "
Name.Variable:  "$digital_sig"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "substr"
Punctuation:  "("
Name.Variable:  "$header"
Punctuation:  ","
Text:  " "
Name.Variable:  "$pos"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "6"
Punctuation:  ","
Text:  " "
Name.Variable:  "$tmp_info"
Punctuation:  "["
Literal.String.Single:  "'size'"
Punctuation:  "]);"
Text:  "<newline>    "
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Exceptions */"
Text:  "<newline><newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "Test"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "public"
Text:  " "
Keyword:  "function"
Text:  " "
Name:  "testing"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "try"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "throw"
Text:  " "
Keyword:  "new"
Text:  " "
Name.Class:  "MyException"
Punctuation:  "();"
Text:  "<newline>        "
Punctuation:  "}"
Text:  " "
Keyword:  "catch"
Text:  " "
Punctuation:  "("
Name.Class:  "MyException"
Text:  " "
Operator:  "|"
Text:  " "
Name.Class:  "MyOtherException"
Text:  " "
Name.Variable:  "$e"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Name.Builtin:  "var_dump"
Punctuation:  "("
Name.Builtin:  "get_class"
Punctuation:  "("
Name.Variable:  "$e"
Punctuation:  "));"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Preproc:  "?>"
Text:  "<newline><newline>"
Comment.Preproc:  "<?php"
Text:  " "
Comment.Multiline:  "/* Edge cases */"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline><newline>"
Comment.Preproc:  "<?php"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword.Constant:  "true"
Punctuation:  ")"
Operator:  ":"
Text:  " "
Comment.Preproc:  "?>"
Comment:  "<!-- Notice the space between the colon & question mark -->"
Text:  "<newline>  "
Name.Tag:  "<p>"
Text:  "Hello world!"
Name.Tag:  "</p>"
Text:  "<newline>"
Comment.Preproc:  "<?php"
Text:  " "
Keyword:  "endif"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline><newline>"
Comment.Preproc:  "<?php"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword.Constant:  "true"
Punctuation:  ")"
Text:  " "
Operator:  ":"
Comment.Preproc:  "?>"
Comment:  "<!-- No space -->"
Text:  "<newline>  "
Name.Tag:  "<p>"
Text:  "Hello world!"
Name.Tag:  "</p>"
Text:  "<newline>"
Comment.Preproc:  "<?php"
Text:  " "
Keyword:  "endif"
Text:  " "
Comment.Preproc:  "?>"
Text:  "<newline><newline>"
Name.Tag:  "<p>"
Text:  "it's html here at the end, too."
Name.Tag:  "</p>"
Text:  "<newline><newline><newline>/* Attributes */<newline><newline>"
Comment.Preproc:  "<?php"
Text:  "<newline><newline>"
Name.Attribute:  "#[MyAttribute]"
Text:  "<newline>"
Name.Attribute:  "#[\\MyExample\\MyAttribute]"
Text:  "<newline>"
Name.Attribute:  "#[MyAttribute(1234)]"
Text:  "<newline>"
Name.Attribute:  "#[MyAttribute(value: 1234)]"
Text:  "<newline>"
Name.Attribute:  "#[MyAttribute(MyAttribute::VALUE)]"
Text:  "<newline>"
Name.Attribute:  "#[MyAttribute(array(\"key\" => \"value\"))]"
Text:  "<newline>"
Name.Attribute:  "#[MyAttribute(100 + 200)]"
Text:  "<newline>"
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "SetUp"
Text:  " "
Punctuation:  "{"
Text:  "<newline>   "
Name.Attribute:  "#[JsonSerialize('Setup')]"
Text:  "<newline>   "
Keyword:  "public"
Text:  " "
Keyword:  "const"
Text:  " "
Name.Constant:  "version"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'0.0.1'"
Punctuation:  ";"
Text:  "<newline><newline>   "
Name.Attribute:  "#[SetUp]"
Text:  "<newline>   "
Keyword:  "public"
Text:  " "
Keyword:  "function"
Text:  " "
Name:  "fileExists"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Preproc:  "?>"
Text:  "<newline>"
