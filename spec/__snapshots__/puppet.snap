Comment:  "# Some example code<newline>"
Text:  "<newline>"
Keyword:  "node"
Text:  " "
Literal.String.Regex:  "/www"
Literal.String.Escape:  "\\."
Literal.String.Regex:  "example"
Literal.String.Escape:  "\\."
Literal.String.Regex:  "com/"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "include"
Text:  " "
Name.Class:  "foo::bar"
Text:  "<newline><newline>  "
Name:  "file"
Text:  " "
Punctuation:  "{"
Literal.String.Double:  "\"foo.txt\""
Punctuation:  ":"
Text:  "<newline>    "
Keyword.Pseudo:  "require"
Text:  " "
Punctuation:  "+>"
Text:  " "
Name.Class:  "Thing"
Punctuation:  "::"
Name.Class:  "Package"
Punctuation:  "["
Literal.String.Double:  "\"bar-package\""
Punctuation:  "],"
Text:  "<newline>    "
Name.Property:  "contents"
Text:  " "
Punctuation:  "=>"
Text:  " "
Keyword:  "case"
Text:  " "
Name.Variable:  "$::operatingsystem"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Literal.String.Regex:  "/Linux/"
Punctuation:  ":"
Text:  " "
Name.Variable:  "$linux_contents"
Punctuation:  ","
Text:  "<newline>      "
Literal.String.Regex:  "/Windows/"
Punctuation:  ":"
Text:  " "
Name.Variable:  "$windows_module::windows_contents"
Punctuation:  ","
Text:  "<newline>      "
Keyword:  "default"
Punctuation:  ":"
Text:  " "
Keyword.Constant:  "undef"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "foo::bar"
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Name.Class:  "Array"
Punctuation:  "["
Name.Class:  "String"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Name:  "foo::bar::baz"
Punctuation:  ","
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Variable:  "$foo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>    "
Literal.String.Single:  "'bar'"
Punctuation:  ","
Text:  "<newline>    "
Literal.String.Single:  "'baz'"
Punctuation:  ","
Text:  "<newline>  "
Punctuation:  "]"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Function:  "lookup"
Punctuation:  "("
Literal.String.Single:  "'classes'"
Punctuation:  ","
Text:  " "
Punctuation:  "{"
Name.Property:  "merge"
Text:  " "
Punctuation:  "=>"
Text:  " "
Name:  "unique"
Punctuation:  "})"
Operator:  "."
Name:  "include"
Text:  "<newline><newline>"
Name.Variable:  "$resources"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "$acls"
Operator:  "."
Name:  "map"
Text:  " "
Punctuation:  "|"
Name.Variable:  "$index"
Punctuation:  ","
Text:  " "
Name.Variable:  "$acl"
Punctuation:  "|"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Variable:  "$parts"
Text:  " "
Operator:  "="
Text:  " "
Name.Variable:  "$acl"
Operator:  "."
Name.Function:  "split"
Punctuation:  "("
Literal.String.Single:  "'\\s+'"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "unless"
Text:  " "
Name.Variable:  "$parts"
Text:  " "
Operator:  "=~"
Text:  " "
Name.Class:  "Array"
Punctuation:  "["
Name.Class:  "Data"
Punctuation:  ","
Text:  " "
Literal.Number:  "4"
Punctuation:  "]"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "fail"
Punctuation:  "("
Literal.String.Double:  "\""
Name.Variable:  "${func_name}"
Literal.String.Double:  ": acl line "
Name.Variable:  "$index"
Literal.String.Double:  " does not have enough parts\""
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Name.Variable:  "$resource"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
