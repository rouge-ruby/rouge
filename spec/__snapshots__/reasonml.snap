Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "6"
Text:  " "
Comment.Single:  "// This is single line comment"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "c"
Operator:  ":"
Text:  " "
Keyword.Type:  "char"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Char:  "'A'"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* comment with link https://example and - = */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "respond_no_content"
Text:  " "
Operator:  "="
Text:  " "
Name:  "reqd"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Namespace:  "Reqd"
Punctuation:  "."
Name:  "respond_with_string"
Punctuation:  "("
Name:  "reqd"
Operator:  ","
Text:  " "
Name.Namespace:  "Response"
Punctuation:  "."
Name:  "create"
Punctuation:  "("
Name.Tag:  "`No_content"
Punctuation:  ")"
Operator:  ","
Text:  " "
Literal.String.Double:  "\"\""
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "to_meth"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "fun"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Tag:  "`GET"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Tag:  "`GET"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Tag:  "`POST"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Tag:  "`POST"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Tag:  "`HEAD"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Tag:  "`HEAD"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Tag:  "`DELETE"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Tag:  "`DELETE"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Tag:  "`PUT"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Tag:  "`PUT"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Tag:  "`OPTIONS"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Tag:  "`OPTIONS"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Tag:  "`TRACE"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Tag:  "`TRACE"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Tag:  "`CONNECT"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Tag:  "`CONNECT"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Tag:  "`Other"
Punctuation:  "("
Name:  "w"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "failwithf"
Punctuation:  "("
Literal.String.Double:  "\"%s is not supported\""
Operator:  ","
Text:  " "
Name:  "w"
Operator:  ","
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ");"
Text:  "<newline><newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "ignore"
Operator:  ":"
Text:  " "
Keyword:  "'"
Name:  "a"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Text:  " "
Operator:  "="
Text:  " "
Name:  "_"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Multiline:  "/* **** comment */"
Text:  "<newline>"
Comment.Multiline:  "/*** comment */"
Text:  "<newline>"
Comment.Multiline:  "/** docstring */"
Punctuation:  ";"
Text:  "<newline>"
Comment.Multiline:  "/* comment */"
Text:  "<newline>"
Comment.Multiline:  "/** docstring */"
Punctuation:  ";"
Text:  "<newline>"
Comment.Multiline:  "/*** comment */"
Text:  "<newline>"
Comment.Multiline:  "/**** comment */"
Text:  "<newline>"
Comment.Multiline:  "/***** comment */"
Text:  "<newline><newline>"
Comment.Multiline:  "/*** */"
Text:  "<newline>"
Comment.Multiline:  "/**** */"
Text:  "<newline><newline>"
Comment.Multiline:  "/***/"
Text:  "<newline>"
Comment.Multiline:  "/****/"
Text:  "<newline><newline>"
Comment.Multiline:  "/* (** comment *) */"
Text:  "<newline>"
Comment.Multiline:  "/* (*** comment *) */"
Text:  "<newline>"
Comment.Multiline:  "/* *(*** comment *) */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* comment **/"
Text:  "<newline>"
Comment.Multiline:  "/* comment ***/"
Text:  "<newline>"
Comment.Multiline:  "/* comment ****/"
Text:  "<newline>"
Comment.Multiline:  "/* comment *****/"
Text:  "<newline><newline>"
Comment.Single:  "// A single line comment"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "testingNotQuiteEndOfLineComments"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>  "
Literal.String.Double:  "\"Item 1\""
Text:  " "
Comment.Multiline:  "/* Comment For First Item */"
Operator:  ","
Text:  "<newline>  "
Literal.String.Double:  "\"Item 2\""
Text:  " "
Comment.Multiline:  "/* Comment For Second Item */"
Operator:  ","
Text:  "<newline>  "
Literal.String.Double:  "\"Item 3\""
Text:  " "
Comment.Multiline:  "/* Comment For Third Item */"
Operator:  ","
Text:  "<newline>  "
Literal.String.Double:  "\"Item 4\""
Text:  " "
Comment.Multiline:  "/* Comment For Fourth Item - but no semi */"
Text:  "<newline>  "
Comment.Multiline:  "/* Comment after last item in list. */"
Text:  "<newline>"
Punctuation:  "];"
Text:  " "
Comment.Multiline:  "/* Comment after list bracket */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "testingEndOfLineComments"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>  "
Literal.String.Double:  "\"Item 1\""
Operator:  ","
Text:  " "
Comment.Multiline:  "/* Comment For First Item */"
Text:  "<newline>  "
Literal.String.Double:  "\"Item 2\""
Operator:  ","
Text:  " "
Comment.Multiline:  "/* Comment For Second Item */"
Text:  "<newline>  "
Literal.String.Double:  "\"Item 3\""
Operator:  ","
Text:  " "
Comment.Multiline:  "/* Comment For Third Item */"
Text:  "<newline>  "
Literal.String.Double:  "\"Item 4\""
Text:  " "
Comment.Multiline:  "/* Comment For Fourth Item - but before semi */"
Operator:  ","
Text:  "<newline>  "
Comment.Multiline:  "/* Comment after last item in list. */"
Text:  "<newline>"
Punctuation:  "];"
Text:  " "
Comment.Multiline:  "/* Comment after list bracket */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* This time no space between bracket and comment */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "testingEndOfLineComments"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "[]"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* Comment after list bracket */"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "t"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  " "
Comment.Multiline:  "/* End of line on t */"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "t22"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Comment.Multiline:  "/* End of t22 line on type t22 = */"
Text:  "<newline>  "
Punctuation:  "("
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "variant"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Comment.Multiline:  "/* Comment above X */"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "X"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Comment.Multiline:  "/* End of line on X */"
Text:  "<newline>  "
Comment.Multiline:  "/* Comment above Y */"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Y"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ");"
Text:  " "
Comment.Multiline:  "/* End of line on Y */"
Text:  "<newline>"
Comment.Multiline:  "/* Comment on entire type def for variant */"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* not attached *above* x */"
Text:  "<newline>  "
Name:  "fieldOne"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Comment.Multiline:  "/* Attached end of line after x */"
Text:  "<newline>"
Operator.Word:  "and"
Text:  " "
Name:  "y"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* not attached *above* y */"
Text:  "<newline>  "
Name:  "fieldTwo"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  " "
Comment.Multiline:  "/* Attached end of line after y */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "result"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name.Class:  "X"
Punctuation:  "("
Literal.Number.Integer:  "3"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "X"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Comment.Multiline:  "/* Where does this comment go? */"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "tmp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "x"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "tmp"
Punctuation:  ";"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Y"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Comment.Multiline:  "/* How about this one */"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "tmp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "x"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "tmp"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "result"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name.Class:  "None"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "({"
Name:  "fieldOne"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "20"
Punctuation:  "})"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Comment.Multiline:  "/* Where does this comment go? */"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "tmp"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>    "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "tmp"
Punctuation:  ";"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "({"
Name:  "fieldOne"
Operator:  ":"
Text:  " "
Name:  "n"
Punctuation:  "})"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Comment.Multiline:  "/* How about this one */"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "tmp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "n"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "n"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "tmp"
Punctuation:  ";"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "20"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "pointWithManyKindsOfComments"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* Line before x */"
Text:  "<newline>  "
Name:  "x"
Operator:  ":"
Text:  " "
Keyword.Type:  "string"
Operator:  ","
Text:  " "
Comment.Multiline:  "/* x field */"
Text:  "<newline>  "
Comment.Multiline:  "/* Line before y */"
Text:  "<newline>  "
Name:  "y"
Operator:  ":"
Text:  " "
Keyword.Type:  "string"
Text:  " "
Comment.Multiline:  "/* y field */"
Text:  "<newline>  "
Comment.Multiline:  "/* Final row of record */"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "typeParamPointWithComments"
Punctuation:  "("
Keyword:  "'"
Name:  "a"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* Line before x */"
Text:  "<newline>  "
Name:  "x"
Operator:  ":"
Text:  " "
Keyword:  "'"
Name:  "a"
Operator:  ","
Text:  " "
Comment.Multiline:  "/* x field */"
Text:  "<newline>  "
Comment.Multiline:  "/* Line before y */"
Text:  "<newline>  "
Name:  "y"
Operator:  ":"
Text:  " "
Keyword:  "'"
Name:  "a"
Text:  " "
Comment.Multiline:  "/* y field */"
Text:  "<newline>  "
Comment.Multiline:  "/* Final row of record */"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "name_equal"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "x"
Operator:  ","
Text:  " "
Name:  "y"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "y"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "equal"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "i1"
Operator:  ","
Text:  " "
Name:  "i2"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Name:  "i1"
Operator:  "."
Name:  "contents"
Text:  " "
Operator:  "==="
Text:  " "
Name:  "i2"
Operator:  "."
Name:  "contents"
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* most unlikely first */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "equal"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "i1"
Operator:  ","
Text:  " "
Name:  "i2"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Name:  "compare"
Punctuation:  "("
Name:  "compare"
Punctuation:  "("
Literal.Number.Integer:  "0"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Operator:  ","
Text:  " "
Name:  "compare"
Punctuation:  "("
Literal.Number.Integer:  "1"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "));"
Text:  " "
Comment.Multiline:  "/* END OF LINE HERE */"
Text:  "<newline><newline>"
Keyword:  "module"
Text:  " "
Name.Class:  "Temp"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "logIt"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "str"
Operator:  ","
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "print_string"
Punctuation:  "("
Name:  "str"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "store_attributes"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arg"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "attributes_file"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"test\""
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "proc_name"
Text:  " "
Operator:  "="
Text:  " "
Name:  "attributes_file"
Text:  " "
Operator:  "++"
Text:  " "
Literal.String.Double:  "\".proc\""
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "should_write"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Comment.Multiline:  "/* only overwrite defined procedures */"
Text:  "<newline>    "
Name.Namespace:  "Temp"
Punctuation:  "."
Name:  "v"
Text:  " "
Operator:  "||"
Text:  " "
Operator:  "!"
Name.Namespace:  "Temp"
Punctuation:  "."
Name:  "v"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "should_write"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Namespace:  "Temp"
Punctuation:  "."
Name:  "logIt"
Punctuation:  "("
Name:  "proc_name"
Operator:  ","
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "run"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Namespace:  "TestUtils"
Punctuation:  "."
Name:  "printSection"
Punctuation:  "("
Literal.String.Double:  "\"Basic Structures\""
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name:  "something"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"You're in a while loop\""
Punctuation:  ");"
Text:  "<newline>  "
Name:  "print_newline"
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "to"
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_int"
Punctuation:  "("
Name:  "i"
Punctuation:  ");"
Text:  "<newline>  "
Name:  "print_newline"
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Keyword:  "downto"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Text:  "<newline>      "
Literal.String.Double:  "\"Counting in reverse direction\""
Operator:  ","
Text:  "<newline>    "
Punctuation:  ");"
Text:  "<newline>    "
Name:  "print_newline"
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  "<newline>     "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "to"
Text:  "<newline>     "
Name:  "endOfRangeMustBeSimple"
Punctuation:  "("
Name:  "expr"
Operator:  ","
Text:  " "
Name:  "soWrap"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_int"
Punctuation:  "("
Name:  "i"
Punctuation:  ");"
Text:  "<newline>  "
Name:  "print_newline"
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  "<newline>       "
Name:  "theSame"
Punctuation:  "("
Name:  "isTrue"
Operator:  ","
Text:  " "
Name:  "ofThe"
Operator:  ","
Text:  " "
Name:  "startOfRange"
Punctuation:  ")"
Text:  " "
Keyword:  "downto"
Text:  "<newline>       "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Text:  "<newline>      "
Literal.String.Double:  "\"Counting in reverse direction\""
Operator:  ","
Text:  "<newline>    "
Punctuation:  ");"
Text:  "<newline>    "
Name:  "print_newline"
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "foo"
Operator:  "^"
Text:  " "
Operator:  "^."
Name:  "bar"
Operator:  "^;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "foo"
Operator:  "."
Name:  "bar"
Operator:  "^;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "foo"
Operator:  "#"
Name:  "bar"
Operator:  "^;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "foo"
Operator:  "^."
Name:  "bar"
Operator:  "^;"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "foo"
Operator:  "^"
Punctuation:  ")"
Operator:  "#"
Name:  "bar"
Operator:  "^;"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Prefix operators:<newline> * ! followed by zero or more appropriate_operator_suffix_chars (see the<newline> * lexer).<newline> * ? or ~ followed by at least one appropriate_operator_suffix_chars.<newline> */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Punctuation:  "))"
Operator:  "."
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Name:  "foo"
Operator:  "#"
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Punctuation:  ")"
Operator:  "."
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Punctuation:  ")"
Operator:  "#"
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "?!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Text:  " "
Operator:  "?!"
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "~!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Text:  " "
Operator:  "~!"
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "~!"
Text:  " "
Operator:  "~!"
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!!"
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!!"
Name:  "foo"
Operator:  "#"
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!~"
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!~"
Name:  "foo"
Operator:  "#"
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "noParensNeeded"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Name:  "blah"
Operator:  "."
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "parensNeededAroundFirst"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "blah"
Punctuation:  ")"
Operator:  "."
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "parensNeededAroundSecond"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "blah"
Operator:  "."
Name:  "foo"
Punctuation:  ")"
Operator:  "."
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "noParensNeeded"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Name:  "blah"
Operator:  "#"
Name:  "foo"
Operator:  "#"
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "parensNeededAroundFirst"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "blah"
Punctuation:  ")"
Operator:  "#"
Name:  "foo"
Operator:  "#"
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "parensNeededAroundSecond"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "blah"
Operator:  "#"
Name:  "foo"
Punctuation:  ")"
Operator:  "#"
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "parensWithSpaceNeededAroundFirst"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Punctuation:  "("
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "blah"
Punctuation:  "))"
Operator:  "#"
Name:  "foo"
Operator:  "#"
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "parensWithSpaceNeededAroundSecond"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Punctuation:  "("
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "blah"
Operator:  "#"
Name:  "foo"
Punctuation:  "))"
Operator:  "#"
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "parensWithSpaceNeededAroundFirst"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Punctuation:  "("
Operator:  "?!"
Punctuation:  "("
Operator:  "+"
Text:  " "
Name:  "blah"
Punctuation:  "))"
Operator:  "#"
Name:  "foo"
Operator:  "#"
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "parensWithSpaceNeededAroundSecond"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Punctuation:  "("
Operator:  "?!"
Punctuation:  "("
Operator:  "+"
Text:  " "
Name:  "blah"
Operator:  "#"
Name:  "foo"
Punctuation:  "))"
Operator:  "#"
Name:  "bar"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Operator:  "."
Name:  "bar"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Operator:  "#"
Name:  "bar"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "10"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "5"
Operator:  "."
Literal.Number.Integer:  "0"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "10"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "5"
Operator:  "."
Literal.Number.Integer:  "0"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Punctuation:  "("
Name:  "x"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Name.Builtin.Pseudo:  "true"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Operator:  "#"
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Name.Tag:  "`Variant"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Name.Tag:  "`variant"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Literal.String.Char:  "'0'"
Operator:  ".."
Literal.String.Char:  "'9'"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Punctuation:  "("
Keyword:  "lazy"
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Punctuation:  "["
Operator:  "%"
Name:  "extend"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Test precedence on access sugar */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arr"
Operator:  "^"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "];"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arr"
Operator:  "^"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "];"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "str"
Operator:  "^."
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "];"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "str"
Operator:  "^."
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "];"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arr"
Operator:  "^"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arr"
Operator:  "^"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Comments */"
Text:  "<newline>"
Comment.Multiline:  "/*Below is an empty comment*/"
Text:  "<newline>"
Comment.Multiline:  "/**/"
Punctuation:  ";"
Text:  "<newline>"
Comment.Multiline:  "/**                            IF<newline> *============================================================================<newline> */"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Punctuation:  "("
Operator:  "/++"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Operator:  "+"
Punctuation:  ");"
Text:  " "
Comment.Multiline:  "/* // indicates the start of a comment, not an infix op */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "something"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "self"
Operator:  "."
Name:  "ext"
Operator:  "."
Name:  "logSuccess"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"Did tap\""
Punctuation:  ");"
Text:  "<newline>    "
Name:  "print_newline"
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "logTapSuccess"
Text:  " "
Operator:  "="
Text:  " "
Name:  "self"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "self"
Operator:  "."
Name:  "ext"
Operator:  "."
Name:  "logSuccess"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"Did tap\""
Punctuation:  ");"
Text:  "<newline>    "
Name:  "print_newline"
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "logTapSuccess"
Text:  " "
Operator:  "="
Text:  " "
Name:  "self"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "self"
Operator:  "."
Name:  "ext"
Operator:  "."
Name:  "logSuccess"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"Did tap\""
Punctuation:  ");"
Text:  "<newline>    "
Name:  "print_newline"
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Punctuation:  "("
Operator:  "!"
Name:  "data"
Punctuation:  ")"
Operator:  "."
Name:  "field"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "("
Operator:  "!"
Name:  "data"
Punctuation:  ")"
Operator:  "."
Name:  "field1"
Operator:  "."
Name:  "field2"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "("
Operator:  "!"
Name:  "data"
Operator:  "."
Name:  "field1"
Punctuation:  ")"
Operator:  "."
Name:  "field2"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "("
Operator:  "!"
Name:  "data"
Punctuation:  ")"
Operator:  "."
Name:  "field1"
Operator:  "."
Name:  "field2"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "("
Operator:  "!"
Name:  "data"
Operator:  "."
Name:  "field1"
Punctuation:  ")"
Operator:  "."
Name:  "field2"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "loop"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "appTime"
Operator:  ","
Text:  " "
Name:  "frameTime"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "hasSetup"
Operator:  "."
Name:  "contents"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "setupScene"
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "renderIntoTop"
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "hasSetup"
Operator:  "."
Name:  "contents"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline>  "
Name:  "process"
Punctuation:  "("
Name:  "appTime"
Operator:  ","
Text:  " "
Name:  "frameTime"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* These parens should be kept around the entire last if/then/else */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "something"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "somethingElse"
Punctuation:  ")"
Text:  " "
Punctuation:  "{()}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Literal.String.Double:  "\"blah\""
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* These parens should be kept around just the last if/then*/"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "something"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "somethingElse"
Punctuation:  ")"
Text:  " "
Punctuation:  "{()}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Literal.String.Double:  "\"blah\""
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Parens should be generated to wrap the entire final if then else.<newline> * To test that it's being parsed correclty, should print \"one\". */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin.Pseudo:  "true"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin.Pseudo:  "true"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"one\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"two\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Should print two */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin.Pseudo:  "true"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin.Pseudo:  "false"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"one\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"two\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Should not print */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin.Pseudo:  "false"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin.Pseudo:  "true"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"one\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"two\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Should wrap (if a > b then a else b).<newline> * printer(<newline> */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "printIfFirstArgGreater"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "true"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "result"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "printIfFirstArgGreater"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a > b\""
Punctuation:  ");"
Text:  "<newline>      "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"b >= a\""
Punctuation:  ");"
Text:  "<newline>      "
Punctuation:  "};"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "({"
Text:  "<newline>               "
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>                 "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                   "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"b < a\""
Punctuation:  ");"
Text:  "<newline>                 "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>                   "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a <= b\""
Punctuation:  ");"
Text:  "<newline>                 "
Punctuation:  "};"
Text:  "<newline>             "
Punctuation:  "})"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Text:  "<newline>      "
Literal.String.Double:  "\"That could never possibly type check\""
Operator:  ","
Text:  "<newline>    "
Punctuation:  ");"
Text:  "<newline>    "
Name:  "print_newline"
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "myRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "nestedRecord"
Operator:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "anotherNestedRecord"
Operator:  ":"
Text:  "<newline>      "
Punctuation:  "("
Name:  "instaComp"
Operator:  ","
Text:  " "
Name:  "displayRect"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Namespace:  "Graphics"
Punctuation:  "."
Name:  "cgRectIntersectsWithSlop"
Punctuation:  "("
Text:  "<newline>            "
Name:  "defaultCompositeTimerRectSlop"
Operator:  ","
Text:  "<newline>            "
Name:  "instaComp"
Operator:  "."
Name:  "relativeRect"
Operator:  ","
Text:  "<newline>            "
Name:  "displayRect"
Operator:  ","
Text:  "<newline>          "
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Class:  "IoEligible"
Punctuation:  ";"
Text:  "<newline>      "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Class:  "IoInelibleButTryComposition"
Punctuation:  ";"
Text:  "<newline>      "
Punctuation:  "}"
Operator:  ","
Text:  "<newline>  "
Punctuation:  "}"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "printIfFirstArgGreater"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a > b\""
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"b < a\""
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline>"
Comment.Multiline:  "/* Should Be Parsed As: Cleary a type error, but at least the parsing makes that clear */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "printIfFirstArgGreater"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a > b\""
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>          "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"b < a\""
Punctuation:  ");"
Text:  "<newline>        "
Punctuation:  "};"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a > b\""
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* What you probably wanted was: */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "printIfFirstArgGreater"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a > b\""
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"b < a\""
Punctuation:  ");"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Mutative if statement: Not used to evaluate to something. */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "10"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "msg"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"If there was any doubt, 10 is in fact less than 100.\""
Punctuation:  ";"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Name:  "msg"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "msg"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"All bets are off.\""
Punctuation:  ";"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Name:  "msg"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "10"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Text:  "<newline>    "
Literal.String.Double:  "\"If there was any doubt, 10 is in fact less than 100.\""
Operator:  ","
Text:  "<newline>  "
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"All bets are off.\""
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/**                            TYPE CONSTRAINTS<newline> *============================================================================<newline> */"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "10"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Comment.Multiline:  "/* let (x:int) = (10:string); */"
Text:  "<newline>"
Comment.Multiline:  "/* let (x:string) = (\"hello\":int); */"
Text:  "<newline><newline>"
Comment.Multiline:  "/**                            TUPLES<newline> *============================================================================<newline> */"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Multiline:  "/* In Reason, types look like the data they model! Tuples are no exception. */"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "pairOfInts"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "letBindingWithTypeConstraint"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Punctuation:  "("
Name:  "tupleItem"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Name:  "withTypeConstraint"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>  "
Literal.Number.Integer:  "20"
Operator:  ","
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* To make sure that tuple field annotations are annotating the entire field */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "_dummyFunc"
Text:  " "
Operator:  "="
Text:  " "
Name:  "x"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "annotatingFuncApplication"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Name:  "_dummyFunc"
Punctuation:  "("
Literal.String.Double:  "\"a\""
Punctuation:  ")"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  "<newline>  "
Name:  "_dummyFunc"
Punctuation:  "("
Literal.String.Double:  "\"a\""
Punctuation:  ")"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Pretty printer might stick the [int] at the label. */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "annotatingSingleFuncApplication"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "_dummyFunc"
Punctuation:  "("
Literal.String.Double:  "\"a\""
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* So lets try a place where it won't */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "annotatingSingleFuncApplication"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* Commenting a let binding. */"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ";"
Text:  "<newline>  "
Comment.Multiline:  "/* Commenting another let binding. */"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "200"
Punctuation:  ";"
Text:  "<newline>  "
Comment.Multiline:  "/*<newline>   * This demonstrates why named arguments cannot simply have the form (func<newline>   * arg:val) - it is indistinguishable from a type constraint.<newline>   */"
Text:  "<newline>  "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "+"
Text:  " "
Punctuation:  "("
Name:  "_dummyFunc"
Punctuation:  "("
Name:  "a"
Punctuation:  ")"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Name:  "tupleItem"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  "<newline>  "
Name:  "constrainedWithoutGrouping"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>  "
Literal.Number.Integer:  "20"
Operator:  ","
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Punctuation:  "("
Name:  "tupleItem"
Operator:  ","
Text:  " "
Name:  "withOutsideTypeConstraint"
Punctuation:  ")"
Operator:  ":"
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Keyword.Type:  "int"
Operator:  ","
Text:  "<newline>  "
Keyword.Type:  "int"
Operator:  ","
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>  "
Literal.Number.Integer:  "20"
Operator:  ","
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Trailing commas */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "trailingCommaAccepted"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "1"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "moreTrailing"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "1"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "2"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "3"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "4"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "5"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "7"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/**                        Immutable Lists<newline> * ============================================================================<newline> */"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Anatomy:        -Head-      --------- Tail---------  nil: You can't see nil */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Operator:  ":"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "1"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "2"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "3"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "4"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "5"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "6"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "7"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "8"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "9"
Punctuation:  "];"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "hd"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"appendedToHead\""
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "tl"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String.Double:  "\"listTo\""
Operator:  ","
Text:  " "
Literal.String.Double:  "\"append\""
Operator:  ","
Text:  " "
Literal.String.Double:  "\"to\""
Punctuation:  "];"
Text:  "<newline><newline>"
Comment.Multiline:  "/* To push *one* and only *one* item to the front of a list - use [hd, ...tl] */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "result"
Operator:  ":"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "("
Keyword.Type:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Name:  "hd"
Operator:  ","
Text:  " "
Operator:  "..."
Name:  "tl"
Punctuation:  "];"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Is the same as writing */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "result"
Operator:  ":"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "("
Keyword.Type:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>  "
Literal.String.Double:  "\"appendedToHead\""
Operator:  ","
Text:  "<newline>  "
Literal.String.Double:  "\"listTo\""
Operator:  ","
Text:  "<newline>  "
Literal.String.Double:  "\"append\""
Operator:  ","
Text:  "<newline>  "
Literal.String.Double:  "\"to\""
Operator:  ","
Text:  "<newline>"
Punctuation:  "];"
Text:  "<newline><newline>"
Comment.Multiline:  "/* To operate on lists, use pattern matching */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "fun"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Punctuation:  "["
Name:  "hd"
Operator:  ","
Text:  " "
Operator:  "..."
Name:  "tl"
Punctuation:  "]"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "size"
Punctuation:  "("
Name:  "tl"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Optimize for tail recursion */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "soFar"
Operator:  ","
Text:  " "
Name:  "lst"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "lst"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Punctuation:  "["
Name:  "hd"
Operator:  ","
Text:  " "
Operator:  "..."
Name:  "tl"
Punctuation:  "]"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "size"
Punctuation:  "("
Name:  "soFar"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ","
Text:  " "
Name:  "tl"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "nestedMatch"
Text:  " "
Operator:  "="
Text:  " "
Name:  "lstLst"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "lstLst"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Punctuation:  "["
Name:  "hd"
Operator:  ","
Text:  " "
Operator:  "..."
Name:  "tl"
Punctuation:  "]"
Text:  " "
Keyword:  "when"
Text:  " "
Name.Builtin.Pseudo:  "false"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Punctuation:  "["
Name:  "hd"
Operator:  ","
Text:  " "
Operator:  "..."
Name:  "tl"
Punctuation:  "]"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "tl"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Punctuation:  "["
Name:  "tlHd"
Operator:  ","
Text:  " "
Operator:  "..."
Name:  "tlTl"
Punctuation:  "]"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "nestedMatchWithWhen"
Text:  " "
Operator:  "="
Text:  " "
Name:  "lstLst"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "lstLst"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Punctuation:  "["
Name:  "hd"
Operator:  ","
Text:  " "
Operator:  "..."
Name:  "tl"
Punctuation:  "]"
Text:  " "
Keyword:  "when"
Text:  " "
Name.Builtin.Pseudo:  "false"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Punctuation:  "["
Name:  "hd"
Operator:  ","
Text:  " "
Operator:  "..."
Name:  "tl"
Punctuation:  "]"
Text:  " "
Keyword:  "when"
Text:  " "
Name.Builtin.Pseudo:  "true"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "tl"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Keyword:  "when"
Text:  " "
Name.Builtin.Pseudo:  "false"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Keyword:  "when"
Text:  " "
Name.Builtin.Pseudo:  "true"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Punctuation:  "["
Name:  "tlHd"
Operator:  ","
Text:  " "
Operator:  "..."
Name:  "tlTl"
Punctuation:  "]"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Builtin.Pseudo:  "[]"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline> * Aliasing with \"as\" during matches.<newline> */"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "mine"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "YourThing"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Comment.Multiline:  "/*<newline> * Reason parses \"as\" aliases differently than OCaml.<newline> */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name.Class:  "MyThing"
Punctuation:  "("
Literal.Number.Integer:  "20"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "YourThing"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "ppp"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Name:  "_"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "|"
Text:  " "
Name.Class:  "YourThing"
Punctuation:  "("
Name:  "_"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ppp"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Multiline:  "/*<newline> * in order to achieve the previous example in ocaml, you would have to group<newline> * as:<newline> */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name.Class:  "MyThing"
Punctuation:  "("
Literal.Number.Integer:  "20"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "YourThing"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "ppp"
Text:  "<newline>  "
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Name:  "_"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "|"
Text:  " "
Name.Class:  "YourThing"
Punctuation:  "("
Name:  "_"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ppp"
Punctuation:  ";"
Text:  "<newline>"
Comment.Multiline:  "/*<newline> * But this isn't needed in Reason because OR patterns have much lower<newline> * precedence - they should be pretty printed in the same way.<newline> */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* TODO: */"
Text:  "<newline>"
Comment.Multiline:  "/* let rec nestedMatch lstLst => match lstLst with { */"
Text:  "<newline>"
Comment.Multiline:  "/*   hd::tl: match tl with { */"
Text:  "<newline>"
Comment.Multiline:  "/*     []: 0 + 0, */"
Text:  "<newline>"
Comment.Multiline:  "/*     tlHd::tlTl: 0 + 1, */"
Text:  "<newline>"
Comment.Multiline:  "/*   }, */"
Text:  "<newline>"
Comment.Multiline:  "/*   []: 0 */"
Text:  "<newline>"
Comment.Multiline:  "/* }; */"
Text:  "<newline>"
Comment.Multiline:  "/*  */"
Text:  "<newline><newline>"
Comment.Multiline:  "/**                               ARRAYS<newline> * ============================================================================<newline> * Arrays are weird looking. Usually you want lists because they support pattern<newline> * matching - that's why they have nicer syntax - to entice you. But if you want<newline> * random access and better control over memory layout, use arrays.<newline> */"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "emptyArray"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Operator:  "||"
Punctuation:  "];"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "arrayWithOne"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Operator:  "|"
Literal.Number.Integer:  "10"
Operator:  "|"
Punctuation:  "];"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "arrayWithTwo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Operator:  "|"
Literal.Number.Integer:  "10"
Operator:  ","
Text:  " "
Literal.Number.Integer:  "10"
Operator:  "|"
Punctuation:  "];"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "secondItem"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arrayWithTwo"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "];"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Getting And Setting: Yeah, we should really change this */"
Text:  "<newline>"
Comment.Multiline:  "/* Get an array item at index 1 */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "secondItem"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arrayWithTwo"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "];"
Text:  "<newline>"
Comment.Multiline:  "/* Set an array item at index 1 */"
Text:  "<newline>"
Name:  "arrayWithTwo"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "300"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline> *                                STRINGS<newline> *  ============================================================================<newline> *  The language supports mutating strings, but that should not be depended upon.<newline> */"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "myString"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"asdf\""
Punctuation:  ";"
Text:  "<newline>"
Name:  "myString"
Operator:  "."
Punctuation:  "["
Literal.Number.Integer:  "2"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Char:  "'9'"
Punctuation:  ";"
Text:  " "
Comment.Multiline:  "/* Replacing a character: I could do without this sugar */"
Text:  "<newline><newline>"
Comment.Multiline:  "/*                           FUNCTIONS<newline> *=============================================================================<newline> */"
Text:  "<newline><newline>"
Comment.Multiline:  "/*                           TYPE ANNOTATIONS<newline> * =============================================================================<newline> */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "one"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "900"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "two"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10000"
Punctuation:  ";"
Text:  "<newline>"
Comment.Multiline:  "/* Tuple expressions can be annotated without additional paren wrapping */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "myTuple"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "one"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Name:  "two"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "myTupleType"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "myTuple"
Operator:  ":"
Text:  " "
Name:  "myTupleType"
Text:  " "
Operator:  "="
Text:  " "
Name:  "myTuple"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Anything *outside* of a tuple, must still be annotated within parens. */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "myTuple"
Operator:  ":"
Text:  " "
Name:  "myTupleType"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "one"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Name:  "two"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Now functions that accept a single argument being a tuple look familiar */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "addValues"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "a"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Name:  "b"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "addValues"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "a"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Name:  "b"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "myFunction"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "a"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Name:  "b"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "functionReturnValueType"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Punctuation:  "("
Name:  "i"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Name:  "s"
Operator:  ":"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ")"
Operator:  ":"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Name:  "x"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "curriedFormOne"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "i"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Name:  "s"
Operator:  ":"
Text:  " "
Keyword.Type:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Name:  "s"
Text:  " "
Operator:  "++"
Text:  " "
Name:  "string_of_int"
Punctuation:  "("
Name:  "i"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "curriedFormTwo"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Punctuation:  "("
Name:  "i"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Name:  "x"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Operator:  ":"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Name:  "i"
Operator:  ","
Text:  "<newline>  "
Name:  "x"
Operator:  ","
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline>"
Comment.Multiline:  "/* let nonCurriedFormTwo = fun (i:int, x:int) (:(int, int)) => (i, x); */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "curriedFormThree"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Punctuation:  "("
Name:  "i"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Punctuation:  "("
Name:  "a"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Name:  "b"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Operator:  ":"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  "))"
Text:  "<newline>    "
Operator:  ":"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Name:  "i"
Operator:  ","
Text:  "<newline>  "
Name:  "a"
Operator:  ","
Text:  "<newline>  "
Name:  "b"
Operator:  ","
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* let nonCurriedFormThree = fun (i:int, (a:int, b:int):(int, int)) (:(int, int, int)) => (i, a, b);  */"
Text:  "<newline><newline>"
Comment.Multiline:  "/** TODO: But this, however doesn't work.<newline> *  let (myCurriedFunc: int => int) a => a;<newline> *  Note: This is likely because only \"simple patterns\" are accepted as constraints<newline> *  in let bindings - that may be easy to change.<newline> */"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "myFuncType"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Operator:  ","
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "myFunc"
Operator:  ":"
Text:  " "
Name:  "myFuncType"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "funcWithTypeLocallyAbstractTypes"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Punctuation:  "("
Text:  "<newline>      "
Keyword:  "type"
Text:  " "
Name:  "atype"
Operator:  ","
Text:  "<newline>      "
Keyword:  "type"
Text:  " "
Name:  "btype"
Operator:  ","
Text:  "<newline>      "
Name:  "a"
Operator:  ","
Text:  "<newline>      "
Name:  "b"
Operator:  ","
Text:  "<newline>      "
Name:  "c"
Operator:  ":"
Text:  " "
Punctuation:  "("
Name:  "atype"
Operator:  ","
Text:  " "
Name:  "btype"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Operator:  ","
Text:  "<newline>    "
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Name:  "c"
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Checks that function types aren't unnecessary wrapped */"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Foo"
Punctuation:  "("
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Bar"
Punctuation:  "("
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Operator:  ","
Text:  " "
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Operator:  ","
Text:  " "
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "c"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Baz"
Punctuation:  "("
Text:  "<newline>      "
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Operator:  ","
Text:  "<newline>      "
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Operator:  ","
Text:  "<newline>      "
Punctuation:  "("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "c"
Operator:  ","
Text:  "<newline>    "
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Foo"
Punctuation:  "(("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Bar"
Punctuation:  "(("
Name:  "a"
Operator:  ","
Text:  " "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "d"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Operator:  ">"
Text:  " "
Operator:  "|"
Text:  " "
Name.Tag:  "`Foo"
Punctuation:  "("
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ")];"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline> * Records:<newline> *=============================================================================<newline> */"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "withThreeFields"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "name"
Operator:  ":"
Text:  " "
Keyword.Type:  "string"
Operator:  ","
Text:  "<newline>  "
Name:  "age"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  "<newline>  "
Name:  "occupation"
Operator:  ":"
Text:  " "
Keyword.Type:  "string"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "testRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "name"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"joe\""
Operator:  ","
Text:  "<newline>  "
Name:  "age"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "20"
Operator:  ","
Text:  "<newline>  "
Name:  "occupation"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"engineer\""
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "..."
Name:  "testRecord"
Operator:  ","
Text:  "<newline>  "
Name:  "name"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"joe++\""
Operator:  ","
Text:  "<newline>  "
Name:  "age"
Operator:  ":"
Text:  " "
Name:  "testRecord"
Operator:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "makeRecordBase"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "name"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"Joe\""
Operator:  ","
Text:  "<newline>  "
Name:  "age"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "30"
Operator:  ","
Text:  "<newline>  "
Name:  "occupation"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"Engineer\""
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* These parens should be evaporated. */"
Text:  "<newline>  "
Operator:  "..."
Name:  "makeRecordBase"
Name.Builtin.Pseudo:  "()"
Operator:  ","
Text:  "<newline>  "
Name:  "name"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"joe++\""
Operator:  ","
Text:  "<newline>  "
Name:  "age"
Operator:  ":"
Text:  " "
Name:  "testRecord"
Operator:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* Comments should be correctly placed before ... expression */"
Text:  "<newline>  "
Operator:  "..."
Name:  "makeRecordBase"
Name.Builtin.Pseudo:  "()"
Operator:  ","
Text:  "<newline>  "
Comment.Multiline:  "/* Comment after record extension */"
Text:  "<newline>  "
Name:  "name"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"joe++\""
Operator:  ","
Text:  "<newline>  "
Name:  "age"
Operator:  ":"
Text:  " "
Name:  "testRecord"
Operator:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* Currently, type annotations must be wrapped in parens - that's easy to improve */"
Text:  "<newline>  "
Operator:  "..."
Punctuation:  "("
Name:  "makeRecordBase"
Name.Builtin.Pseudo:  "()"
Operator:  ":"
Text:  " "
Name:  "withThreeFields"
Punctuation:  ")"
Operator:  ","
Text:  "<newline>  "
Name:  "name"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"joe++\""
Operator:  ","
Text:  "<newline>  "
Name:  "age"
Operator:  ":"
Text:  " "
Name:  "testRecord"
Operator:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* This is meaningless, sure */"
Text:  "<newline>  "
Operator:  "..."
Name:  "someArray"
Operator:  "."
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "20"
Operator:  ","
Text:  "<newline>  "
Name:  "name"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"joe++\""
Operator:  ","
Text:  "<newline>  "
Name:  "age"
Operator:  ":"
Text:  " "
Name:  "testRecord"
Operator:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "..."
Text:  "<newline>    "
Name.Namespace:  "SomeReally"
Punctuation:  "."
Name:  "longFunctionCall"
Punctuation:  "({"
Text:  "<newline>      "
Name:  "passingRecordField"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Operator:  ","
Text:  "<newline>      "
Name:  "andThisOtherRecordField"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>    "
Punctuation:  "})"
Operator:  ","
Text:  "<newline>  "
Name:  "name"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"joe++\""
Operator:  ","
Text:  "<newline>  "
Name:  "age"
Operator:  ":"
Text:  " "
Name:  "testRecord"
Operator:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "..."
Text:  "<newline>    "
Name.Namespace:  "SomeReally"
Punctuation:  "."
Name:  "longFunctionCall"
Punctuation:  "("
Text:  "<newline>      "
Name:  "withArguments"
Operator:  ","
Text:  "<newline>      "
Name:  "thatWrap"
Operator:  ":"
Text:  " "
Keyword.Type:  "bool"
Operator:  ","
Text:  "<newline>    "
Punctuation:  ")"
Operator:  ","
Text:  "<newline>  "
Name:  "name"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"joe++\""
Operator:  ","
Text:  "<newline>  "
Name:  "age"
Operator:  ":"
Text:  " "
Name:  "testRecord"
Operator:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "..."
Text:  "<newline>    "
Name.Namespace:  "SomeReally"
Punctuation:  "."
Name:  "longFunctionCall"
Punctuation:  "("
Text:  "<newline>      "
Name:  "withArg"
Operator:  ","
Text:  "<newline>      "
Punctuation:  "["
Text:  "<newline>        "
Literal.String.Double:  "\"and\""
Operator:  ","
Text:  "<newline>        "
Literal.String.Double:  "\"final\""
Operator:  ","
Text:  "<newline>        "
Literal.String.Double:  "\"list\""
Operator:  ","
Text:  "<newline>        "
Literal.String.Double:  "\"that\""
Operator:  ","
Text:  "<newline>        "
Literal.String.Double:  "\"should\""
Operator:  ","
Text:  "<newline>        "
Literal.String.Double:  "\"break\""
Operator:  ","
Text:  "<newline>      "
Punctuation:  "]"
Operator:  ","
Text:  "<newline>    "
Punctuation:  ")"
Operator:  ","
Text:  "<newline>  "
Name:  "name"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"joe++\""
Operator:  ","
Text:  "<newline>  "
Name:  "age"
Operator:  ":"
Text:  " "
Name:  "testRecord"
Operator:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Record type punning */"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "props"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "title"
Operator:  ":"
Text:  " "
Keyword.Type:  "string"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "state"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "component"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "props"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "component2"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "props"
Operator:  ","
Text:  "<newline>  "
Name:  "state"
Operator:  ","
Text:  "<newline>  "
Name:  "updater"
Operator:  ":"
Text:  " "
Keyword.Type:  "unit"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "component3"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "props"
Operator:  ":"
Text:  " "
Name.Namespace:  "M"
Punctuation:  "."
Name:  "props"
Operator:  ","
Text:  "<newline>  "
Name:  "state"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "mutableComponent"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Keyword:  "mutable"
Text:  " "
Name:  "props"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "mutabeleComponent2"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "props"
Operator:  ","
Text:  "<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "state"
Operator:  ","
Text:  "<newline>  "
Name:  "style"
Operator:  ":"
Text:  " "
Keyword.Type:  "int"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Don't pun parameterized types */"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "description"
Punctuation:  "("
Keyword:  "'"
Name:  "props"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "element"
Operator:  ":"
Text:  " "
Keyword.Type:  "string"
Operator:  ","
Text:  "<newline>  "
Name:  "tag"
Operator:  ":"
Text:  " "
Name:  "tag"
Punctuation:  "("
Keyword:  "'"
Name:  "props"
Punctuation:  ")"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Don't pun types from other modules */"
Text:  "<newline>"
Keyword:  "module"
Text:  " "
Name.Class:  "Foo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "type"
Text:  " "
Name:  "bar"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "foo"
Operator:  ":"
Text:  " "
Name.Namespace:  "Baz"
Punctuation:  "."
Name:  "foo"
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Don't pun field names that aren't \"simple\" */"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "bar"
Operator:  ":"
Text:  " "
Name.Namespace:  "Baz"
Punctuation:  "."
Name:  "bar"
Operator:  ","
Text:  "<newline>  "
Name:  "qux"
Operator:  ","
Text:  "<newline>  "
Name:  "fooo"
Operator:  ":"
Text:  " "
Name.Namespace:  "Fooo"
Punctuation:  "."
Name:  "fooo"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "moreFoo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "bar"
Operator:  ":"
Text:  " "
Name.Namespace:  "Baz"
Punctuation:  "."
Name:  "bar"
Operator:  ","
Text:  "<newline>  "
Name:  "qux"
Operator:  ","
Text:  "<newline>  "
Name:  "fooo"
Operator:  ":"
Text:  " "
Name.Namespace:  "Fooo"
Punctuation:  "."
Name:  "fooo"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* record value punning */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "props"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "title"
Operator:  ":"
Text:  " "
Literal.String.Double:  "\"hi\""
Punctuation:  "};"
Text:  "<newline>"
Comment.Multiline:  "/* no punning available for a single field. Can't tell the difference with a scope + expression */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "componentA"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "props"
Operator:  ":"
Text:  " "
Name:  "props"
Punctuation:  "};"
Text:  "<newline>"
Comment.Multiline:  "/* pun for real */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "componentB"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "props"
Operator:  ","
Text:  " "
Name:  "state"
Operator:  ":"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  "};"
Text:  "<newline>"
Comment.Multiline:  "/* pun fields with module prefix too */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name.Namespace:  "Foo"
Punctuation:  "."
Name:  "foo"
Operator:  ":"
Text:  " "
Name:  "foo"
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "bar"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name.Namespace:  "Foo"
Punctuation:  "."
Name:  "foo"
Operator:  ","
Text:  " "
Name:  "bar"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "bar"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "bar"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ","
Text:  " "
Name.Namespace:  "Foo"
Punctuation:  "."
Name:  "foo"
Punctuation:  "};"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "bar"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name.Namespace:  "Foo"
Punctuation:  "."
Name:  "foo"
Operator:  ","
Text:  " "
Name.Namespace:  "Bar"
Punctuation:  "."
Name:  "bar"
Punctuation:  "};"
Text:  "<newline><newline>"
Punctuation:  "({"
Name.Namespace:  "M"
Punctuation:  "."
Name:  "x"
Operator:  ","
Text:  " "
Name:  "y"
Punctuation:  "})"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "foo"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Punctuation:  "{"
Name:  "y"
Operator:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ","
Text:  " "
Name.Namespace:  "M"
Punctuation:  "."
Name:  "x"
Punctuation:  "}"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "2"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Requested in #566 */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "break_after_equal"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Name:  "no_break_from_here"
Punctuation:  "("
Name:  "some_call"
Punctuation:  "("
Name:  "to_here"
Punctuation:  "));"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Pexp_letexception */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "exception"
Text:  " "
Name.Class:  "E"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "raise"
Punctuation:  "("
Name.Class:  "E"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* # 1587: don't print fun keyword when printing Pexp_fun in a record expression  */"
Text:  "<newline>"
Punctuation:  "{"
Name:  "contents"
Operator:  ":"
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "(()"
Operator:  ":"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ")};"
Text:  "<newline><newline>"
Comment.Multiline:  "/* #1556: Always break nested record/obj */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "a"
Operator:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "b"
Operator:  ":"
Text:  " "
Name:  "c"
Operator:  ","
Text:  "<newline>    "
Name:  "d"
Operator:  ":"
Text:  " "
Name:  "e"
Operator:  ","
Text:  "<newline>  "
Punctuation:  "}"
Operator:  ","
Text:  "<newline>  "
Name:  "f"
Operator:  ":"
Text:  " "
Name:  "g"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "a"
Operator:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Literal.String.Double:  "\"b\""
Operator:  ":"
Text:  " "
Name:  "c"
Operator:  ","
Text:  "<newline>    "
Literal.String.Double:  "\"d\""
Operator:  ":"
Text:  " "
Name:  "e"
Operator:  ","
Text:  "<newline>  "
Punctuation:  "}"
Operator:  ","
Text:  "<newline>  "
Name:  "f"
Operator:  ":"
Text:  " "
Name:  "g"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "a"
Operator:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "pub"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "c"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "pub"
Text:  " "
Name:  "d"
Text:  " "
Operator:  "="
Text:  " "
Name:  "e"
Text:  "<newline>  "
Punctuation:  "}"
Operator:  ","
Text:  "<newline>  "
Name:  "f"
Operator:  ":"
Text:  " "
Name:  "g"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Double:  "\"a\""
Operator:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Literal.String.Double:  "\"b\""
Operator:  ":"
Text:  " "
Name:  "c"
Operator:  ","
Text:  "<newline>    "
Literal.String.Double:  "\"d\""
Operator:  ":"
Text:  " "
Name:  "e"
Operator:  ","
Text:  "<newline>  "
Punctuation:  "}"
Operator:  ","
Text:  "<newline>  "
Literal.String.Double:  "\"f\""
Operator:  ":"
Text:  " "
Name:  "g"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Double:  "\"a\""
Operator:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "b"
Operator:  ":"
Text:  " "
Name:  "c"
Operator:  ","
Text:  "<newline>    "
Name:  "d"
Operator:  ":"
Text:  " "
Name:  "e"
Operator:  ","
Text:  "<newline>  "
Punctuation:  "}"
Operator:  ","
Text:  "<newline>  "
Literal.String.Double:  "\"f\""
Operator:  ":"
Text:  " "
Name:  "g"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Double:  "\"a\""
Operator:  ":"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "pub"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Name:  "c"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "pub"
Text:  " "
Name:  "d"
Text:  " "
Operator:  "="
Text:  " "
Name:  "e"
Text:  "<newline>  "
Punctuation:  "}"
Operator:  ","
Text:  "<newline>  "
Literal.String.Double:  "\"f\""
Operator:  ":"
Text:  " "
Name:  "g"
Operator:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline> * Unnecessary parens should be removed.<newline> */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "unitLambda"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin.Pseudo:  "()"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "identifierLambda"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "underscoreLambda"
Text:  " "
Operator:  "="
Text:  " "
Name:  "_"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Builtin.Pseudo:  "()"
Punctuation:  ";"
Text:  "<newline>"
Name:  "it"
Punctuation:  "("
Literal.String.Double:  "\"should remove parens\""
Operator:  ","
Text:  " "
Name:  "a"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"did it work?\""
Punctuation:  ");"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"did it work?\""
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "});"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "("
Name:  "preserveBraces"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Name:  "inCallback"
Punctuation:  "});"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "("
Name:  "preserveBraces"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Name:  "inFirstPos"
Punctuation:  "}"
Operator:  ","
Text:  " "
Name:  "secondArg"
Punctuation:  ");"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "("
Text:  "<newline>  "
Name:  "oneArg"
Operator:  ","
Text:  "<newline>  "
Name:  "preserveBraces"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Name:  "inFirstPos"
Punctuation:  "}"
Operator:  ","
Text:  "<newline>  "
Name:  "secondArg"
Operator:  ","
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline>"
