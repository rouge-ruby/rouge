Comment.Single:  "// Single line comment"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "#Bar"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "s1"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"s1\""
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "s2"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "`HI "
Punctuation:  "${"
Name:  "s2"
Punctuation:  "}"
Literal.String.Double:  " BYE`"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "s3"
Text:  " "
Operator:  "="
Text:  " "
Name:  "j"
Literal.String.Double:  "`HI "
Punctuation:  "${"
Name:  "s2"
Punctuation:  "}"
Literal.String.Double:  " BYE`"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "f"
Text:  " "
Operator:  "="
Text:  " "
Name:  "_"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "2"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " \\"
Literal.String.Double:  "\"let\""
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "2"
Text:  "<newline>"
Keyword:  "let"
Text:  " \\"
Literal.String.Double:  "\"let\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"foo bar "
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "\""
Text:  "<newline>"
Keyword:  "let"
Text:  " \\"
Literal.String.Double:  "\"let\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Char:  "'\\''"
Text:  "<newline><newline>"
Keyword:  "module"
Text:  " "
Name.Class:  "Person"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "type"
Text:  " "
Name:  "t"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Teacher"
Text:  " "
Operator:  "|"
Text:  " "
Name.Class:  "Director"
Text:  " "
Operator:  "|"
Text:  " "
Name.Class:  "Student"
Punctuation:  "("
Keyword.Type:  "string"
Punctuation:  ")"
Text:  "<newline><newline>  "
Keyword:  "let"
Text:  " "
Name:  "greeting"
Text:  " "
Operator:  "="
Text:  " "
Name:  "person"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "switch"
Text:  " "
Name:  "person"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Teacher"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"Hey Professor!\""
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Director"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"Hello Director.\""
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Student"
Punctuation:  "("
Literal.String.Double:  "\"Richard\""
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"Still here Ricky?\""
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Student"
Punctuation:  "("
Name:  "other"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"Hey, \""
Text:  " "
Operator:  "++"
Text:  " "
Name:  "other"
Text:  " "
Operator:  "++"
Text:  " "
Literal.String.Double:  "\".\""
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "module"
Text:  " "
Name.Class:  "Button"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Decorator:  "@react.component"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "make"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "~"
Name:  "count"
Text:  ": "
Keyword.Type:  "int"
Text:  ", ~"
Name:  "onClick"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "times"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "count"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"once\""
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.String.Double:  "\"twice\""
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name:  "n"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Namespace:  "Belt"
Punctuation:  "."
Name.Namespace:  "Int"
Punctuation:  "."
Name:  "toString"
Punctuation:  "("
Name:  "n"
Punctuation:  ")"
Text:  " "
Operator:  "++"
Text:  " "
Literal.String.Double:  "\" times\""
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword:  "let"
Text:  " "
Name:  "msg"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Click me \""
Text:  " "
Operator:  "++"
Text:  " "
Name:  "times"
Text:  "<newline><newline>    "
Operator:  "<"
Name:  "button"
Text:  " "
Name:  "onClick"
Operator:  ">"
Text:  " "
Punctuation:  "{"
Name:  "msg"
Operator:  "->"
Name.Namespace:  "React"
Punctuation:  "."
Name:  "string"
Punctuation:  "}"
Text:  " "
Operator:  "</"
Name:  "button"
Operator:  ">"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/*<newline><newline>## Properties:<newline><newline>- size: The total number of items.<newline>*/"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "nodeColor"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Red"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Black"
Text:  "<newline><newline>"
Comment.Multiline:  "/*<newline>Property of a red-black tree, taken from Wikipedia:<newline>1. A node is either red or black.<newline>2. Root is black.<newline>3. Leaves are all null and considered black.<newline>4. Both children of a red node are black.<newline>5. Every path from a node to any of its descendent leaves contains the same<newline>number of black nodes.<newline>*/"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "node"
Operator:  "<"
Keyword:  "'"
Name:  "value"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "left"
Text:  ": "
Keyword.Type:  "option"
Operator:  "<"
Name:  "node"
Operator:  "<"
Keyword:  "'"
Name:  "value"
Operator:  ">>"
Text:  ",<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "right"
Text:  ": "
Keyword.Type:  "option"
Operator:  "<"
Name:  "node"
Operator:  "<"
Keyword:  "'"
Name:  "value"
Operator:  ">>"
Text:  ",<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "parent"
Text:  ": "
Keyword.Type:  "option"
Operator:  "<"
Name:  "node"
Operator:  "<"
Keyword:  "'"
Name:  "value"
Operator:  ">>"
Text:  ",<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "sum"
Text:  ": "
Keyword.Type:  "float"
Text:  ",<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "color"
Text:  " : "
Name:  "nodeColor"
Text:  ",<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "height"
Text:  ": "
Keyword.Type:  "float"
Text:  ",<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "value"
Text:  ": "
Keyword:  "'"
Name:  "value"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "t"
Operator:  "<"
Keyword:  "'"
Name:  "value"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "size"
Text:  ": "
Keyword.Type:  "int"
Text:  ",<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "root"
Text:  ": "
Keyword.Type:  "option"
Operator:  "<"
Name:  "node"
Operator:  "<"
Keyword:  "'"
Name:  "value"
Operator:  ">>"
Text:  ",<newline>  "
Name:  "compare"
Text:  ": "
Punctuation:  "("
Text:  ". "
Keyword:  "'"
Name:  "value"
Text:  ", "
Keyword:  "'"
Name:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "int"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "createNode"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "~"
Name:  "color"
Text:  ", ~"
Name:  "value"
Text:  ", ~"
Name:  "height"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Punctuation:  "{"
Name:  "left"
Text:  ":"
Name.Class:  "None"
Text:  ", "
Name:  "right"
Text:  ":"
Name.Class:  "None"
Text:  ", "
Name:  "parent"
Text:  ":"
Name.Class:  "None"
Text:  ", "
Name:  "sum"
Text:  ":"
Literal.Number.Integer:  "0"
Text:  "., "
Name:  "height"
Text:  ", "
Name:  "value"
Text:  ", "
Name:  "color"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "external"
Text:  " "
Name:  "castNotOption"
Text:  ": "
Keyword.Type:  "option"
Operator:  "<"
Keyword:  "'"
Name:  "a"
Operator:  ">"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword:  "'"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"%identity\""
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "updateSum"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "leftSum"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  "."
Name:  "left"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  ".<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "left"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "left"
Text:  "."
Name:  "sum"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "rightSum"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  "."
Name:  "right"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  ".<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "right"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "right"
Text:  "."
Name:  "sum"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Name:  "node"
Text:  "."
Name:  "sum"
Text:  " "
Operator:  "="
Text:  " "
Name:  "leftSum"
Text:  " "
Operator:  "+"
Text:  ". "
Name:  "rightSum"
Text:  " "
Operator:  "+"
Text:  ". "
Name:  "node"
Text:  "."
Name:  "height"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Update the sum for the node and parents recursively. */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "updateSumRecursive"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "updateSum"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  "."
Name:  "parent"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "()"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "parent"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Name:  "rbt"
Operator:  "->"
Name:  "updateSumRecursive"
Punctuation:  "("
Name:  "parent"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "grandParentOf"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  "."
Name:  "parent"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "None"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "ref_"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "ref_"
Text:  "."
Name:  "parent"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "isLeft"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  "."
Name:  "parent"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Constant:  "false"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "parent"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "==="
Text:  " "
Name:  "parent"
Text:  "."
Name:  "left"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "leftOrRightSet"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "~"
Name:  "node"
Text:  ", "
Name:  "x"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "isLeft"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " ? "
Name:  "x"
Text:  "."
Name:  "left"
Operator:  "="
Name:  "value"
Text:  " : "
Name:  "x"
Text:  "."
Name:  "right"
Operator:  "="
Name:  "value"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "siblingOf"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "isLeft"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "castNotOption"
Punctuation:  "("
Name:  "node"
Text:  "."
Name:  "parent"
Punctuation:  ")"
Text:  "."
Name:  "right"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "castNotOption"
Punctuation:  "("
Name:  "node"
Text:  "."
Name:  "parent"
Punctuation:  ")"
Text:  "."
Name:  "left"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "uncleOf"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "grandParentOf"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "None"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "grandParentOfNode"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "isLeft"
Punctuation:  "("
Name:  "castNotOption"
Punctuation:  "("
Name:  "node"
Text:  "."
Name:  "parent"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "grandParentOfNode"
Text:  "."
Name:  "right"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "grandParentOfNode"
Text:  "."
Name:  "left"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "findNode"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "None"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "cmp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rbt"
Text:  "."
Name:  "compare"
Punctuation:  "("
Text:  ". "
Name:  "value"
Text:  ", "
Name:  "node"
Text:  "."
Name:  "value"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "cmp"
Text:  " "
Operator:  "==="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "cmp"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "findNode"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Text:  "."
Name:  "left"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "findNode"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Text:  "."
Name:  "right"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "has"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "findNode"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "peekMinNode"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "None"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Name:  "node"
Text:  "."
Name:  "left"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " ? "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " : "
Name:  "node"
Text:  "."
Name:  "left"
Operator:  "->"
Name:  "peekMinNode"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "peekMaxNode"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "None"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Name:  "node"
Text:  "."
Name:  "right"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " ? "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " : "
Name:  "node"
Text:  "."
Name:  "right"
Operator:  "->"
Name:  "peekMaxNode"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "rotateLeft"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  "."
Name:  "parent"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "right"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  "."
Name:  "right"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "parent"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "parent"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Name:  "parent"
Operator:  "->"
Name:  "leftOrRightSet"
Punctuation:  "("
Text:  "~"
Name:  "node"
Text:  ", "
Name:  "right"
Punctuation:  ")"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  " "
Operator:  "="
Text:  " "
Name:  "right"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Name:  "node"
Text:  "."
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "right"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "right"
Text:  " "
Operator:  "="
Text:  " "
Name:  "right"
Operator:  "->"
Name:  "castNotOption"
Text:  " "
Comment.Single:  "// precondition"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "rightLeft"
Text:  " "
Operator:  "="
Text:  " "
Name:  "right"
Text:  "."
Name:  "left"
Text:  "<newline>  "
Name:  "node"
Text:  "."
Name:  "right"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rightLeft"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "rightLeft"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "rightLeft"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Name:  "rightLeft"
Text:  "."
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Name:  "right"
Text:  "."
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "parent"
Text:  "<newline>  "
Name:  "right"
Text:  "."
Name:  "left"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "updateSum"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "updateSum"
Punctuation:  "("
Name:  "right"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "rotateRight"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  "."
Name:  "parent"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "left"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  "."
Name:  "left"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "parent"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "parent"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Name:  "parent"
Operator:  "->"
Name:  "leftOrRightSet"
Punctuation:  "("
Text:  "~"
Name:  "node"
Text:  ", "
Name:  "left"
Punctuation:  ")"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  " "
Operator:  "="
Text:  " "
Name:  "left"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Name:  "node"
Text:  "."
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "left"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "left"
Text:  " "
Operator:  "="
Text:  " "
Name:  "left"
Operator:  "->"
Name:  "castNotOption"
Text:  " "
Comment.Single:  "// precondition"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "leftRight"
Text:  " "
Operator:  "="
Text:  " "
Name:  "left"
Text:  "."
Name:  "right"
Text:  "<newline>  "
Name:  "node"
Text:  "."
Name:  "left"
Text:  " "
Operator:  "="
Text:  " "
Name:  "leftRight"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "leftRight"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "leftRight"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Name:  "leftRight"
Text:  "."
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Name:  "left"
Text:  "."
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "parent"
Text:  "<newline>  "
Name:  "left"
Text:  "."
Name:  "right"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "updateSum"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "updateSum"
Punctuation:  "("
Name:  "left"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "findInsert"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Text:  ", "
Name:  "nodeToInsert"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "None"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "cmp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rbt"
Text:  "."
Name:  "compare"
Punctuation:  "("
Text:  ". "
Name:  "value"
Text:  ", "
Name:  "node"
Text:  "."
Name:  "value"
Punctuation:  ")"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name:  "cmp"
Text:  " "
Operator:  "==="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name:  "cmp"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>          "
Keyword:  "if"
Text:  " "
Name:  "node"
Text:  "."
Name:  "left"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "rbt"
Operator:  "->"
Name:  "findInsert"
Punctuation:  "("
Name:  "node"
Text:  "."
Name:  "left"
Text:  ", "
Name:  "nodeToInsert"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  "<newline>          "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "nodeToInsert"
Text:  "."
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>            "
Name:  "node"
Text:  "."
Name:  "left"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "nodeToInsert"
Punctuation:  ")"
Text:  "<newline>            "
Name.Class:  "None"
Text:  "<newline>          "
Punctuation:  "}"
Text:  "<newline>        "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>          "
Keyword:  "if"
Text:  " "
Name:  "node"
Text:  "."
Name:  "right"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "rbt"
Operator:  "->"
Name:  "findInsert"
Punctuation:  "("
Name:  "node"
Text:  "."
Name:  "right"
Text:  ", "
Name:  "nodeToInsert"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  "<newline>          "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "nodeToInsert"
Text:  "."
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>            "
Name:  "node"
Text:  "."
Name:  "right"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "nodeToInsert"
Punctuation:  ")"
Text:  "<newline>            "
Name.Class:  "None"
Text:  "<newline>          "
Punctuation:  "}"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// After adding the node, we need to operate on it to preserve the tree's"
Text:  "<newline>"
Comment.Single:  "// properties by filtering it through a series of cases. It'd be easier if"
Text:  "<newline>"
Comment.Single:  "// there's tail recursion in JavaScript, as some cases fix the node but"
Text:  "<newline>"
Comment.Single:  "// restart the cases on the node's ancestor. We'll have to use loops for now."
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "_addLoop"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "currentNode"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Single:  "// Case 1: node is root. Violates 1. Paint it black."
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "currentNode"
Punctuation:  ")"
Text:  " "
Operator:  "==="
Text:  " "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "currentNode"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Comment.Single:  "// Case 2: parent black. No properties violated. After that, parent is sure"
Text:  "<newline>  "
Comment.Single:  "// to be red."
Text:  "<newline>  "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "currentNode"
Text:  "."
Name:  "parent"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Comment.Single:  "// Case 3: if node's parent and uncle are red, they are painted black."
Text:  "<newline>  "
Comment.Single:  "// Their parent (node's grandparent) should be painted red, and the"
Text:  "<newline>  "
Comment.Single:  "// grandparent red. Note that node certainly has a grandparent, since at"
Text:  "<newline>  "
Comment.Single:  "// this point, its parent's red, which can't be the root."
Text:  "<newline><newline>  "
Comment.Single:  "// After the painting, the grandparent might violate 2 or 4."
Text:  "<newline>  "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Punctuation:  "({"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "uncle"
Text:  " "
Operator:  "="
Text:  " "
Name:  "uncleOf"
Punctuation:  "("
Name:  "currentNode"
Punctuation:  ")"
Text:  "<newline>      "
Name:  "uncle"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "&&"
Text:  " "
Punctuation:  "("
Name:  "uncle"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Red"
Text:  "<newline>    "
Punctuation:  "})"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "("
Name:  "currentNode"
Text:  "."
Name:  "parent"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>    "
Punctuation:  "("
Name:  "uncleOf"
Punctuation:  "("
Name:  "currentNode"
Punctuation:  ")"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>    "
Punctuation:  "("
Name:  "grandParentOf"
Punctuation:  "("
Name:  "currentNode"
Punctuation:  ")"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Red"
Text:  "<newline>    "
Name:  "_addLoop"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "grandParentOf"
Punctuation:  "("
Name:  "currentNode"
Punctuation:  ")"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// At this point, uncle is either black or doesn't exist."
Text:  "<newline><newline>    "
Comment.Single:  "// Case 4: parent red, uncle black, node is right child, parent is left"
Text:  "<newline>    "
Comment.Single:  "// child. Do a left rotation. Then, former parent passes through case 5."
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "currentNode"
Text:  " "
Operator:  "="
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Operator:  "!"
Name:  "isLeft"
Punctuation:  "("
Name:  "currentNode"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "isLeft"
Punctuation:  "("
Name:  "currentNode"
Text:  "."
Name:  "parent"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "rotateLeft"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "currentNode"
Text:  "."
Name:  "parent"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "<newline>        "
Name:  "currentNode"
Text:  "."
Name:  "left"
Operator:  "->"
Name:  "castNotOption"
Text:  "<newline>      "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "isLeft"
Punctuation:  "("
Name:  "currentNode"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  " "
Operator:  "!"
Name:  "isLeft"
Punctuation:  "("
Name:  "currentNode"
Text:  "."
Name:  "parent"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "rotateRight"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "currentNode"
Text:  "."
Name:  "parent"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "<newline>        "
Name:  "currentNode"
Text:  "."
Name:  "right"
Operator:  "->"
Name:  "castNotOption"
Text:  "<newline>      "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "currentNode"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline><newline>    "
Comment.Single:  "// Case 5: parent red, uncle black, node is left child, parent is left"
Text:  "<newline>    "
Comment.Single:  "// child. Right rotation. Switch parent and grandparent's color."
Text:  "<newline>    "
Punctuation:  "("
Name:  "currentNode"
Text:  "."
Name:  "parent"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>    "
Punctuation:  "("
Name:  "grandParentOf"
Punctuation:  "("
Name:  "currentNode"
Punctuation:  ")"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Red"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "isLeft"
Punctuation:  "("
Name:  "currentNode"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "rotateRight"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "grandParentOf"
Punctuation:  "("
Name:  "currentNode"
Punctuation:  ")"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "rotateLeft"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "grandParentOf"
Punctuation:  "("
Name:  "currentNode"
Punctuation:  ")"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "add"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "value"
Text:  ", ~"
Name:  "height"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Single:  "// Again, make sure to not pass a value already in the tree."
Text:  "<newline>  "
Comment.Single:  "//"
Text:  "<newline>  "
Comment.Single:  "// _Returns:_ value added."
Text:  "<newline>  "
Name:  "rbt"
Text:  "."
Name:  "size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rbt"
Text:  "."
Name:  "size"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "nodeToInsert"
Text:  " "
Operator:  "="
Text:  " "
Name:  "createNode"
Punctuation:  "("
Text:  "~"
Name:  "value"
Text:  ", ~"
Name:  "color"
Operator:  "="
Name.Class:  "Red"
Text:  ", ~"
Name:  "height"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "inserted"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "nodeToInsert"
Punctuation:  ")"
Text:  "<newline>      "
Keyword.Constant:  "true"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "foundNode"
Text:  " "
Operator:  "="
Text:  " "
Name:  "findInsert"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  ", "
Name:  "nodeToInsert"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  "<newline>      "
Name:  "foundNode"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "inserted"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "rbt"
Operator:  "->"
Name:  "updateSumRecursive"
Punctuation:  "("
Name:  "nodeToInsert"
Punctuation:  ")"
Text:  "<newline><newline>    "
Name:  "_addLoop"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "nodeToInsert"
Punctuation:  ")"
Text:  "<newline>    "
Name.Class:  "Some"
Punctuation:  "("
Name:  "nodeToInsert"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Class:  "None"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline><newline>"
Comment.Single:  "// To simplify removal cases, we can notice this:"
Text:  "<newline>"
Comment.Single:  "// 1. Node has no child."
Text:  "<newline>"
Comment.Single:  "// 2. Node has two children. Select the smallest child on the right branch"
Text:  "<newline>"
Comment.Single:  "// (leftmost) and copy its value into the node to delete. This replacement node"
Text:  "<newline>"
Comment.Single:  "// certainly has less than two children or it wouldn't be the smallest. Then"
Text:  "<newline>"
Comment.Single:  "// delete this replacement node."
Text:  "<newline>"
Comment.Single:  "// 3. Node has one child."
Text:  "<newline>"
Comment.Single:  "// They all come down to removing a node with maximum one child."
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "removeNode"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "nodeToRemove"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "node"
Text:  "."
Name:  "left"
Text:  ", "
Name:  "node"
Text:  "."
Name:  "right"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Punctuation:  "("
Name.Class:  "Some"
Punctuation:  "("
Name:  "_"
Punctuation:  ")"
Text:  ", "
Name.Class:  "Some"
Punctuation:  "("
Name:  "_"
Punctuation:  "))"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "successor"
Text:  " "
Operator:  "="
Text:  " "
Name:  "peekMinNode"
Punctuation:  "("
Name:  "node"
Text:  "."
Name:  "right"
Punctuation:  ")"
Operator:  "->"
Name:  "castNotOption"
Text:  "<newline>      "
Name:  "node"
Text:  "."
Name:  "value"
Text:  " "
Operator:  "="
Text:  " "
Name:  "successor"
Text:  "."
Name:  "value"
Text:  "<newline>      "
Name:  "node"
Text:  "."
Name:  "height"
Text:  " "
Operator:  "="
Text:  " "
Name:  "successor"
Text:  "."
Name:  "height"
Text:  "<newline>      "
Name:  "successor"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "node"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Comment.Single:  "// At this point, the node to remove has only one child."
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "successor"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "nodeToRemove"
Text:  "."
Name:  "left"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "nodeToRemove"
Text:  "."
Name:  "right"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name:  "left"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "left"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Punctuation:  "("
Name:  "successor"
Text:  ", "
Name:  "isLeaf"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "successor"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "leaf"
Text:  " "
Operator:  "="
Text:  " "
Name:  "createNode"
Punctuation:  "("
Text:  "~"
Name:  "value"
Operator:  "=%"
Name:  "bs"
Text:  "."
Name:  "raw"
Punctuation:  "("
Literal.String.Double:  "\"0\""
Punctuation:  ")"
Text:  ", ~"
Name:  "color"
Operator:  "="
Name.Class:  "Black"
Text:  ", ~"
Name:  "height"
Operator:  "="
Literal.Number.Integer:  "0"
Text:  "."
Punctuation:  ")"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "isLeaf"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  ". "
Name:  "x"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "==="
Text:  " "
Name:  "leaf"
Punctuation:  ";"
Text:  "<newline>      "
Punctuation:  "("
Name:  "leaf"
Text:  ", "
Name:  "isLeaf"
Punctuation:  ")"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Punctuation:  "("
Name:  "successor"
Text:  ", "
Punctuation:  "("
Text:  ". "
Name:  "_"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Constant:  "false"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "nodeParent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "nodeToRemove"
Text:  "."
Name:  "parent"
Text:  "<newline>  "
Name:  "successor"
Text:  "."
Name:  "parent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "nodeParent"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "nodeParent"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "()"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "parent"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Name:  "parent"
Operator:  "->"
Name:  "leftOrRightSet"
Punctuation:  "("
Text:  "~"
Name:  "node"
Operator:  "="
Name:  "nodeToRemove"
Text:  ", "
Name.Class:  "Some"
Punctuation:  "("
Name:  "successor"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Name:  "rbt"
Operator:  "->"
Name:  "updateSumRecursive"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  "<newline><newline>  "
Comment.Single:  "// We're done if node's red. If it's black and its child that took its place"
Text:  "<newline>  "
Comment.Single:  "// is red, change it to black. If both are black, we do cases checking like"
Text:  "<newline>  "
Comment.Single:  "// in insert."
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "nodeToRemove"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "successor"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Red"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "successor"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name:  "successor"
Text:  "."
Name:  "parent"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "break"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "ref"
Punctuation:  "("
Keyword.Constant:  "false"
Punctuation:  ")"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "successorRef"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "ref"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  "<newline>      "
Keyword:  "while"
Text:  " "
Operator:  "!"
Name:  "break"
Text:  "."
Name:  "contents"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "let"
Text:  " "
Name:  "successor"
Text:  " "
Operator:  "="
Text:  " "
Name:  "successorRef"
Text:  "."
Name:  "contents"
Text:  "<newline>        "
Comment.Single:  "// Case 1: node is root. Done."
Text:  "<newline>        "
Keyword:  "switch"
Text:  " "
Name:  "successor"
Text:  "."
Name:  "parent"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  "<newline>          "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  "<newline>          "
Name:  "break"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "successorParent"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>          "
Comment.Single:  "// Case 2: sibling red. Flip color of P and S. Left rotate P."
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Name:  "sibling"
Text:  " "
Operator:  "="
Text:  " "
Name:  "siblingOf"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  "<newline>          "
Keyword:  "if"
Text:  " "
Name:  "sibling"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "&&"
Text:  " "
Punctuation:  "("
Name:  "sibling"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Red"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Name:  "successorParent"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Red"
Text:  "<newline>            "
Punctuation:  "("
Name:  "sibling"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>            "
Keyword:  "if"
Text:  " "
Name:  "isLeft"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>              "
Name:  "rotateLeft"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "successorParent"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>              "
Name:  "rotateRight"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "successorParent"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>          "
Punctuation:  "}"
Text:  "<newline><newline>          "
Comment.Single:  "// Case 3: parent, sibling and sibling children all black. Paint"
Text:  "<newline>          "
Comment.Single:  "// sibling red. Rebalance parent."
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Name:  "sibling"
Text:  " "
Operator:  "="
Text:  " "
Name:  "siblingOf"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  "<newline>          "
Keyword:  "let"
Text:  " "
Name:  "siblingNN"
Text:  " "
Operator:  "="
Text:  " "
Name:  "sibling"
Operator:  "->"
Name:  "castNotOption"
Text:  "<newline>          "
Keyword:  "if"
Text:  "<newline>            "
Name:  "successorParent"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Text:  " "
Operator:  "&&"
Text:  "<newline>            "
Punctuation:  "("
Text:  " "
Name:  "sibling"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "||"
Text:  "<newline>              "
Punctuation:  "("
Text:  " "
Name:  "siblingNN"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Text:  " "
Operator:  "&&"
Text:  "<newline>                "
Punctuation:  "("
Text:  " "
Name:  "siblingNN"
Text:  "."
Name:  "left"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "||"
Text:  "<newline>                  "
Punctuation:  "("
Name:  "siblingNN"
Text:  "."
Name:  "left"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Text:  " "
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  "<newline>                "
Punctuation:  "("
Text:  " "
Name:  "siblingNN"
Text:  "."
Name:  "right"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "||"
Text:  "<newline>                  "
Punctuation:  "("
Name:  "siblingNN"
Text:  "."
Name:  "right"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "if"
Text:  " "
Name:  "sibling"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  " "
Punctuation:  "{"
Text:  "<newline>              "
Name:  "siblingNN"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Red"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>            "
Name:  "successorRef"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "="
Text:  " "
Name:  "successorParent"
Text:  "<newline>            "
Comment.Single:  "// continue"
Text:  "<newline>          "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  "<newline>            "
Comment.Single:  "// Case 4: sibling and sibling children black. Node parent red. Swap"
Text:  "<newline>            "
Comment.Single:  "// color of sibling and node parent."
Text:  "<newline>            "
Name:  "successorParent"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Red"
Text:  " "
Operator:  "&&"
Text:  "<newline>            "
Punctuation:  "("
Text:  " "
Name:  "sibling"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "||"
Text:  "<newline>              "
Punctuation:  "("
Text:  " "
Name:  "siblingNN"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Text:  " "
Operator:  "&&"
Text:  "<newline>              "
Punctuation:  "("
Text:  " "
Name:  "siblingNN"
Text:  "."
Name:  "left"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "||"
Text:  "<newline>                "
Punctuation:  "("
Name:  "siblingNN"
Text:  "."
Name:  "left"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  "<newline>              "
Punctuation:  "("
Text:  " "
Name:  "siblingNN"
Text:  "."
Name:  "right"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "||"
Text:  "<newline>                "
Punctuation:  "("
Name:  "siblingNN"
Text:  "."
Name:  "right"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Punctuation:  ")))"
Text:  "<newline>             "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "if"
Text:  " "
Name:  "sibling"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  " "
Punctuation:  "{"
Text:  "<newline>              "
Name:  "siblingNN"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Red"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>            "
Name:  "successorParent"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>            "
Name:  "break"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>          "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  "<newline>            "
Comment.Single:  "// Case 5: sibling black, sibling left child red, right child black,"
Text:  "<newline>            "
Comment.Single:  "// node is left child. Rotate right sibling. Swap color of sibling and"
Text:  "<newline>            "
Comment.Single:  "// its new parent."
Text:  "<newline>            "
Name:  "sibling"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "&&"
Text:  " "
Punctuation:  "("
Name:  "sibling"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>             "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "let"
Text:  " "
Name:  "sibling"
Text:  " "
Operator:  "="
Text:  " "
Name:  "sibling"
Operator:  "->"
Name:  "castNotOption"
Text:  "<newline>            "
Keyword:  "if"
Text:  "<newline>              "
Name:  "isLeft"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  "<newline>              "
Punctuation:  "("
Name:  "sibling"
Text:  "."
Name:  "right"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "||"
Text:  " "
Punctuation:  "("
Name:  "sibling"
Text:  "."
Name:  "right"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  "<newline>              "
Name:  "sibling"
Text:  "."
Name:  "left"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "&&"
Text:  "<newline>              "
Punctuation:  "("
Name:  "sibling"
Text:  "."
Name:  "left"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Red"
Text:  " "
Punctuation:  "{"
Text:  "<newline>              "
Name:  "sibling"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Red"
Text:  "<newline>              "
Punctuation:  "("
Name:  "sibling"
Text:  "."
Name:  "left"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>              "
Name:  "rotateRight"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "sibling"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  "<newline>              "
Operator:  "!"
Name:  "isLeft"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  "<newline>              "
Punctuation:  "("
Name:  "sibling"
Text:  "."
Name:  "left"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "||"
Text:  " "
Punctuation:  "("
Name:  "sibling"
Text:  "."
Name:  "left"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Black"
Punctuation:  ")"
Text:  " "
Operator:  "&&"
Text:  "<newline>              "
Name:  "sibling"
Text:  "."
Name:  "right"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "&&"
Text:  "<newline>              "
Punctuation:  "("
Name:  "sibling"
Text:  "."
Name:  "right"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Red"
Text:  "<newline>               "
Punctuation:  "{"
Text:  "<newline>              "
Name:  "sibling"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Red"
Text:  "<newline>              "
Punctuation:  "("
Name:  "sibling"
Text:  "."
Name:  "right"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>              "
Name:  "rotateLeft"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "sibling"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>            "
Name:  "break"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>          "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Comment.Single:  "// Case 6: sibling black, sibling right child red, node is left child."
Text:  "<newline>            "
Comment.Single:  "// Rotate left node parent. Swap color of parent and sibling. Paint"
Text:  "<newline>            "
Comment.Single:  "// sibling right child black."
Text:  "<newline>            "
Keyword:  "let"
Text:  " "
Name:  "sibling"
Text:  " "
Operator:  "="
Text:  " "
Name:  "siblingOf"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  "<newline>            "
Keyword:  "let"
Text:  " "
Name:  "sibling"
Text:  " "
Operator:  "="
Text:  " "
Name:  "sibling"
Operator:  "->"
Name:  "castNotOption"
Text:  "<newline>            "
Name:  "sibling"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name:  "successorParent"
Text:  "."
Name:  "color"
Text:  "<newline>            "
Keyword:  "if"
Text:  " "
Name:  "isLeft"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>              "
Punctuation:  "("
Name:  "sibling"
Text:  "."
Name:  "right"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>              "
Name:  "rotateRight"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "successorParent"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>              "
Punctuation:  "("
Name:  "sibling"
Text:  "."
Name:  "left"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  "."
Name:  "color"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Black"
Text:  "<newline>              "
Name:  "rotateLeft"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "successorParent"
Punctuation:  ")"
Text:  "<newline>            "
Punctuation:  "}"
Text:  "<newline>          "
Punctuation:  "}"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Comment.Single:  "// Don't forget to detatch the artificially created leaf."
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "isLeaf"
Punctuation:  "("
Text:  ". "
Name:  "successor"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "successor"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "None"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Keyword:  "switch"
Text:  " "
Name:  "successor"
Text:  "."
Name:  "parent"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "()"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "parent"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Name:  "parent"
Operator:  "->"
Name:  "leftOrRightSet"
Punctuation:  "("
Text:  "~"
Name:  "node"
Operator:  "="
Name:  "successor"
Text:  ", "
Name.Class:  "None"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "remove"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "findNode"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Name:  "rbt"
Operator:  "->"
Name:  "removeNode"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>      "
Name:  "rbt"
Text:  "."
Name:  "size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rbt"
Text:  "."
Name:  "size"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>      "
Keyword.Constant:  "true"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Keyword.Constant:  "false"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "findNodeThroughCallback"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Text:  ", "
Name:  "cb"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "None"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "cmp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "cb"
Punctuation:  "("
Text:  ". "
Name:  "node"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "cmp"
Text:  " "
Operator:  "==="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "cmp"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "findNodeThroughCallback"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Text:  "."
Name:  "left"
Text:  ", "
Name:  "cb"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "findNodeThroughCallback"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Text:  "."
Name:  "right"
Text:  ", "
Name:  "cb"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "removeThroughCallback"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "cb"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "findNodeThroughCallback"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  ", "
Name:  "cb"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Name:  "rbt"
Operator:  "->"
Name:  "removeNode"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>      "
Name:  "rbt"
Text:  "."
Name:  "size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rbt"
Text:  "."
Name:  "size"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>      "
Keyword.Constant:  "true"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Keyword.Constant:  "false"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "make"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "~"
Name:  "compare"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Name:  "size"
Text:  ": "
Literal.Number.Integer:  "0"
Text:  ", "
Name:  "root"
Text:  ": "
Name.Class:  "None"
Text:  ", "
Name:  "compare"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "makeWith"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Type:  "array"
Text:  ", ~"
Name:  "compare"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "rbt"
Text:  " "
Operator:  "="
Text:  " "
Name:  "make"
Punctuation:  "("
Text:  "~"
Name:  "compare"
Punctuation:  ")"
Text:  "<newline>  "
Keyword.Type:  "array"
Operator:  "->"
Name.Namespace:  "Js"
Punctuation:  "."
Name.Namespace:  "Array2"
Punctuation:  "."
Name:  "forEach"
Punctuation:  "((("
Name:  "value"
Text:  ", "
Name:  "height"
Punctuation:  "))"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "add"
Punctuation:  "("
Name:  "rbt"
Text:  ","
Name:  "value"
Text:  ", ~"
Name:  "height"
Punctuation:  ")"
Operator:  "->"
Name:  "ignore"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "rbt"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// sum of the heights of the elements in [lhs ... rhs]"
Text:  "<newline>"
Comment.Single:  "// both lhs and rhs are optional"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "heightOfInterval"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "node"
Text:  ", "
Name:  "lhs"
Text:  ", "
Name:  "rhs"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  ".<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "n"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Comment.Single:  "//Js.log4(\"heightOfInterval n:\", n.value, lhs, rhs)"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "lhs"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "rhs"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "None"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "n"
Text:  "."
Name:  "sum"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "lhs"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "rbt"
Text:  "."
Name:  "compare"
Punctuation:  "("
Text:  ". "
Name:  "n"
Text:  "."
Name:  "value"
Text:  ", "
Name:  "lhs"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Comment.Single:  "// to the lhs of the interval"
Text:  "<newline>      "
Name:  "rbt"
Operator:  "->"
Name:  "heightOfInterval"
Punctuation:  "("
Name:  "n"
Text:  "."
Name:  "right"
Text:  ", "
Name:  "lhs"
Text:  ", "
Name:  "rhs"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "rhs"
Text:  " "
Operator:  "!=="
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "rbt"
Text:  "."
Name:  "compare"
Punctuation:  "("
Text:  ". "
Name:  "n"
Text:  "."
Name:  "value"
Text:  ", "
Name:  "rhs"
Operator:  "->"
Name:  "castNotOption"
Punctuation:  ")"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Comment.Single:  "// to the rhs of the interval"
Text:  "<newline>      "
Name:  "rbt"
Operator:  "->"
Name:  "heightOfInterval"
Punctuation:  "("
Name:  "n"
Text:  "."
Name:  "left"
Text:  ", "
Name:  "lhs"
Text:  ", "
Name:  "rhs"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Comment.Single:  "// in the interval"
Text:  "<newline>      "
Name:  "n"
Text:  "."
Name:  "height"
Text:  " "
Operator:  "+"
Text:  ".<newline>      "
Name:  "rbt"
Operator:  "->"
Name:  "heightOfInterval"
Punctuation:  "("
Name:  "n"
Text:  "."
Name:  "left"
Text:  ", "
Name:  "lhs"
Text:  ", "
Name.Class:  "None"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  ".<newline>      "
Name:  "rbt"
Operator:  "->"
Name:  "heightOfInterval"
Punctuation:  "("
Name:  "n"
Text:  "."
Name:  "right"
Text:  ", "
Name.Class:  "None"
Text:  ", "
Name:  "rhs"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "heightOfInterval"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "lhs"
Text:  ", "
Name:  "rhs"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Single:  "//Js.log(\"-----------\")"
Text:  "<newline>  "
Name:  "heightOfInterval"
Punctuation:  "("
Name:  "rbt"
Text:  ", "
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  ", "
Name:  "lhs"
Text:  ", "
Name:  "rhs"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// Return a node at y such that y <= top < y + node.height"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "firstVisibleNode"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "node"
Text:  ", "
Name:  "top"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "None"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Comment.Single:  "//Js.log4(\"firstVisibleNode\", node.value, \"top:\", top)"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "node"
Text:  "."
Name:  "sum"
Text:  " "
Operator:  "<="
Text:  " "
Name:  "top"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// no node is visible"
Text:  "<newline>    "
Name.Class:  "None"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "nodeHeight"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  "."
Name:  "height"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "sumLeft"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  "."
Name:  "left"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "."
Literal.Number.Integer:  "0"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "left"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "left"
Text:  "."
Name:  "sum"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name:  "sumLeft"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "top"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "firstVisibleNode"
Punctuation:  "("
Name:  "node"
Text:  "."
Name:  "left"
Text:  ", "
Name:  "top"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "sumLeft"
Text:  " "
Operator:  "+"
Text:  ". "
Name:  "nodeHeight"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "top"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Comment.Single:  "// found"
Text:  "<newline>        "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "let"
Text:  " "
Name:  "offset"
Text:  " "
Operator:  "="
Text:  " "
Name:  "sumLeft"
Text:  " "
Operator:  "+"
Text:  ". "
Name:  "nodeHeight"
Text:  "<newline>        "
Name:  "firstVisibleNode"
Punctuation:  "("
Name:  "node"
Text:  "."
Name:  "right"
Text:  ", "
Name:  "top"
Text:  " "
Operator:  "-"
Text:  ". "
Name:  "offset"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "lastVisibleNode"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "node"
Text:  ", "
Name:  "top"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "firstVisibleNode"
Punctuation:  "("
Name:  "node"
Text:  ", "
Name:  "top"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Name:  "node"
Operator:  "->"
Name:  "peekMaxNode"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name:  "first"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "first"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// Find the value of the first visible node starting from top"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "firstVisibleValue"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", ~"
Name:  "top"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "firstVisibleNode"
Punctuation:  "("
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  ", "
Name:  "top"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "None"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Text:  "."
Name:  "value"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "leftmost"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  "."
Name:  "left"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "node"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "node"
Operator:  "->"
Name:  "leftmost"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "firstRightParent"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  "."
Name:  "parent"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "None"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "parent"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Name:  "isLeft"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " ? "
Name.Class:  "Some"
Punctuation:  "("
Name:  "parent"
Punctuation:  ")"
Text:  " : "
Name:  "parent"
Operator:  "->"
Name:  "firstRightParent"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "nextNode"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  "."
Name:  "right"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Name:  "node"
Operator:  "->"
Name:  "firstRightParent"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "right"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Name.Class:  "Some"
Punctuation:  "("
Name:  "right"
Operator:  "->"
Name:  "leftmost"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "sumLeftSpine"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "node"
Text:  ", ~"
Name:  "fromRightChild"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "leftSpine"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  "."
Name:  "left"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "node"
Text:  "."
Name:  "height"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "left"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "fromRightChild"
Text:  " ? "
Name:  "node"
Text:  "."
Name:  "height"
Text:  " "
Operator:  "+"
Text:  ". "
Name:  "left"
Text:  "."
Name:  "sum"
Text:  " : "
Literal.Number.Integer:  "0"
Text:  "."
Literal.Number.Integer:  "0"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  "."
Name:  "parent"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Name:  "leftSpine"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "parent"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Name:  "leftSpine"
Text:  " "
Operator:  "+"
Text:  ". "
Name:  "parent"
Operator:  "->"
Name:  "sumLeftSpine"
Punctuation:  "("
Text:  "~"
Name:  "fromRightChild"
Text:  " "
Operator:  "="
Text:  " "
Name:  "parent"
Text:  "."
Name:  "right"
Text:  " "
Operator:  "==="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "getY"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Name:  "node"
Operator:  "->"
Name:  "sumLeftSpine"
Punctuation:  "("
Text:  "~"
Name:  "fromRightChild"
Operator:  "="
Keyword.Constant:  "true"
Punctuation:  ")"
Text:  " "
Operator:  "-"
Text:  ". "
Name:  "node"
Text:  "."
Name:  "height"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "iterate"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "~"
Name:  "inclusive"
Text:  ", "
Name:  "firstNode"
Text:  ", "
Name:  "lastNode"
Text:  ", ~"
Name:  "callback"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "firstNode"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "()"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name:  "inclusive"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "callback"
Punctuation:  "("
Text:  ". "
Name:  "node"
Punctuation:  ")"
Text:  " "
Punctuation:  "}"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name:  "firstNode"
Text:  " "
Operator:  "!=="
Text:  " "
Name:  "lastNode"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Operator:  "!"
Name:  "inclusive"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "callback"
Text:  " "
Punctuation:  "("
Text:  "."
Name:  "node"
Punctuation:  ")"
Text:  " "
Punctuation:  "}"
Text:  "<newline>        "
Name:  "iterate"
Punctuation:  "("
Text:  "~"
Name:  "inclusive"
Text:  ", "
Name:  "node"
Operator:  "->"
Name:  "nextNode"
Text:  ", "
Name:  "lastNode"
Text:  ", ~"
Name:  "callback"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "iterateWithY"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Text:  "~"
Name:  "y"
Operator:  "="
Text:  "?, ~"
Name:  "inclusive"
Text:  ", "
Name:  "firstNode"
Text:  ", "
Name:  "lastNode"
Text:  ", ~"
Name:  "callback"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "firstNode"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "()"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Keyword:  "let"
Text:  " "
Name:  "y"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "y"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "node"
Operator:  "->"
Name:  "getY"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "y"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "y"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name:  "inclusive"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "callback"
Punctuation:  "("
Text:  ". "
Name:  "node"
Text:  ", "
Name:  "y"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name:  "firstNode"
Text:  " "
Operator:  "!=="
Text:  " "
Name:  "lastNode"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Operator:  "!"
Name:  "inclusive"
Text:  " "
Punctuation:  "{"
Text:  "<newline>          "
Name:  "callback"
Text:  " "
Punctuation:  "("
Text:  "."
Name:  "node"
Text:  ", "
Name:  "y"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>        "
Name:  "iterateWithY"
Punctuation:  "("
Text:  "~"
Name:  "y"
Operator:  "="
Name:  "y"
Operator:  "+"
Text:  "."
Name:  "node"
Text:  "."
Name:  "height"
Text:  ", ~"
Name:  "inclusive"
Text:  ", "
Name:  "node"
Operator:  "->"
Name:  "nextNode"
Text:  ", "
Name:  "lastNode"
Text:  ", ~"
Name:  "callback"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "updateSum"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "node"
Text:  ", ~"
Name:  "delta"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword:  "switch"
Text:  " "
Name:  "node"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "()"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Name:  "node"
Text:  "."
Name:  "sum"
Text:  " "
Operator:  "="
Text:  " "
Name:  "node"
Text:  "."
Name:  "sum"
Text:  " "
Operator:  "+"
Text:  ". "
Name:  "delta"
Text:  "<newline>    "
Name:  "node"
Text:  "."
Name:  "parent"
Operator:  "->"
Name:  "updateSum"
Punctuation:  "("
Text:  "~"
Name:  "delta"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "updateHeight"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "node"
Text:  ", ~"
Name:  "height"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "delta"
Text:  " "
Operator:  "="
Text:  " "
Name:  "height"
Text:  " "
Operator:  "-"
Text:  ". "
Name:  "node"
Text:  "."
Name:  "height"
Text:  "<newline>  "
Name:  "node"
Text:  "."
Name:  "height"
Text:  " "
Operator:  "="
Text:  " "
Name:  "height"
Text:  "<newline>  "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Operator:  "->"
Name:  "updateSum"
Punctuation:  "("
Text:  "~"
Name:  "delta"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "oldNewVisible"
Operator:  "<"
Keyword:  "'"
Name:  "value"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "old"
Text:  ": "
Keyword.Type:  "array"
Operator:  "<"
Keyword:  "'"
Name:  "value"
Operator:  ">"
Text:  ",<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "new"
Text:  ": "
Keyword.Type:  "array"
Operator:  "<"
Keyword:  "'"
Name:  "value"
Operator:  ">"
Text:  ",<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "getAnchorDelta"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "rbt"
Text:  ", ~"
Name:  "anchor"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "anchor"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "."
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "(("
Name:  "value"
Text:  ", "
Name:  "y"
Punctuation:  "))"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Keyword:  "switch"
Text:  " "
Name:  "rbt"
Operator:  "->"
Name:  "findNode"
Punctuation:  "("
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  ", "
Name:  "value"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Name:  "node"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "y"
Text:  " "
Operator:  "-"
Text:  ". "
Name:  "node"
Operator:  "->"
Name:  "getY"
Text:  "<newline>        "
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "."
Literal.Number.Integer:  "0"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "onChangedVisible"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Punctuation:  "("
Text:  "<newline>      ~"
Name:  "anchor"
Operator:  "="
Name.Class:  "None"
Text:  ",<newline>      "
Name:  "rbt"
Text:  ",<newline>      ~"
Name:  "oldNewVisible"
Text:  ",<newline>      ~"
Name:  "top"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "top_"
Text:  ",<newline>      ~"
Name:  "bottom"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "bottom_"
Text:  ",<newline>      ~"
Name:  "appear"
Text:  ",<newline>      ~"
Name:  "remained"
Text:  ",<newline>      ~"
Name:  "disappear"
Text:  ",<newline>    "
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline> "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "old"
Text:  " "
Operator:  "="
Text:  " "
Name:  "oldNewVisible"
Text:  "."
Name:  "new"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "new"
Text:  " "
Operator:  "="
Text:  " "
Name:  "oldNewVisible"
Text:  "."
Name:  "old"
Text:  "<newline>  "
Comment.Single:  "// empty new"
Text:  "<newline>  "
Name:  "new"
Operator:  "->"
Name.Namespace:  "Js"
Punctuation:  "."
Name.Namespace:  "Array2"
Punctuation:  "."
Name:  "removeCountInPlace"
Punctuation:  "("
Text:  "~"
Name:  "pos"
Operator:  "="
Literal.Number.Integer:  "0"
Text:  ", ~"
Name:  "count"
Operator:  "="
Name:  "new"
Operator:  "->"
Name.Namespace:  "Js"
Punctuation:  "."
Name.Namespace:  "Array2"
Punctuation:  "."
Name:  "length"
Punctuation:  ")"
Operator:  "->"
Name:  "ignore"
Text:  "<newline>  "
Name:  "oldNewVisible"
Text:  "."
Name:  "old"
Text:  " "
Operator:  "="
Text:  " "
Name:  "old"
Text:  "<newline>  "
Name:  "oldNewVisible"
Text:  "."
Name:  "new"
Text:  " "
Operator:  "="
Text:  " "
Name:  "new"
Text:  "<newline><newline>  "
Keyword:  "let"
Text:  " "
Name:  "anchorDelta"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rbt"
Operator:  "->"
Name:  "getAnchorDelta"
Punctuation:  "("
Text:  "~"
Name:  "anchor"
Punctuation:  ")"
Text:  "<newline>  "
Comment.Single:  "//Js.log2(\"anchorDelta\", anchorDelta)"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "top"
Text:  " "
Operator:  "="
Text:  " "
Name:  "top_"
Text:  " "
Operator:  "-"
Text:  ". "
Name:  "anchorDelta"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "top"
Text:  " "
Operator:  "="
Text:  " "
Name:  "top"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "."
Literal.Number.Integer:  "0"
Text:  " ? "
Literal.Number.Integer:  "0"
Text:  "."
Literal.Number.Integer:  "0"
Text:  " : "
Name:  "top"
Text:  " "
Comment.Single:  "// anchoring can make top negative"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "bottom"
Text:  " "
Operator:  "="
Text:  " "
Name:  "bottom_"
Text:  " "
Operator:  "-"
Text:  ". "
Name:  "anchorDelta"
Text:  "<newline><newline>  "
Keyword:  "let"
Text:  " "
Name:  "first"
Text:  " "
Operator:  "="
Text:  " "
Name:  "firstVisibleNode"
Punctuation:  "("
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  ", "
Name:  "top"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "last"
Text:  " "
Operator:  "="
Text:  " "
Name:  "lastVisibleNode"
Punctuation:  "("
Name:  "rbt"
Text:  "."
Name:  "root"
Text:  ", "
Name:  "bottom"
Punctuation:  ")"
Text:  "<newline><newline>  "
Keyword:  "let"
Text:  " "
Name:  "oldLen"
Text:  " "
Operator:  "="
Text:  " "
Name:  "old"
Operator:  "->"
Name.Namespace:  "Js"
Punctuation:  "."
Name.Namespace:  "Array2"
Punctuation:  "."
Name:  "length"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "oldIter"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "ref"
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "iterateWithY"
Punctuation:  "("
Text:  "~"
Name:  "inclusive"
Operator:  "="
Keyword.Constant:  "true"
Text:  ", "
Name:  "first"
Text:  ", "
Name:  "last"
Text:  ", ~"
Name:  "callback"
Operator:  "="
Punctuation:  "("
Text:  ". "
Name:  "node"
Text:  ", "
Name:  "y_"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "y"
Text:  " "
Operator:  "="
Text:  " "
Name:  "y_"
Text:  " "
Operator:  "+"
Text:  ". "
Name:  "anchorDelta"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "y"
Text:  " "
Operator:  ">="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "."
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  " "
Comment.Single:  "// anchoring can make y negative"
Text:  "<newline>      "
Keyword:  "while"
Text:  " "
Punctuation:  "("
Text:  "<newline>        "
Name:  "oldIter"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "oldLen"
Text:  " "
Operator:  "&&"
Text:  "<newline>        "
Name:  "rbt"
Text:  "."
Name:  "compare"
Punctuation:  "("
Text:  ". "
Name.Namespace:  "Js"
Punctuation:  "."
Name.Namespace:  "Array2"
Punctuation:  "."
Name:  "unsafe_get"
Punctuation:  "("
Name:  "old"
Text:  ", "
Name:  "oldIter"
Text:  "."
Name:  "contents"
Punctuation:  ")"
Text:  ", "
Name:  "node"
Text:  "."
Name:  "value"
Punctuation:  ")"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>      "
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "disappear"
Punctuation:  "("
Text:  ". "
Name.Namespace:  "Js"
Punctuation:  "."
Name.Namespace:  "Array2"
Punctuation:  "."
Name:  "unsafe_get"
Punctuation:  "("
Name:  "old"
Text:  ", "
Name:  "oldIter"
Text:  "."
Name:  "contents"
Punctuation:  "))"
Text:  "<newline>        "
Name:  "oldIter"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "="
Text:  " "
Name:  "oldIter"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>      "
Name:  "new"
Operator:  "->"
Name.Namespace:  "Js"
Punctuation:  "."
Name.Namespace:  "Array2"
Punctuation:  "."
Name:  "push"
Punctuation:  "("
Name:  "node"
Text:  "."
Name:  "value"
Punctuation:  ")"
Operator:  "->"
Name:  "ignore"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "oldIter"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "oldLen"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "let"
Text:  " "
Name:  "cmp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "rbt"
Text:  "."
Name:  "compare"
Punctuation:  "("
Text:  ". "
Name.Namespace:  "Js"
Punctuation:  "."
Name.Namespace:  "Array2"
Punctuation:  "."
Name:  "unsafe_get"
Punctuation:  "("
Name:  "old"
Text:  ", "
Name:  "oldIter"
Text:  "."
Name:  "contents"
Punctuation:  ")"
Text:  ", "
Name:  "node"
Text:  "."
Name:  "value"
Punctuation:  ")"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name:  "cmp"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>          "
Name:  "remained"
Punctuation:  "("
Text:  ". "
Name:  "node"
Text:  ", "
Name:  "y"
Punctuation:  ")"
Text:  "<newline>          "
Name:  "oldIter"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "="
Text:  " "
Name:  "oldIter"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>        "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>          "
Name:  "appear"
Punctuation:  "("
Text:  ". "
Name:  "node"
Text:  ", "
Name:  "y"
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>      "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "appear"
Punctuation:  "("
Text:  ". "
Name:  "node"
Text:  ", "
Name:  "y"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "})"
Text:  "<newline>  "
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name:  "oldIter"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "<"
Text:  " "
Name:  "oldLen"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "disappear"
Punctuation:  "("
Text:  ". "
Name.Namespace:  "Js"
Punctuation:  "."
Name.Namespace:  "Array2"
Punctuation:  "."
Name:  "unsafe_get"
Punctuation:  "("
Name:  "old"
Text:  ", "
Name:  "oldIter"
Text:  "."
Name:  "contents"
Punctuation:  "))"
Text:  "<newline>    "
Name:  "oldIter"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "="
Text:  " "
Name:  "oldIter"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline><newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "c"
Text:  ": "
Keyword.Type:  "char"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Char:  "'A'"
Text:  " "
Comment.Multiline:  "/* comment with link https://example and - = */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "respond_no_content"
Text:  " "
Operator:  "="
Text:  " "
Name:  "reqd"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Namespace:  "Reqd"
Punctuation:  "."
Name:  "respond_with_string"
Punctuation:  "("
Name:  "reqd"
Text:  ", "
Name.Namespace:  "Response"
Punctuation:  "."
Name:  "create"
Punctuation:  "("
Name.Class:  "#No_content"
Punctuation:  ")"
Text:  ", "
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "to_meth"
Text:  " "
Operator:  "="
Text:  " "
Name:  "x"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "x"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "#GET"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "#GET"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "#POST"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "#POST"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "#HEAD"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "#HEAD"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "#DELETE"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "#DELETE"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "#PUT"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "#PUT"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "#OPTIONS"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "#OPTIONS"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "#TRACE"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "#TRACE"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "#CONNECT"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Class:  "#CONNECT"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "#Other"
Punctuation:  "("
Name:  "w"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "failwith"
Punctuation:  "("
Name:  "w"
Text:  " "
Operator:  "++"
Text:  " "
Literal.String.Double:  "\" is not supported\""
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "ignore"
Text:  ": "
Keyword:  "'"
Name:  "a"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Text:  " "
Operator:  "="
Text:  " "
Name:  "_"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "()"
Text:  "<newline><newline>"
Comment.Multiline:  "/* ** comment */"
Text:  "<newline>"
Comment.Multiline:  "/* *** comment */"
Text:  "<newline>"
Comment.Multiline:  "/* **** comment */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* ** */"
Text:  "<newline>"
Comment.Multiline:  "/* *** */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* ** */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* (** comment *) */"
Text:  "<newline>"
Comment.Multiline:  "/* (*** comment *) */"
Text:  "<newline>"
Comment.Multiline:  "/* *(*** comment *) */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* comment * */"
Text:  "<newline>"
Comment.Multiline:  "/* comment ** */"
Text:  "<newline>"
Comment.Multiline:  "/* comment *** */"
Text:  "<newline>"
Comment.Multiline:  "/* comment **** */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "testingNotQuiteEndOfLineComments"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Double:  "\"Item 1\""
Text:  " "
Comment.Multiline:  "/* Comment For First Item */"
Text:  ",<newline>  "
Literal.String.Double:  "\"Item 2\""
Text:  " "
Comment.Multiline:  "/* Comment For Second Item */"
Text:  ",<newline>  "
Literal.String.Double:  "\"Item 3\""
Text:  " "
Comment.Multiline:  "/* Comment For Third Item */"
Text:  ",<newline>  "
Literal.String.Double:  "\"Item 4\""
Text:  " "
Comment.Multiline:  "/* Comment For Fourth Item - but no semi */"
Text:  ",<newline>  "
Comment.Multiline:  "/* Comment after last item in list. */"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Comment.Multiline:  "/* Comment after list bracket */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "testingEndOfLineComments"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Double:  "\"Item 1\""
Text:  " "
Comment.Multiline:  "/* Comment For First Item */"
Text:  ",<newline>  "
Literal.String.Double:  "\"Item 2\""
Text:  " "
Comment.Multiline:  "/* Comment For Second Item */"
Text:  ",<newline>  "
Literal.String.Double:  "\"Item 3\""
Text:  " "
Comment.Multiline:  "/* Comment For Third Item */"
Text:  ",<newline>  "
Literal.String.Double:  "\"Item 4\""
Text:  " "
Comment.Multiline:  "/* Comment For Fourth Item - but before semi */"
Text:  ",<newline>  "
Comment.Multiline:  "/* Comment after last item in list. */"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Comment.Multiline:  "/* Comment after list bracket */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* This time no space between bracket and comment */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "testingEndOfLineComments"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{}"
Text:  " "
Comment.Multiline:  "/* Comment after list bracket */"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "t"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  ", "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Comment.Multiline:  "/* End of line on t */"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "t22"
Text:  " "
Operator:  "="
Text:  " "
Comment.Multiline:  "/* End of t22 line on type t22 = */"
Text:  "<newline>"
Punctuation:  "("
Keyword.Type:  "int"
Text:  ", "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "variant"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Comment.Multiline:  "/* Comment above X */"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "X"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Comment.Multiline:  "/* End of line on X */"
Text:  "<newline>  "
Comment.Multiline:  "/* Comment above Y */"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Y"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Comment.Multiline:  "/* End of line on Y */"
Text:  "<newline>"
Comment.Multiline:  "/* Comment on entire type def for variant */"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* not attached *above* x */"
Text:  "<newline>  "
Name:  "fieldOne"
Text:  ": "
Keyword.Type:  "int"
Text:  ",<newline>"
Punctuation:  "}"
Text:  " "
Comment.Multiline:  "/* Attached end of line after x */"
Text:  "<newline>"
Keyword:  "and"
Text:  " "
Name:  "y"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* not attached *above* y */"
Text:  "<newline>  "
Name:  "fieldTwo"
Text:  ": "
Keyword.Type:  "int"
Text:  ",<newline>"
Punctuation:  "}"
Text:  " "
Comment.Multiline:  "/* Attached end of line after y */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "result"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name.Class:  "X"
Punctuation:  "("
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "X"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Comment.Multiline:  "/* Where does this comment go? */"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "tmp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "x"
Text:  "<newline>  "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "tmp"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Y"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Comment.Multiline:  "/* How about this one */"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "tmp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "x"
Text:  "<newline>  "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "tmp"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "result"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name.Class:  "None"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "({"
Name:  "fieldOne"
Text:  ": "
Literal.Number.Integer:  "20"
Punctuation:  "})"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Comment.Multiline:  "/* Where does this comment go? */"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "tmp"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>  "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "tmp"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "Some"
Punctuation:  "({"
Name:  "fieldOne"
Text:  ": "
Name:  "n"
Punctuation:  "})"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Comment.Multiline:  "/* How about this one */"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "tmp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "n"
Text:  "<newline>  "
Name:  "n"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "tmp"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "None"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "20"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "pointWithManyKindsOfComments"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* Line before x */"
Text:  "<newline>  "
Name:  "x"
Text:  ": "
Keyword.Type:  "string"
Text:  " "
Comment.Multiline:  "/* x field */"
Text:  ",<newline>  "
Comment.Multiline:  "/* Line before y */"
Text:  "<newline>  "
Name:  "y"
Text:  ": "
Keyword.Type:  "string"
Text:  " "
Comment.Multiline:  "/* y field */"
Text:  ",<newline>  "
Comment.Multiline:  "/* Final row of record */"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "typeParamPointWithComments"
Operator:  "<"
Keyword:  "'"
Name:  "a"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* Line before x */"
Text:  "<newline>  "
Name:  "x"
Text:  ": "
Keyword:  "'"
Name:  "a"
Text:  " "
Comment.Multiline:  "/* x field */"
Text:  ",<newline>  "
Comment.Multiline:  "/* Line before y */"
Text:  "<newline>  "
Name:  "y"
Text:  ": "
Keyword:  "'"
Name:  "a"
Text:  " "
Comment.Multiline:  "/* y field */"
Text:  ",<newline>  "
Comment.Multiline:  "/* Final row of record */"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "name_equal"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "x"
Text:  ", "
Name:  "y"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "y"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "equal"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "i1"
Text:  ", "
Name:  "i2"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "i1"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "==="
Text:  " "
Name:  "i2"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "&&"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Comment.Multiline:  "/* most unlikely first */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "equal"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "i1"
Text:  ", "
Name:  "i2"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "compare"
Punctuation:  "("
Name:  "compare"
Punctuation:  "("
Literal.Number.Integer:  "0"
Text:  ", "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  ", "
Name:  "compare"
Punctuation:  "("
Literal.Number.Integer:  "1"
Text:  ", "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  " "
Comment.Multiline:  "/* END OF LINE HERE */"
Text:  "<newline><newline>"
Keyword:  "module"
Text:  " "
Name.Class:  "Temp"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "v"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "logIt"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "str"
Text:  ", "
Punctuation:  "())"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "print_string"
Punctuation:  "("
Name:  "str"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "store_attributes"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arg"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "attributes_file"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"test\""
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "proc_name"
Text:  " "
Operator:  "="
Text:  " "
Name:  "attributes_file"
Text:  " "
Operator:  "++"
Text:  " "
Literal.String.Double:  "\".proc\""
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "should_write"
Text:  " "
Operator:  "="
Text:  "<newline>    "
Comment.Multiline:  "/* only overwrite defined procedures */"
Text:  "<newline>    "
Name.Namespace:  "Temp"
Punctuation:  "."
Name:  "v"
Text:  " "
Operator:  "||"
Text:  " "
Operator:  "!"
Name.Namespace:  "Temp"
Punctuation:  "."
Name:  "v"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "should_write"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Namespace:  "Temp"
Punctuation:  "."
Name:  "logIt"
Punctuation:  "("
Name:  "proc_name"
Text:  ", "
Punctuation:  "())"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "run"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Namespace:  "TestUtils"
Punctuation:  "."
Name:  "printSection"
Punctuation:  "("
Literal.String.Double:  "\"Basic Structures\""
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "while"
Text:  " "
Name:  "something"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"You're in a while loop\""
Punctuation:  ")"
Text:  "<newline>  "
Name:  "print_newline"
Punctuation:  "()"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "for"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "to"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_int"
Punctuation:  "("
Name:  "i"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "print_newline"
Punctuation:  "()"
Text:  "<newline>  "
Keyword:  "for"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Keyword:  "downto"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"Counting in reverse direction\""
Punctuation:  ")"
Text:  "<newline>    "
Name:  "print_newline"
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "for"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Keyword:  "to"
Text:  " "
Name:  "endOfRangeMustBeSimple"
Punctuation:  "("
Name:  "expr"
Text:  ", "
Name:  "soWrap"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_int"
Punctuation:  "("
Name:  "i"
Punctuation:  ")"
Text:  "<newline>  "
Name:  "print_newline"
Punctuation:  "()"
Text:  "<newline>  "
Keyword:  "for"
Text:  " "
Name:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "theSame"
Punctuation:  "("
Name:  "isTrue"
Text:  ", "
Name:  "ofThe"
Text:  ", "
Name:  "startOfRange"
Punctuation:  ")"
Text:  " "
Keyword:  "downto"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"Counting in reverse direction\""
Punctuation:  ")"
Text:  "<newline>    "
Name:  "print_newline"
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " \\"
Literal.String.Double:  "\"!\""
Punctuation:  "("
Text:  "\\"
Literal.String.Double:  "\"!\""
Punctuation:  "("
Name:  "foo"
Punctuation:  "))"
Text:  "."
Name:  "bar"
Text:  "."
Name:  "contents"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "foo"
Text:  "."
Name:  "bar"
Text:  "."
Name:  "contents"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " \\"
Literal.String.Double:  "\"!\""
Punctuation:  "("
Name:  "foo"
Punctuation:  ")"
Text:  "."
Name:  "bar"
Text:  "."
Name:  "contents"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Prefix operators:<newline> * ! followed by zero or more appropriate_operator_suffix_chars (see the<newline> * lexer).<newline> * ? or ~ followed by at least one appropriate_operator_suffix_chars.<newline> */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Punctuation:  "))"
Text:  "."
Name:  "bar"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Name:  "foo"
Text:  "."
Name:  "bar"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Punctuation:  ")"
Text:  "."
Name:  "bar"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Text:  "."
Name:  "bar"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " \\"
Literal.String.Double:  "\"?!\""
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Text:  "."
Name:  "bar"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Text:  "\\"
Literal.String.Double:  "\"?!\""
Punctuation:  "("
Name:  "foo"
Text:  "."
Name:  "bar"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " \\"
Literal.String.Double:  "\"~!\""
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Text:  "."
Name:  "bar"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Text:  "\\"
Literal.String.Double:  "\"~!\""
Punctuation:  "("
Name:  "foo"
Text:  "."
Name:  "bar"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " \\"
Literal.String.Double:  "\"~!\""
Punctuation:  "("
Text:  "\\"
Literal.String.Double:  "\"~!\""
Punctuation:  "("
Name:  "foo"
Text:  "."
Name:  "bar"
Punctuation:  "))"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " \\"
Literal.String.Double:  "\"!!\""
Punctuation:  "("
Name:  "foo"
Text:  "."
Name:  "bar"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " \\"
Literal.String.Double:  "\"!~\""
Punctuation:  "("
Name:  "foo"
Text:  "."
Name:  "bar"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "noParensNeeded"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Name:  "blah"
Text:  "."
Name:  "foo"
Text:  "."
Name:  "bar"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "parensNeededAroundFirst"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "blah"
Punctuation:  ")"
Text:  "."
Name:  "foo"
Text:  "."
Name:  "bar"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "parensNeededAroundSecond"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Operator:  "!"
Name:  "blah"
Text:  "."
Name:  "foo"
Punctuation:  ")"
Text:  "."
Name:  "bar"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "!"
Punctuation:  "("
Operator:  "!"
Name:  "foo"
Text:  "."
Name:  "bar"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "10"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "-"
Literal.Number.Integer:  "5"
Text:  "."
Literal.Number.Integer:  "0"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "10"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Class:  "Some"
Punctuation:  "("
Operator:  "-"
Literal.Number.Integer:  "5"
Text:  "."
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Name:  "x"
Text:  ": "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{}"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Error:  "#"
Text:  "..."
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Name.Class:  "#Variant"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Name.Class:  "#variant"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Literal.String.Char:  "'0'"
Text:  " .. "
Literal.String.Char:  "'9'"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Keyword:  "lazy"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "lazy"
Text:  " "
Operator:  "%"
Name:  "extend"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Test precedence on access sugar */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arr"
Text:  "."
Name:  "contents"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arr"
Text:  "."
Name:  "contents"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "get"
Punctuation:  "("
Name:  "str"
Text:  "."
Name:  "contents"
Text:  ", "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "get"
Punctuation:  "("
Name:  "str"
Text:  "."
Name:  "contents"
Text:  ", "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arr"
Text:  "."
Name:  "contents"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arr"
Text:  "."
Name:  "contents"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " \\"
Literal.String.Double:  "\"/++\""
Text:  " "
Operator:  "="
Text:  " \\"
Literal.String.Double:  "\"+\""
Text:  " "
Comment.Multiline:  "/* // indicates the start of a comment, not an infix op */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "something"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "self"
Text:  "."
Name:  "ext"
Text:  "."
Name:  "logSuccess"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"Did tap\""
Punctuation:  ")"
Text:  "<newline>  "
Name:  "print_newline"
Punctuation:  "()"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "logTapSuccess"
Text:  " "
Operator:  "="
Text:  " "
Name:  "self"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "self"
Text:  "."
Name:  "ext"
Text:  "."
Name:  "logSuccess"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"Did tap\""
Punctuation:  ")"
Text:  "<newline>    "
Name:  "print_newline"
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "logTapSuccess"
Text:  " "
Operator:  "="
Text:  " "
Name:  "self"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "self"
Text:  "."
Name:  "ext"
Text:  "."
Name:  "logSuccess"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"Did tap\""
Punctuation:  ")"
Text:  "<newline>    "
Name:  "print_newline"
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Punctuation:  "("
Operator:  "!"
Name:  "data"
Punctuation:  ")"
Text:  "."
Name:  "field"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>"
Punctuation:  "("
Operator:  "!"
Name:  "data"
Punctuation:  ")"
Text:  "."
Name:  "field1"
Text:  "."
Name:  "field2"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>"
Punctuation:  "("
Operator:  "!"
Name:  "data"
Text:  "."
Name:  "field1"
Punctuation:  ")"
Text:  "."
Name:  "field2"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>"
Punctuation:  "("
Operator:  "!"
Name:  "data"
Punctuation:  ")"
Text:  "."
Name:  "field1"
Text:  "."
Name:  "field2"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>"
Punctuation:  "("
Operator:  "!"
Name:  "data"
Text:  "."
Name:  "field1"
Punctuation:  ")"
Text:  "."
Name:  "field2"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "loop"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "appTime"
Text:  ", "
Name:  "frameTime"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "hasSetup"
Text:  "."
Name:  "contents"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "setupScene"
Punctuation:  "()"
Text:  "<newline>    "
Name:  "renderIntoTop"
Punctuation:  "()"
Text:  "<newline>    "
Name:  "hasSetup"
Text:  "."
Name:  "contents"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>  "
Name:  "process"
Punctuation:  "("
Name:  "appTime"
Text:  ", "
Name:  "frameTime"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* These parens should be kept around the entire last if/then/else */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Name:  "something"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "somethingElse"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Literal.String.Double:  "\"blah\""
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* These parens should be kept around just the last if/then */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Name:  "something"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "somethingElse"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Literal.String.Double:  "\"blah\""
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Parens should be generated to wrap the entire final if then else.<newline> * To test that it's being parsed correclty, should print \"one\". */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"one\""
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"two\""
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Should print two */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Keyword.Constant:  "false"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"one\""
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"two\""
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Should not print */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Keyword.Constant:  "false"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"one\""
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"two\""
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Should wrap (if a > b then a else b).<newline> * printer(<newline> */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "printIfFirstArgGreater"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "result"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "printIfFirstArgGreater"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a > b\""
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"b >= a\""
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"b < a\""
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a <= b\""
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"That could never possibly type check\""
Punctuation:  ")"
Text:  "<newline>  "
Name:  "print_newline"
Punctuation:  "()"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "myRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "nestedRecord"
Text:  ": "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "anotherNestedRecord"
Text:  ": "
Punctuation:  "("
Name:  "instaComp"
Text:  ", "
Name:  "displayRect"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Text:  "<newline>        "
Name.Namespace:  "Graphics"
Punctuation:  "."
Name:  "cgRectIntersectsWithSlop"
Punctuation:  "("
Text:  "<newline>          "
Name:  "defaultCompositeTimerRectSlop"
Text:  ",<newline>          "
Name:  "instaComp"
Text:  "."
Name:  "relativeRect"
Text:  ",<newline>          "
Name:  "displayRect"
Text:  ",<newline>        "
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Class:  "IoEligible"
Text:  "<newline>      "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Class:  "IoInelibleButTryComposition"
Text:  "<newline>      "
Punctuation:  "}"
Text:  ",<newline>  "
Punctuation:  "}"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Name:  "printIfFirstArgGreater"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a > b\""
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"b < a\""
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Comment.Multiline:  "/* Should Be Parsed As: Cleary a type error, but at least the parsing makes that clear */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Name:  "printIfFirstArgGreater"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a > b\""
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>        "
Keyword:  "if"
Text:  " "
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  "{"
Text:  "<newline>          "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"b < a\""
Punctuation:  ")"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "if"
Text:  " "
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a > b\""
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* What you probably wanted was: */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Name:  "printIfFirstArgGreater"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"a > b\""
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "a"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"b < a\""
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Mutative if statement: Not used to evaluate to something. */"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "100"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "msg"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"If there was any doubt, 10 is in fact less than 100.\""
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Name:  "msg"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "msg"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"All bets are off.\""
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Name:  "msg"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Operator:  "<"
Text:  " "
Literal.Number.Integer:  "100"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"If there was any doubt, 10 is in fact less than 100.\""
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"All bets are off.\""
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  ": "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  ": "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  ": "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  ": "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "10"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Multiline:  "/* In Reason, types look like the data they model! Tuples are no exception. */"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "pairOfInts"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  ", "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "letBindingWithTypeConstraint"
Text:  ": "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Punctuation:  "("
Name:  "tupleItem"
Text:  ": "
Keyword.Type:  "int"
Text:  ", "
Name:  "withTypeConstraint"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "10"
Text:  ", "
Literal.Number.Integer:  "20"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Multiline:  "/* To make sure that tuple field annotations are annotating the entire field */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "_dummyFunc"
Text:  " "
Operator:  "="
Text:  " "
Name:  "x"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "annotatingFuncApplication"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "(("
Name:  "_dummyFunc"
Punctuation:  "("
Literal.String.Double:  "\"a\""
Punctuation:  ")"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  ", "
Punctuation:  "("
Name:  "_dummyFunc"
Punctuation:  "("
Literal.String.Double:  "\"a\""
Punctuation:  ")"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Pretty printer might stick the [int] at the label. */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "annotatingSingleFuncApplication"
Text:  ": "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Name:  "_dummyFunc"
Punctuation:  "("
Literal.String.Double:  "\"a\""
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Multiline:  "/* So lets try a place where it won't */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "annotatingSingleFuncApplication"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Comment.Multiline:  "/* Commenting a let binding. */"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "100"
Text:  "<newline>  "
Comment.Multiline:  "/* Commenting another let binding. */"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Keyword.Type:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "200"
Text:  "<newline>  "
Comment.Multiline:  "/*<newline>   * This demonstrates why named arguments cannot simply have the form (func<newline>   * arg:val) - it is indistinguishable from a type constraint.<newline>   */"
Text:  "<newline>  "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "+"
Text:  " "
Punctuation:  "("
Name:  "_dummyFunc"
Punctuation:  "("
Name:  "a"
Punctuation:  ")"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Punctuation:  "("
Name:  "tupleItem"
Text:  ": "
Keyword.Type:  "int"
Text:  ", "
Name:  "constrainedWithoutGrouping"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "10"
Text:  ", "
Literal.Number.Integer:  "20"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Punctuation:  "("
Name:  "tupleItem"
Text:  ", "
Name:  "withOutsideTypeConstraint"
Punctuation:  ")"
Text:  ": "
Punctuation:  "("
Keyword.Type:  "int"
Text:  ", "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "10"
Text:  ", "
Literal.Number.Integer:  "20"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Trailing commas */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "trailingCommaAccepted"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "1"
Text:  ", "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "moreTrailing"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "1"
Text:  ", "
Literal.Number.Integer:  "2"
Text:  ", "
Literal.Number.Integer:  "3"
Text:  ", "
Literal.Number.Integer:  "4"
Text:  ", "
Literal.Number.Integer:  "5"
Text:  ", "
Literal.Number.Integer:  "7"
Punctuation:  ")"
Text:  "<newline><newline><newline>"
Comment.Multiline:  "/* Anatomy:        -Head-      --------- Tail---------  nil: You can't see nil */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  ": "
Keyword.Type:  "list"
Operator:  "<"
Keyword.Type:  "int"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Literal.Number.Integer:  "1"
Text:  ", "
Literal.Number.Integer:  "2"
Text:  ", "
Literal.Number.Integer:  "3"
Text:  ", "
Literal.Number.Integer:  "4"
Text:  ", "
Literal.Number.Integer:  "5"
Text:  ", "
Literal.Number.Integer:  "6"
Text:  ", "
Literal.Number.Integer:  "7"
Text:  ", "
Literal.Number.Integer:  "8"
Text:  ", "
Literal.Number.Integer:  "9"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "hd"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"appendedToHead\""
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "tl"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Literal.String.Double:  "\"listTo\""
Text:  ", "
Literal.String.Double:  "\"append\""
Text:  ", "
Literal.String.Double:  "\"to\""
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* To push *one* and only *one* item to the front of a list - use [hd, ...tl] */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "result"
Text:  ": "
Keyword.Type:  "list"
Operator:  "<"
Keyword.Type:  "string"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Name:  "hd"
Text:  ", ..."
Name:  "tl"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Is the same as writing */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "result"
Text:  ": "
Keyword.Type:  "list"
Operator:  "<"
Keyword.Type:  "string"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Literal.String.Double:  "\"appendedToHead\""
Text:  ", "
Literal.String.Double:  "\"listTo\""
Text:  ", "
Literal.String.Double:  "\"append\""
Text:  ", "
Literal.String.Double:  "\"to\""
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* To operate on lists, use pattern matching */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "="
Text:  " "
Name:  "x"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "x"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{}"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Name:  "hd"
Text:  ", ..."
Name:  "tl"
Punctuation:  "}"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "size"
Punctuation:  "("
Name:  "tl"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Optimize for tail recursion */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "size"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "soFar"
Text:  ", "
Name:  "lst"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "lst"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{}"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Name:  "hd"
Text:  ", ..."
Name:  "tl"
Punctuation:  "}"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "size"
Punctuation:  "("
Name:  "soFar"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  ", "
Name:  "tl"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "nestedMatch"
Text:  " "
Operator:  "="
Text:  " "
Name:  "lstLst"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "lstLst"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Name:  "hd"
Text:  ", ..."
Name:  "tl"
Punctuation:  "}"
Text:  " "
Keyword:  "when"
Text:  " "
Keyword.Constant:  "false"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Name:  "hd"
Text:  ", ..."
Name:  "tl"
Punctuation:  "}"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "switch"
Text:  " "
Name:  "tl"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{}"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Name:  "tlHd"
Text:  ", ..."
Name:  "tlTl"
Punctuation:  "}"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{}"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "nestedMatchWithWhen"
Text:  " "
Operator:  "="
Text:  " "
Name:  "lstLst"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Keyword:  "switch"
Text:  " "
Name:  "lstLst"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Name:  "hd"
Text:  ", ..."
Name:  "tl"
Punctuation:  "}"
Text:  " "
Keyword:  "when"
Text:  " "
Keyword.Constant:  "false"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Name:  "hd"
Text:  ", ..."
Name:  "tl"
Punctuation:  "}"
Text:  " "
Keyword:  "when"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Operator:  "=>"
Text:  "<newline>    "
Keyword:  "switch"
Text:  " "
Name:  "tl"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{}"
Text:  " "
Keyword:  "when"
Text:  " "
Keyword.Constant:  "false"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{}"
Text:  " "
Keyword:  "when"
Text:  " "
Keyword.Constant:  "true"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{"
Name:  "tlHd"
Text:  ", ..."
Name:  "tlTl"
Punctuation:  "}"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Keyword.Type:  "list"
Punctuation:  "{}"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "mine"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "YourThing"
Punctuation:  "("
Keyword.Type:  "int"
Punctuation:  ")"
Text:  "<newline>"
Comment.Multiline:  "/*<newline> * Reason parses \"as\" aliases differently than OCaml.<newline> */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Literal.Number.Integer:  "20"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "YourThing"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "ppp"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Name:  "_"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "|"
Text:  " "
Name.Class:  "YourThing"
Punctuation:  "("
Name:  "_"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ppp"
Text:  "<newline><newline>"
Comment.Multiline:  "/*<newline> * in order to achieve the previous example in ocaml, you would have to group<newline> * as:<newline> */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "switch"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Literal.Number.Integer:  "20"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Name.Class:  "YourThing"
Punctuation:  "("
Name:  "x"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "ppp"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Class:  "MyThing"
Punctuation:  "("
Name:  "_"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "|"
Text:  " "
Name.Class:  "YourThing"
Punctuation:  "("
Name:  "_"
Punctuation:  ")"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "ppp"
Text:  " "
Operator:  "="
Text:  " "
Name:  "ppp"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "emptyArray"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "arrayWithOne"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "10"
Punctuation:  "]"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "arrayWithTwo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "10"
Text:  ", "
Literal.Number.Integer:  "10"
Punctuation:  "]"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "secondItem"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arrayWithTwo"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Getting And Setting: Yeah, we should really change this */"
Text:  "<newline>"
Comment.Multiline:  "/* Get an array item at index 1 */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "secondItem"
Text:  " "
Operator:  "="
Text:  " "
Name:  "arrayWithTwo"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "<newline>"
Comment.Multiline:  "/* Set an array item at index 1 */"
Text:  "<newline>"
Name:  "arrayWithTwo"
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "300"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "myString"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"asdf\""
Text:  "<newline>"
Name.Namespace:  "String"
Punctuation:  "."
Name:  "set"
Punctuation:  "("
Name:  "myString"
Text:  ", "
Literal.Number.Integer:  "2"
Text:  ", "
Literal.String.Char:  "'9'"
Punctuation:  ")"
Text:  " "
Comment.Multiline:  "/* Replacing a character: I could do without this sugar */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* FUNCTIONS<newline> *=============================================================================<newline> */"
Text:  "<newline><newline>"
Comment.Multiline:  "/* TYPE ANNOTATIONS<newline> * =============================================================================<newline> */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "one"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "900"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "two"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10000"
Text:  "<newline>"
Comment.Multiline:  "/* Tuple expressions can be annotated without additional paren wrapping */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "myTuple"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "(("
Name:  "one"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  ", "
Punctuation:  "("
Name:  "two"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  "))"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "myTupleType"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  ", "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "myTuple"
Text:  ": "
Name:  "myTupleType"
Text:  " "
Operator:  "="
Text:  " "
Name:  "myTuple"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Anything *outside* of a tuple, must still be annotated within parens. */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "myTuple"
Text:  ": "
Name:  "myTupleType"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "(("
Name:  "one"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  ", "
Punctuation:  "("
Name:  "two"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Now functions that accept a single argument being a tuple look familiar */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "addValues"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  ": "
Keyword.Type:  "int"
Text:  ", "
Name:  "b"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "addValues"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  ": "
Keyword.Type:  "int"
Text:  ", "
Name:  "b"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "myFunction"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  ": "
Keyword.Type:  "int"
Text:  ", "
Name:  "b"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  ": "
Keyword.Type:  "int"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "functionReturnValueType"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  ": "
Keyword.Type:  "int"
Text:  ", "
Name:  "s"
Text:  ": "
Keyword.Type:  "string"
Punctuation:  ")"
Text:  ": "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "curriedFormOne"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  ": "
Keyword.Type:  "int"
Text:  ", "
Name:  "s"
Text:  ": "
Keyword.Type:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "s"
Text:  " "
Operator:  "++"
Text:  " "
Name:  "string_of_int"
Punctuation:  "("
Name:  "i"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "curriedFormTwo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  ": "
Keyword.Type:  "int"
Text:  ", "
Name:  "x"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  ": "
Punctuation:  "("
Keyword.Type:  "int"
Text:  ", "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  ", "
Name:  "x"
Punctuation:  ")"
Text:  "<newline>"
Comment.Multiline:  "/* let nonCurriedFormTwo = fun (i:int, x:int) (:(int, int)) => (i, x); */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "curriedFormThree"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  ": "
Keyword.Type:  "int"
Text:  ", "
Punctuation:  "("
Name:  "a"
Text:  ": "
Keyword.Type:  "int"
Text:  ", "
Name:  "b"
Text:  ": "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  ": "
Punctuation:  "("
Keyword.Type:  "int"
Text:  ", "
Keyword.Type:  "int"
Punctuation:  "))"
Text:  ": "
Punctuation:  "("
Keyword.Type:  "int"
Text:  ", "
Keyword.Type:  "int"
Text:  ", "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "("
Name:  "i"
Text:  ", "
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  "<newline><newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "myFuncType"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  ", "
Keyword.Type:  "int"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "int"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "myFunc"
Text:  ": "
Name:  "myFuncType"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "funcWithTypeLocallyAbstractTypes"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword:  "type"
Text:  " "
Name:  "atype"
Text:  " "
Name:  "btype"
Text:  ", "
Name:  "a"
Text:  ", "
Name:  "b"
Text:  ", "
Name:  "c"
Text:  ": "
Punctuation:  "("
Name:  "atype"
Text:  ", "
Name:  "btype"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  "<newline>  "
Name:  "c"
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Checks that function types aren't unnecessary wrapped */"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Keyword:  "rec"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Foo"
Punctuation:  "("
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Bar"
Punctuation:  "("
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Text:  ", "
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Text:  ", "
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "c"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Baz"
Punctuation:  "("
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Text:  ", "
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Text:  ", "
Punctuation:  "("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "c"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Foo"
Punctuation:  "(("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ")"
Text:  "<newline>  "
Operator:  "|"
Text:  " "
Name.Class:  "Bar"
Punctuation:  "(("
Name:  "a"
Text:  ", "
Name:  "b"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "d"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Operator:  ">"
Text:  " "
Name.Class:  "#Foo"
Punctuation:  "("
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword.Type:  "unit"
Punctuation:  ")]"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "withThreeFields"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "name"
Text:  ": "
Keyword.Type:  "string"
Text:  ",<newline>  "
Name:  "age"
Text:  ": "
Keyword.Type:  "int"
Text:  ",<newline>  "
Name:  "occupation"
Text:  ": "
Keyword.Type:  "string"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "testRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "name"
Text:  ": "
Literal.String.Double:  "\"joe\""
Text:  ",<newline>  "
Name:  "age"
Text:  ": "
Literal.Number.Integer:  "20"
Text:  ",<newline>  "
Name:  "occupation"
Text:  ": "
Literal.String.Double:  "\"engineer\""
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  ..."
Name:  "testRecord"
Text:  ",<newline>  "
Name:  "name"
Text:  ": "
Literal.String.Double:  "\"joe++\""
Text:  ",<newline>  "
Name:  "age"
Text:  ": "
Name:  "testRecord"
Text:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "makeRecordBase"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "name"
Text:  ": "
Literal.String.Double:  "\"Joe\""
Text:  ",<newline>  "
Name:  "age"
Text:  ": "
Literal.Number.Integer:  "30"
Text:  ",<newline>  "
Name:  "occupation"
Text:  ": "
Literal.String.Double:  "\"Engineer\""
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  ..."
Comment.Multiline:  "/* These parens should be evaporated. */"
Text:  "<newline>  "
Name:  "makeRecordBase"
Punctuation:  "()"
Text:  ",<newline>  "
Name:  "name"
Text:  ": "
Literal.String.Double:  "\"joe++\""
Text:  ",<newline>  "
Name:  "age"
Text:  ": "
Name:  "testRecord"
Text:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  ..."
Comment.Multiline:  "/* Comments should be correctly placed before ... expression */"
Text:  "<newline>  "
Name:  "makeRecordBase"
Punctuation:  "()"
Text:  ",<newline>  "
Comment.Multiline:  "/* Comment after record extension */"
Text:  "<newline>  "
Name:  "name"
Text:  ": "
Literal.String.Double:  "\"joe++\""
Text:  ",<newline>  "
Name:  "age"
Text:  ": "
Name:  "testRecord"
Text:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  ..."
Punctuation:  "("
Text:  "<newline>    "
Comment.Multiline:  "/* Currently, type annotations must be wrapped in parens - that's easy to improve */"
Text:  "<newline>    "
Name:  "makeRecordBase"
Punctuation:  "()"
Text:  ": "
Name:  "withThreeFields"
Text:  "<newline>  "
Punctuation:  ")"
Text:  ",<newline>  "
Name:  "name"
Text:  ": "
Literal.String.Double:  "\"joe++\""
Text:  ",<newline>  "
Name:  "age"
Text:  ": "
Name:  "testRecord"
Text:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  ..."
Comment.Multiline:  "/* This is meaningless, sure */"
Text:  "<newline>  "
Name.Namespace:  "String"
Punctuation:  "."
Name:  "set"
Punctuation:  "("
Name:  "someArray"
Text:  ", "
Literal.Number.Integer:  "0"
Text:  ", "
Literal.Number.Integer:  "20"
Punctuation:  ")"
Text:  ",<newline>  "
Name:  "name"
Text:  ": "
Literal.String.Double:  "\"joe++\""
Text:  ",<newline>  "
Name:  "age"
Text:  ": "
Name:  "testRecord"
Text:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  ..."
Name.Namespace:  "SomeReally"
Punctuation:  "."
Name:  "longFunctionCall"
Punctuation:  "({"
Text:  "<newline>    "
Name:  "passingRecordField"
Text:  ": "
Literal.Number.Integer:  "0"
Text:  ",<newline>    "
Name:  "andThisOtherRecordField"
Text:  ": "
Literal.Number.Integer:  "10"
Text:  ",<newline>  "
Punctuation:  "})"
Text:  ",<newline>  "
Name:  "name"
Text:  ": "
Literal.String.Double:  "\"joe++\""
Text:  ",<newline>  "
Name:  "age"
Text:  ": "
Name:  "testRecord"
Text:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  ..."
Name.Namespace:  "SomeReally"
Punctuation:  "."
Name:  "longFunctionCall"
Punctuation:  "("
Name:  "withArguments"
Text:  ", "
Punctuation:  "("
Name:  "thatWrap"
Text:  ": "
Keyword.Type:  "bool"
Punctuation:  "))"
Text:  ",<newline>  "
Name:  "name"
Text:  ": "
Literal.String.Double:  "\"joe++\""
Text:  ",<newline>  "
Name:  "age"
Text:  ": "
Name:  "testRecord"
Text:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "anotherRecord"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  ..."
Name.Namespace:  "SomeReally"
Punctuation:  "."
Name:  "longFunctionCall"
Punctuation:  "("
Name:  "withArg"
Text:  ", "
Keyword.Type:  "list"
Punctuation:  "{"
Literal.String.Double:  "\"and\""
Text:  ", "
Literal.String.Double:  "\"final\""
Text:  ", "
Literal.String.Double:  "\"list\""
Text:  ", "
Literal.String.Double:  "\"that\""
Text:  ", "
Literal.String.Double:  "\"should\""
Text:  ", "
Literal.String.Double:  "\"break\""
Punctuation:  "})"
Text:  ",<newline>  "
Name:  "name"
Text:  ": "
Literal.String.Double:  "\"joe++\""
Text:  ",<newline>  "
Name:  "age"
Text:  ": "
Name:  "testRecord"
Text:  "."
Name:  "age"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "10"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Record type punning */"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "props"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "title"
Text:  ": "
Keyword.Type:  "string"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "state"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "unit"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "component"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "props"
Text:  ": "
Name:  "props"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "component2"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "props"
Text:  ": "
Name:  "props"
Text:  ",<newline>  "
Name:  "state"
Text:  ": "
Name:  "state"
Text:  ",<newline>  "
Name:  "updater"
Text:  ": "
Keyword.Type:  "unit"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "component3"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "props"
Text:  ": "
Name.Namespace:  "M"
Punctuation:  "."
Name:  "props"
Text:  ",<newline>  "
Name:  "state"
Text:  ": "
Name:  "state"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "mutableComponent"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Keyword:  "mutable"
Text:  " "
Name:  "props"
Text:  ": "
Name:  "props"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "type"
Text:  " "
Name:  "mutabeleComponent2"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "props"
Text:  ": "
Name:  "props"
Text:  ",<newline>  "
Keyword:  "mutable"
Text:  " "
Name:  "state"
Text:  ": "
Name:  "state"
Text:  ",<newline>  "
Name:  "style"
Text:  ": "
Keyword.Type:  "int"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Don't pun parameterized types */"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "description"
Operator:  "<"
Keyword:  "'"
Name:  "props"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "element"
Text:  ": "
Keyword.Type:  "string"
Text:  ",<newline>  "
Name:  "tag"
Text:  ": "
Name:  "tag"
Operator:  "<"
Keyword:  "'"
Name:  "props"
Operator:  ">"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Don't pun types from other modules */"
Text:  "<newline>"
Keyword:  "module"
Text:  " "
Name.Class:  "Foo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "type"
Text:  " "
Name:  "bar"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "foo"
Text:  ": "
Name.Namespace:  "Baz"
Punctuation:  "."
Name:  "foo"
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Don't pun field names that aren't \"simple\" */"
Text:  "<newline>"
Keyword:  "type"
Text:  " "
Name:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "bar"
Text:  ": "
Name.Namespace:  "Baz"
Punctuation:  "."
Name:  "bar"
Text:  ",<newline>  "
Name:  "qux"
Text:  ": "
Name:  "qux"
Text:  ",<newline>  "
Name:  "fooo"
Text:  ": "
Name.Namespace:  "Fooo"
Punctuation:  "."
Name:  "fooo"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "moreFoo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "bar"
Text:  ": "
Name.Namespace:  "Baz"
Punctuation:  "."
Name:  "bar"
Text:  ",<newline>  "
Name:  "qux"
Text:  ": "
Name:  "qux"
Text:  ",<newline>  "
Name:  "fooo"
Text:  ": "
Name.Namespace:  "Fooo"
Punctuation:  "."
Name:  "fooo"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* record value punning */"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "props"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "title"
Text:  ": "
Literal.String.Double:  "\"hi\""
Punctuation:  "}"
Text:  "<newline>"
Comment.Multiline:  "/* no punning available for a single field. Can't tell the difference with a scope + expression */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "componentA"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "props"
Text:  ": "
Name:  "props"
Punctuation:  "}"
Text:  "<newline>"
Comment.Multiline:  "/* pun for real */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "componentB"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "props"
Text:  ": "
Name:  "props"
Text:  ", "
Name:  "state"
Text:  ": "
Punctuation:  "()}"
Text:  "<newline>"
Comment.Multiline:  "/* pun fields with module prefix too */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name.Namespace:  "Foo"
Punctuation:  "."
Name:  "foo"
Text:  ": "
Name:  "foo"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "bar"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name.Namespace:  "Foo"
Punctuation:  "."
Name:  "foo"
Text:  ": "
Name:  "foo"
Text:  ", "
Name:  "bar"
Text:  ": "
Literal.Number.Integer:  "1"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "bar"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "bar"
Text:  ": "
Literal.Number.Integer:  "1"
Text:  ", "
Name.Namespace:  "Foo"
Punctuation:  "."
Name:  "foo"
Text:  ": "
Name:  "foo"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "bar"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name.Namespace:  "Foo"
Punctuation:  "."
Name:  "foo"
Text:  ": "
Name:  "foo"
Text:  ", "
Name.Namespace:  "Bar"
Punctuation:  "."
Name:  "bar"
Text:  ": "
Name:  "bar"
Punctuation:  "}"
Text:  "<newline><newline>"
Punctuation:  "({"
Name.Namespace:  "M"
Punctuation:  "."
Name:  "x"
Text:  ": "
Name:  "x"
Text:  ", "
Name:  "y"
Punctuation:  "})"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline><newline>"
Keyword:  "switch"
Text:  " "
Name:  "foo"
Text:  " "
Punctuation:  "{"
Text:  "<newline>"
Operator:  "|"
Text:  " "
Punctuation:  "{"
Name:  "y"
Text:  ": "
Literal.Number.Integer:  "1"
Text:  ", "
Name.Namespace:  "M"
Punctuation:  "."
Name:  "x"
Text:  ": "
Name:  "x"
Punctuation:  "}"
Text:  " "
Operator:  "=>"
Text:  " "
Literal.Number.Integer:  "2"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Requested in #566 */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "break_after_equal"
Text:  " "
Operator:  "="
Text:  " "
Name:  "no_break_from_here"
Punctuation:  "("
Name:  "some_call"
Punctuation:  "("
Name:  "to_here"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Pexp_letexception */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "exception"
Text:  " "
Name.Class:  "E"
Text:  "<newline>  "
Name:  "raise"
Punctuation:  "("
Name.Class:  "E"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* # 1587: don't print fun keyword when printing Pexp_fun in a record expression */"
Text:  "<newline>"
Punctuation:  "{"
Name:  "contents"
Text:  ": "
Punctuation:  "()"
Text:  ": "
Keyword.Type:  "unit"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "()}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* #1556: Always break nested record/obj */"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "a"
Text:  ": "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "b"
Text:  ": "
Name:  "c"
Text:  ",<newline>    "
Name:  "d"
Text:  ": "
Name:  "e"
Text:  ",<newline>  "
Punctuation:  "}"
Text:  ",<newline>  "
Name:  "f"
Text:  ": "
Name:  "g"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "a"
Text:  ": "
Punctuation:  "{"
Text:  "<newline>    "
Literal.String.Double:  "\"b\""
Text:  ": "
Name:  "c"
Text:  ",<newline>    "
Literal.String.Double:  "\"d\""
Text:  ": "
Name:  "e"
Text:  ",<newline>  "
Punctuation:  "}"
Text:  ",<newline>  "
Name:  "f"
Text:  ": "
Name:  "g"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Double:  "\"a\""
Text:  ": "
Punctuation:  "{"
Text:  "<newline>    "
Literal.String.Double:  "\"b\""
Text:  ": "
Name:  "c"
Text:  ",<newline>    "
Literal.String.Double:  "\"d\""
Text:  ": "
Name:  "e"
Text:  ",<newline>  "
Punctuation:  "}"
Text:  ",<newline>  "
Literal.String.Double:  "\"f\""
Text:  ": "
Name:  "g"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Double:  "\"a\""
Text:  ": "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "b"
Text:  ": "
Name:  "c"
Text:  ",<newline>    "
Name:  "d"
Text:  ": "
Name:  "e"
Text:  ",<newline>  "
Punctuation:  "}"
Text:  ",<newline>  "
Literal.String.Double:  "\"f\""
Text:  ": "
Name:  "g"
Text:  ",<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "unitLambda"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "()"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "identifierLambda"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "()"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "underscoreLambda"
Text:  " "
Operator:  "="
Text:  " "
Name:  "_"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "()"
Text:  "<newline>"
Name:  "it"
Punctuation:  "("
Literal.String.Double:  "\"should remove parens\""
Text:  ", "
Name:  "a"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"did it work?\""
Punctuation:  ")"
Text:  "<newline>  "
Name:  "print_string"
Punctuation:  "("
Literal.String.Double:  "\"did it work?\""
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "})"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "("
Name:  "preserveBraces"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "inCallback"
Punctuation:  ")"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "("
Name:  "preserveBraces"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "inFirstPos"
Text:  ", "
Name:  "secondArg"
Punctuation:  ")"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "("
Name:  "oneArg"
Text:  ", "
Name:  "preserveBraces"
Text:  " "
Operator:  "=>"
Text:  " "
Name:  "inFirstPos"
Text:  ", "
Name:  "secondArg"
Punctuation:  ")"
Text:  "<newline>"
