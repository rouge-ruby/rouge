Text:  "This text should be ignored."
Text.Whitespace:  "<newline><newline>"
Generic.Heading:  "*** Settings ***"
Text.Whitespace:  "<newline>"
Name.Builtin.Pseudo:  "Documentation"
Text.Whitespace:  "    "
Literal.String:  "Example using the space separated plain text format."
Text.Whitespace:  "<newline>"
Name.Builtin.Pseudo:  "Library"
Text.Whitespace:  "          "
Name.Function:  "OperatingSystem"
Text.Whitespace:  "<newline>"
Name.Builtin.Pseudo:  "Library"
Text.Whitespace:  "    "
Name.Function:  "Telnet"
Text.Whitespace:  "    "
Literal.String:  "prompt=$"
Text.Whitespace:  "    "
Literal.String:  "default_log_level=DEBUG"
Text.Whitespace:  "<newline><newline>"
Generic.Heading:  "*** Variables ***"
Text.Whitespace:  "<newline>"
Name.Variable:  "${MESSAGE}"
Text.Whitespace:  "       "
Literal.String:  "Hello, world!"
Text.Whitespace:  "<newline><newline>"
Generic.Heading:  "*** Test Cases ***"
Text.Whitespace:  "<newline>"
Name.Label:  "My Test"
Text.Whitespace:  "<newline>    "
Punctuation:  "["
Name.Builtin.Pseudo:  "Documentation"
Punctuation:  "]"
Text.Whitespace:  "    "
Literal.String:  "Example test"
Text.Whitespace:  "<newline>    "
Name.Function:  "Log"
Text.Whitespace:  "    "
Name.Variable:  "${MESSAGE}"
Text.Whitespace:  "<newline>    "
Name.Function:  "My Keyword"
Text.Whitespace:  "    "
Literal.String:  "/tmp"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "Another Test"
Text.Whitespace:  "<newline>    "
Name.Function:  "Should Be Equal"
Text.Whitespace:  "    "
Name.Variable:  "${MESSAGE}"
Text.Whitespace:  "    "
Literal.String:  "Hello, world!"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "Using backslash"
Text.Whitespace:  "<newline>    "
Name.Function:  "Do Something"
Text.Whitespace:  "    "
Literal.String:  "first arg"
Text.Whitespace:  "    "
Literal.String:  "\\"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "Templated test case"
Text.Whitespace:  "<newline>    "
Punctuation:  "["
Name.Builtin.Pseudo:  "Template"
Punctuation:  "]"
Text.Whitespace:  "    "
Name.Function:  "Example keyword"
Text.Whitespace:  "<newline>    "
Literal.String:  "first argument"
Text.Whitespace:  "    "
Literal.String:  "second argument"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "No teardown"
Text.Whitespace:  "<newline>    "
Punctuation:  "["
Name.Builtin.Pseudo:  "Documentation"
Punctuation:  "]"
Text.Whitespace:  "    "
Literal.String:  "Default setup, no teardown at all"
Text.Whitespace:  "<newline>    "
Name.Function:  "Do Something"
Text.Whitespace:  "<newline>    "
Punctuation:  "["
Name.Builtin.Pseudo:  "Teardown"
Punctuation:  "]"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "Using variables"
Text.Whitespace:  "<newline>    "
Punctuation:  "["
Name.Builtin.Pseudo:  "Documentation"
Punctuation:  "]"
Text.Whitespace:  "    "
Literal.String:  "Setup and teardown specified using variables"
Text.Whitespace:  "<newline>    "
Punctuation:  "["
Name.Builtin.Pseudo:  "Setup"
Punctuation:  "]"
Text.Whitespace:  "    "
Name.Variable:  "${SETUP}"
Text.Whitespace:  "<newline>    "
Name.Function:  "Do Something"
Text.Whitespace:  "<newline>    "
Punctuation:  "["
Name.Builtin.Pseudo:  "Teardown"
Punctuation:  "]"
Text.Whitespace:  "    "
Name.Variable:  "${TEARDOWN}"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "Valid Login"
Text.Whitespace:  "<newline>    "
Name.Builtin:  "Given "
Name.Function:  "login page is open"
Text.Whitespace:  "<newline>    "
Name.Builtin:  "When "
Name.Function:  "valid username and password are inserted"
Text.Whitespace:  "<newline>    "
Name.Builtin:  "and "
Name.Function:  "credentials are submitted"
Text.Whitespace:  "<newline>    "
Name.Builtin:  "Then "
Name.Function:  "welcome page should be open"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "Example"
Text.Whitespace:  "<newline>    "
Name.Function:  "Keyword"
Text.Whitespace:  "    "
Name.Variable:  "&{DICT}"
Text.Whitespace:  "    "
Literal.String:  "named=arg"
Text.Whitespace:  "<newline>    "
Name.Function:  "Keyword"
Text.Whitespace:  "    "
Literal.String:  "positional"
Text.Whitespace:  "    "
Name.Variable:  "@{LIST}"
Text.Whitespace:  "    "
Name.Variable:  "&{DICT}"
Text.Whitespace:  "<newline>    "
Name.Function:  "Keyword"
Text.Whitespace:  "    "
Name.Variable:  "&{DICT}"
Text.Whitespace:  "    "
Name.Variable:  "&{ANOTHER}"
Text.Whitespace:  "    "
Name.Variable:  "&{ONE MORE}"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "List variable item"
Text.Whitespace:  "<newline>    "
Name.Function:  "Login"
Text.Whitespace:  "    "
Name.Variable:  "${USER}"
Literal.String:  "[0]"
Text.Whitespace:  "    "
Name.Variable:  "${USER}"
Literal.String:  "[1]"
Text.Whitespace:  "<newline>    "
Name.Function:  "Title Should Be"
Text.Whitespace:  "    "
Literal.String:  "Welcome "
Name.Variable:  "${USER}"
Literal.String:  "[0]!"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "Negative index"
Text.Whitespace:  "<newline>    "
Name.Function:  "Log"
Text.Whitespace:  "    "
Name.Variable:  "${LIST}"
Literal.String:  "[-1]"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "Index defined as variable"
Text.Whitespace:  "<newline>    "
Name.Function:  "Log"
Text.Whitespace:  "    "
Name.Variable:  "${LIST}"
Literal.String:  "["
Name.Variable:  "${INDEX}"
Literal.String:  "]"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "Step"
Text.Whitespace:  "<newline>    "
Name.Function:  "Keyword"
Text.Whitespace:  "    "
Name.Variable:  "${LIST}"
Literal.String:  "[::2]"
Text.Whitespace:  "<newline>    "
Name.Function:  "Keyword"
Text.Whitespace:  "    "
Name.Variable:  "${LIST}"
Literal.String:  "[2:-1:2]"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "Multiple Values"
Text.Whitespace:  "<newline>    "
Name.Variable:  "${a}"
Text.Whitespace:  "    "
Name.Variable:  "${b}"
Text.Whitespace:  "    "
Name.Variable:  "${c}"
Text.Whitespace:  " "
Punctuation:  "="
Text.Whitespace:  "    "
Name.Function:  "Return Three Values"
Text.Whitespace:  "<newline>    "
Name.Variable:  "@{list}"
Text.Whitespace:  " "
Punctuation:  "="
Text.Whitespace:  "    "
Name.Function:  "Return Three Values"
Text.Whitespace:  "<newline>    "
Name.Variable:  "${scalar}"
Text.Whitespace:  "    "
Name.Variable:  "@{rest}"
Text.Whitespace:  " "
Punctuation:  "="
Text.Whitespace:  "    "
Name.Function:  "Return Three Values"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "Example"
Text.Whitespace:  "<newline>    "
Name.Function:  "FOR"
Text.Whitespace:  "    "
Name.Variable:  "${animal}"
Text.Whitespace:  "    "
Name.Function:  "IN"
Text.Whitespace:  "    "
Literal.String:  "cat"
Text.Whitespace:  "    "
Literal.String:  "dog"
Text.Whitespace:  "<newline>        "
Name.Function:  "Log"
Text.Whitespace:  "    "
Name.Variable:  "${animal}"
Text.Whitespace:  "<newline>        "
Name.Function:  "Log"
Text.Whitespace:  "    "
Literal.String:  "2nd keyword"
Text.Whitespace:  "<newline>    "
Name.Function:  "END"
Text.Whitespace:  "<newline>    "
Name.Function:  "Log"
Text.Whitespace:  "    "
Literal.String:  "Outside loop"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "For-in-enumerate with two values per iteration"
Text.Whitespace:  "<newline>    "
Name.Function:  "FOR"
Text.Whitespace:  "    "
Name.Variable:  "${index}"
Text.Whitespace:  "    "
Name.Variable:  "${en}"
Text.Whitespace:  "    "
Name.Variable:  "${fi}"
Text.Whitespace:  "    "
Name.Function:  "IN ENUMERATE"
Text.Whitespace:  "<newline>    "
Name.Function:  "..."
Text.Whitespace:  "    "
Literal.String:  "cat"
Text.Whitespace:  "      "
Literal.String:  "kissa"
Text.Whitespace:  "<newline>    "
Name.Function:  "..."
Text.Whitespace:  "    "
Literal.String:  "dog"
Text.Whitespace:  "      "
Literal.String:  "koira"
Text.Whitespace:  "<newline>    "
Name.Function:  "..."
Text.Whitespace:  "    "
Literal.String:  "horse"
Text.Whitespace:  "    "
Literal.String:  "hevonen"
Text.Whitespace:  "<newline>        "
Name.Function:  "Log"
Text.Whitespace:  "    "
Literal.String:  "\""
Name.Variable:  "${en}"
Literal.String:  "\" in English is \""
Name.Variable:  "${fi}"
Literal.String:  "\" in Finnish (index: "
Name.Variable:  "${index}"
Literal.String:  ")"
Text.Whitespace:  "<newline>    "
Name.Function:  "END"
Text.Whitespace:  "<newline><newline>"
Generic.Heading:  "*** Tasks ***"
Text.Whitespace:  "<newline>"
Name.Label:  "Process invoice"
Text.Whitespace:  "<newline>    "
Name.Function:  "Read information from PDF"
Text.Whitespace:  "<newline>    "
Name.Function:  "Validate information"
Text.Whitespace:  "<newline>    "
Name.Function:  "Submit information to backend system"
Text.Whitespace:  "<newline>    "
Name.Function:  "Validate information is visible in web UI"
Text.Whitespace:  "<newline><newline>"
Generic.Heading:  "*** Keywords ***"
Text.Whitespace:  "<newline>"
Name.Label:  "My Keyword"
Text.Whitespace:  "<newline>    "
Punctuation:  "["
Name.Builtin.Pseudo:  "Arguments"
Punctuation:  "]"
Text.Whitespace:  "    "
Name.Variable:  "${path}"
Text.Whitespace:  "<newline>    "
Name.Function:  "Directory Should Exist"
Text.Whitespace:  "    "
Name.Variable:  "${path}"
Text.Whitespace:  "<newline><newline>"
Name.Label:  "I execute \""
Name.Variable:  "${cmd:[^\"]+}"
Name.Label:  "\""
Text.Whitespace:  "<newline>    "
Name.Function:  "Run Process"
Text.Whitespace:  "    "
Name.Variable:  "${cmd}"
Text.Whitespace:  "    "
Literal.String:  "shell=True"
Text.Whitespace:  "<newline><newline>"
Generic.Heading:  "| *** Settings ***   |"
Text.Whitespace:  "<newline>| "
Name.Builtin.Pseudo:  "Documentation"
Text.Whitespace:  "      | "
Literal.String:  "Example using the pipe separated plain text format."
Text.Whitespace:  "<newline>| "
Name.Builtin.Pseudo:  "Library"
Text.Whitespace:  "            | "
Name.Function:  "OperatingSystem"
Text.Whitespace:  "<newline><newline>"
Generic.Heading:  "| *** Variables ***  |"
Text.Whitespace:  "<newline>| "
Name.Variable:  "${MESSAGE}"
Text.Whitespace:  "         | "
Literal.String:  "Hello, world!"
Text.Whitespace:  "<newline><newline>"
Generic.Heading:  "| *** Test Cases *** |                 |              |"
Text.Whitespace:  "<newline>| "
Name.Label:  "My Test"
Text.Whitespace:  "            | "
Punctuation:  "["
Name.Builtin.Pseudo:  "Documentation"
Punctuation:  "]"
Text.Whitespace:  " | "
Literal.String:  "Example test"
Text.Whitespace:  " |<newline>|                    | "
Name.Function:  "Log"
Text.Whitespace:  "             | "
Name.Variable:  "${MESSAGE}"
Text.Whitespace:  "   |<newline>|                    | "
Name.Function:  "My Keyword"
Text.Whitespace:  "      | "
Literal.String:  "/tmp"
Text.Whitespace:  "         |<newline>| "
Name.Label:  "Another Test"
Text.Whitespace:  "       | "
Name.Function:  "Should Be Equal"
Text.Whitespace:  " | "
Name.Variable:  "${MESSAGE}"
Text.Whitespace:  "   | "
Literal.String:  "Hello, world!"
Text.Whitespace:  "<newline><newline>"
Generic.Heading:  "| *** Keywords ***   |                        |         |"
Text.Whitespace:  "<newline>| "
Name.Label:  "My Keyword"
Text.Whitespace:  "         | "
Punctuation:  "["
Name.Builtin.Pseudo:  "Arguments"
Punctuation:  "]"
Text.Whitespace:  "            | "
Name.Variable:  "${path}"
Text.Whitespace:  " |<newline>|                    | "
Name.Function:  "Directory Should Exist"
Text.Whitespace:  " | "
Name.Variable:  "${path}"
Text.Whitespace:  " |<newline><newline>"
Generic.Heading:  "| *** Test Cases *** |                 |                 |                      |"
Text.Whitespace:  "<newline>| "
Name.Label:  "Escaping Pipe"
Text.Whitespace:  "      | "
Name.Variable:  "${file count}"
Text.Whitespace:  " "
Punctuation:  "="
Text.Whitespace:  " | "
Name.Function:  "Execute Command"
Text.Whitespace:  " | "
Literal.String:  "ls -1 *.txt \\| wc -l"
Text.Whitespace:  " |<newline>|                    | "
Name.Function:  "Should Be Equal"
Text.Whitespace:  " | "
Name.Variable:  "${file count}"
Text.Whitespace:  "   | "
Literal.String:  "42"
Text.Whitespace:  "                   |<newline><newline>"
Generic.Heading:  "*** Settings ***"
Text.Whitespace:  "<newline>"
Name.Builtin.Pseudo:  "Documentation"
Text.Whitespace:  "      "
Literal.String:  "This is documentation for this test suite."
Text.Whitespace:  "<newline>...                "
Literal.String:  "This kind of documentation can often be get quite long..."
Text.Whitespace:  "<newline>"
Name.Builtin.Pseudo:  "Default Tags"
Text.Whitespace:  "       "
Literal.String:  "default tag 1"
Text.Whitespace:  "    "
Literal.String:  "default tag 2"
Text.Whitespace:  "    "
Literal.String:  "default tag 3"
Text.Whitespace:  "<newline>...                "
Literal.String:  "default tag 4"
Text.Whitespace:  "    "
Literal.String:  "default tag 5"
Text.Whitespace:  "<newline><newline>"
Generic.Heading:  "*** Variable ***"
Text.Whitespace:  "<newline>"
Name.Variable:  "@{LIST}"
Text.Whitespace:  "            "
Literal.String:  "this"
Text.Whitespace:  "     "
Literal.String:  "list"
Text.Whitespace:  "     "
Literal.String:  "is"
Text.Whitespace:  "      "
Literal.String:  "quite"
Text.Whitespace:  "    "
Literal.String:  "long"
Text.Whitespace:  "     "
Literal.String:  "and"
Text.Whitespace:  "<newline>...                "
Literal.String:  "items in it could also be long"
Text.Whitespace:  "<newline><newline>"
Generic.Heading:  "*** Test Cases ***"
Text.Whitespace:  "<newline>"
Name.Label:  "Example"
Text.Whitespace:  "<newline>    "
Punctuation:  "["
Name.Builtin.Pseudo:  "Tags"
Punctuation:  "]"
Text.Whitespace:  "    "
Literal.String:  "you"
Text.Whitespace:  "    "
Literal.String:  "probably"
Text.Whitespace:  "    "
Literal.String:  "do"
Text.Whitespace:  "    "
Literal.String:  "not"
Text.Whitespace:  "    "
Literal.String:  "have"
Text.Whitespace:  "    "
Literal.String:  "this"
Text.Whitespace:  "    "
Literal.String:  "many"
Text.Whitespace:  "<newline>    "
Name.Function:  "..."
Text.Whitespace:  "       "
Literal.String:  "tags"
Text.Whitespace:  "    "
Literal.String:  "in"
Text.Whitespace:  "    "
Literal.String:  "real"
Text.Whitespace:  "   "
Literal.String:  "life"
Text.Whitespace:  "<newline>    "
Name.Function:  "Do X"
Text.Whitespace:  "    "
Literal.String:  "first argument"
Text.Whitespace:  "    "
Literal.String:  "second argument"
Text.Whitespace:  "    "
Literal.String:  "third argument"
Text.Whitespace:  "<newline>    "
Name.Function:  "..."
Text.Whitespace:  "    "
Literal.String:  "fourth argument"
Text.Whitespace:  "    "
Literal.String:  "fifth argument"
Text.Whitespace:  "    "
Literal.String:  "sixth argument"
Text.Whitespace:  "<newline>"
