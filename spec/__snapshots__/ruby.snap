Comment.Single:  "#######"
Text:  "<newline>"
Comment.Single:  "# ruby 1.9 examples"
Text:  "<newline>"
Comment.Single:  "#######"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Random"
Text:  "<newline>  "
Name.Constant:  "RANDOM_VAR"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>  "
Name.Constant:  "RANDOM_2"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "2"
Text:  "<newline>  "
Name.Constant:  "RANDOM_3"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "3"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name:  "state"
Text:  " "
Literal.String.Symbol:  ":foo"
Text:  " "
Keyword:  "do"
Text:  "<newline>  "
Name:  "rule"
Text:  " "
Literal.String.Regex:  "%r(/)"
Text:  " "
Keyword:  "do"
Text:  "<newline>    "
Name:  "token"
Text:  " "
Name.Constant:  "Operator"
Text:  "<newline>    "
Name:  "goto"
Text:  " "
Literal.String.Symbol:  ":expr_start"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline><newline>  "
Name:  "rule"
Punctuation:  "("
Literal.String.Regex:  "//"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "goto"
Text:  " "
Literal.String.Symbol:  ":method_call_spaced"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name:  "state"
Text:  " "
Literal.String.Symbol:  ":foo"
Text:  " "
Keyword:  "do"
Text:  "<newline>  "
Name:  "rule"
Text:  " "
Literal.String.Regex:  "%r(/)"
Punctuation:  ","
Text:  " "
Name.Constant:  "Thing"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Literal.String.Other:  "%i(this is an array of symbols)"
Text:  "<newline>"
Literal.String.Other:  "%I(this is too, but with "
Literal.String.Interpol:  "\#{"
Name.Variable.Instance:  "@interpolation"
Literal.String.Interpol:  "}"
Literal.String.Other:  ")"
Text:  "<newline>"
Name.Builtin:  "hash"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Literal.String.Symbol:  "answer: "
Literal.Number.Integer:  "42"
Punctuation:  ","
Text:  " "
Literal.String.Symbol:  "special?: "
Keyword.Pseudo:  "true"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name:  "link_to"
Text:  " "
Literal.String.Single:  "'new'"
Punctuation:  ","
Text:  " "
Name:  "new_article_path"
Punctuation:  ","
Text:  " "
Literal.String.Symbol:  "class: "
Literal.String.Single:  "'btn'"
Text:  "<newline><newline>"
Comment.Single:  "########"
Text:  "<newline>"
Comment.Single:  "# Ternaries"
Text:  "<newline>"
Comment.Single:  "########"
Text:  "<newline><newline>"
Comment.Single:  "# NB [jneen]: MRI ruby actually has different parsing behavior depending on"
Text:  "<newline>"
Comment.Single:  "# ~what variables are defined~, which we can't know in a highlighting context."
Text:  "<newline>"
Comment.Single:  "# So... we're going to be wrong here, sometimes. Whatever. These cases look"
Text:  "<newline>"
Comment.Single:  "# okay though, but if they break I don't care a whole lot, because Ruby itself"
Text:  "<newline>"
Comment.Single:  "# doesn't parse them consistently."
Text:  "<newline><newline>"
Name:  "a"
Text:  " "
Punctuation:  "?"
Text:  " "
Name:  "b"
Operator:  "::"
Name:  "c"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String.Symbol:  ":d"
Text:  " "
Comment.Single:  "# parsed as (a) ? (b::c) : (:d)"
Text:  "<newline>"
Name:  "a"
Text:  " "
Punctuation:  "?"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String.Symbol:  ":c"
Text:  "    "
Comment.Single:  "# parsed as (a) ? (b) : (:c)"
Text:  "<newline>"
Name:  "a"
Text:  " "
Punctuation:  "?"
Text:  " "
Name:  "b"
Punctuation:  ":"
Name:  "c"
Text:  "       "
Comment.Single:  "# parsed as (a) ? (b) : (c)"
Text:  "<newline>"
Name:  "a"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.String.Symbol:  ":b"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.String.Symbol:  ":c"
Text:  "   "
Comment.Single:  "# parsed as (a) ? (:b) : (:c)"
Text:  "<newline>"
Name:  "a"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.String.Symbol:  ":b"
Text:  " "
Punctuation:  ":"
Name:  "c"
Text:  "     "
Comment.Single:  "# parsed as (a) ? (:b) : (c)"
Text:  "<newline>"
Name:  "a"
Text:  " "
Punctuation:  "?"
Name:  "b"
Punctuation:  ":"
Name:  "c"
Text:  "        "
Comment.Single:  "# parsed as (a) ? (b) : (c)"
Text:  "<newline>"
Name:  "a"
Text:  " "
Punctuation:  "?"
Name:  "b"
Text:  " "
Punctuation:  ":"
Name:  "c"
Text:  "       "
Comment.Single:  "# parsed as (a) ? (b) : (c)"
Text:  "<newline>"
Punctuation:  "("
Name:  "a"
Punctuation:  ")"
Text:  " "
Punctuation:  "?"
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "c"
Text:  "   "
Comment.Single:  "# parsed as (a) ? (b) : (c)"
Text:  "<newline>"
Punctuation:  "("
Name:  "a"
Punctuation:  ")"
Text:  "    "
Punctuation:  "\\"
Text:  "      "
Comment.Single:  "# parsed as (a) ? (:b) : (:c)"
Text:  "<newline> "
Punctuation:  "?"
Text:  " "
Literal.String.Symbol:  ":b"
Text:  "  "
Punctuation:  "\\"
Text:  "<newline> "
Punctuation:  ":"
Text:  " "
Literal.String.Symbol:  ":c"
Text:  "<newline>"
Punctuation:  "("
Name:  "a"
Punctuation:  ")"
Text:  " "
Punctuation:  "?"
Text:  "         "
Comment.Single:  "# parsed as (a) ? (:b) : (:c)"
Text:  "<newline> "
Literal.String.Symbol:  ":b"
Text:  " "
Punctuation:  ":"
Text:  "<newline> "
Literal.String.Symbol:  ":c"
Text:  "<newline>"
Name:  "a"
Text:  "             "
Comment.Single:  "# parsed as (a) ? (b) : (c)"
Text:  "<newline> "
Punctuation:  "?"
Text:  " "
Name:  "b"
Text:  "<newline> "
Punctuation:  ":"
Text:  " "
Name:  "c"
Text:  "<newline>"
Literal.String.Char:  "??"
Punctuation:  "?"
Literal.String.Char:  "??"
Punctuation:  ":"
Literal.String.Char:  "??"
Text:  "      "
Comment.Single:  "# parsed as (??) ? (??) : (??)"
Text:  "<newline>"
Literal.String.Regex:  "//"
Punctuation:  "?"
Literal.String.Regex:  "//"
Punctuation:  ":"
Literal.String.Regex:  "//"
Text:  "      "
Comment.Single:  "# parsed as (//) ? (//) : (//)"
Text:  "<newline><newline>"
Name:  "method_that_takes_a_char"
Text:  " "
Punctuation:  "?"
Name:  "b"
Text:  "<newline>"
Name:  "cond?"
Literal.String.Char:  "?b"
Operator:  "::"
Name:  "c"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "d"
Text:  "<newline>"
Name:  "a?b"
Text:  " "
Literal.String.Symbol:  ":c"
Text:  "        "
Comment.Single:  "# parsed as a? (b) (:c), syntax error for missing comma"
Text:  "<newline>"
Name:  "a?b"
Literal.String.Symbol:  ":c"
Text:  "         "
Comment.Single:  "# parsed as a?(b: c), b is a symbol"
Text:  "<newline><newline><newline>"
Name:  "a"
Operator:  "/"
Literal.Number.Integer:  "1"
Text:  " "
Comment.Single:  "# comment"
Text:  "<newline>"
Name:  "a"
Text:  " "
Operator:  "/"
Text:  " "
Name:  "b"
Text:  " "
Comment.Single:  "# comment"
Text:  "<newline>"
Name:  "a"
Text:  " "
Literal.String.Regex:  "/1 \\r[egex]\\//"
Text:  "<newline>"
Name:  "a"
Operator:  "/"
Text:  " "
Name:  "b"
Text:  " "
Comment.Single:  "#comment"
Text:  "<newline>"
Name:  "x"
Punctuation:  "."
Name.Function:  "a"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Comment.Single:  "# comment"
Text:  "<newline>"
Name.Constant:  "Foo"
Operator:  "::"
Name:  "a"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "4"
Text:  "<newline><newline>"
Comment.Single:  "########"
Text:  "<newline>"
Comment.Single:  "# Keywords that may be immediately followed by an opening"
Text:  "<newline>"
Comment.Single:  "# parenthesis"
Text:  "<newline>"
Comment.Single:  "########"
Text:  "<newline><newline>"
Comment.Single:  "# defined?"
Text:  "<newline>"
Keyword:  "return"
Text:  " "
Keyword:  "if"
Text:  " "
Keyword:  "defined?"
Text:  " "
Name.Constant:  "Rouge"
Text:  "<newline>"
Keyword:  "return"
Text:  " "
Keyword:  "unless"
Text:  " "
Keyword:  "defined?"
Punctuation:  "("
Name.Constant:  "Foobar"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "# super"
Text:  "<newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Beta"
Text:  " "
Operator:  "<"
Text:  " "
Name.Constant:  "Alpha"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "gamma"
Punctuation:  "("
Name:  "msg"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "super"
Text:  "<newline>    "
Name.Variable.Instance:  "@msg"
Text:  " "
Operator:  "="
Text:  " "
Name:  "msg"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Bar"
Text:  " "
Operator:  "<"
Text:  " "
Name.Constant:  "Foo"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "log"
Punctuation:  "("
Name:  "msg"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "super"
Punctuation:  "()"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Ipsum"
Text:  " "
Operator:  "<"
Text:  " "
Name.Constant:  "Lorem"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "dolor"
Punctuation:  "("
Name:  "txt"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "super"
Punctuation:  "("
Name:  "txt"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "########"
Text:  "<newline>"
Comment.Single:  "# Various types of class definitions"
Text:  "<newline>"
Comment.Single:  "########"
Text:  "<newline><newline>"
Comment.Single:  "# Singleton class definition"
Text:  "<newline>"
Keyword:  "module"
Text:  " "
Name.Namespace:  "Table"
Text:  "<newline>  "
Keyword:  "module"
Text:  " "
Name.Namespace:  "Row"
Text:  "<newline>    "
Name.Constant:  "DEFAULTS"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Literal.String.Symbol:  "cell_width: "
Literal.Number.Integer:  "80"
Punctuation:  ","
Text:  " "
Literal.String.Symbol:  "cell_height: "
Literal.Number.Integer:  "60"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword:  "class"
Text:  " "
Operator:  "<<"
Text:  " "
Name.Builtin:  "self"
Text:  "<newline>      "
Keyword:  "def"
Text:  " "
Name.Function:  "styles"
Text:  " "
Name:  "hsh"
Text:  "<newline>        "
Name:  "hsh"
Punctuation:  "."
Name.Function:  "merge"
Text:  " "
Name.Constant:  "DEFAULTS"
Text:  "<newline>      "
Keyword:  "end"
Text:  "<newline>    "
Keyword:  "end"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "# Nested class name"
Text:  "<newline>"
Keyword:  "module"
Text:  " "
Name.Namespace:  "Table"
Text:  "<newline>  "
Keyword:  "module"
Text:  " "
Name.Namespace:  "Row"
Text:  "<newline>    "
Keyword:  "class"
Text:  " "
Name.Class:  "Cell"
Text:  " "
Operator:  "<"
Text:  " "
Name.Constant:  "Table"
Operator:  "::"
Name.Constant:  "Block"
Text:  "<newline>      "
Name.Constant:  "WIDTH"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "TABLE"
Operator:  "::"
Name.Constant:  "ROW"
Operator:  "::"
Name:  "styles"
Punctuation:  "["
Literal.String.Symbol:  ":cell_width"
Punctuation:  "]"
Text:  "<newline><newline>      "
Keyword:  "def"
Text:  " "
Name.Function:  "text"
Text:  " "
Name:  "string"
Punctuation:  ","
Text:  " "
Name:  "width"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "WIDTH"
Text:  "<newline>        "
Name:  "string"
Punctuation:  "."
Name.Function:  "center"
Text:  " "
Name:  "width"
Text:  "<newline>      "
Keyword:  "end"
Text:  "<newline>    "
Keyword:  "end"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "# Compact class name"
Text:  "<newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Table::Row::Cell"
Text:  " "
Operator:  "<"
Text:  " "
Name.Constant:  "Table"
Operator:  "::"
Name.Constant:  "Block"
Text:  "<newline>  "
Name.Constant:  "WIDTH"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "TABLE"
Operator:  "::"
Name.Constant:  "ROW"
Operator:  "::"
Name:  "styles"
Punctuation:  "["
Literal.String.Symbol:  ":cell_width"
Punctuation:  "]"
Text:  "<newline><newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "text"
Text:  " "
Name:  "string"
Punctuation:  ","
Text:  " "
Name:  "width"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "WIDTH"
Text:  "<newline>    "
Name:  "string"
Punctuation:  "."
Name.Function:  "center"
Text:  " "
Name:  "width"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "########"
Text:  "<newline>"
Comment.Single:  "# The popular . :bow:"
Text:  "<newline>"
Comment.Single:  "########"
Text:  "<newline><newline>"
Comment.Single:  "# It appears in Floats"
Text:  "<newline>"
Literal.Number.Float:  "2.3"
Text:  "<newline>"
Literal.Number.Float:  "1.2e3"
Text:  "<newline>"
Literal.Number.Float:  "1e23"
Text:  "<newline>"
Literal.Number.Float:  "1_2.3_4e5"
Text:  "<newline><newline>"
Comment.Single:  "# It appears in Range"
Text:  "<newline>"
Literal.Number.Integer:  "1"
Operator:  ".."
Literal.Number.Integer:  "10"
Text:  "<newline><newline>"
Comment.Single:  "# It can even appear thrice in a row!"
Text:  "<newline>"
Literal.Number.Integer:  "10"
Operator:  "..."
Literal.Number.Integer:  "100"
Text:  "<newline><newline>"
Comment.Single:  "########"
Text:  "<newline>"
Comment.Single:  "# method calls"
Text:  "<newline>"
Comment.Single:  "########"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "."
Name.Function:  "bar"
Text:  "<newline>"
Name:  "foo"
Punctuation:  "."
Name.Function:  "bar"
Punctuation:  "."
Name.Function:  "baz"
Text:  "<newline>"
Name:  "foo"
Punctuation:  "."
Name.Function:  "bar"
Punctuation:  "("
Literal.Number.Integer:  "123"
Punctuation:  ")."
Name.Function:  "baz"
Punctuation:  "()"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "."
Text:  "<newline>  "
Name.Function:  "bar"
Text:  "<newline><newline>"
Name:  "foo"
Text:  "<newline>  "
Punctuation:  "."
Name.Function:  "bar"
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "."
Name.Function:  "baz"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "."
Text:  "<newline>  "
Name.Function:  "bar"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "."
Text:  "<newline>  "
Name.Function:  "bar"
Punctuation:  "()."
Text:  "<newline>  "
Name.Function:  "baz"
Text:  "<newline><newline>"
Comment.Single:  "########"
Text:  "<newline>"
Comment.Single:  "# function definitions"
Text:  "<newline>"
Comment.Single:  "########"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Punctuation:  "("
Name:  "get_foo"
Punctuation:  "("
Literal.String.Double:  "\"blub\""
Punctuation:  "))"
Operator:  "::"
Name.Class:  "Foo"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Punctuation:  "("
Name:  "foo"
Punctuation:  "("
Literal.String.Double:  "\"bar\""
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "bar"
Punctuation:  "("
Literal.String.Double:  "\"baz\""
Punctuation:  "))"
Operator:  "."
Name.Function:  "something"
Text:  " "
Name:  "argh"
Punctuation:  ","
Text:  " "
Name:  "aaahaa"
Text:  "<newline>    "
Literal.Number.Integer:  "42"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "-@"
Text:  "<newline>  "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  "-"
Text:  " "
Name.Builtin:  "self"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name:  "get_the_fuck"
Punctuation:  "("
Literal.String.Double:  "\"out\""
Punctuation:  ")"
Operator:  "::"
Name.Constant:  "Of"
Operator:  "::"
Name.Constant:  "My"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "parser_definition"
Text:  "<newline>    "
Name:  "ruby!"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "###############"
Text:  "<newline>"
Comment.Single:  "# General"
Text:  "<newline>"
Comment.Single:  "###############"
Text:  "<newline><newline>"
Name:  "a"
Punctuation:  "."
Name.Function:  "each"
Punctuation:  "{"
Operator:  "|"
Name:  "el"
Operator:  "|"
Name:  "anz"
Punctuation:  "["
Name:  "el"
Punctuation:  "]"
Operator:  "="
Name:  "anz"
Punctuation:  "["
Name:  "el"
Punctuation:  "]?"
Name:  "anz"
Punctuation:  "["
Name:  "el"
Punctuation:  "]"
Operator:  "+"
Literal.Number.Integer:  "1"
Punctuation:  ":"
Literal.Number.Integer:  "1"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "while"
Text:  " "
Name:  "x"
Operator:  "<"
Literal.Number.Integer:  "10000"
Text:  "<newline>"
Comment.Single:  "#a bis f dienen dazu die Nachbarschaft festzulegen. Man stelle sich die #Zahl von 1 bis 64 im Bin\u00E4rcode vor 1 bedeutet an 0 aus"
Text:  "<newline>  "
Name:  "b"
Operator:  "="
Punctuation:  "("
Name.Builtin:  "p"
Punctuation:  "["
Name:  "x"
Punctuation:  "]"
Operator:  "%"
Literal.Number.Integer:  "32"
Punctuation:  ")"
Operator:  "/"
Literal.Number.Integer:  "16"
Operator:  "<"
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline><newline>  "
Punctuation:  "("
Name:  "x"
Operator:  "-"
Literal.Number.Integer:  "102"
Operator:  ">="
Literal.Number.Integer:  "0"
Punctuation:  "?"
Text:  " "
Name:  "n"
Punctuation:  "["
Name:  "x"
Operator:  "-"
Literal.Number.Integer:  "102"
Punctuation:  "]."
Name.Function:  "to_i"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Operator:  "*"
Name:  "a"
Operator:  "+"
Punctuation:  "("
Name:  "x"
Operator:  "-"
Literal.Number.Integer:  "101"
Operator:  ">="
Literal.Number.Integer:  "0"
Punctuation:  "?"
Name:  "n"
Punctuation:  "["
Name:  "x"
Operator:  "-"
Literal.Number.Integer:  "101"
Punctuation:  "]."
Name.Function:  "to_i"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Operator:  "*"
Name:  "e"
Operator:  "+"
Name:  "n"
Punctuation:  "["
Name:  "x"
Operator:  "-"
Literal.Number.Integer:  "100"
Punctuation:  "]."
Name.Function:  "to_i"
Operator:  "+"
Punctuation:  "("
Name:  "x"
Operator:  "-"
Literal.Number.Integer:  "99"
Operator:  ">="
Literal.Number.Integer:  "0"
Punctuation:  "?"
Text:  " "
Name:  "n"
Punctuation:  "["
Name:  "x"
Operator:  "-"
Literal.Number.Integer:  "99"
Punctuation:  "]."
Name.Function:  "to_i"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Operator:  "*"
Name:  "f"
Operator:  "+"
Punctuation:  "("
Name:  "x"
Operator:  "-"
Literal.Number.Integer:  "98"
Operator:  ">="
Literal.Number.Integer:  "0"
Punctuation:  "?"
Text:  " "
Name:  "n"
Punctuation:  "["
Name:  "x"
Operator:  "-"
Literal.Number.Integer:  "98"
Punctuation:  "]."
Name.Function:  "to_i"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Operator:  "*"
Name:  "a"
Operator:  "+"
Text:  "<newline>  "
Name:  "n"
Punctuation:  "["
Name:  "x"
Operator:  "+"
Literal.Number.Integer:  "199"
Punctuation:  "]."
Name.Function:  "to_i"
Operator:  "*"
Name:  "b"
Operator:  "+"
Name:  "n"
Punctuation:  "["
Name:  "x"
Operator:  "+"
Literal.Number.Integer:  "200"
Punctuation:  "]."
Name.Function:  "to_i"
Operator:  "*"
Name:  "d"
Operator:  "+"
Name:  "n"
Punctuation:  "["
Name:  "x"
Operator:  "+"
Literal.Number.Integer:  "201"
Punctuation:  "]."
Name.Function:  "to_i"
Operator:  "*"
Name:  "b"
Text:  "<newline><newline>"
Comment.Single:  "#und die Ausgabe folgt"
Text:  "<newline>"
Name:  "g"
Operator:  "="
Literal.String.Other:  "%w{}"
Text:  "<newline>"
Name:  "x"
Operator:  "="
Literal.Number.Integer:  "0"
Text:  "<newline><newline>"
Comment.Single:  "#leere regex"
Text:  "<newline>"
Name.Builtin:  "test"
Text:  " "
Literal.String.Regex:  "//"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "123"
Text:  "<newline><newline>"
Punctuation:  "{"
Literal.String.Symbol:  "staples: "
Literal.String.Regex:  "/\\ASTAPLE?S?\\s*[0-9]/i"
Punctuation:  ","
Text:  "<newline> "
Literal.String.Symbol:  "target: "
Literal.String.Double:  "\"^TARGET \""
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "while"
Text:  " "
Name:  "x"
Operator:  "<"
Literal.Number.Integer:  "100"
Text:  "<newline> "
Name.Builtin:  "puts"
Literal.String.Double:  "\""
Literal.String.Interpol:  "\#{"
Name:  "g"
Punctuation:  "["
Name:  "x"
Punctuation:  "]"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text:  "<newline> "
Name:  "x"
Operator:  "+="
Literal.Number.Integer:  "1"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name.Builtin:  "puts"
Literal.String.Double:  "\"\""
Text:  "<newline>"
Name.Builtin:  "sleep"
Punctuation:  "("
Literal.Number.Integer:  "10"
Punctuation:  ")"
Text:  "<newline><newline>"
Literal.Number.Float:  "1E1"
Name.Constant:  "E1"
Text:  "<newline>"
Name.Builtin:  "puts"
Text:  " "
Literal.Number.Integer:  "30"
Punctuation:  "."
Name.Function:  "send"
Punctuation:  "("
Literal.String.Symbol:  ":/"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  ")"
Text:  " "
Comment.Single:  "# prints 6"
Text:  "<newline><newline>"
Comment.Single:  "# fun with class attributes"
Text:  "<newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Foo"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Class:  "self"
Operator:  "."
Name.Function:  "blub"
Text:  " "
Name:  "x"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "not"
Text:  " "
Name:  "x"
Punctuation:  "."
Name.Function:  "nil?"
Text:  "<newline>      "
Name.Builtin:  "self"
Punctuation:  "."
Name.Function:  "new"
Text:  "<newline>    "
Keyword:  "end"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "another_way_to_get_class"
Text:  "<newline>    "
Name.Builtin:  "self"
Punctuation:  "."
Name.Function:  "class"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Comment.Single:  "# ruby 1.9 \"call operator\""
Text:  "<newline>"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Proc"
Punctuation:  "."
Name.Function:  "new"
Text:  " "
Punctuation:  "{"
Text:  " "
Literal.Number.Integer:  "42"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name:  "a"
Operator:  "."
Punctuation:  "()"
Text:  "<newline><newline>"
Literal.String.Double:  "\"instance variables can be "
Literal.String.Interpol:  "\#@included"
Literal.String.Double:  ", "
Literal.String.Interpol:  "\#@@class_variables"
Literal.String.Escape:  "<newline>"
Literal.String.Double:  " and "
Literal.String.Interpol:  "\#$globals"
Literal.String.Double:  " as well.\""
Text:  "<newline>"
Literal.String.Backtick:  "`instance variables can be "
Literal.String.Interpol:  "\#@included"
Literal.String.Backtick:  ", "
Literal.String.Interpol:  "\#@@class_variables"
Literal.String.Escape:  "<newline>"
Literal.String.Backtick:  " and "
Literal.String.Interpol:  "\#$globals"
Literal.String.Backtick:  " as well.`"
Text:  "<newline>"
Literal.String.Single:  "'instance variables can be \#@included, \#@@class_variables<newline> and \#$globals as well.'"
Text:  "<newline>"
Literal.String.Regex:  "/instance variables can be "
Literal.String.Interpol:  "\#@included"
Literal.String.Regex:  ", "
Literal.String.Interpol:  "\#@@class_variables"
Literal.String.Regex:  "<newline> and "
Literal.String.Interpol:  "\#$globals"
Literal.String.Regex:  " as well./mousenix"
Text:  "<newline>"
Literal.String.Symbol:  ":\"instance variables can be "
Literal.String.Interpol:  "\#@included"
Literal.String.Symbol:  ", "
Literal.String.Interpol:  "\#@@class_variables"
Literal.String.Escape:  "<newline>"
Literal.String.Symbol:  " and "
Literal.String.Interpol:  "\#$globals"
Literal.String.Symbol:  " as well.\""
Text:  "<newline>"
Literal.String.Symbol:  ":'instance variables can be \#@included, \#@@class_variables<newline> and \#$globals as well.'"
Text:  "<newline>"
Literal.String.Other:  "%'instance variables can be \#@included, \#@@class_variables<newline> and \#$globals as well.'"
Text:  "<newline>"
Literal.String.Other:  "%q'instance variables can be \#@included, \#@@class_variables<newline> and \#$globals as well.'"
Text:  "<newline>"
Literal.String.Other:  "%Q'instance variables can be "
Literal.String.Interpol:  "\#@included"
Literal.String.Other:  ", "
Literal.String.Interpol:  "\#@@class_variables"
Literal.String.Escape:  "<newline>"
Literal.String.Other:  " and "
Literal.String.Interpol:  "\#$globals"
Literal.String.Other:  " as well.'"
Text:  "<newline>"
Literal.String.Other:  "%w'instance variables can be \#@included, \#@@class_variables<newline> and \#$globals as well.'"
Text:  "<newline>"
Literal.String.Other:  "%W'instance variables can be "
Literal.String.Interpol:  "\#@included"
Literal.String.Other:  ", "
Literal.String.Interpol:  "\#@@class_variables"
Literal.String.Escape:  "<newline>"
Literal.String.Other:  " and "
Literal.String.Interpol:  "\#$globals"
Literal.String.Other:  " as well.'"
Text:  "<newline>"
Literal.String.Other:  "%s'instance variables can be \#@included, \#@@class_variables<newline> and \#$globals as well.'"
Text:  "<newline>"
Literal.String.Regex:  "%r'instance variables can be "
Literal.String.Interpol:  "\#@included"
Literal.String.Regex:  ", "
Literal.String.Interpol:  "\#@@class_variables"
Literal.String.Escape:  "<newline>"
Literal.String.Regex:  " and "
Literal.String.Interpol:  "\#$globals"
Literal.String.Regex:  " as well.'"
Text:  "<newline>"
Literal.String.Other:  "%x'instance variables can be "
Literal.String.Interpol:  "\#@included"
Literal.String.Other:  ", "
Literal.String.Interpol:  "\#@@class_variables"
Literal.String.Escape:  "<newline>"
Literal.String.Other:  " and "
Literal.String.Interpol:  "\#$globals"
Literal.String.Other:  " as well.'"
Text:  "<newline><newline>"
Comment.Single:  "#%W[ but \#@0illegal_values look strange.]"
Text:  "<newline><newline>"
Literal.String.Other:  "%s#ruby allows strange#"
Punctuation:  "{"
Name:  "constructs"
Punctuation:  "}"
Text:  "<newline>"
Literal.String.Other:  "%s#ruby allows strange#"
Name.Variable.Global:  "$constructs"
Text:  "<newline>"
Literal.String.Other:  "%s#ruby allows strange#"
Name.Variable.Class:  "@@constructs"
Text:  "<newline><newline>"
Literal.String.Other:  "%( hash mark: # )"
Text:  "<newline>"
Literal.String.Regex:  "%r( hash mark: # )"
Text:  "<newline>"
Literal.String.Other:  "%w( ! $ % # )"
Text:  "<newline><newline>"
Comment.Single:  "# this is modulo"
Text:  "<newline>"
Name:  "board"
Punctuation:  "["
Name:  "i"
Operator:  "/"
Name:  "w"
Punctuation:  "]["
Name:  "i"
Operator:  "%"
Name:  "w"
Punctuation:  "]"
Text:  " "
Operator:  "=="
Text:  " "
Literal.String.Single:  "'O'"
Text:  "<newline>"
Name.Builtin:  "puts"
Text:  " "
Punctuation:  "[["
Name:  "x"
Operator:  "%"
Name:  "w"
Punctuation:  "]."
Name.Function:  "reverse"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Single:  "# this is a method that takes a list"
Text:  "<newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "x"
Punctuation:  "("
Name:  "s"
Punctuation:  ")"
Text:  " "
Name.Builtin:  "puts"
Text:  " "
Name:  "x"
Text:  " "
Keyword:  "end"
Text:  "<newline>"
Name:  "x"
Text:  " "
Literal.String.Other:  "%w].]"
Text:  "<newline><newline>"
Comment.Single:  "##################################################################"
Text:  "<newline>"
Comment.Single:  "# HEREDOCS"
Text:  "<newline>"
Operator:  "<<-"
Name.Constant:  "CONTENT"
Punctuation:  "."
Name.Function:  "strip_heredoc"
Literal.String.Heredoc:  "<newline>  D<newline>  E<newline>"
Name.Constant:  "CONTENT"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "("
Operator:  "<<-"
Name.Constant:  "A"
Punctuation:  ","
Text:  " "
Operator:  "<<-"
Name.Constant:  "B"
Punctuation:  ")"
Literal.String.Heredoc:  "<newline>this is the text of a<newline>"
Name.Constant:  "A"
Literal.String.Heredoc:  "<newline>and this is the text of b<newline>"
Name.Constant:  "B"
Text:  "<newline><newline>"
Operator:  "<<~"
Name.Constant:  "END"
Literal.String.Heredoc:  "<newline>This is a Ruby 2.3 stripped heredoc<newline>"
Name.Constant:  "END"
Text:  "<newline><newline>"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "<<"
Name.Constant:  "\"EOF\""
Literal.String.Heredoc:  "<newline>This is a multiline "
Literal.String.Interpol:  "\#$here"
Literal.String.Heredoc:  " document<newline>terminated by EOF on a line by itself<newline>"
Name.Constant:  "EOF"
Text:  "<newline><newline>"
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "<<"
Name.Constant:  "'EOF'"
Literal.String.Heredoc:  "<newline>This is a multiline "
Literal.String.Interpol:  "\#$here"
Literal.String.Heredoc:  " document<newline>terminated by EOF on a line by itself<newline>"
Name.Constant:  "EOF"
Text:  "<newline><newline>"
Name:  "b"
Operator:  "="
Punctuation:  "("
Name.Builtin:  "p"
Punctuation:  "["
Name:  "x"
Punctuation:  "]"
Text:  " "
Operator:  "%"
Literal.Number.Integer:  "32"
Punctuation:  ")"
Operator:  "/"
Literal.Number.Integer:  "16"
Operator:  "<"
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline><newline>"
Operator:  "<<"
Name.Constant:  "\"\""
Literal.String.Heredoc:  "<newline>"
Literal.String.Interpol:  "\#{"
Name.Builtin:  "test"
Literal.String.Interpol:  "}"
Literal.String.Heredoc:  "<newline>"
Literal.String.Interpol:  "\#@bla"
Literal.String.Heredoc:  "<newline>#die suppe!!!<newline>"
Literal.String.Escape:  "\\xff"
Literal.String.Heredoc:  "fff<newline>"
Text:  "<newline><newline>"
Keyword:  "super"
Text:  " "
Operator:  "<<-"
Name.Constant:  "EOE"
Text:  " "
Operator:  "%"
Text:  " "
Punctuation:  "["
Literal.String.Heredoc:  "<newline>    foo<newline>"
Name.Constant:  "EOE"
Text:  "<newline><newline>"
Operator:  "<<"
Name.Constant:  "X"
Literal.String.Heredoc:  "<newline>"
Name.Constant:  "X"
Text:  "<newline>"
Name.Constant:  "X"
Text:  " "
Literal.String.Double:  "\"foo\""
Text:  " "
Comment.Single:  "# This is a method call, heredoc ends at the prev line"
Text:  "<newline><newline>"
Literal.String.Other:  "%s(uninter"
Literal.String.Escape:  "\\)"
Literal.String.Other:  "pre\\ted)"
Text:  "            "
Comment.Single:  "# comment here"
Text:  "<newline>"
Literal.String.Other:  "%q(uninter"
Literal.String.Escape:  "\\)"
Literal.String.Other:  "pre\\ted)"
Text:  "            "
Comment.Single:  "# comment here"
Text:  "<newline>"
Literal.String.Other:  "%Q(inter"
Literal.String.Escape:  "\\)"
Literal.String.Other:  "pre"
Literal.String.Escape:  "\\t"
Literal.String.Other:  "ed)"
Text:  "              "
Comment.Single:  "# comment here"
Text:  "<newline>"
Literal.String.Symbol:  ":\"inter"
Literal.String.Escape:  "\\)"
Literal.String.Symbol:  "pre"
Literal.String.Escape:  "\\t"
Literal.String.Symbol:  "ed\""
Text:  "               "
Comment.Single:  "# comment here"
Text:  "<newline>"
Literal.String.Symbol:  ":'uninter\\'pre\\ted'"
Text:  "             "
Comment.Single:  "# comment here"
Text:  "<newline><newline>"
Literal.String.Other:  "%q[haha! [nesting [rocks] ! ] ]"
Text:  " "
Comment.Single:  "# commeht here"
Text:  "<newline><newline><newline>"
Comment.Single:  "##################################################################"
Text:  "<newline>"
Keyword:  "class"
Text:  "                                                  "
Name.Class:  "NP"
Text:  "<newline>"
Keyword:  "def"
Text:  "  "
Name.Function:  "initialize"
Text:  " "
Name:  "a"
Operator:  "="
Name.Variable.Instance:  "@p"
Operator:  "="
Punctuation:  "[],"
Text:  " "
Name:  "b"
Operator:  "="
Name.Variable.Instance:  "@b"
Operator:  "="
Punctuation:  "[];"
Text:  "                      "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "def"
Text:  " "
Name.Function:  "+@"
Punctuation:  ";"
Name.Variable.Instance:  "@b"
Operator:  "<<"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Name:  "b2c"
Text:  " "
Keyword:  "end"
Punctuation:  ";"
Keyword:  "def"
Name.Function:  "-@"
Punctuation:  ";"
Name.Variable.Instance:  "@b"
Operator:  "<<"
Literal.Number.Integer:  "0"
Punctuation:  ";"
Name:  "b2c"
Text:  "                   "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "def"
Text:  "  "
Name.Function:  "b2c"
Punctuation:  ";"
Keyword:  "if"
Text:  " "
Name.Variable.Instance:  "@b"
Punctuation:  "."
Name.Function:  "size"
Operator:  "=="
Literal.Number.Integer:  "8"
Punctuation:  ";"
Name:  "c"
Operator:  "="
Literal.Number.Integer:  "0"
Punctuation:  ";"
Name.Variable.Instance:  "@b"
Punctuation:  "."
Name.Function:  "each"
Punctuation:  "{"
Operator:  "|"
Name:  "b"
Operator:  "|"
Name:  "c"
Operator:  "<<="
Literal.Number.Integer:  "1"
Punctuation:  ";"
Name:  "c"
Operator:  "|="
Name:  "b"
Punctuation:  "};"
Name.Builtin:  "send"
Punctuation:  "("
Text:  "<newline>     "
Literal.String.Single:  "'lave'"
Punctuation:  "."
Name.Function:  "reverse"
Punctuation:  ",("
Name.Variable.Instance:  "@p"
Punctuation:  "."
Name.Function:  "join"
Punctuation:  "))"
Keyword:  "if"
Text:  " "
Name:  "c"
Operator:  "=="
Literal.Number.Integer:  "0"
Punctuation:  ";"
Name.Variable.Instance:  "@p"
Operator:  "<<"
Text:  " "
Name:  "c"
Punctuation:  "."
Name.Function:  "chr"
Punctuation:  ";"
Name.Variable.Instance:  "@b"
Operator:  "="
Punctuation:  "[]"
Text:  " "
Keyword:  "end"
Text:  "<newline>     "
Name.Builtin:  "self"
Text:  " "
Keyword:  "end"
Text:  " "
Keyword:  "end"
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "begin"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "NP"
Punctuation:  "."
Name.Function:  "new"
Text:  "                   "
Keyword:  "end"
Text:  "<newline><newline><newline>"
Comment.Single:  "# Regexes"
Text:  "<newline>"
Literal.String.Regex:  "/<newline>this is a<newline>mutliline<newline>regex<newline>/"
Text:  "<newline><newline>"
Name:  "this"
Text:  " "
Literal.String.Regex:  "/is a<newline>multiline regex too/"
Text:  "<newline><newline>"
Name:  "also"
Text:  " "
Literal.String.Regex:  "/4<newline>is one/"
Text:  "<newline><newline>"
Name:  "this"
Punctuation:  "("
Literal.String.Regex:  "/<newline>too<newline>/"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "# this not"
Text:  "<newline>"
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "/"
Literal.Number.Integer:  "4"
Text:  "<newline>"
Name:  "asfsadf"
Operator:  "/"
Text:  "<newline><newline>"
Name:  "foo"
Punctuation:  "["
Literal.String.Symbol:  ":bar"
Punctuation:  "]"
Text:  " "
Operator:  "/"
Text:  " "
Name:  "baz"
Punctuation:  "["
Literal.String.Symbol:  ":zot"
Punctuation:  "]"
Text:  "<newline><newline>"
Comment.Multiline:  "=begin some comments go here<newline>a comment, that should not<newline>end<newline>here<newline>=end"
Text:  "<newline><newline>"
Comment.Single:  "#from: http://coderay.rubychan.de/rays/show/383"
Text:  "<newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Object"
Text:  "<newline>  "
Keyword:  "alias"
Text:  "  "
Literal.String.Symbol:  ":xeq"
Text:  " "
Literal.String.Symbol:  ":`"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "`"
Punctuation:  "("
Name:  "cmd"
Punctuation:  ","
Text:  " "
Name:  "p2"
Punctuation:  ")"
Text:  "<newline>    "
Name.Builtin:  "self"
Punctuation:  "."
Name.Function:  "method"
Punctuation:  "("
Name:  "cmd"
Punctuation:  "."
Name.Function:  "to_sym"
Punctuation:  ")."
Name.Function:  "call"
Punctuation:  "("
Name:  "p2"
Punctuation:  ")"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline>"
Name.Builtin:  "p"
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Literal.Number.Integer:  "2"
Punctuation:  ","
Literal.Number.Integer:  "3"
Punctuation:  "]."
Name.Function:  "`"
Punctuation:  "("
Literal.String.Single:  "'concat'"
Punctuation:  ","
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "4"
Punctuation:  ","
Literal.Number.Integer:  "5"
Punctuation:  ","
Literal.Number.Integer:  "6"
Punctuation:  "])"
Text:  " "
Comment.Single:  "# => [1, 2, 3, 4, 5, 6]"
Text:  "<newline>"
Name.Builtin:  "p"
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "1"
Punctuation:  ","
Literal.Number.Integer:  "2"
Punctuation:  ","
Literal.Number.Integer:  "3"
Punctuation:  "]."
Name.Function:  "`"
Punctuation:  "("
Literal.String.Symbol:  ":concat"
Punctuation:  ","
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "4"
Punctuation:  ","
Literal.Number.Integer:  "5"
Punctuation:  ","
Literal.Number.Integer:  "6"
Punctuation:  "])"
Text:  " "
Comment.Single:  "# => [1, 2, 3, 4, 5, 6]"
Text:  "<newline>"
Name.Builtin:  "p"
Text:  " "
Literal.String.Double:  "\"Hurra! \""
Punctuation:  "."
Name.Function:  "`"
Punctuation:  "(:"
Operator:  "*"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  " "
Comment.Single:  "# => \"Hurra! Hurra! Hurra! \""
Text:  "<newline>"
Name.Builtin:  "p"
Text:  " "
Literal.String.Double:  "\"Hurra! \""
Punctuation:  "."
Name.Function:  "`"
Punctuation:  "("
Literal.String.Single:  "'*'"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  " "
Comment.Single:  "# => \"Hurra! Hurra! Hurra! \""
Text:  "<newline>"
Comment.Single:  "# Leider geht nicht die Wunschform"
Text:  "<newline>"
Comment.Single:  "# [1,2,3] `concat` [4,5,6]"
Text:  "<newline><newline>"
Keyword:  "class"
Text:  " "
Name.Class:  "Object"
Text:  "<newline>  "
Name.Variable.Class:  "@@infixops"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>  "
Keyword:  "alias"
Text:  " "
Literal.String.Symbol:  ":xeq"
Text:  " "
Literal.String.Symbol:  ":`"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "addinfix"
Punctuation:  "("
Name:  "operator"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable.Class:  "@@infixops"
Text:  " "
Operator:  "<<"
Text:  " "
Name:  "operator"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>  "
Keyword:  "def"
Text:  " "
Name.Function:  "`"
Punctuation:  "("
Name:  "expression"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable.Class:  "@@infixops"
Punctuation:  "."
Name.Function:  "each"
Punctuation:  "{"
Operator:  "|"
Name:  "op"
Operator:  "|"
Keyword:  "break"
Text:  " "
Keyword:  "if"
Text:  " "
Name:  "expression"
Punctuation:  "."
Name.Function:  "match"
Punctuation:  "("
Literal.String.Regex:  "/^(.*?) ("
Literal.String.Interpol:  "\#{"
Name:  "op"
Literal.String.Interpol:  "}"
Literal.String.Regex:  ") (.*)$/"
Punctuation:  ")}"
Text:  "<newline>    "
Keyword:  "raise"
Text:  " "
Literal.String.Double:  "\"unknown infix operator in expression: "
Literal.String.Interpol:  "\#{"
Name:  "expression"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text:  " "
Keyword:  "if"
Text:  " "
Name.Variable.Global:  "$2"
Text:  " "
Operator:  "=="
Text:  " "
Keyword.Pseudo:  "nil"
Text:  "<newline>    "
Name.Builtin:  "eval"
Punctuation:  "("
Name.Variable.Global:  "$1"
Punctuation:  ")."
Name.Function:  "method"
Punctuation:  "("
Name.Variable.Global:  "$2"
Punctuation:  "."
Name.Function:  "to_sym"
Punctuation:  ")."
Name.Function:  "call"
Punctuation:  "("
Name.Builtin:  "eval"
Punctuation:  "("
Name.Variable.Global:  "$3"
Punctuation:  "))"
Text:  "<newline>  "
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline>"
Name:  "addinfix"
Punctuation:  "("
Literal.String.Double:  "\"concat\""
Punctuation:  ")"
Text:  "<newline>"
Name.Builtin:  "p"
Text:  " "
Literal.String.Backtick:  "`[1,2,3] concat [4,5,6]`"
Text:  " "
Comment.Single:  "# => [1, 2, 3, 4, 5, 6]"
Text:  "<newline><newline><newline>"
Comment.Single:  "# HEREDOC FUN!!!!!!!1111"
Text:  "<newline>"
Name:  "foo"
Punctuation:  "("
Operator:  "<<"
Name.Constant:  "A"
Punctuation:  ","
Text:  " "
Operator:  "<<-"
Name.Constant:  "B"
Punctuation:  ","
Text:  " "
Operator:  "<<"
Name.Constant:  "C"
Punctuation:  ")"
Literal.String.Heredoc:  "<newline>this is the text of a<newline>   A!!!!<newline>"
Name.Constant:  "A"
Literal.String.Heredoc:  "<newline>and this is text of B!!!!!!111<newline>"
Name.Constant:  "   B"
Literal.String.Heredoc:  "<newline>and here some C<newline>"
Name.Constant:  "C"
Text:  "<newline>"
Comment.Single:  "###################################"
Text:  "<newline><newline>"
Comment.Single:  "######"
Text:  "<newline>"
Comment.Single:  "# testing the __END__ content and % as an operator"
Text:  "<newline>"
Comment.Single:  "######"
Text:  "<newline><newline>"
Name:  "events"
Text:  " "
Operator:  "="
Text:  " "
Name.Constant:  "Hash"
Punctuation:  "."
Name.Function:  "new"
Text:  " "
Punctuation:  "{"
Text:  " "
Operator:  "|"
Name:  "h"
Punctuation:  ","
Text:  " "
Name:  "k"
Operator:  "|"
Text:  " "
Name:  "h"
Punctuation:  "["
Name:  "k"
Punctuation:  "]"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "[]"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Constant:  "DATA"
Punctuation:  "."
Name.Function:  "read"
Punctuation:  "."
Name.Function:  "split"
Punctuation:  "("
Literal.String.Regex:  "/<newline><newline><newline>\\s*/"
Punctuation:  ")."
Name.Function:  "each"
Text:  " "
Keyword:  "do"
Text:  " "
Operator:  "|"
Name:  "event"
Operator:  "|"
Text:  "<newline>\t"
Name.Builtin:  "name"
Text:  " "
Operator:  "="
Text:  " "
Name:  "event"
Punctuation:  "["
Literal.String.Regex:  "/^.*/"
Punctuation:  "]."
Name.Function:  "sub"
Punctuation:  "("
Literal.String.Regex:  "/http:.*/"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ")"
Text:  "<newline>\t"
Name:  "event"
Punctuation:  "["
Literal.String.Regex:  "/<newline>.*/m"
Punctuation:  "]."
Name.Function:  "scan"
Punctuation:  "("
Literal.String.Regex:  "/^([A-Z]{2}\\S*)\\s*(\\S*)\\s*(\\S*)(\\s*\\S*)/"
Punctuation:  ")"
Text:  " "
Keyword:  "do"
Text:  " "
Operator:  "|"
Name:  "kind"
Punctuation:  ","
Text:  " "
Name:  "day"
Punctuation:  ","
Text:  " "
Name:  "daytime"
Punctuation:  ","
Text:  " "
Name:  "comment"
Operator:  "|"
Text:  "<newline>\t\t"
Name:  "events"
Punctuation:  "["
Text:  " "
Punctuation:  "["
Name:  "day"
Punctuation:  ","
Text:  " "
Name:  "daytime"
Punctuation:  "]"
Text:  " "
Punctuation:  "]"
Text:  " "
Operator:  "<<"
Text:  " "
Punctuation:  "["
Name:  "kind"
Punctuation:  ","
Text:  " "
Name.Builtin:  "name"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "comment"
Punctuation:  "]"
Text:  "<newline>\t"
Keyword:  "end"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "3"
Text:  "<newline>"
Name:  "foo"
Text:  " "
Operator:  "%="
Text:  " "
Literal.Number.Integer:  "2"
Text:  "<newline>"
Name:  "foo"
Text:  " "
Operator:  "/="
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Comment.Single:  "# not a regex"
Text:  "<newline><newline>"
Name:  "conflicts"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>"
Name:  "events"
Punctuation:  "."
Name.Function:  "to_a"
Punctuation:  "."
Name.Function:  "sort_by"
Text:  " "
Keyword:  "do"
Text:  " "
Operator:  "|"
Punctuation:  "("
Name:  "day"
Punctuation:  ","
Text:  " "
Name:  "daytime"
Punctuation:  "),"
Operator:  "|"
Text:  "<newline>\t"
Punctuation:  "["
Literal.String.Other:  "%w(Mo Di Mi Do Fr)"
Punctuation:  "."
Name.Function:  "index"
Punctuation:  "("
Name:  "day"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name:  "daytime"
Punctuation:  "]"
Text:  "<newline>"
Keyword:  "end"
Punctuation:  "."
Name.Function:  "each"
Text:  " "
Keyword:  "do"
Text:  " "
Operator:  "|"
Punctuation:  "("
Name:  "day"
Punctuation:  ","
Text:  " "
Name:  "daytime"
Punctuation:  "),"
Text:  " "
Name:  "names"
Operator:  "|"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Name:  "names"
Punctuation:  "."
Name.Function:  "size"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t"
Name:  "conflicts"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>\t\t"
Name.Builtin:  "print"
Text:  " "
Literal.String.Single:  "'!!! '"
Text:  "<newline>\t"
Keyword:  "end"
Text:  "<newline>\t"
Name.Builtin:  "print"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Interpol:  "\#{"
Name:  "day"
Literal.String.Interpol:  "}"
Literal.String.Double:  " "
Literal.String.Interpol:  "\#{"
Name:  "daytime"
Literal.String.Interpol:  "}"
Literal.String.Double:  ": \""
Text:  "<newline>\t"
Name:  "names"
Punctuation:  "."
Name.Function:  "each"
Text:  " "
Punctuation:  "{"
Text:  " "
Operator:  "|"
Name:  "kind"
Punctuation:  ","
Text:  " "
Name.Builtin:  "name"
Operator:  "|"
Text:  " "
Name.Builtin:  "puts"
Text:  " "
Literal.String.Double:  "\"  "
Literal.String.Interpol:  "\#{"
Name:  "kind"
Literal.String.Interpol:  "}"
Literal.String.Double:  "  "
Literal.String.Interpol:  "\#{"
Name.Builtin:  "name"
Literal.String.Interpol:  "}"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  "}"
Text:  "<newline>\t"
Name.Builtin:  "puts"
Text:  "<newline>"
Keyword:  "end"
Text:  "<newline><newline>"
Name.Builtin:  "puts"
Text:  " "
Literal.String.Single:  "'%d conflicts'"
Text:  " "
Operator:  "%"
Text:  " "
Name:  "conflicts"
Text:  "<newline>"
Name.Builtin:  "puts"
Text:  " "
Literal.String.Single:  "'%d SWS'"
Text:  " "
Operator:  "%"
Text:  " "
Punctuation:  "("
Name:  "events"
Punctuation:  "."
Name.Function:  "inject"
Punctuation:  "("
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Operator:  "|"
Name:  "sum"
Punctuation:  ","
Text:  " "
Punctuation:  "(("
Name:  "day"
Punctuation:  ","
Text:  " "
Name:  "daytime"
Punctuation:  "),)"
Operator:  "|"
Text:  " "
Name:  "sum"
Text:  " "
Operator:  "+"
Text:  " "
Punctuation:  "("
Name:  "daytime"
Punctuation:  "["
Literal.String.Regex:  "/\\d+$/"
Punctuation:  "]."
Name.Function:  "to_i"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "daytime"
Punctuation:  "["
Literal.String.Regex:  "/^\\d+/"
Punctuation:  "]."
Name.Function:  "to_i"
Punctuation:  ")"
Text:  " "
Punctuation:  "})"
Text:  "<newline><newline>"
Name:  "string"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Other:  "% foo "
Text:  "    "
Comment.Single:  "# strange. huh?"
Text:  "<newline>"
Name.Builtin:  "print"
Text:  " "
Literal.String.Double:  "\"Escape here: "
Literal.String.Escape:  "<newline>"
Literal.String.Double:  "\""
Text:  "<newline>"
Name.Builtin:  "print"
Text:  " "
Literal.String.Single:  "'Dont escape here: <newline>'"
Text:  "<newline><newline>"
Comment.Preproc:  "__END__<newline>Informatik und Informationsgesellschaft I: Digitale Medien (32 214)<newline>Computer lassen ihre eigentliche Bestimmung durch Multimedia und Vernetzung erkennen: Es sind digitale Medien, die alle bisherigen Massen- und Kommunikationsmedien simulieren, kopieren oder ersetzen k\u00F6nnen. Die kurze Geschichte elektronischer Medien vom Telegramm bis zum Fernsehen wird so zur Vorgeschichte des Computers als Medium. Der Prozess der Mediatisierung der Rechnernetze soll in Technik, Theorie und Praxis untersucht werden. Das PR soll die Techniken der ortsverteilten und zeitversetzten Lehre an Hand praktischer \u00DCbungen vorf\u00FChren und untersuchen.<newline>VL \tDi\t15-17\tw\u00F6ch.\tRUD 25, 3.101\tJ. Koubek<newline>VL\tDo\t15-17\tw\u00F6ch.\tRUD 25, 3.101<newline>UE/PR\tDo\t17-19\tw\u00F6ch.\tRUD 25, 3.101\tJ.-M. Loebel<newline><newline><newline>Methoden und Modelle des Systementwurfs (32 223)<newline>Gute Methoden zum Entwurf und zur Verifikation von Systemen sind ein Schl\u00FCssel f\u00FCr gute Software. Dieses Seminar betrachtet moderne Entwurfsmethoden.<newline> VL\tDi\t09-11\tw\u00F6ch.\tRUD 26, 0\u0092313\tW. Reisig<newline> VL\tDo\t09-11\tw\u00F6ch.\tRUD 26, 0\u0092313\t<newline> UE\tDi\t11-13\tw\u00F6ch.\tRUD 26, 0\u0092313\t<newline> PR\tDi\t13-15\tw\u00F6ch.\tRUD 26, 0\u0092313\tD. Weinberg<newline><newline><newline>Komplexit\u00E4tstheorie (32 229)<newline>In dieser Vorlesung untersuchen wir eine Reihe von wichtigen algorithmischen Problemstellungen aus verschiedenen Bereichen der Informatik. Unser besonderes Interesse gilt dabei der Absch\u00E4tzung der Rechenressourcen, die zu ihrer L\u00F6sung aufzubringen sind.  Die Vorlesung bildet eine wichtige Grundlage f\u00FCr weiterf\u00FChrende Veranstaltungen in den Bereichen Algorithmen, Kryptologie, Algorithmisches Lernen und Algorithmisches Beweisen.<newline> VL \tDi\t09-11\tw\u00F6ch.\tRUD 26, 1\u0092303\tJ. K\u00F6bler<newline> VL\tDo\t09-11\tw\u00F6ch.\tRUD 26, 1\u0092305\t<newline> UE\tDo\t11-13\tw\u00F6ch.\tRUD 26, 1\u0092305\t<newline><newline><newline>Zuverl\u00E4ssige Systeme (32 234)<newline>Mit zunehmender Verbreitung der Computertechnologie in immer mehr Bereichen des menschlichen Lebens wird die Zuverl\u00E4ssigkeit solcher Systeme zu einer immer zentraleren Frage.<newline>Der Halbkurs \"Zuverl\u00E4ssige Systeme\" konzentriert sich auf folgende Schwerpunkte: Zuverl\u00E4ssigkeit, Fehlertoleranz, Responsivit\u00E4t, Messungen, Anwendungen, Systemmodelle und Techniken, Ausfallverhalten, Fehlermodelle, Schedulingtechniken, Software/Hardware - responsives Systemdesign, Analyse und Synthese, Bewertung, Fallstudien in Forschung und Industrie.<newline>Der Halbkurs kann mit dem Halbkurs \"Eigenschaften mobiler und eingebetteter Systeme\" zu einem Projektkurs kombiniert werden. Ein gemeinsames Projekt begleitet beide Halbkurse.<newline>VL \tDi\t09-11\tw\u00F6ch.\tRUD 26, 1\u0092308\tM. Malek<newline>VL\tDo\t09-11\tw\u00F6ch.\tRUD 26, 1\u0092308<newline>PR\tn.V.<newline><newline><newline>Stochastik f\u00FCr InformatikerInnen (32 239)<newline>Grundlagen der Wahrscheinlichkeitsrechnung, Diskrete und stetige Wahrscheinlichkeitsmodelle in der Informatik, Grenzwerts\u00E4tze, Simulationsverfahren, Zufallszahlen, Statistische Sch\u00E4tz- und Testverfahren, Markoffsche Ketten, Simulated Annealing, Probabilistische Analyse von Algorithmen.<newline>VL\tMo\t09-11\tw\u00F6ch.\tRUD 25, 3.101\tW. K\u00F6ssler<newline>VL\tMi\t09-11\tw\u00F6ch.\tRUD 25, 3.101<newline>UE\tMo\t11-13\tw\u00F6ch.\tRUD 25, 3.101<newline> UE\tMi\t11-13\tw\u00F6ch.\tRUD 25. 3.101<newline><newline><newline>Geschichte der Informatik \u0096 Ausgew\u00E4hlte Kapitel (32 243)<newline>VL\tMi\t13-15\tw\u00F6ch.\tRUD 25, 3.113\tW. Coy<newline><newline><newline>Aktuelle Themen der Theoretischen Informatik (32 260)<newline>In diesem Seminar sollen wichtige aktuelle Ver\u00F6ffentlichungen aus der theoretischen Informatik gemeinsam erarbeitet werden. Genaueres wird erst kurz vor dem Seminar entschieden. Bei Interesse wenden Sie sich bitte m\u00F6glichst fr\u00FChzeitig an den Veranstalter.<newline> SE\tFr\t09-11\tw\u00F6ch.\tRUD 26, 1\u0092307\tM. Grohe\u00A0<newline>"
