Name.Decorator:  "#![test(a::b)]"
Text:  "<newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "String"
Punctuation:  "::"
Name.Function:  "new"
Punctuation:  "("
Literal.String:  "\"hello\""
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "b"
Punctuation:  ":"
Text:  " "
Operator:  "&"
Name.Builtin:  "str"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "\"{}\""
Punctuation:  ","
Text:  " "
Name:  "b"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "g"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "String"
Punctuation:  "::"
Name.Function:  "new"
Punctuation:  "("
Literal.String:  "\"world\""
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "d"
Punctuation:  ":"
Text:  " "
Operator:  "&"
Name.Builtin:  "str"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "d"
Text:  " "
Operator:  "="
Text:  " "
Name:  "c"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "\"{}\""
Punctuation:  ","
Text:  " "
Name:  "d"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "h"
Punctuation:  "("
Name:  "a"
Punctuation:  ":"
Text:  " "
Name.Builtin:  "i32"
Punctuation:  ")"
Text:  " "
Keyword:  "->"
Text:  " "
Name.Builtin:  "i32"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "4"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1_000"
Punctuation:  ")"
Text:  " "
Operator:  "*"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "-"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "let"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name:  "a"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.Number.Integer:  "0b0100"
Punctuation:  ")"
Text:  " "
Operator:  "&"
Text:  " "
Literal.Number.Integer:  "0xF"
Punctuation:  ";"
Text:  "<newline><newline>  "
Name:  "c"
Text:  " "
Operator:  "^"
Text:  " "
Operator:  "!"
Name:  "b"
Text:  " "
Operator:  "^"
Text:  " "
Literal.Number.Integer:  "0o707"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "main"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "f"
Punctuation:  "();"
Text:  "<newline>    "
Name.Function:  "g"
Punctuation:  "();"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Keyword:  "mut"
Text:  " "
Name:  "f"
Text:  " "
Operator:  "="
Text:  " "
Name.Namespace:  "File"
Punctuation:  "::"
Name.Function:  "open"
Punctuation:  "("
Literal.String:  "\"username.txt\""
Punctuation:  ")"
Operator:  "?"
Punctuation:  ";"
Text:  "<newline><newline>"
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "\"a"
Literal.String.Escape:  "\\\\"
Literal.String:  "\""
Punctuation:  ");"
Text:  "<newline>"
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "\"a"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ");"
Text:  "<newline>"
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "\"a"
Literal.String.Escape:  "\\\""
Literal.String:  "b\""
Punctuation:  ");"
Text:  "<newline>"
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "\"a"
Literal.String.Escape:  "\\'"
Literal.String:  "\""
Punctuation:  ");"
Text:  "<newline>"
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "r\"\""
Punctuation:  ");"
Text:  "<newline>"
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "r\"<newline>\\\""
Punctuation:  ");"
Text:  "<newline>"
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "r#\"a\"b\\\"#"
Punctuation:  ");"
Text:  "<newline>"
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "r##\"r#\"\"#\"##"
Punctuation:  ");"
Text:  "<newline>"
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "r###\"r##\"r#\"\"#\"##\"###"
Punctuation:  ");"
Text:  "<newline>"
Name.Decorator:  "println!"
Punctuation:  "("
Literal.String:  "r#\"<newline>  \"New line in a raw string\"<newline>\"#"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "trait"
Text:  " "
Name:  "Iterable"
Operator:  "<"
Name:  "A"
Operator:  ">"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "fn"
Text:  " "
Name.Function:  "iterate"
Punctuation:  "("
Operator:  "&"
Keyword:  "self"
Punctuation:  ","
Text:  " "
Name:  "blk"
Punctuation:  ":"
Text:  " "
Keyword:  "impl"
Text:  " "
Name.Function:  "FnMut"
Punctuation:  "("
Operator:  "&"
Name:  "A"
Punctuation:  ")"
Text:  " "
Keyword:  "->"
Text:  " "
Name.Builtin:  "bool"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "impl"
Operator:  "<"
Name:  "A"
Operator:  ">"
Text:  " "
Name:  "Iterable"
Operator:  "<"
Name:  "A"
Operator:  ">"
Text:  " "
Keyword:  "for"
Text:  " "
Operator:  "&"
Punctuation:  "["
Name:  "A"
Punctuation:  "]"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "fn"
Text:  " "
Name.Function:  "iterate"
Punctuation:  "("
Operator:  "&"
Keyword:  "self"
Punctuation:  ","
Text:  " "
Keyword:  "mut"
Text:  " "
Name:  "f"
Punctuation:  ":"
Text:  " "
Keyword:  "impl"
Text:  " "
Name.Function:  "FnMut"
Punctuation:  "("
Operator:  "&"
Name:  "A"
Punctuation:  ")"
Text:  " "
Keyword:  "->"
Text:  " "
Name.Builtin:  "bool"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "for"
Text:  " "
Name:  "e"
Text:  " "
Keyword:  "in"
Text:  " "
Keyword:  "self"
Name.Function:  ".iter"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Keyword:  "if"
Text:  " "
Operator:  "!"
Name.Function:  "f"
Punctuation:  "("
Name:  "e"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "break"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name:  "length"
Operator:  "<"
Name:  "A"
Punctuation:  ","
Text:  " "
Name:  "T"
Operator:  ">"
Punctuation:  "("
Name:  "x"
Punctuation:  ":"
Text:  " "
Name:  "T"
Punctuation:  ")"
Text:  " "
Keyword:  "->"
Text:  " "
Name.Builtin:  "usize"
Text:  "<newline>"
Keyword:  "where"
Text:  "<newline>    "
Name:  "T"
Punctuation:  ":"
Text:  " "
Name:  "Iterable"
Operator:  "<"
Name:  "A"
Operator:  ">"
Punctuation:  ","
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Keyword:  "mut"
Text:  " "
Name:  "len"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>    "
Name:  "x"
Name.Function:  ".iterate"
Punctuation:  "(|"
Name:  "_"
Punctuation:  "|"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "len"
Text:  " "
Operator:  "+="
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  " "
Keyword:  "true"
Text:  " "
Punctuation:  "});"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "len"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "main"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Decorator:  "vec!"
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  ","
Literal.Number.Integer:  "1"
Punctuation:  ","
Literal.Number.Integer:  "2"
Punctuation:  ","
Literal.Number.Integer:  "3"
Punctuation:  "];"
Text:  "<newline>    "
Comment.Single:  "// Call a method"
Text:  "<newline>    "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "y"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "x"
Name.Function:  ".iter"
Punctuation:  "()"
Name.Function:  ".enumerate"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Decorator:  "assert!"
Punctuation:  "("
Name:  "x"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Operator:  "=="
Text:  " "
Operator:  "*"
Name:  "y"
Punctuation:  ");"
Text:  " "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "// Call a parameterized function"
Text:  "<newline>    "
Name.Decorator:  "assert!"
Punctuation:  "("
Name.Function:  "length"
Punctuation:  "("
Operator:  "&*"
Name:  "x"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "x"
Name.Function:  ".len"
Punctuation:  "());"
Text:  "<newline>    "
Comment.Single:  "// Call a parameterized function, with type arguments that require"
Text:  "<newline>    "
Comment.Single:  "// a borrow"
Text:  "<newline>    "
Name.Decorator:  "assert!"
Punctuation:  "("
Name.Namespace:  "length"
Punctuation:  "::"
Operator:  "<"
Name.Builtin:  "i32"
Punctuation:  ","
Text:  " "
Operator:  "&"
Punctuation:  "["
Name.Builtin:  "i32"
Punctuation:  "]"
Operator:  ">"
Punctuation:  "("
Operator:  "&*"
Name:  "x"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "x"
Name.Function:  ".len"
Punctuation:  "());"
Text:  "<newline><newline>    "
Comment.Single:  "// Now try it with a type that *needs* to be borrowed"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "z"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "0"
Punctuation:  ","
Literal.Number.Integer:  "1"
Punctuation:  ","
Literal.Number.Integer:  "2"
Punctuation:  ","
Literal.Number.Integer:  "3"
Punctuation:  "];"
Text:  "<newline>    "
Comment.Single:  "// Call a method"
Text:  "<newline>    "
Keyword:  "for"
Text:  " "
Punctuation:  "("
Name:  "i"
Punctuation:  ","
Text:  " "
Name:  "y"
Punctuation:  ")"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "z"
Name.Function:  ".iter"
Punctuation:  "()"
Name.Function:  ".enumerate"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Decorator:  "assert!"
Punctuation:  "("
Name:  "z"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Operator:  "=="
Text:  " "
Operator:  "*"
Name:  "y"
Punctuation:  ");"
Text:  " "
Punctuation:  "}"
Text:  "<newline>    "
Comment.Single:  "// Call a parameterized function"
Text:  "<newline>    "
Name.Decorator:  "assert!"
Punctuation:  "("
Name.Namespace:  "length"
Punctuation:  "::"
Operator:  "<"
Name.Builtin:  "i32"
Punctuation:  ","
Text:  " "
Operator:  "&"
Punctuation:  "["
Name.Builtin:  "i32"
Punctuation:  "]"
Operator:  ">"
Punctuation:  "("
Operator:  "&"
Name:  "z"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "z"
Name.Function:  ".len"
Punctuation:  "());"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name:  "pointer"
Operator:  "<"
Name.Variable:  "'a"
Operator:  ">"
Punctuation:  "("
Name:  "n"
Punctuation:  ":"
Text:  " "
Operator:  "&"
Name.Variable:  "'a"
Text:  " "
Name.Builtin:  "u32"
Punctuation:  ")"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "range"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ".."
Literal.Number.Integer:  "2"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "b"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ".."
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "c"
Text:  " "
Operator:  "="
Text:  " "
Operator:  ".."
Literal.Number.Integer:  "2"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "d"
Text:  " "
Operator:  "="
Text:  " "
Operator:  ".."
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "e"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "5"
Operator:  "..="
Literal.Number.Integer:  "6"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Decorator:  "#[attr1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>"
Name.Decorator:  "#[attr2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>"
Name.Decorator:  "#[attr3]"
Punctuation:  ";"
Text:  "<newline>"
Name.Decorator:  "#[attr4(attr5)]"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// Special linkage attributes for the crate"
Text:  "<newline>"
Name.Decorator:  "#[link(name"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"std\""
Name.Decorator:  ","
Text:  "<newline>       "
Name.Decorator:  "vers"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"0.1\""
Name.Decorator:  ","
Text:  "<newline>       "
Name.Decorator:  "uuid"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"122bed0b-c19b-4b82-b0b7-7ae8aead7297\""
Name.Decorator:  ","
Text:  "<newline>       "
Name.Decorator:  "url"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"http://rust-lang.org/src/std\""
Name.Decorator:  ")]"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// These are are attributes of the following mod"
Text:  "<newline>"
Name.Decorator:  "#[attr1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>"
Name.Decorator:  "#[attr2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_first_item_in_file_mod"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_single_attr_outer"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline><newline>    "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Keyword:  "const"
Text:  " "
Name:  "x"
Punctuation:  ":"
Text:  " "
Name.Builtin:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline><newline>    "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Keyword:  "fn"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Keyword:  "mod"
Text:  " "
Name:  "mod1"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Name.Decorator:  "#[abi"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"cdecl\""
Name.Decorator:  "]"
Text:  "<newline>    "
Keyword:  "extern"
Text:  " "
Keyword:  "mod"
Text:  " "
Name:  "rustrt"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_multi_attr_outer"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline><newline>    "
Name.Decorator:  "#[attr1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Name.Decorator:  "#[attr2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Keyword:  "const"
Text:  " "
Name:  "x"
Punctuation:  ":"
Text:  " "
Name.Builtin:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline><newline>    "
Name.Decorator:  "#[attr1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Name.Decorator:  "#[attr2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Keyword:  "fn"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Decorator:  "#[attr1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Name.Decorator:  "#[attr2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Keyword:  "mod"
Text:  " "
Name:  "mod1"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Decorator:  "#[attr1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Name.Decorator:  "#[attr2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Name.Decorator:  "#[abi"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"cdecl\""
Name.Decorator:  "]"
Text:  "<newline>    "
Keyword:  "extern"
Text:  " "
Keyword:  "mod"
Text:  " "
Name:  "rustrt"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Decorator:  "#[attr1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Name.Decorator:  "#[attr2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>    "
Keyword:  "type"
Text:  " "
Name:  "t"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Name:  "x"
Punctuation:  ":"
Text:  " "
Name.Builtin:  "int"
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_stmt_single_attr_outer"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "fn"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>        "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Keyword:  "const"
Text:  " "
Name:  "x"
Punctuation:  ":"
Text:  " "
Name.Builtin:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline><newline>        "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Keyword:  "fn"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>        "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Keyword:  "mod"
Text:  " "
Name:  "mod1"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline><newline>        "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Name.Decorator:  "#[abi"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"cdecl\""
Name.Decorator:  "]"
Text:  "<newline>        "
Keyword:  "extern"
Text:  " "
Keyword:  "mod"
Text:  " "
Name:  "rustrt"
Text:  " "
Punctuation:  "{"
Text:  "<newline>            "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_stmt_multi_attr_outer"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "fn"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>        "
Name.Decorator:  "#[attr1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Name.Decorator:  "#[attr2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Keyword:  "const"
Text:  " "
Name:  "x"
Punctuation:  ":"
Text:  " "
Name.Builtin:  "int"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ";"
Text:  "<newline><newline>        "
Name.Decorator:  "#[attr1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Name.Decorator:  "#[attr2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Keyword:  "fn"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>        "
Comment.Multiline:  "/* FIXME: Issue #493<newline>        #[attr1 = \"val\"]<newline>        #[attr2 = \"val\"]<newline>        mod mod1 {<newline>            #[legacy_exports];<newline>        }<newline><newline>        #[attr1 = \"val\"]<newline>        #[attr2 = \"val\"]<newline>        #[abi = \"cdecl\"]<newline>        extern mod rustrt {<newline>            #[legacy_exports];<newline>        }<newline>        */"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_attr_inner"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "mod"
Text:  " "
Name:  "m"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline>        "
Comment.Single:  "// This is an attribute of mod m"
Text:  "<newline>        "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_attr_inner_then_outer"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "mod"
Text:  " "
Name:  "m"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline>        "
Comment.Single:  "// This is an attribute of mod m"
Text:  "<newline>        "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>        "
Comment.Single:  "// This is an attribute of fn f"
Text:  "<newline>        "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Keyword:  "fn"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_attr_inner_then_outer_multi"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "mod"
Text:  " "
Name:  "m"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline>        "
Comment.Single:  "// This is an attribute of mod m"
Text:  "<newline>        "
Name.Decorator:  "#[attr1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>        "
Name.Decorator:  "#[attr2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>        "
Comment.Single:  "// This is an attribute of fn f"
Text:  "<newline>        "
Name.Decorator:  "#[attr1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Name.Decorator:  "#[attr2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Keyword:  "fn"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_distinguish_syntax_ext"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "extern"
Text:  " "
Keyword:  "mod"
Text:  " "
Name:  "std"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "fn"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Decorator:  "fmt!"
Punctuation:  "("
Literal.String:  "\"test%s\""
Punctuation:  ","
Text:  " "
Name.Namespace:  "String"
Punctuation:  "::"
Name.Function:  "new"
Punctuation:  "("
Literal.String:  "\"s\""
Punctuation:  "));"
Text:  "<newline>        "
Name.Decorator:  "#[attr"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  "]"
Text:  "<newline>        "
Keyword:  "fn"
Text:  " "
Name.Function:  "g"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_other_forms"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "#[attr]"
Text:  "<newline>    "
Name.Decorator:  "#[attr(word)]"
Text:  "<newline>    "
Name.Decorator:  "#[attr(attr(word))]"
Text:  "<newline>    "
Name.Decorator:  "#[attr(key1"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  ","
Text:  " "
Name.Decorator:  "key2"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"val\""
Name.Decorator:  ","
Text:  " "
Name.Decorator:  "attr)]"
Text:  "<newline>    "
Keyword:  "fn"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_foreign_items"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "#[abi"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"cdecl\""
Name.Decorator:  "]"
Text:  "<newline>    "
Keyword:  "extern"
Text:  " "
Keyword:  "mod"
Text:  " "
Name:  "rustrt"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline>        "
Name.Decorator:  "#[attr]"
Punctuation:  ";"
Text:  "<newline><newline>        "
Name.Decorator:  "#[attr]"
Text:  "<newline>        "
Keyword:  "fn"
Text:  " "
Name.Function:  "get_task_id"
Punctuation:  "()"
Text:  " "
Keyword:  "->"
Text:  " "
Name.Namespace:  "libc"
Punctuation:  "::"
Name.Builtin:  "intptr_t"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "test_literals"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "#[str"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String:  "\"s\""
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "#[char"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.String.Char:  "'c'"
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "#[int"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.Number.Integer:  "100"
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "#[uint"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.Number.Integer:  "100u"
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "#[mach_int"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.Number.Integer:  "100u32"
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "#[float"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.Number.Float:  "1.0"
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "#[mach_float"
Text:  " "
Name.Decorator:  "="
Text:  " "
Literal.Number.Float:  "1.0f32"
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>    "
Name.Decorator:  "#[bool"
Text:  " "
Name.Decorator:  "="
Text:  " "
Keyword.Constant:  "true"
Name.Decorator:  "]"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "mod"
Text:  " "
Name:  "m"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Decorator:  "#[legacy_exports]"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "test_fn_inner"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Decorator:  "#[inner_fn_attr]"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "main"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "//"
Text:  "<newline>"
Comment.Single:  "// Local Variables:"
Text:  "<newline>"
Comment.Single:  "// mode: rust"
Text:  "<newline>"
Comment.Single:  "// fill-column: 78;"
Text:  "<newline>"
Comment.Single:  "// indent-tabs-mode: nil"
Text:  "<newline>"
Comment.Single:  "// c-basic-offset: 4"
Text:  "<newline>"
Comment.Single:  "// buffer-file-coding-system: utf-8-unix"
Text:  "<newline>"
Comment.Single:  "// End:"
Text:  "<newline>"
Comment.Single:  "//"
Text:  "<newline><newline>"
Comment.Multiline:  "/*<newline><newline>This is an HTML parser written as a macro. It's all CPS, and we have<newline>to carry around a bunch of state. The arguments to macros all look like this:<newline><newline>{ tag_stack* # expr* # tokens }<newline><newline>The stack keeps track of where we are in the tree. The expr is a list<newline>of children of the current node. The tokens are everything that's<newline>left.<newline><newline>*/"
Text:  "<newline><newline>"
Name.Decorator:  "macro_rules!"
Text:  " "
Name.Function:  "html"
Text:  " "
Punctuation:  "("
Text:  "<newline>    "
Punctuation:  "("
Text:  " "
Name.Variable:  "$"
Punctuation:  "("
Name.Variable:  "$body:tt"
Punctuation:  ")"
Operator:  "*"
Text:  " "
Punctuation:  ")"
Text:  " "
Keyword:  "=>"
Text:  " "
Punctuation:  "("
Text:  "<newline>        "
Name.Decorator:  "parse_node!"
Punctuation:  "("
Text:  " "
Punctuation:  "[];"
Text:  " "
Punctuation:  "[];"
Text:  " "
Name.Variable:  "$"
Punctuation:  "("
Name.Variable:  "$body"
Punctuation:  ")"
Operator:  "*"
Text:  " "
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline><newline>"
Name.Decorator:  "macro_rules!"
Text:  " "
Name.Function:  "parse_node"
Text:  " "
Punctuation:  "("
Text:  "<newline>    "
Punctuation:  "("
Text:  "<newline>        "
Punctuation:  "[:"
Name.Variable:  "$head:ident"
Text:  " "
Punctuation:  "("
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$head_nodes:expr"
Punctuation:  "),"
Operator:  "*"
Punctuation:  ")"
Text:  "<newline>         "
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tags:ident"
Text:  " "
Punctuation:  "("
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tag_nodes:expr"
Punctuation:  "),"
Operator:  "*"
Punctuation:  "))"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>        "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$nodes:expr"
Punctuation:  "),"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>        "
Operator:  "</"
Name.Variable:  "$tag:ident"
Operator:  ">"
Text:  " "
Name.Variable:  "$"
Punctuation:  "("
Name.Variable:  "$rest:tt"
Punctuation:  ")"
Operator:  "*"
Text:  "<newline>    "
Punctuation:  ")"
Text:  " "
Keyword:  "=>"
Text:  " "
Punctuation:  "("
Text:  "<newline>        "
Name.Decorator:  "parse_node!"
Punctuation:  "("
Text:  "<newline>            "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Text:  " "
Name.Variable:  "$tags"
Text:  " "
Punctuation:  "("
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tag_nodes"
Punctuation:  "),"
Operator:  "*"
Punctuation:  "))"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>            "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$head_nodes"
Punctuation:  ",)"
Operator:  "*"
Text:  " "
Punctuation:  ":"
Name.Namespace:  "Box"
Punctuation:  "::"
Name.Function:  "new"
Punctuation:  "("
Name.Namespace:  "HTMLFragment"
Punctuation:  "::"
Name.Function:  "Tag"
Punctuation:  "("
Name.Decorator:  "stringify!"
Punctuation:  "("
Name.Variable:  "$head"
Punctuation:  ")"
Name.Function:  ".to_owned"
Punctuation:  "(),"
Text:  "<newline>                                    "
Name.Decorator:  "vec!"
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "("
Name.Variable:  "$nodes"
Punctuation:  "),"
Operator:  "*"
Punctuation:  "]))];"
Text:  "<newline>            "
Name.Variable:  "$"
Punctuation:  "("
Name.Variable:  "$rest"
Punctuation:  ")"
Operator:  "*"
Text:  "<newline>        "
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  ");"
Text:  "<newline><newline>    "
Punctuation:  "("
Text:  "<newline>        "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tags:ident"
Text:  " "
Punctuation:  "("
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tag_nodes:expr"
Punctuation:  "),"
Operator:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>        "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$nodes:expr"
Punctuation:  "),"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>        "
Operator:  "<"
Name.Variable:  "$tag:ident"
Operator:  ">"
Text:  " "
Name.Variable:  "$"
Punctuation:  "("
Name.Variable:  "$rest:tt"
Punctuation:  ")"
Operator:  "*"
Text:  "<newline>    "
Punctuation:  ")"
Text:  " "
Keyword:  "=>"
Text:  " "
Punctuation:  "("
Text:  "<newline>        "
Name.Decorator:  "parse_node!"
Punctuation:  "("
Text:  "<newline>            "
Punctuation:  "[:"
Name.Variable:  "$tag"
Text:  " "
Punctuation:  "("
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$nodes"
Punctuation:  ")"
Operator:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "$"
Punctuation:  "(:"
Text:  " "
Name.Variable:  "$tags"
Text:  " "
Punctuation:  "("
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tag_nodes"
Punctuation:  "),"
Operator:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>            "
Punctuation:  "[];"
Text:  "<newline>            "
Name.Variable:  "$"
Punctuation:  "("
Name.Variable:  "$rest"
Punctuation:  ")"
Operator:  "*"
Text:  "<newline>        "
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  ");"
Text:  "<newline><newline>    "
Punctuation:  "("
Text:  "<newline>        "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tags:ident"
Text:  " "
Punctuation:  "("
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tag_nodes:expr"
Punctuation:  "),"
Operator:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>        "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$nodes:expr"
Punctuation:  "),"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>        . "
Name.Variable:  "$"
Punctuation:  "("
Name.Variable:  "$rest:tt"
Punctuation:  ")"
Operator:  "*"
Text:  "<newline>    "
Punctuation:  ")"
Text:  " "
Keyword:  "=>"
Text:  " "
Punctuation:  "("
Text:  "<newline>        "
Name.Decorator:  "parse_node!"
Punctuation:  "("
Text:  "<newline>            "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Text:  " "
Name.Variable:  "$tags"
Text:  " "
Punctuation:  "("
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tag_nodes"
Punctuation:  "),"
Operator:  "*"
Punctuation:  "))"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>            "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$nodes"
Punctuation:  ",)"
Operator:  "*"
Text:  " "
Punctuation:  ":"
Name.Namespace:  "Box"
Punctuation:  "::"
Name.Function:  "new"
Punctuation:  "("
Name.Namespace:  "HTMLFragment"
Punctuation:  "::"
Name.Function:  "Text"
Punctuation:  "("
Literal.String:  "\".\""
Name.Function:  ".to_string"
Punctuation:  "()))];"
Text:  "<newline>            "
Name.Variable:  "$"
Punctuation:  "("
Name.Variable:  "$rest"
Punctuation:  ")"
Operator:  "*"
Text:  "<newline>        "
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  ");"
Text:  "<newline><newline>    "
Punctuation:  "("
Text:  "<newline>        "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tags:ident"
Text:  " "
Punctuation:  "("
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tag_nodes:expr"
Punctuation:  "),"
Operator:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>        "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$nodes:expr"
Punctuation:  "),"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>        "
Name.Variable:  "$word:ident"
Text:  " "
Name.Variable:  "$"
Punctuation:  "("
Name.Variable:  "$rest:tt"
Punctuation:  ")"
Operator:  "*"
Text:  "<newline>    "
Punctuation:  ")"
Text:  " "
Keyword:  "=>"
Text:  " "
Punctuation:  "("
Text:  "<newline>        "
Name.Decorator:  "parse_node!"
Punctuation:  "("
Text:  "<newline>            "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Text:  " "
Name.Variable:  "$tags"
Text:  " "
Punctuation:  "("
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$tag_nodes"
Punctuation:  "),"
Operator:  "*"
Punctuation:  "))"
Operator:  "*"
Punctuation:  "];"
Text:  "<newline>            "
Punctuation:  "["
Name.Variable:  "$"
Punctuation:  "(:"
Name.Variable:  "$nodes"
Punctuation:  ",)"
Operator:  "*"
Text:  " "
Punctuation:  ":"
Name.Namespace:  "Box"
Punctuation:  "::"
Name.Function:  "new"
Punctuation:  "("
Name.Namespace:  "HTMLFragment"
Punctuation:  "::"
Name.Function:  "Text"
Punctuation:  "("
Name.Decorator:  "stringify!"
Punctuation:  "("
Name.Variable:  "$word"
Punctuation:  ")"
Name.Function:  ".to_owned"
Punctuation:  "()))];"
Text:  "<newline>            "
Name.Variable:  "$"
Punctuation:  "("
Name.Variable:  "$rest"
Punctuation:  ")"
Operator:  "*"
Text:  "<newline>        "
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  ");"
Text:  "<newline><newline>    "
Punctuation:  "("
Text:  " "
Punctuation:  "[];"
Text:  " "
Punctuation:  "[:"
Name.Variable:  "$e:expr"
Punctuation:  "];"
Text:  " "
Punctuation:  ")"
Text:  " "
Keyword:  "=>"
Text:  " "
Punctuation:  "("
Text:  " "
Name.Variable:  "$e"
Text:  " "
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  ");"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "main"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "page"
Text:  " "
Operator:  "="
Text:  " "
Name.Decorator:  "html!"
Text:  " "
Punctuation:  "("
Text:  "<newline>        "
Operator:  "<"
Name:  "html"
Operator:  ">"
Text:  "<newline>            "
Operator:  "<"
Name:  "head"
Operator:  "><"
Name:  "title"
Operator:  ">"
Name:  "This"
Text:  " "
Name:  "is"
Text:  " "
Name:  "the"
Text:  " "
Name:  "title"
Text:  "."
Operator:  "</"
Name:  "title"
Operator:  "></"
Name:  "head"
Operator:  ">"
Text:  "<newline>            "
Operator:  "<"
Name:  "body"
Operator:  ">"
Text:  "<newline>            "
Operator:  "<"
Name:  "p"
Operator:  ">"
Name:  "This"
Text:  " "
Name:  "is"
Text:  " "
Name:  "some"
Text:  " "
Name:  "text"
Operator:  "</"
Name:  "p"
Operator:  ">"
Text:  "<newline>            "
Operator:  "</"
Name:  "body"
Operator:  ">"
Text:  "<newline>        "
Operator:  "</"
Name:  "html"
Operator:  ">"
Text:  "<newline>    "
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "enum"
Text:  " "
Name:  "HTMLFragment"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "Tag"
Punctuation:  "("
Name.Builtin:  "String"
Punctuation:  ","
Text:  " "
Name.Builtin:  "Vec"
Operator:  "<"
Name.Builtin:  "Box"
Operator:  "<"
Name:  "HTMLFragment"
Operator:  ">>"
Punctuation:  "),"
Text:  "<newline>    "
Name.Function:  "Text"
Punctuation:  "("
Name.Builtin:  "String"
Punctuation:  "),"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "int_literals_delimiter"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "billion"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1000_000_000"
Punctuation:  ";"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "red_color"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0xff_60_60"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "float_literals_delimiter"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "billion"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "1000_000_000.0"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// Some hidden lines by starting with hash"
Text:  "<newline>"
Comment.Special:  "# extern crate core;"
Text:  "<newline>"
Comment.Special:  "# use core::str;"
Text:  "<newline>"
Comment.Special:  "# let x = 5;"
Text:  "<newline><newline>"
Keyword:  "async"
Text:  " "
Keyword:  "fn"
Text:  " "
Name.Function:  "learn_and_sing"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "song"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "learn_song"
Punctuation:  "()"
Keyword:  ".await"
Punctuation:  ";"
Text:  "<newline>    "
Name.Function:  "sing_song"
Punctuation:  "("
Name:  "song"
Punctuation:  ")"
Keyword:  ".await"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "tuple_access"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "t"
Punctuation:  ":"
Text:  " "
Punctuation:  "("
Name.Builtin:  "i32"
Punctuation:  ","
Text:  " "
Name.Builtin:  "i32"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "42"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "13"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name:  "f"
Punctuation:  ":"
Text:  " "
Name:  "t"
Name.Attribute:  ".0"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// Some smoke tests for comments."
Text:  "<newline>"
Comment.Single:  "// See the spec tests for more thorough checking."
Text:  "<newline><newline>"
Comment.Doc:  "/// line-style docs (outer)"
Text:  "<newline>"
Keyword:  "mod"
Text:  " "
Name:  "external_line_docs"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "internal_line_docs"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Doc:  "//! also line-style docs (inner)"
Text:  "<newline>    "
Comment.Doc:  "//! still line docs"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "="
Text:  " "
Comment.Multiline:  "/**/"
Text:  " "
Literal.String:  "\"<- self-closing non-doc comment\""
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name:  "_"
Text:  " "
Operator:  "="
Text:  " "
Comment.Multiline:  "/***/"
Text:  " "
Literal.String:  "\"<- another self-closing non-doc comment\""
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Doc:  "/**<newline> * multiline block doc (outer)<newline> * including /* nesting */<newline> */"
Text:  "<newline>"
Keyword:  "fn"
Text:  " "
Name.Function:  "docs_block"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>"
Keyword:  "mod"
Text:  " "
Name:  "bar"
Text:  " "
Punctuation:  "{"
Text:  " "
Comment.Doc:  "/*! docs for bar */"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
