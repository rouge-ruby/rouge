Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "my-compare"
Text:  " "
Name.Variable:  "a"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "cond"
Text:  " "
Punctuation:  "[("
Name.Builtin:  "<"
Text:  " "
Name.Variable:  "a"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "-1"
Punctuation:  "]"
Text:  "<newline>        "
Punctuation:  "[("
Name.Builtin:  "="
Text:  " "
Name.Variable:  "a"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>        "
Punctuation:  "[("
Name.Builtin:  ">"
Text:  " "
Name.Variable:  "a"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "]))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "my-fibonacci"
Text:  " "
Name.Variable:  "n"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(["
Name.Function:  "a"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "]"
Text:  "<newline>             "
Punctuation:  "["
Name.Function:  "b"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "]"
Text:  "<newline>             "
Punctuation:  "["
Name.Function:  "n"
Text:  " "
Name.Variable:  "n"
Punctuation:  "])"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "zero?"
Text:  " "
Name.Variable:  "n"
Punctuation:  ")"
Text:  "<newline>        "
Name.Variable:  "b"
Text:  "<newline>        "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Name.Variable:  "b"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Name.Variable:  "a"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")"
Text:  "<newline>              "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "my-hex"
Text:  " "
Literal.Number.Hex:  "#x10c"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "my-bin"
Text:  " "
Literal.Number.Bin:  "#b1001011101"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "my-oct"
Text:  " "
Literal.Number.Oct:  "#o1234"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "my-dec"
Text:  " "
Literal.Number.Integer:  "#d10"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "my-exact"
Text:  " "
Literal.Number.Other:  "#e10.2"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "my-inexact"
Text:  " "
Literal.Number.Other:  "#i10.2"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  ";;; installed-scm-file"
Text:  "<newline><newline>"
Comment.Single:  ";;;; Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc."
Text:  "<newline>"
Comment.Single:  ";;;;"
Text:  "<newline>"
Comment.Single:  ";;;; This program is free software; you can redistribute it and/or modify"
Text:  "<newline>"
Comment.Single:  ";;;; it under the terms of the GNU General Public License as published by"
Text:  "<newline>"
Comment.Single:  ";;;; the Free Software Foundation; either version 2, or (at your option)"
Text:  "<newline>"
Comment.Single:  ";;;; any later version."
Text:  "<newline>"
Comment.Single:  ";;;;"
Text:  "<newline>"
Comment.Single:  ";;;; This program is distributed in the hope that it will be useful,"
Text:  "<newline>"
Comment.Single:  ";;;; but WITHOUT ANY WARRANTY; without even the implied warranty of"
Text:  "<newline>"
Comment.Single:  ";;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
Text:  "<newline>"
Comment.Single:  ";;;; GNU General Public License for more details."
Text:  "<newline>"
Comment.Single:  ";;;;"
Text:  "<newline>"
Comment.Single:  ";;;; You should have received a copy of the GNU General Public License"
Text:  "<newline>"
Comment.Single:  ";;;; along with this software; see the file COPYING.  If not, write to"
Text:  "<newline>"
Comment.Single:  ";;;; the Free Software Foundation, Inc., 59 Temple Place, Suite 330,"
Text:  "<newline>"
Comment.Single:  ";;;; Boston, MA 02111-1307 USA"
Text:  "<newline>"
Comment.Single:  ";;;;"
Text:  "<newline>"
Comment.Single:  ";;;; As a special exception, the Free Software Foundation gives permission"
Text:  "<newline>"
Comment.Single:  ";;;; for additional uses of the text contained in its release of GUILE."
Text:  "<newline>"
Comment.Single:  ";;;;"
Text:  "<newline>"
Comment.Single:  ";;;; The exception is that, if you link the GUILE library with other files"
Text:  "<newline>"
Comment.Single:  ";;;; to produce an executable, this does not by itself cause the"
Text:  "<newline>"
Comment.Single:  ";;;; resulting executable to be covered by the GNU General Public License."
Text:  "<newline>"
Comment.Single:  ";;;; Your use of that executable is in no way restricted on account of"
Text:  "<newline>"
Comment.Single:  ";;;; linking the GUILE library code into it."
Text:  "<newline>"
Comment.Single:  ";;;;"
Text:  "<newline>"
Comment.Single:  ";;;; This exception does not however invalidate any other reasons why"
Text:  "<newline>"
Comment.Single:  ";;;; the executable file might be covered by the GNU General Public License."
Text:  "<newline>"
Comment.Single:  ";;;;"
Text:  "<newline>"
Comment.Single:  ";;;; This exception applies only to the code released by the"
Text:  "<newline>"
Comment.Single:  ";;;; Free Software Foundation under the name GUILE.  If you copy"
Text:  "<newline>"
Comment.Single:  ";;;; code from other Free Software Foundation releases into a copy of"
Text:  "<newline>"
Comment.Single:  ";;;; GUILE, as the General Public License permits, the exception does"
Text:  "<newline>"
Comment.Single:  ";;;; not apply to the code that you add in this way.  To avoid misleading"
Text:  "<newline>"
Comment.Single:  ";;;; anyone as to the status of such modified files, you must delete"
Text:  "<newline>"
Comment.Single:  ";;;; this exception notice from them."
Text:  "<newline>"
Comment.Single:  ";;;;"
Text:  "<newline>"
Comment.Single:  ";;;; If you write modifications of your own for GUILE, it is your choice"
Text:  "<newline>"
Comment.Single:  ";;;; whether to permit this exception to apply to your modifications."
Text:  "<newline>"
Comment.Single:  ";;;; If you do not wish that, delete this exception notice."
Text:  "<newline>"
Comment.Single:  ";;;;"
Text:  "<newline>\f<newline><newline>"
Comment.Single:  ";;; Commentary:"
Text:  "<newline><newline>"
Comment.Single:  ";;; This file is the first thing loaded into Guile.  It adds many mundane"
Text:  "<newline>"
Comment.Single:  ";;; definitions and a few that are interesting."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; The module system (hence the hierarchical namespace) are defined in this"
Text:  "<newline>"
Comment.Single:  ";;; file."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";;; Code:"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Deprecation}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";; We don't have macros here, but we do want to define"
Text:  "<newline>"
Comment.Single:  ";; `begin-deprecated' early."
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "begin-deprecated"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "procedure->memoizing-macro"
Text:  "<newline>   "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Builtin:  "exp"
Text:  " "
Name.Variable:  "env"
Punctuation:  ")"
Text:  "<newline>     "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "include-deprecated-features"
Punctuation:  ")"
Text:  "<newline>\t "
Operator:  "`"
Punctuation:  "("
Keyword:  "begin"
Text:  " "
Operator:  ",@"
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "exp"
Punctuation:  "))"
Text:  "<newline>\t "
Operator:  "`"
Name.Constant:  "#f"
Punctuation:  "))))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Features}"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "provide"
Text:  " "
Name.Variable:  "sym"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "memq"
Text:  " "
Name.Variable:  "sym"
Text:  " "
Name.Variable:  "*features*"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "set!"
Text:  " "
Name.Variable:  "*features*"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cons"
Text:  " "
Name.Variable:  "sym"
Text:  " "
Name.Variable:  "*features*"
Punctuation:  "))))"
Text:  "<newline><newline>"
Comment.Single:  ";;; Return #t iff FEATURE is available to this Guile interpreter."
Text:  "<newline>"
Comment.Single:  ";;; In SLIB, provided? also checks to see if the module is available."
Text:  "<newline>"
Comment.Single:  ";;; We should do that too, but don't."
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "provided?"
Text:  " "
Name.Variable:  "feature"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "memq"
Text:  " "
Name.Variable:  "feature"
Text:  " "
Name.Variable:  "*features*"
Punctuation:  ")"
Text:  " "
Name.Constant:  "#t"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Function:  "begin-deprecated"
Text:  "<newline> "
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "feature?"
Text:  " "
Name.Variable:  "sym"
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Function:  "issue-deprecation-warning"
Text:  "<newline>    "
Literal.String:  "\"`feature?' is deprecated.  Use `provided?' instead.\""
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Function:  "provided?"
Text:  " "
Name.Variable:  "sym"
Punctuation:  ")))"
Text:  "<newline><newline>"
Comment.Single:  ";;; let format alias simple-format until the more complete version is loaded"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "format"
Text:  " "
Name.Variable:  "simple-format"
Punctuation:  ")"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {R4RS compliance}"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Function:  "primitive-load-path"
Text:  " "
Literal.String:  "\"ice-9/r4rs.scm\""
Punctuation:  ")"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Simple Debugging Tools}"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline><newline><newline>"
Comment.Single:  ";; peek takes any number of arguments, writes them to the"
Text:  "<newline>"
Comment.Single:  ";; current ouput port, and returns the last argument."
Text:  "<newline>"
Comment.Single:  ";; It is handy to wrap around an expression to look at"
Text:  "<newline>"
Comment.Single:  ";; a value each time is evaluated, e.g.:"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";;\t(+ 10 (troublesome-fn))"
Text:  "<newline>"
Comment.Single:  ";;\t=> (+ 10 (pk 'troublesome-fn-returned (troublesome-fn)))"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "peek"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "stuff"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "newline"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\";;; \""
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "write"
Text:  " "
Name.Variable:  "stuff"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "newline"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Punctuation:  "("
Name.Function:  "last-pair"
Text:  " "
Name.Variable:  "stuff"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "pk"
Text:  " "
Name.Variable:  "peek"
Punctuation:  ")"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "warn"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "stuff"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "with-output-to-port"
Text:  " "
Punctuation:  "("
Name.Function:  "current-error-port"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "()"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "newline"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\";;; WARNING \""
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Name.Variable:  "stuff"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "newline"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Punctuation:  "("
Name.Function:  "last-pair"
Text:  " "
Name.Variable:  "stuff"
Punctuation:  ")))))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Trivial Functions}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "identity"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "1+"
Text:  " "
Name.Variable:  "n"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "1-"
Text:  " "
Name.Variable:  "n"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.Number.Integer:  "-1"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "and=>"
Text:  " "
Name.Variable:  "value"
Text:  " "
Name.Variable:  "procedure"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "value"
Text:  " "
Punctuation:  "("
Name.Function:  "procedure"
Text:  " "
Name.Variable:  "value"
Punctuation:  ")))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "make-hash-table"
Text:  " "
Name.Variable:  "k"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "make-vector"
Text:  " "
Name.Variable:  "k"
Text:  " "
Operator:  "'"
Punctuation:  "()))"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Function:  "begin-deprecated"
Text:  "<newline> "
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "id"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Function:  "issue-deprecation-warning"
Text:  " "
Literal.String:  "\"`id' is deprecated.  Use `identity' instead.\""
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Function:  "identity"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline> "
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "-1+"
Text:  " "
Name.Variable:  "n"
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Function:  "issue-deprecation-warning"
Text:  " "
Literal.String:  "\"`-1+' is deprecated.  Use `1-' instead.\""
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Function:  "1-"
Text:  " "
Name.Variable:  "n"
Punctuation:  "))"
Text:  "<newline> "
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "return-it"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Function:  "issue-deprecation-warning"
Text:  " "
Literal.String:  "\"`return-it' is deprecated.  Use `noop' instead.\""
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "noop"
Text:  " "
Name.Variable:  "args"
Punctuation:  ")))"
Text:  "<newline><newline>"
Comment.Single:  ";;; apply-to-args is functionally redundant with apply and, worse,"
Text:  "<newline>"
Comment.Single:  ";;; is less general than apply since it only takes two arguments."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; On the other hand, apply-to-args is a syntacticly convenient way to"
Text:  "<newline>"
Comment.Single:  ";;; perform binding in many circumstances when the \"let\" family of"
Text:  "<newline>"
Comment.Single:  ";;; of forms don't cut it.  E.g.:"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;;\t(apply-to-args (return-3d-mouse-coords)"
Text:  "<newline>"
Comment.Single:  ";;;\t  (lambda (x y z)"
Text:  "<newline>"
Comment.Single:  ";;;\t\t...))"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "apply-to-args"
Text:  " "
Name.Variable:  "args"
Text:  " "
Name.Variable:  "fn"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "fn"
Text:  " "
Name.Variable:  "args"
Punctuation:  "))"
Text:  "<newline><newline>\f<newline><newline>"
Comment.Single:  ";;; {Integer Math}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "ipow-by-squaring"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "k"
Text:  " "
Name.Variable:  "acc"
Text:  " "
Name.Variable:  "proc"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "zero?"
Text:  " "
Name.Variable:  "k"
Punctuation:  ")"
Text:  " "
Name.Variable:  "acc"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "(("
Name.Builtin:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name.Variable:  "k"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "proc"
Text:  " "
Name.Variable:  "acc"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "else"
Text:  " "
Punctuation:  "("
Name.Function:  "ipow-by-squaring"
Text:  " "
Punctuation:  "("
Name.Function:  "proc"
Text:  " "
Name.Variable:  "x"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Punctuation:  "("
Name.Builtin:  "quotient"
Text:  " "
Name.Variable:  "k"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "even?"
Text:  " "
Name.Variable:  "k"
Punctuation:  ")"
Text:  " "
Name.Variable:  "acc"
Text:  " "
Punctuation:  "("
Name.Function:  "proc"
Text:  " "
Name.Variable:  "acc"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t"
Name.Variable:  "proc"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Function:  "begin-deprecated"
Text:  "<newline> "
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "string-character-length"
Text:  " "
Name.Variable:  "s"
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Function:  "issue-deprecation-warning"
Text:  " "
Literal.String:  "\"`string-character-length' is deprecated.  Use `string-length' instead.\""
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "s"
Punctuation:  "))"
Text:  "<newline> "
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "flags"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Function:  "issue-deprecation-warning"
Text:  " "
Literal.String:  "\"`flags' is deprecated.  Use `logior' instead.\""
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "logior"
Text:  " "
Name.Variable:  "args"
Punctuation:  ")))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Symbol Properties}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol-property"
Text:  " "
Name.Variable:  "sym"
Text:  " "
Name.Variable:  "prop"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "pair"
Text:  " "
Punctuation:  "("
Name.Builtin:  "assoc"
Text:  " "
Name.Variable:  "prop"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol-pref"
Text:  " "
Name.Variable:  "sym"
Punctuation:  "))))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "pair"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "pair"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-symbol-property!"
Text:  " "
Name.Variable:  "sym"
Text:  " "
Name.Variable:  "prop"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "pair"
Text:  " "
Punctuation:  "("
Name.Builtin:  "assoc"
Text:  " "
Name.Variable:  "prop"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol-pref"
Text:  " "
Name.Variable:  "sym"
Punctuation:  "))))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "pair"
Text:  "<newline>\t"
Punctuation:  "("
Name.Builtin:  "set-cdr!"
Text:  " "
Name.Variable:  "pair"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "symbol-pset!"
Text:  " "
Name.Variable:  "sym"
Text:  " "
Punctuation:  "("
Name.Function:  "acons"
Text:  " "
Name.Variable:  "prop"
Text:  " "
Name.Variable:  "val"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol-pref"
Text:  " "
Name.Variable:  "sym"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol-property-remove!"
Text:  " "
Name.Variable:  "sym"
Text:  " "
Name.Variable:  "prop"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "pair"
Text:  " "
Punctuation:  "("
Name.Builtin:  "assoc"
Text:  " "
Name.Variable:  "prop"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol-pref"
Text:  " "
Name.Variable:  "sym"
Punctuation:  "))))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "pair"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "symbol-pset!"
Text:  " "
Name.Variable:  "sym"
Text:  " "
Punctuation:  "("
Name.Function:  "delq!"
Text:  " "
Name.Variable:  "pair"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol-pref"
Text:  " "
Name.Variable:  "sym"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Comment.Single:  ";;; {General Properties}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";; This is a more modern interface to properties.  It will replace all"
Text:  "<newline>"
Comment.Single:  ";; other property-like things eventually."
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "make-object-property"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "prop"
Text:  " "
Punctuation:  "("
Name.Function:  "primitive-make-property"
Text:  " "
Name.Constant:  "#f"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "make-procedure-with-setter"
Text:  "<newline>     "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "primitive-property-ref"
Text:  " "
Name.Variable:  "prop"
Text:  " "
Name.Variable:  "obj"
Punctuation:  "))"
Text:  "<newline>     "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "primitive-property-set!"
Text:  " "
Name.Variable:  "prop"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")))))"
Text:  "<newline><newline>\f<newline><newline>"
Comment.Single:  ";;; {Arrays}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "provided?"
Text:  " "
Literal.String.Symbol:  "'array"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "primitive-load-path"
Text:  " "
Literal.String:  "\"ice-9/arrays.scm\""
Punctuation:  "))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Keywords}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol->keyword"
Text:  " "
Name.Variable:  "symbol"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "make-keyword-from-dash-symbol"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol-append"
Text:  " "
Literal.String.Symbol:  "'-"
Text:  " "
Name.Variable:  "symbol"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "keyword->symbol"
Text:  " "
Name.Variable:  "kw"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "sym"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbol->string"
Text:  " "
Punctuation:  "("
Name.Function:  "keyword-dash-symbol"
Text:  " "
Name.Variable:  "kw"
Punctuation:  "))))"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "string->symbol"
Text:  " "
Punctuation:  "("
Name.Builtin:  "substring"
Text:  " "
Name.Variable:  "sym"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "sym"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "kw-arg-ref"
Text:  " "
Name.Variable:  "args"
Text:  " "
Name.Variable:  "kw"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "rem"
Text:  " "
Punctuation:  "("
Name.Builtin:  "member"
Text:  " "
Name.Variable:  "kw"
Text:  " "
Name.Variable:  "args"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "rem"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pair?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "rem"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cadr"
Text:  " "
Name.Variable:  "rem"
Punctuation:  "))))"
Text:  "<newline><newline>\f<newline><newline>"
Comment.Single:  ";;; {Structs}"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "struct-layout"
Text:  " "
Name.Variable:  "s"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "struct-ref"
Text:  " "
Punctuation:  "("
Name.Function:  "struct-vtable"
Text:  " "
Name.Variable:  "s"
Punctuation:  ")"
Text:  " "
Name.Variable:  "vtable-index-layout"
Punctuation:  "))"
Text:  "<newline><newline>\f<newline><newline>"
Comment.Single:  ";;; Environments"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "the-environment"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "procedure->syntax"
Text:  "<newline>   "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "x"
Text:  " "
Name.Variable:  "e"
Punctuation:  ")"
Text:  "<newline>     "
Name.Variable:  "e"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "the-root-environment"
Text:  " "
Punctuation:  "("
Name.Function:  "the-environment"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "environment-module"
Text:  " "
Name.Variable:  "env"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "closure"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pair?"
Text:  " "
Name.Variable:  "env"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Punctuation:  "("
Name.Function:  "last-pair"
Text:  " "
Name.Variable:  "env"
Punctuation:  ")))))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "closure"
Text:  " "
Punctuation:  "("
Name.Function:  "procedure-property"
Text:  " "
Name.Variable:  "closure"
Text:  " "
Literal.String.Symbol:  "'module"
Punctuation:  "))))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Records}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";; Printing records: by default, records are printed as"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";;   #<type-name field1: val1 field2: val2 ...>"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; You can change that by giving a custom printing function to"
Text:  "<newline>"
Comment.Single:  ";; MAKE-RECORD-TYPE (after the list of field symbols).  This function"
Text:  "<newline>"
Comment.Single:  ";; will be called like"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";;   (<printer> object port)"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; It should print OBJECT to PORT."
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "inherit-print-state"
Text:  " "
Name.Variable:  "old-port"
Text:  " "
Name.Variable:  "new-port"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "get-print-state"
Text:  " "
Name.Variable:  "old-port"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "port-with-print-state"
Text:  " "
Name.Variable:  "new-port"
Text:  " "
Punctuation:  "("
Name.Function:  "get-print-state"
Text:  " "
Name.Variable:  "old-port"
Punctuation:  "))"
Text:  "<newline>      "
Name.Variable:  "new-port"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";; 0: type-name, 1: fields"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "record-type-vtable"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "make-vtable-vtable"
Text:  " "
Literal.String:  "\"prpr\""
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t      "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "s"
Text:  " "
Name.Variable:  "p"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Punctuation:  "("
Keyword:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "eq?"
Text:  " "
Name.Variable:  "s"
Text:  " "
Name.Variable:  "record-type-vtable"
Punctuation:  ")"
Text:  "<newline>\t\t\t       "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\"#<record-type-vtable>\""
Text:  " "
Name.Variable:  "p"
Punctuation:  "))"
Text:  "<newline>\t\t\t      "
Punctuation:  "("
Keyword:  "else"
Text:  "<newline>\t\t\t       "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\"#<record-type \""
Text:  " "
Name.Variable:  "p"
Punctuation:  ")"
Text:  "<newline>\t\t\t       "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type-name"
Text:  " "
Name.Variable:  "s"
Punctuation:  ")"
Text:  " "
Name.Variable:  "p"
Punctuation:  ")"
Text:  "<newline>\t\t\t       "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\">\""
Text:  " "
Name.Variable:  "p"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type?"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Function:  "struct?"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Name.Variable:  "record-type-vtable"
Text:  " "
Punctuation:  "("
Name.Function:  "struct-vtable"
Text:  " "
Name.Variable:  "obj"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "make-record-type"
Text:  " "
Name.Variable:  "type-name"
Text:  " "
Name.Variable:  "fields"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "opt"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "printer-fn"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pair?"
Text:  " "
Name.Variable:  "opt"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "opt"
Punctuation:  "))))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "struct"
Text:  " "
Punctuation:  "("
Name.Function:  "make-struct"
Text:  " "
Name.Variable:  "record-type-vtable"
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>\t\t\t       "
Punctuation:  "("
Name.Function:  "make-struct-layout"
Text:  "<newline>\t\t\t\t"
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "string-append"
Text:  "<newline>\t\t\t\t       "
Punctuation:  "("
Name.Builtin:  "map"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "f"
Punctuation:  ")"
Text:  " "
Literal.String:  "\"pw\""
Punctuation:  ")"
Text:  " "
Name.Variable:  "fields"
Punctuation:  ")))"
Text:  "<newline>\t\t\t       "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Name.Variable:  "printer-fn"
Text:  "<newline>\t\t\t\t   "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "s"
Text:  " "
Name.Variable:  "p"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t     "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\"#<\""
Text:  " "
Name.Variable:  "p"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t     "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Name.Variable:  "type-name"
Text:  " "
Name.Variable:  "p"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t     "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "fields"
Text:  " "
Name.Variable:  "fields"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t\t"
Punctuation:  "("
Name.Function:  "off"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t       "
Punctuation:  "("
Keyword:  "cond"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "(("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "fields"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t\t "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\" \""
Text:  " "
Name.Variable:  "p"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "fields"
Punctuation:  ")"
Text:  " "
Name.Variable:  "p"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\": \""
Text:  " "
Name.Variable:  "p"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Punctuation:  "("
Name.Function:  "struct-ref"
Text:  " "
Name.Variable:  "s"
Text:  " "
Name.Variable:  "off"
Punctuation:  ")"
Text:  " "
Name.Variable:  "p"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "fields"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name.Variable:  "off"
Punctuation:  ")))))"
Text:  "<newline>\t\t\t\t     "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\">\""
Text:  " "
Name.Variable:  "p"
Punctuation:  ")))"
Text:  "<newline>\t\t\t       "
Name.Variable:  "type-name"
Text:  "<newline>\t\t\t       "
Punctuation:  "("
Name.Function:  "copy-tree"
Text:  " "
Name.Variable:  "fields"
Punctuation:  "))))"
Text:  "<newline>      "
Comment.Single:  ";; Temporary solution: Associate a name to the record type descriptor"
Text:  "<newline>      "
Comment.Single:  ";; so that the object system can create a wrapper class for it."
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "set-struct-vtable-name!"
Text:  " "
Name.Variable:  "struct"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbol?"
Text:  " "
Name.Variable:  "type-name"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t  "
Name.Variable:  "type-name"
Text:  "<newline>\t\t\t\t\t  "
Punctuation:  "("
Name.Builtin:  "string->symbol"
Text:  " "
Name.Variable:  "type-name"
Punctuation:  ")))"
Text:  "<newline>      "
Name.Variable:  "struct"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type-name"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type?"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "struct-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "vtable-offset-user"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String.Symbol:  "'not-a-record-type"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type-fields"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type?"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "struct-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name.Variable:  "vtable-offset-user"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String.Symbol:  "'not-a-record-type"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "record-constructor"
Text:  " "
Name.Variable:  "rtd"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "opt"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "field-names"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pair?"
Text:  " "
Name.Variable:  "opt"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "opt"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type-fields"
Text:  " "
Name.Variable:  "rtd"
Punctuation:  "))))"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "local-eval"
Text:  " "
Operator:  "`"
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Operator:  ","
Name.Variable:  "field-names"
Text:  "<newline>\t\t   "
Punctuation:  "("
Name.Function:  "make-struct"
Text:  " "
Literal.String.Symbol:  "',rtd"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Operator:  ",@"
Punctuation:  "("
Name.Builtin:  "map"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "f"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t\t "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "memq"
Text:  " "
Name.Variable:  "f"
Text:  " "
Name.Variable:  "field-names"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t\t     "
Name.Variable:  "f"
Text:  "<newline>\t\t\t\t\t\t     "
Name.Constant:  "#f"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t\t       "
Punctuation:  "("
Name.Function:  "record-type-fields"
Text:  " "
Name.Variable:  "rtd"
Punctuation:  "))))"
Text:  "<newline>\t\t"
Name.Variable:  "the-root-environment"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "record-predicate"
Text:  " "
Name.Variable:  "rtd"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Function:  "struct?"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Name.Variable:  "rtd"
Text:  " "
Punctuation:  "("
Name.Function:  "struct-vtable"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "record-accessor"
Text:  " "
Name.Variable:  "rtd"
Text:  " "
Name.Variable:  "field-name"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "pos"
Text:  " "
Punctuation:  "("
Name.Function:  "list-index"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type-fields"
Text:  " "
Name.Variable:  "rtd"
Punctuation:  ")"
Text:  " "
Name.Variable:  "field-name"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Name.Variable:  "pos"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String.Symbol:  "'no-such-field"
Text:  " "
Name.Variable:  "field-name"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "local-eval"
Text:  " "
Operator:  "`"
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "obj"
Punctuation:  ")"
Text:  "<newline>\t\t   "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Literal.String.Symbol:  "',rtd"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type-descriptor"
Text:  " "
Name.Variable:  "obj"
Punctuation:  "))"
Text:  "<newline>\t\t\t"
Punctuation:  "("
Name.Function:  "struct-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Operator:  ","
Name.Variable:  "pos"
Punctuation:  ")))"
Text:  "<newline>\t\t"
Name.Variable:  "the-root-environment"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "record-modifier"
Text:  " "
Name.Variable:  "rtd"
Text:  " "
Name.Variable:  "field-name"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "pos"
Text:  " "
Punctuation:  "("
Name.Function:  "list-index"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type-fields"
Text:  " "
Name.Variable:  "rtd"
Punctuation:  ")"
Text:  " "
Name.Variable:  "field-name"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Name.Variable:  "pos"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String.Symbol:  "'no-such-field"
Text:  " "
Name.Variable:  "field-name"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "local-eval"
Text:  " "
Operator:  "`"
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  "<newline>\t\t   "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Literal.String.Symbol:  "',rtd"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type-descriptor"
Text:  " "
Name.Variable:  "obj"
Punctuation:  "))"
Text:  "<newline>\t\t\t"
Punctuation:  "("
Name.Function:  "struct-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Operator:  ","
Name.Variable:  "pos"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")))"
Text:  "<newline>\t\t"
Name.Variable:  "the-root-environment"
Punctuation:  ")))"
Text:  "<newline><newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "record?"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Function:  "struct?"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type?"
Text:  " "
Punctuation:  "("
Name.Function:  "struct-vtable"
Text:  " "
Name.Variable:  "obj"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "record-type-descriptor"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "struct?"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "struct-vtable"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String.Symbol:  "'not-a-record"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Function:  "provide"
Text:  " "
Literal.String.Symbol:  "'record"
Punctuation:  ")"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Booleans}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "->bool"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Symbols}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol-append"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "string->symbol"
Text:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "string-append"
Text:  " "
Punctuation:  "("
Name.Builtin:  "map"
Text:  " "
Name.Variable:  "symbol->string"
Text:  " "
Name.Variable:  "args"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "list->symbol"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "string->symbol"
Text:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "list->string"
Text:  " "
Name.Variable:  "args"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "string->symbol"
Text:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "string"
Text:  " "
Name.Variable:  "args"
Punctuation:  ")))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Lists}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "list-index"
Text:  " "
Name.Variable:  "l"
Text:  " "
Name.Variable:  "k"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "n"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "l"
Text:  " "
Name.Variable:  "l"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "l"
Punctuation:  "))"
Text:  "<newline>\t "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "l"
Punctuation:  ")"
Text:  " "
Name.Variable:  "k"
Punctuation:  ")"
Text:  "<newline>\t     "
Name.Variable:  "n"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "l"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "make-list"
Text:  " "
Name.Variable:  "n"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "init"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pair?"
Text:  " "
Name.Variable:  "init"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword:  "set!"
Text:  " "
Name.Variable:  "init"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "init"
Punctuation:  ")))"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "answer"
Text:  " "
Operator:  "'"
Punctuation:  "())"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "n"
Text:  " "
Name.Variable:  "n"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "answer"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cons"
Text:  " "
Name.Variable:  "init"
Text:  " "
Name.Variable:  "answer"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Name.Variable:  "n"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")))))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {and-map and or-map}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; (and-map fn lst) is like (and (fn (car lst)) (fn (cadr lst)) (fn...) ...)"
Text:  "<newline>"
Comment.Single:  ";;; (or-map fn lst) is like (or (fn (car lst)) (fn (cadr lst)) (fn...) ...)"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";; and-map f l"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Apply f to successive elements of l until exhaustion or f returns #f."
Text:  "<newline>"
Comment.Single:  ";; If returning early, return #f.  Otherwise, return the last value returned"
Text:  "<newline>"
Comment.Single:  ";; by f.  If f has never been called because l is empty, return #t."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "and-map"
Text:  " "
Name.Variable:  "f"
Text:  " "
Name.Variable:  "lst"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "result"
Text:  " "
Name.Constant:  "#t"
Punctuation:  ")"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "l"
Text:  " "
Name.Variable:  "lst"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "result"
Text:  "<newline>\t "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "l"
Punctuation:  ")"
Text:  "<newline>\t\t  "
Name.Variable:  "result"
Punctuation:  ")"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Function:  "f"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "l"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "l"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Comment.Single:  ";; or-map f l"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Apply f to successive elements of l until exhaustion or while f returns #f."
Text:  "<newline>"
Comment.Single:  ";; If returning early, return the return value of f."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "or-map"
Text:  " "
Name.Variable:  "f"
Text:  " "
Name.Variable:  "lst"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "result"
Text:  " "
Name.Constant:  "#f"
Punctuation:  ")"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "l"
Text:  " "
Name.Variable:  "lst"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Name.Variable:  "result"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "l"
Punctuation:  "))"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Function:  "f"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "l"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "l"
Punctuation:  "))))))"
Text:  "<newline><newline>\f<newline><newline>"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "provided?"
Text:  " "
Literal.String.Symbol:  "'posix"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "primitive-load-path"
Text:  " "
Literal.String:  "\"ice-9/posix.scm\""
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "provided?"
Text:  " "
Literal.String.Symbol:  "'socket"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "primitive-load-path"
Text:  " "
Literal.String:  "\"ice-9/networking.scm\""
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "file-exists?"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "provided?"
Text:  " "
Literal.String.Symbol:  "'posix"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "str"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "->bool"
Text:  " "
Punctuation:  "("
Name.Function:  "false-if-exception"
Text:  " "
Punctuation:  "("
Name.Function:  "stat"
Text:  " "
Name.Variable:  "str"
Punctuation:  "))))"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "str"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "port"
Text:  " "
Punctuation:  "("
Name.Function:  "catch"
Text:  " "
Literal.String.Symbol:  "'system-error"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "()"
Text:  " "
Punctuation:  "("
Name.Function:  "open-file"
Text:  " "
Name.Variable:  "str"
Text:  " "
Name.Variable:  "OPEN_READ"
Punctuation:  "))"
Text:  "<newline>\t\t\t   "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Name.Variable:  "args"
Text:  " "
Name.Constant:  "#f"
Punctuation:  "))))"
Text:  "<newline>\t  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "port"
Text:  " "
Punctuation:  "("
Keyword:  "begin"
Text:  " "
Punctuation:  "("
Name.Function:  "close-port"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  " "
Name.Constant:  "#t"
Punctuation:  ")"
Text:  "<newline>\t      "
Name.Constant:  "#f"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "file-is-directory?"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "provided?"
Text:  " "
Literal.String.Symbol:  "'posix"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "str"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Punctuation:  "("
Name.Function:  "stat:type"
Text:  " "
Punctuation:  "("
Name.Function:  "stat"
Text:  " "
Name.Variable:  "str"
Punctuation:  "))"
Text:  " "
Literal.String.Symbol:  "'directory"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "str"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "port"
Text:  " "
Punctuation:  "("
Name.Function:  "catch"
Text:  " "
Literal.String.Symbol:  "'system-error"
Text:  "<newline>\t\t\t   "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "()"
Text:  " "
Punctuation:  "("
Name.Function:  "open-file"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-append"
Text:  " "
Name.Variable:  "str"
Text:  " "
Literal.String:  "\"/.\""
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t\t "
Name.Variable:  "OPEN_READ"
Punctuation:  "))"
Text:  "<newline>\t\t\t   "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Name.Variable:  "args"
Text:  " "
Name.Constant:  "#f"
Punctuation:  "))))"
Text:  "<newline>\t  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "port"
Text:  " "
Punctuation:  "("
Keyword:  "begin"
Text:  " "
Punctuation:  "("
Name.Function:  "close-port"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  " "
Name.Constant:  "#t"
Punctuation:  ")"
Text:  "<newline>\t      "
Name.Constant:  "#f"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "has-suffix?"
Text:  " "
Name.Variable:  "str"
Text:  " "
Name.Variable:  "suffix"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "sufl"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "suffix"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "sl"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "str"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">"
Text:  " "
Name.Variable:  "sl"
Text:  " "
Name.Variable:  "sufl"
Punctuation:  ")"
Text:  "<newline>\t "
Punctuation:  "("
Name.Builtin:  "string=?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "substring"
Text:  " "
Name.Variable:  "str"
Text:  " "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Name.Variable:  "sl"
Text:  " "
Name.Variable:  "sufl"
Punctuation:  ")"
Text:  " "
Name.Variable:  "sl"
Punctuation:  ")"
Text:  " "
Name.Variable:  "suffix"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "system-error-errno"
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'system-error"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Punctuation:  "("
Name.Builtin:  "list-ref"
Text:  " "
Name.Variable:  "args"
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  "))"
Text:  "<newline>      "
Name.Constant:  "#f"
Punctuation:  "))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Error Handling}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "save-stack"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "scm-error"
Text:  " "
Literal.String.Symbol:  "'misc-error"
Text:  " "
Name.Constant:  "#f"
Text:  " "
Literal.String:  "\"?\""
Text:  " "
Name.Constant:  "#f"
Text:  " "
Name.Constant:  "#f"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "msg"
Text:  " "
Literal.String:  "\"~A\""
Punctuation:  ")"
Text:  "<newline>\t\t "
Punctuation:  "("
Name.Function:  "rest"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "args"
Punctuation:  ")))"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "rest"
Punctuation:  "))"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-append"
Text:  " "
Name.Variable:  "msg"
Text:  " "
Literal.String:  "\" ~S\""
Punctuation:  ")"
Text:  "<newline>\t\t  "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "rest"
Punctuation:  "))"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Function:  "scm-error"
Text:  " "
Literal.String.Symbol:  "'misc-error"
Text:  " "
Name.Constant:  "#f"
Text:  " "
Name.Variable:  "msg"
Text:  " "
Name.Variable:  "args"
Text:  " "
Name.Constant:  "#f"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Comment.Single:  ";; bad-throw is the hook that is called upon a throw to a an unhandled"
Text:  "<newline>"
Comment.Single:  ";; key (unless the throw has four arguments, in which case"
Text:  "<newline>"
Comment.Single:  ";; it's usually interpreted as an error throw.)"
Text:  "<newline>"
Comment.Single:  ";; If the key has a default handler (a throw-handler-default property),"
Text:  "<newline>"
Comment.Single:  ";; it is applied to the throw."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "bad-throw"
Text:  " "
Name.Variable:  "key"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "default"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol-property"
Text:  " "
Name.Variable:  "key"
Text:  " "
Literal.String.Symbol:  "'throw-handler-default"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "default"
Text:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "default"
Text:  " "
Name.Variable:  "key"
Text:  " "
Name.Variable:  "args"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "error"
Text:  " "
Literal.String:  "\"unhandled-exception:\""
Text:  " "
Name.Variable:  "key"
Text:  " "
Name.Variable:  "args"
Punctuation:  "))))"
Text:  "<newline><newline>\f<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tm:sec"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tm:min"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tm:hour"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tm:mday"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tm:mon"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tm:year"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tm:wday"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "6"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tm:yday"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "7"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tm:isdst"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "8"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tm:gmtoff"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "9"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tm:zone"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-tm:sec"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-tm:min"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-tm:hour"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-tm:mday"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-tm:mon"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "4"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-tm:year"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-tm:wday"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "6"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-tm:yday"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "7"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-tm:isdst"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "8"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-tm:gmtoff"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "9"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "set-tm:zone"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-set!"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tms:clock"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tms:utime"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tms:stime"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tms:cutime"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tms:cstime"
Text:  " "
Name.Variable:  "obj"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obj"
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "file-position"
Text:  " "
Name.Variable:  "ftell"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "file-set-position"
Text:  " "
Name.Variable:  "port"
Text:  " "
Name.Variable:  "offset"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "whence"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "whence"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Name.Variable:  "whence"
Text:  " "
Operator:  "'"
Punctuation:  "())"
Text:  " "
Name.Variable:  "SEEK_SET"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "whence"
Punctuation:  "))))"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "seek"
Text:  " "
Name.Variable:  "port"
Text:  " "
Name.Variable:  "offset"
Text:  " "
Name.Variable:  "whence"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "move->fdes"
Text:  " "
Name.Variable:  "fd/port"
Text:  " "
Name.Variable:  "fd"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "integer?"
Text:  " "
Name.Variable:  "fd/port"
Punctuation:  ")"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "dup->fdes"
Text:  " "
Name.Variable:  "fd/port"
Text:  " "
Name.Variable:  "fd"
Punctuation:  ")"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "close"
Text:  " "
Name.Variable:  "fd/port"
Punctuation:  ")"
Text:  "<newline>\t "
Name.Variable:  "fd"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "else"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "primitive-move->fdes"
Text:  " "
Name.Variable:  "fd/port"
Text:  " "
Name.Variable:  "fd"
Punctuation:  ")"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "set-port-revealed!"
Text:  " "
Name.Variable:  "fd/port"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t "
Name.Variable:  "fd/port"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "release-port-handle"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "revealed"
Text:  " "
Punctuation:  "("
Name.Function:  "port-revealed"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">"
Text:  " "
Name.Variable:  "revealed"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "set-port-revealed!"
Text:  " "
Name.Variable:  "port"
Text:  " "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Name.Variable:  "revealed"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "dup->port"
Text:  " "
Name.Variable:  "port/fd"
Text:  " "
Name.Variable:  "mode"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "maybe-fd"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "port"
Text:  " "
Punctuation:  "("
Name.Function:  "fdopen"
Text:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "dup->fdes"
Text:  " "
Name.Variable:  "port/fd"
Text:  " "
Name.Variable:  "maybe-fd"
Punctuation:  ")"
Text:  "<newline>\t\t      "
Name.Variable:  "mode"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pair?"
Text:  " "
Name.Variable:  "maybe-fd"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "set-port-revealed!"
Text:  " "
Name.Variable:  "port"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>    "
Name.Variable:  "port"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "dup->inport"
Text:  " "
Name.Variable:  "port/fd"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "maybe-fd"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "dup->port"
Text:  " "
Name.Variable:  "port/fd"
Text:  " "
Literal.String:  "\"r\""
Text:  " "
Name.Variable:  "maybe-fd"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "dup->outport"
Text:  " "
Name.Variable:  "port/fd"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "maybe-fd"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "dup->port"
Text:  " "
Name.Variable:  "port/fd"
Text:  " "
Literal.String:  "\"w\""
Text:  " "
Name.Variable:  "maybe-fd"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "dup"
Text:  " "
Name.Variable:  "port/fd"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "maybe-fd"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integer?"
Text:  " "
Name.Variable:  "port/fd"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "dup->fdes"
Text:  " "
Name.Variable:  "port/fd"
Text:  " "
Name.Variable:  "maybe-fd"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "dup->port"
Text:  " "
Name.Variable:  "port/fd"
Text:  " "
Punctuation:  "("
Name.Function:  "port-mode"
Text:  " "
Name.Variable:  "port/fd"
Punctuation:  ")"
Text:  " "
Name.Variable:  "maybe-fd"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "duplicate-port"
Text:  " "
Name.Variable:  "port"
Text:  " "
Name.Variable:  "modes"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "dup->port"
Text:  " "
Name.Variable:  "port"
Text:  " "
Name.Variable:  "modes"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "fdes->inport"
Text:  " "
Name.Variable:  "fdes"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "rest-ports"
Text:  " "
Punctuation:  "("
Name.Function:  "fdes->ports"
Text:  " "
Name.Variable:  "fdes"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  ")"
Text:  "<newline>\t   "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "result"
Text:  " "
Punctuation:  "("
Name.Function:  "fdopen"
Text:  " "
Name.Variable:  "fdes"
Text:  " "
Literal.String:  "\"r\""
Punctuation:  ")))"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "set-port-revealed!"
Text:  " "
Name.Variable:  "result"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t     "
Name.Variable:  "result"
Punctuation:  "))"
Text:  "<newline>\t  "
Punctuation:  "(("
Name.Builtin:  "input-port?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  "))"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Function:  "set-port-revealed!"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  ")"
Text:  "<newline>\t\t\t       "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Punctuation:  "("
Name.Function:  "port-revealed"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  "))"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  "))"
Text:  "<newline>\t  "
Punctuation:  "("
Keyword:  "else"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "fdes->outport"
Text:  " "
Name.Variable:  "fdes"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "rest-ports"
Text:  " "
Punctuation:  "("
Name.Function:  "fdes->ports"
Text:  " "
Name.Variable:  "fdes"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  ")"
Text:  "<newline>\t   "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "result"
Text:  " "
Punctuation:  "("
Name.Function:  "fdopen"
Text:  " "
Name.Variable:  "fdes"
Text:  " "
Literal.String:  "\"w\""
Punctuation:  ")))"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "set-port-revealed!"
Text:  " "
Name.Variable:  "result"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t     "
Name.Variable:  "result"
Punctuation:  "))"
Text:  "<newline>\t  "
Punctuation:  "(("
Name.Builtin:  "output-port?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  "))"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Function:  "set-port-revealed!"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  ")"
Text:  "<newline>\t\t\t       "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Punctuation:  "("
Name.Function:  "port-revealed"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  "))"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  "))"
Text:  "<newline>\t  "
Punctuation:  "("
Keyword:  "else"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "rest-ports"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "port->fdes"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "set-port-revealed!"
Text:  " "
Name.Variable:  "port"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Punctuation:  "("
Name.Function:  "port-revealed"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "fileno"
Text:  " "
Name.Variable:  "port"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "setenv"
Text:  " "
Name.Variable:  "name"
Text:  " "
Name.Variable:  "value"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "value"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "putenv"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-append"
Text:  " "
Name.Variable:  "name"
Text:  " "
Literal.String:  "\"=\""
Text:  " "
Name.Variable:  "value"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "putenv"
Text:  " "
Name.Variable:  "name"
Punctuation:  ")))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Load Paths}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";;; Here for backward compatability"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "scheme-file-suffix"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "()"
Text:  " "
Literal.String:  "\".scm\""
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "in-vicinity"
Text:  " "
Name.Variable:  "vicinity"
Text:  " "
Name.Variable:  "file"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "tail"
Text:  " "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "len"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "vicinity"
Punctuation:  ")))"
Text:  "<newline>\t\t"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "zero?"
Text:  " "
Name.Variable:  "len"
Punctuation:  ")"
Text:  "<newline>\t\t    "
Name.Constant:  "#f"
Text:  "<newline>\t\t    "
Punctuation:  "("
Name.Builtin:  "string-ref"
Text:  " "
Name.Variable:  "vicinity"
Text:  " "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Name.Variable:  "len"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))))))"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "string-append"
Text:  " "
Name.Variable:  "vicinity"
Text:  "<newline>\t\t   "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Name.Variable:  "tail"
Punctuation:  ")"
Text:  "<newline>\t\t\t   "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Name.Variable:  "tail"
Text:  " "
Literal.String.Char:  "#\\/"
Punctuation:  "))"
Text:  "<newline>\t\t       "
Literal.String:  "\"\""
Text:  "<newline>\t\t       "
Literal.String:  "\"/\""
Punctuation:  ")"
Text:  "<newline>\t\t   "
Name.Variable:  "file"
Punctuation:  ")))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Help for scm_shell}"
Text:  "<newline>"
Comment.Single:  ";;; The argument-processing code used by Guile-based shells generates"
Text:  "<newline>"
Comment.Single:  ";;; Scheme code based on the argument list.  This page contains help"
Text:  "<newline>"
Comment.Single:  ";;; functions for the code it generates."
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "command-line"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "program-arguments"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";; This is mostly for the internal use of the code generated by"
Text:  "<newline>"
Comment.Single:  ";; scm_compile_shell_switches."
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "load-user-init"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "home"
Text:  " "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Name.Function:  "getenv"
Text:  " "
Literal.String:  "\"HOME\""
Punctuation:  ")"
Text:  "<newline>\t\t   "
Punctuation:  "("
Name.Function:  "false-if-exception"
Text:  " "
Punctuation:  "("
Name.Function:  "passwd:dir"
Text:  " "
Punctuation:  "("
Name.Function:  "getpwuid"
Text:  " "
Punctuation:  "("
Name.Function:  "getuid"
Punctuation:  "))))"
Text:  "<newline>\t\t   "
Literal.String:  "\"/\""
Punctuation:  "))"
Text:  "  "
Comment.Single:  ";; fallback for cygwin etc."
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "init-file"
Text:  " "
Punctuation:  "("
Name.Function:  "in-vicinity"
Text:  " "
Name.Variable:  "home"
Text:  " "
Literal.String:  "\".guile\""
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "file-exists?"
Text:  " "
Name.Variable:  "init-file"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "primitive-load"
Text:  " "
Name.Variable:  "init-file"
Punctuation:  "))))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Loading by paths}"
Text:  "<newline><newline>"
Comment.Single:  ";;; Load a Scheme source file named NAME, searching for it in the"
Text:  "<newline>"
Comment.Single:  ";;; directories listed in %load-path, and applying each of the file"
Text:  "<newline>"
Comment.Single:  ";;; name extensions listed in %load-extensions."
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "load-from-path"
Text:  " "
Name.Variable:  "name"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "start-stack"
Text:  " "
Literal.String.Symbol:  "'load-stack"
Text:  "<newline>\t       "
Punctuation:  "("
Name.Function:  "primitive-load-path"
Text:  " "
Name.Variable:  "name"
Punctuation:  ")))"
Text:  "<newline><newline><newline>\f<newline>"
Comment.Single:  ";;; {Transcendental Functions}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; Derived from \"Transcen.scm\", Complex trancendental functions for SCM."
Text:  "<newline>"
Comment.Single:  ";;; Written by Jerry D. Hedden, (C) FSF."
Text:  "<newline>"
Comment.Single:  ";;; See the file `COPYING' for terms applying to this program."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Builtin:  "exp"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$exp"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "make-polar"
Text:  " "
Punctuation:  "("
Name.Function:  "$exp"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "imag-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Builtin:  "log"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">="
Text:  " "
Name.Variable:  "z"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "$log"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "make-rectangular"
Text:  " "
Punctuation:  "("
Name.Function:  "$log"
Text:  " "
Punctuation:  "("
Name.Builtin:  "magnitude"
Text:  " "
Name.Variable:  "z"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "angle"
Text:  " "
Name.Variable:  "z"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Builtin:  "sqrt"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "negative?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "make-rectangular"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "("
Name.Function:  "$sqrt"
Text:  " "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "$sqrt"
Text:  " "
Name.Variable:  "z"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "make-polar"
Text:  " "
Punctuation:  "("
Name.Function:  "$sqrt"
Text:  " "
Punctuation:  "("
Name.Builtin:  "magnitude"
Text:  " "
Name.Variable:  "z"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Punctuation:  "("
Name.Builtin:  "angle"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "expt"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "integer-expt"
Text:  " "
Name.Variable:  "integer-expt"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "z1"
Text:  " "
Name.Variable:  "z2"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "cond"
Text:  " "
Punctuation:  "(("
Name.Builtin:  "integer?"
Text:  " "
Name.Variable:  "z2"
Punctuation:  ")"
Text:  "<newline>             "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "negative?"
Text:  " "
Name.Variable:  "z2"
Punctuation:  ")"
Text:  "<newline>\t\t "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  "("
Name.Function:  "integer-expt"
Text:  " "
Name.Variable:  "z1"
Text:  " "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Name.Variable:  "z2"
Punctuation:  ")))"
Text:  "<newline>\t\t "
Punctuation:  "("
Name.Function:  "integer-expt"
Text:  " "
Name.Variable:  "z1"
Text:  " "
Name.Variable:  "z2"
Punctuation:  ")))"
Text:  "<newline>\t    "
Punctuation:  "(("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z2"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z1"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">="
Text:  " "
Name.Variable:  "z1"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  "))"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "$expt"
Text:  " "
Name.Variable:  "z1"
Text:  " "
Name.Variable:  "z2"
Punctuation:  "))"
Text:  "<newline>\t    "
Punctuation:  "("
Keyword:  "else"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Builtin:  "exp"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Name.Variable:  "z2"
Text:  " "
Punctuation:  "("
Name.Builtin:  "log"
Text:  " "
Name.Variable:  "z1"
Punctuation:  "))))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "sinh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$sinh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Function:  "y"
Text:  " "
Punctuation:  "("
Name.Builtin:  "imag-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Builtin:  "make-rectangular"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Punctuation:  "("
Name.Function:  "$sinh"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$cos"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>\t\t\t  "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Punctuation:  "("
Name.Function:  "$cosh"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$sin"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))))))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "cosh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$cosh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Function:  "y"
Text:  " "
Punctuation:  "("
Name.Builtin:  "imag-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Builtin:  "make-rectangular"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Punctuation:  "("
Name.Function:  "$cosh"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$cos"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>\t\t\t  "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Punctuation:  "("
Name.Function:  "$sinh"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$sin"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))))))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "tanh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$tanh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "y"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "("
Name.Builtin:  "imag-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "w"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Punctuation:  "("
Name.Function:  "$cosh"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$cos"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Builtin:  "make-rectangular"
Text:  " "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Punctuation:  "("
Name.Function:  "$sinh"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Name.Variable:  "w"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Punctuation:  "("
Name.Function:  "$sin"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Name.Variable:  "w"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "asinh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$asinh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "log"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Name.Variable:  "z"
Text:  " "
Punctuation:  "("
Name.Builtin:  "sqrt"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Name.Variable:  "z"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "acosh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">="
Text:  " "
Name.Variable:  "z"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "$acosh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "log"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Name.Variable:  "z"
Text:  " "
Punctuation:  "("
Name.Builtin:  "sqrt"
Text:  " "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Name.Variable:  "z"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "atanh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">"
Text:  " "
Name.Variable:  "z"
Text:  " "
Literal.Number.Integer:  "-1"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<"
Text:  " "
Name.Variable:  "z"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "$atanh"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Punctuation:  "("
Name.Builtin:  "log"
Text:  " "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Builtin:  "sin"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$sin"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Function:  "y"
Text:  " "
Punctuation:  "("
Name.Builtin:  "imag-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Builtin:  "make-rectangular"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Punctuation:  "("
Name.Function:  "$sin"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$cosh"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>\t\t\t  "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Punctuation:  "("
Name.Function:  "$cos"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$sinh"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))))))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cos"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$cos"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Function:  "y"
Text:  " "
Punctuation:  "("
Name.Builtin:  "imag-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Builtin:  "make-rectangular"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Punctuation:  "("
Name.Function:  "$cos"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$cosh"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))"
Text:  "<newline>\t\t\t  "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Punctuation:  "("
Name.Function:  "$sin"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$sinh"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")))))))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Builtin:  "tan"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$tan"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "x"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "y"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "("
Name.Builtin:  "imag-part"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "w"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Punctuation:  "("
Name.Function:  "$cos"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$cosh"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Builtin:  "make-rectangular"
Text:  " "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Punctuation:  "("
Name.Function:  "$sin"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  " "
Name.Variable:  "w"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Punctuation:  "("
Name.Function:  "$sinh"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  " "
Name.Variable:  "w"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Builtin:  "asin"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">="
Text:  " "
Name.Variable:  "z"
Text:  " "
Literal.Number.Integer:  "-1"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "z"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "$asin"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Name.Variable:  "-i"
Text:  " "
Punctuation:  "("
Name.Function:  "asinh"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Name.Variable:  "+i"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Builtin:  "acos"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">="
Text:  " "
Name.Variable:  "z"
Text:  " "
Literal.Number.Integer:  "-1"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<="
Text:  " "
Name.Variable:  "z"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "$acos"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Punctuation:  "("
Name.Builtin:  "angle"
Text:  " "
Literal.Number.Integer:  "-1"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Name.Variable:  "+i"
Text:  " "
Punctuation:  "("
Name.Function:  "asinh"
Text:  " "
Punctuation:  "("
Name.Builtin:  "*"
Text:  " "
Name.Variable:  "+i"
Text:  " "
Name.Variable:  "z"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Builtin:  "atan"
Text:  " "
Name.Variable:  "z"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "y"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "real?"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "$atan"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Punctuation:  "("
Name.Builtin:  "log"
Text:  " "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Name.Variable:  "+i"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Name.Variable:  "+i"
Text:  " "
Name.Variable:  "z"
Punctuation:  ")))"
Text:  " "
Name.Variable:  "+2i"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "$atan2"
Text:  " "
Name.Variable:  "z"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "y"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "log10"
Text:  " "
Name.Variable:  "arg"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "/"
Text:  " "
Punctuation:  "("
Name.Builtin:  "log"
Text:  " "
Name.Variable:  "arg"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "log"
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ")))"
Text:  "<newline><newline>\f<newline><newline>"
Comment.Single:  ";;; {Reader Extensions}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";;; Reader code for various \"#c\" forms."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Function:  "read-hash-extend"
Text:  " "
Literal.String.Char:  "#\\'"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "c"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Punctuation:  "("
Name.Builtin:  "read"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "read-eval?"
Text:  " "
Punctuation:  "("
Name.Function:  "make-fluid"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Name.Function:  "fluid-set!"
Text:  " "
Name.Variable:  "read-eval?"
Text:  " "
Name.Constant:  "#f"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "("
Name.Function:  "read-hash-extend"
Text:  " "
Literal.String.Char:  "#\\."
Text:  "<newline>                  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "c"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  "<newline>                    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Function:  "fluid-ref"
Text:  " "
Name.Variable:  "read-eval?"
Punctuation:  ")"
Text:  "<newline>                        "
Punctuation:  "("
Name.Builtin:  "eval"
Text:  " "
Punctuation:  "("
Name.Builtin:  "read"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "interaction-environment"
Punctuation:  "))"
Text:  "<newline>                        "
Punctuation:  "("
Name.Function:  "error"
Text:  "<newline>                         "
Literal.String:  "\"#. read expansion found and read-eval? is #f.\""
Punctuation:  "))))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Command Line Options}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "get-option"
Text:  " "
Name.Variable:  "argv"
Text:  " "
Name.Variable:  "kw-opts"
Text:  " "
Name.Variable:  "kw-args"
Text:  " "
Name.Variable:  "return"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "cond"
Text:  "<newline>   "
Punctuation:  "(("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "return"
Text:  " "
Name.Constant:  "#f"
Text:  " "
Name.Constant:  "#f"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))"
Text:  "<newline><newline>   "
Punctuation:  "(("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Literal.String.Char:  "#\\-"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-ref"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "return"
Text:  " "
Literal.String.Symbol:  "'normal-arg"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")))"
Text:  "<newline><newline>   "
Punctuation:  "(("
Name.Builtin:  "eq?"
Text:  " "
Literal.String.Char:  "#\\-"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-ref"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "kw-arg-pos"
Text:  " "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Name.Function:  "string-index"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  " "
Literal.String.Char:  "#\\="
Punctuation:  ")"
Text:  "<newline>\t\t\t   "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))))"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Function:  "kw"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol->keyword"
Text:  " "
Punctuation:  "("
Name.Builtin:  "substring"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Name.Variable:  "kw-arg-pos"
Punctuation:  ")))"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Function:  "kw-opt?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "member"
Text:  " "
Name.Variable:  "kw"
Text:  " "
Name.Variable:  "kw-opts"
Punctuation:  "))"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Function:  "kw-arg?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "member"
Text:  " "
Name.Variable:  "kw"
Text:  " "
Name.Variable:  "kw-args"
Punctuation:  "))"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Function:  "arg"
Text:  " "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Name.Variable:  "kw-arg-pos"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))))"
Text:  "<newline>\t\t\t "
Punctuation:  "("
Name.Builtin:  "substring"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t    "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Name.Variable:  "kw-arg-pos"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t    "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))))"
Text:  "<newline>\t\t    "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "kw-arg?"
Text:  "<newline>\t\t\t "
Punctuation:  "("
Keyword:  "begin"
Text:  " "
Punctuation:  "("
Keyword:  "set!"
Text:  " "
Name.Variable:  "argv"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))))))"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Name.Variable:  "kw-opt?"
Text:  " "
Name.Variable:  "kw-arg?"
Punctuation:  ")"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "return"
Text:  " "
Name.Variable:  "kw"
Text:  " "
Name.Variable:  "arg"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "return"
Text:  " "
Literal.String.Symbol:  "'usage-error"
Text:  " "
Name.Variable:  "kw"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")))))"
Text:  "<newline><newline>   "
Punctuation:  "("
Keyword:  "else"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "char"
Text:  " "
Punctuation:  "("
Name.Builtin:  "substring"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  "))"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Function:  "kw"
Text:  " "
Punctuation:  "("
Name.Function:  "symbol->keyword"
Text:  " "
Name.Variable:  "char"
Punctuation:  ")))"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "cond"
Text:  "<newline><newline>       "
Punctuation:  "(("
Name.Builtin:  "member"
Text:  " "
Name.Variable:  "kw"
Text:  " "
Name.Variable:  "kw-opts"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "rest-car"
Text:  " "
Punctuation:  "("
Name.Builtin:  "substring"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))))"
Text:  "<newline>\t       "
Punctuation:  "("
Name.Function:  "new-argv"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "rest-car"
Punctuation:  "))"
Text:  "<newline>\t\t\t     "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  "<newline>\t\t\t     "
Punctuation:  "("
Name.Builtin:  "cons"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-append"
Text:  " "
Literal.String:  "\"-\""
Text:  " "
Name.Variable:  "rest-car"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")))))"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "return"
Text:  " "
Name.Variable:  "kw"
Text:  " "
Name.Constant:  "#f"
Text:  " "
Name.Variable:  "new-argv"
Punctuation:  ")))"
Text:  "<newline><newline>       "
Punctuation:  "(("
Name.Builtin:  "member"
Text:  " "
Name.Variable:  "kw"
Text:  " "
Name.Variable:  "kw-args"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "rest-car"
Text:  " "
Punctuation:  "("
Name.Builtin:  "substring"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))))"
Text:  "<newline>\t       "
Punctuation:  "("
Name.Function:  "arg"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "rest-car"
Punctuation:  "))"
Text:  "<newline>\t\t\t"
Punctuation:  "("
Name.Builtin:  "cadr"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Name.Variable:  "rest-car"
Punctuation:  "))"
Text:  "<newline>\t       "
Punctuation:  "("
Name.Function:  "new-argv"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "rest-car"
Punctuation:  "))"
Text:  "<newline>\t\t\t     "
Punctuation:  "("
Name.Builtin:  "cddr"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  "<newline>\t\t\t     "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))))"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "return"
Text:  " "
Name.Variable:  "kw"
Text:  " "
Name.Variable:  "arg"
Text:  " "
Name.Variable:  "new-argv"
Punctuation:  ")))"
Text:  "<newline><newline>       "
Punctuation:  "("
Keyword:  "else"
Text:  " "
Punctuation:  "("
Name.Function:  "return"
Text:  " "
Literal.String.Symbol:  "'usage-error"
Text:  " "
Name.Variable:  "kw"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "for-next-option"
Text:  " "
Name.Variable:  "proc"
Text:  " "
Name.Variable:  "argv"
Text:  " "
Name.Variable:  "kw-opts"
Text:  " "
Name.Variable:  "kw-args"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "argv"
Text:  " "
Name.Variable:  "argv"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "get-option"
Text:  " "
Name.Variable:  "argv"
Text:  " "
Name.Variable:  "kw-opts"
Text:  " "
Name.Variable:  "kw-args"
Text:  "<newline>\t\t"
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "opt"
Text:  " "
Name.Variable:  "opt-arg"
Text:  " "
Name.Variable:  "argv"
Punctuation:  ")"
Text:  "<newline>\t\t  "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "opt"
Text:  " "
Punctuation:  "("
Name.Function:  "proc"
Text:  " "
Name.Variable:  "opt"
Text:  " "
Name.Variable:  "opt-arg"
Text:  " "
Name.Variable:  "argv"
Text:  " "
Name.Variable:  "loop"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "display-usage-report"
Text:  " "
Name.Variable:  "kw-desc"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "for-each"
Text:  "<newline>   "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "kw"
Punctuation:  ")"
Text:  "<newline>     "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "kw"
Punctuation:  ")"
Text:  " "
Name.Constant:  "#t"
Punctuation:  ")"
Text:  "<newline>\t "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "kw"
Punctuation:  ")"
Text:  " "
Literal.String.Symbol:  "'else"
Punctuation:  ")"
Text:  "<newline>\t "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "opt-desc"
Text:  " "
Name.Variable:  "kw"
Punctuation:  ")"
Text:  "<newline>\t\t"
Punctuation:  "("
Name.Function:  "help"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cadr"
Text:  " "
Name.Variable:  "opt-desc"
Punctuation:  "))"
Text:  "<newline>\t\t"
Punctuation:  "("
Name.Function:  "opts"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "opt-desc"
Punctuation:  "))"
Text:  "<newline>\t\t"
Punctuation:  "("
Name.Function:  "opts-proper"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "opts"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "opts"
Punctuation:  ")"
Text:  " "
Name.Variable:  "opts"
Punctuation:  "))"
Text:  "<newline>\t\t"
Punctuation:  "("
Name.Function:  "arg-name"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "opts"
Punctuation:  "))"
Text:  "<newline>\t\t\t      "
Punctuation:  "("
Name.Builtin:  "string-append"
Text:  " "
Literal.String:  "\"<\""
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "opts"
Punctuation:  ")"
Text:  " "
Literal.String:  "\">\""
Punctuation:  ")"
Text:  "<newline>\t\t\t      "
Literal.String:  "\"\""
Punctuation:  "))"
Text:  "<newline>\t\t"
Punctuation:  "("
Name.Function:  "left-part"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-append"
Text:  "<newline>\t\t\t    "
Punctuation:  "("
Name.Function:  "with-output-to-string"
Text:  "<newline>\t\t\t      "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "()"
Text:  "<newline>\t\t\t\t"
Punctuation:  "("
Name.Builtin:  "map"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Punctuation:  "("
Name.Function:  "keyword->symbol"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\" \""
Punctuation:  "))"
Text:  "<newline>\t\t\t\t     "
Name.Variable:  "opts-proper"
Punctuation:  ")))"
Text:  "<newline>\t\t\t    "
Name.Variable:  "arg-name"
Punctuation:  "))"
Text:  "<newline>\t\t"
Punctuation:  "("
Name.Function:  "middle-part"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "<"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "left-part"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "30"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t      "
Punctuation:  "("
Name.Builtin:  "<"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "help"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "40"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t "
Punctuation:  "("
Name.Builtin:  "make-string"
Text:  " "
Punctuation:  "("
Name.Builtin:  "-"
Text:  " "
Literal.Number.Integer:  "30"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "left-part"
Punctuation:  "))"
Text:  " "
Literal.String.Char:  "#\\ "
Punctuation:  ")"
Text:  "<newline>\t\t\t\t "
Literal.String:  "\"<newline>\\t\""
Punctuation:  ")))"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Name.Variable:  "left-part"
Punctuation:  ")"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Name.Variable:  "middle-part"
Punctuation:  ")"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Name.Variable:  "help"
Punctuation:  ")"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Builtin:  "newline"
Punctuation:  "))))"
Text:  "<newline>   "
Name.Variable:  "kw-desc"
Punctuation:  "))"
Text:  "<newline><newline><newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "transform-usage-lambda"
Text:  " "
Name.Variable:  "cases"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "raw-usage"
Text:  " "
Punctuation:  "("
Name.Function:  "delq!"
Text:  " "
Literal.String.Symbol:  "'else"
Text:  " "
Punctuation:  "("
Name.Builtin:  "map"
Text:  " "
Name.Variable:  "car"
Text:  " "
Name.Variable:  "cases"
Punctuation:  ")))"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "usage-sans-specials"
Text:  " "
Punctuation:  "("
Name.Builtin:  "map"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "x"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t    "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "list?"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbol?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Name.Constant:  "#t"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "boolean?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Name.Constant:  "#t"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Name.Variable:  "x"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t  "
Name.Variable:  "raw-usage"
Punctuation:  "))"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "usage-desc"
Text:  " "
Punctuation:  "("
Name.Function:  "delq!"
Text:  " "
Name.Constant:  "#t"
Text:  " "
Name.Variable:  "usage-sans-specials"
Punctuation:  "))"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "kw-desc"
Text:  " "
Punctuation:  "("
Name.Builtin:  "map"
Text:  " "
Name.Variable:  "car"
Text:  " "
Name.Variable:  "usage-desc"
Punctuation:  "))"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "kw-opts"
Text:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "append"
Text:  " "
Punctuation:  "("
Name.Builtin:  "map"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")))"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Name.Variable:  "kw-desc"
Punctuation:  ")))"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "kw-args"
Text:  " "
Punctuation:  "("
Name.Builtin:  "apply"
Text:  " "
Name.Variable:  "append"
Text:  " "
Punctuation:  "("
Name.Builtin:  "map"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "x"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "x"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "x"
Punctuation:  ")))"
Text:  " "
Name.Variable:  "kw-desc"
Punctuation:  ")))"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "transmogrified-cases"
Text:  " "
Punctuation:  "("
Name.Builtin:  "map"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Keyword:  "case"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t      "
Punctuation:  "("
Name.Builtin:  "cons"
Text:  " "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "opts"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "case"
Punctuation:  ")))"
Text:  "<newline>\t\t\t\t\t      "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Name.Builtin:  "boolean?"
Text:  " "
Name.Variable:  "opts"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "eq?"
Text:  " "
Literal.String.Symbol:  "'else"
Text:  " "
Name.Variable:  "opts"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t\t\t  "
Name.Variable:  "opts"
Text:  "<newline>\t\t\t\t\t\t  "
Punctuation:  "("
Keyword:  "cond"
Text:  "<newline>\t\t\t\t\t\t   "
Punctuation:  "(("
Name.Builtin:  "symbol?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "opts"
Punctuation:  "))"
Text:  "  "
Name.Variable:  "opts"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t\t   "
Punctuation:  "(("
Name.Builtin:  "boolean?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "opts"
Punctuation:  "))"
Text:  " "
Name.Variable:  "opts"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t\t   "
Punctuation:  "(("
Name.Builtin:  "string?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "caar"
Text:  " "
Name.Variable:  "opts"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdar"
Text:  " "
Name.Variable:  "opts"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t\t\t   "
Punctuation:  "("
Keyword:  "else"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "opts"
Punctuation:  ")))))"
Text:  "<newline>\t\t\t\t\t    "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "case"
Punctuation:  ")))"
Text:  "<newline>\t\t\t\t    "
Name.Variable:  "cases"
Punctuation:  ")))"
Text:  "<newline>    "
Operator:  "`"
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "%display-usage"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "()"
Text:  " "
Punctuation:  "("
Name.Function:  "display-usage-report"
Text:  " "
Literal.String.Symbol:  "',usage-desc"
Punctuation:  "))))"
Text:  "<newline>       "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "%argv"
Punctuation:  ")"
Text:  "<newline>\t "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "%next-arg"
Text:  " "
Punctuation:  "(("
Name.Function:  "%argv"
Text:  " "
Name.Variable:  "%argv"
Punctuation:  "))"
Text:  "<newline>\t   "
Punctuation:  "("
Name.Function:  "get-option"
Text:  " "
Name.Variable:  "%argv"
Text:  "<newline>\t\t       "
Literal.String.Symbol:  "',kw-opts"
Text:  "<newline>\t\t       "
Literal.String.Symbol:  "',kw-args"
Text:  "<newline>\t\t       "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "%opt"
Text:  " "
Name.Variable:  "%arg"
Text:  " "
Name.Variable:  "%new-argv"
Punctuation:  ")"
Text:  "<newline>\t\t\t "
Punctuation:  "("
Keyword:  "case"
Text:  " "
Name.Variable:  "%opt"
Text:  "<newline>\t\t\t   "
Operator:  ",@"
Text:  " "
Name.Variable:  "transmogrified-cases"
Punctuation:  "))))))))"
Text:  "<newline><newline><newline>\f<newline><newline>"
Comment.Single:  ";;; {Low Level Modules}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; These are the low level data structures for modules."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; !!! warning: The interface to lazy binder procedures is going"
Text:  "<newline>"
Comment.Single:  ";;; to be changed in an incompatible way to permit all the basic"
Text:  "<newline>"
Comment.Single:  ";;; module ops to be virtualized."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; (make-module size use-list lazy-binding-proc) => module"
Text:  "<newline>"
Comment.Single:  ";;; module-{obarray,uses,binder}[|-set!]"
Text:  "<newline>"
Comment.Single:  ";;; (module? obj) => [#t|#f]"
Text:  "<newline>"
Comment.Single:  ";;; (module-locally-bound? module symbol) => [#t|#f]"
Text:  "<newline>"
Comment.Single:  ";;; (module-bound? module symbol) => [#t|#f]"
Text:  "<newline>"
Comment.Single:  ";;; (module-symbol-locally-interned? module symbol) => [#t|#f]"
Text:  "<newline>"
Comment.Single:  ";;; (module-symbol-interned? module symbol) => [#t|#f]"
Text:  "<newline>"
Comment.Single:  ";;; (module-local-variable module symbol) => [#<variable ...> | #f]"
Text:  "<newline>"
Comment.Single:  ";;; (module-variable module symbol) => [#<variable ...> | #f]"
Text:  "<newline>"
Comment.Single:  ";;; (module-symbol-binding module symbol opt-value)"
Text:  "<newline>"
Comment.Single:  ";;;\t\t=> [ <obj> | opt-value | an error occurs ]"
Text:  "<newline>"
Comment.Single:  ";;; (module-make-local-var! module symbol) => #<variable...>"
Text:  "<newline>"
Comment.Single:  ";;; (module-add! module symbol var) => unspecified"
Text:  "<newline>"
Comment.Single:  ";;; (module-remove! module symbol) =>  unspecified"
Text:  "<newline>"
Comment.Single:  ";;; (module-for-each proc module) => unspecified"
Text:  "<newline>"
Comment.Single:  ";;; (make-scm-module) => module ; a lazy copy of the symhash module"
Text:  "<newline>"
Comment.Single:  ";;; (set-current-module module) => unspecified"
Text:  "<newline>"
Comment.Single:  ";;; (current-module) => #<module...>"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Printing Modules}"
Text:  "<newline>"
Comment.Single:  ";; This is how modules are printed.  You can re-define it."
Text:  "<newline>"
Comment.Single:  ";; (Redefining is actually more complicated than simply redefining"
Text:  "<newline>"
Comment.Single:  ";; %print-module because that would only change the binding and not"
Text:  "<newline>"
Comment.Single:  ";; the value stored in the vtable that determines how record are"
Text:  "<newline>"
Comment.Single:  ";; printed. Sigh.)"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "%print-module"
Text:  " "
Name.Variable:  "mod"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  "  "
Comment.Single:  "; unused args: depth length style table)"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\"#<\""
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Name.Function:  "module-kind"
Text:  " "
Name.Variable:  "mod"
Punctuation:  ")"
Text:  " "
Literal.String:  "\"module\""
Punctuation:  ")"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "name"
Text:  " "
Punctuation:  "("
Name.Function:  "module-name"
Text:  " "
Name.Variable:  "mod"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "name"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "begin"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\" \""
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Name.Variable:  "name"
Text:  " "
Name.Variable:  "port"
Punctuation:  "))))"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\" \""
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Punctuation:  "("
Name.Builtin:  "number->string"
Text:  " "
Punctuation:  "("
Name.Function:  "object-address"
Text:  " "
Name.Variable:  "mod"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "16"
Punctuation:  ")"
Text:  " "
Name.Variable:  "port"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "display"
Text:  " "
Literal.String:  "\">\""
Text:  " "
Name.Variable:  "port"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";; module-type"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; A module is characterized by an obarray in which local symbols"
Text:  "<newline>"
Comment.Single:  ";; are interned, a list of modules, \"uses\", from which non-local"
Text:  "<newline>"
Comment.Single:  ";; bindings can be inherited, and an optional lazy-binder which"
Text:  "<newline>"
Comment.Single:  ";; is a (CLOSURE module symbol) which, as a last resort, can provide"
Text:  "<newline>"
Comment.Single:  ";; bindings that would otherwise not be found locally in the module."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; NOTE: If you change here, you also need to change libguile/modules.h."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-type"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "make-record-type"
Text:  " "
Literal.String.Symbol:  "'module"
Text:  "<newline>\t\t    "
Operator:  "'"
Punctuation:  "("
Name.Function:  "obarray"
Text:  " "
Name.Variable:  "uses"
Text:  " "
Name.Variable:  "binder"
Text:  " "
Name.Variable:  "eval-closure"
Text:  " "
Name.Variable:  "transformer"
Text:  " "
Name.Variable:  "name"
Text:  " "
Name.Variable:  "kind"
Text:  "<newline>\t\t\t      "
Name.Variable:  "observers"
Text:  " "
Name.Variable:  "weak-observers"
Text:  " "
Name.Variable:  "observer-id"
Punctuation:  ")"
Text:  "<newline>\t\t    "
Name.Variable:  "%print-module"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";; make-module &opt size uses binder"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Create a new module, perhaps with a particular size of obarray,"
Text:  "<newline>"
Comment.Single:  ";; initial uses list, or binding procedure."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "make-module"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Name.Variable:  "args"
Text:  "<newline><newline>      "
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "parse-arg"
Text:  " "
Name.Variable:  "index"
Text:  " "
Name.Variable:  "default"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  " "
Name.Variable:  "index"
Punctuation:  ")"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Builtin:  "list-ref"
Text:  " "
Name.Variable:  "args"
Text:  " "
Name.Variable:  "index"
Punctuation:  ")"
Text:  "<newline>\t    "
Name.Variable:  "default"
Punctuation:  "))"
Text:  "<newline><newline>      "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  ">"
Text:  " "
Punctuation:  "("
Name.Builtin:  "length"
Text:  " "
Name.Variable:  "args"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ")"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String:  "\"Too many args to make-module.\""
Text:  " "
Name.Variable:  "args"
Punctuation:  "))"
Text:  "<newline><newline>      "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "size"
Text:  " "
Punctuation:  "("
Name.Function:  "parse-arg"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Literal.Number.Integer:  "1021"
Punctuation:  "))"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Function:  "uses"
Text:  " "
Punctuation:  "("
Name.Function:  "parse-arg"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "'"
Punctuation:  "()))"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Function:  "binder"
Text:  " "
Punctuation:  "("
Name.Function:  "parse-arg"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Name.Constant:  "#f"
Punctuation:  ")))"
Text:  "<newline><newline>\t"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integer?"
Text:  " "
Name.Variable:  "size"
Punctuation:  "))"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String:  "\"Illegal size to make-module.\""
Text:  " "
Name.Variable:  "size"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "list?"
Text:  " "
Name.Variable:  "uses"
Punctuation:  ")"
Text:  "<newline>\t\t      "
Punctuation:  "("
Name.Function:  "and-map"
Text:  " "
Name.Variable:  "module?"
Text:  " "
Name.Variable:  "uses"
Punctuation:  ")))"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String:  "\"Incorrect use list.\""
Text:  " "
Name.Variable:  "uses"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "binder"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "procedure?"
Text:  " "
Name.Variable:  "binder"
Punctuation:  ")))"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Function:  "error"
Text:  "<newline>\t     "
Literal.String:  "\"Lazy-binder expected to be a procedure or #f.\""
Text:  " "
Name.Variable:  "binder"
Punctuation:  "))"
Text:  "<newline><newline>\t"
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "module"
Text:  " "
Punctuation:  "("
Name.Function:  "module-constructor"
Text:  " "
Punctuation:  "("
Name.Builtin:  "make-vector"
Text:  " "
Name.Variable:  "size"
Text:  " "
Operator:  "'"
Punctuation:  "())"
Text:  "<newline>\t\t\t\t\t  "
Name.Variable:  "uses"
Text:  " "
Name.Variable:  "binder"
Text:  " "
Name.Constant:  "#f"
Text:  " "
Name.Constant:  "#f"
Text:  " "
Name.Constant:  "#f"
Text:  " "
Name.Constant:  "#f"
Text:  "<newline>\t\t\t\t\t  "
Operator:  "'"
Punctuation:  "()"
Text:  "<newline>\t\t\t\t\t  "
Punctuation:  "("
Name.Function:  "make-weak-value-hash-table"
Text:  " "
Literal.Number.Integer:  "31"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t  "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline><newline>\t  "
Comment.Single:  ";; We can't pass this as an argument to module-constructor,"
Text:  "<newline>\t  "
Comment.Single:  ";; because we need it to close over a pointer to the module"
Text:  "<newline>\t  "
Comment.Single:  ";; itself."
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "set-module-eval-closure!"
Text:  " "
Name.Variable:  "module"
Text:  " "
Punctuation:  "("
Name.Function:  "standard-eval-closure"
Text:  " "
Name.Variable:  "module"
Punctuation:  "))"
Text:  "<newline><newline>\t  "
Name.Variable:  "module"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-constructor"
Text:  " "
Punctuation:  "("
Name.Function:  "record-constructor"
Text:  " "
Name.Variable:  "module-type"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-obarray"
Text:  "  "
Punctuation:  "("
Name.Function:  "record-accessor"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'obarray"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "set-module-obarray!"
Text:  " "
Punctuation:  "("
Name.Function:  "record-modifier"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'obarray"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-uses"
Text:  "  "
Punctuation:  "("
Name.Function:  "record-accessor"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'uses"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "set-module-uses!"
Text:  " "
Punctuation:  "("
Name.Function:  "record-modifier"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'uses"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-binder"
Text:  " "
Punctuation:  "("
Name.Function:  "record-accessor"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'binder"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "set-module-binder!"
Text:  " "
Punctuation:  "("
Name.Function:  "record-modifier"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'binder"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";; NOTE: This binding is used in libguile/modules.c."
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-eval-closure"
Text:  " "
Punctuation:  "("
Name.Function:  "record-accessor"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'eval-closure"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-transformer"
Text:  " "
Punctuation:  "("
Name.Function:  "record-accessor"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'transformer"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "set-module-transformer!"
Text:  " "
Punctuation:  "("
Name.Function:  "record-modifier"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'transformer"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-name"
Text:  " "
Punctuation:  "("
Name.Function:  "record-accessor"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'name"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "set-module-name!"
Text:  " "
Punctuation:  "("
Name.Function:  "record-modifier"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'name"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-kind"
Text:  " "
Punctuation:  "("
Name.Function:  "record-accessor"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'kind"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "set-module-kind!"
Text:  " "
Punctuation:  "("
Name.Function:  "record-modifier"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'kind"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-observers"
Text:  " "
Punctuation:  "("
Name.Function:  "record-accessor"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'observers"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "set-module-observers!"
Text:  " "
Punctuation:  "("
Name.Function:  "record-modifier"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'observers"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-weak-observers"
Text:  " "
Punctuation:  "("
Name.Function:  "record-accessor"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'weak-observers"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module-observer-id"
Text:  " "
Punctuation:  "("
Name.Function:  "record-accessor"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'observer-id"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "set-module-observer-id!"
Text:  " "
Punctuation:  "("
Name.Function:  "record-modifier"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'observer-id"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "module?"
Text:  " "
Punctuation:  "("
Name.Function:  "record-predicate"
Text:  " "
Name.Variable:  "module-type"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "set-module-eval-closure!"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "setter"
Text:  " "
Punctuation:  "("
Name.Function:  "record-modifier"
Text:  " "
Name.Variable:  "module-type"
Text:  " "
Literal.String.Symbol:  "'eval-closure"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "module"
Text:  " "
Name.Variable:  "closure"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "setter"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "closure"
Punctuation:  ")"
Text:  "<newline>      "
Comment.Single:  ";; Make it possible to lookup the module from the environment."
Text:  "<newline>      "
Comment.Single:  ";; This implementation is correct since an eval closure can belong"
Text:  "<newline>      "
Comment.Single:  ";; to maximally one module."
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "set-procedure-property!"
Text:  " "
Name.Variable:  "closure"
Text:  " "
Literal.String.Symbol:  "'module"
Text:  " "
Name.Variable:  "module"
Punctuation:  "))))"
Text:  "<newline><newline>"
Punctuation:  "("
Name.Function:  "begin-deprecated"
Text:  "<newline> "
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "eval-in-module"
Text:  " "
Name.Variable:  "exp"
Text:  " "
Name.Variable:  "mod"
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Function:  "issue-deprecation-warning"
Text:  "<newline>    "
Literal.String:  "\"`eval-in-module' is deprecated.  Use `eval' instead.\""
Punctuation:  ")"
Text:  "<newline>   "
Punctuation:  "("
Name.Builtin:  "eval"
Text:  " "
Name.Variable:  "exp"
Text:  " "
Name.Variable:  "mod"
Punctuation:  ")))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Observer protocol}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-observe"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "proc"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "set-module-observers!"
Text:  " "
Name.Variable:  "module"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cons"
Text:  " "
Name.Variable:  "proc"
Text:  " "
Punctuation:  "("
Name.Function:  "module-observers"
Text:  " "
Name.Variable:  "module"
Punctuation:  ")))"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "cons"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "proc"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-observe-weak"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "proc"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "id"
Text:  " "
Punctuation:  "("
Name.Function:  "module-observer-id"
Text:  " "
Name.Variable:  "module"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "hash-set!"
Text:  " "
Punctuation:  "("
Name.Function:  "module-weak-observers"
Text:  " "
Name.Variable:  "module"
Punctuation:  ")"
Text:  " "
Name.Variable:  "id"
Text:  " "
Name.Variable:  "proc"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "set-module-observer-id!"
Text:  " "
Name.Variable:  "module"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name.Variable:  "id"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "cons"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "id"
Punctuation:  ")))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-unobserve"
Text:  " "
Name.Variable:  "token"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "module"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "token"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "id"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "token"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "integer?"
Text:  " "
Name.Variable:  "id"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "hash-remove!"
Text:  " "
Punctuation:  "("
Name.Function:  "module-weak-observers"
Text:  " "
Name.Variable:  "module"
Punctuation:  ")"
Text:  " "
Name.Variable:  "id"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "set-module-observers!"
Text:  " "
Name.Variable:  "module"
Text:  " "
Punctuation:  "("
Name.Function:  "delq1!"
Text:  " "
Name.Variable:  "id"
Text:  " "
Punctuation:  "("
Name.Function:  "module-observers"
Text:  " "
Name.Variable:  "module"
Punctuation:  ")))))"
Text:  "<newline>  "
Name.Variable:  "*unspecified*"
Punctuation:  ")"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-modified"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "for-each"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "proc"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "proc"
Text:  " "
Name.Variable:  "m"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Function:  "module-observers"
Text:  " "
Name.Variable:  "m"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "hash-fold"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "id"
Text:  " "
Name.Variable:  "proc"
Text:  " "
Name.Variable:  "res"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "proc"
Text:  " "
Name.Variable:  "m"
Punctuation:  "))"
Text:  " "
Name.Constant:  "#f"
Text:  " "
Punctuation:  "("
Name.Function:  "module-weak-observers"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Module Searching in General}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; We sometimes want to look for properties of a symbol"
Text:  "<newline>"
Comment.Single:  ";;; just within the obarray of one module.  If the property"
Text:  "<newline>"
Comment.Single:  ";;; holds, then it is said to hold ``locally'' as in, ``The symbol"
Text:  "<newline>"
Comment.Single:  ";;; DISPLAY is locally rebound in the module `safe-guile'.''"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; Other times, we want to test for a symbol property in the obarray"
Text:  "<newline>"
Comment.Single:  ";;; of M and, if it is not found there, try each of the modules in the"
Text:  "<newline>"
Comment.Single:  ";;; uses list of M.  This is the normal way of testing for some"
Text:  "<newline>"
Comment.Single:  ";;; property, so we state these properties without qualification as"
Text:  "<newline>"
Comment.Single:  ";;; in: ``The symbol 'fnord is interned in module M because it is"
Text:  "<newline>"
Comment.Single:  ";;; interned locally in module M2 which is a member of the uses list"
Text:  "<newline>"
Comment.Single:  ";;; of M.''"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";; module-search fn m"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; return the first non-#f result of FN applied to M and then to"
Text:  "<newline>"
Comment.Single:  ";; the modules in the uses of m, and so on recursively.  If all applications"
Text:  "<newline>"
Comment.Single:  ";; return #f, then so does this function."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-search"
Text:  " "
Name.Variable:  "fn"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Name.Variable:  "pos"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Builtin:  "pair?"
Text:  " "
Name.Variable:  "pos"
Punctuation:  ")"
Text:  "<newline>\t "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Name.Function:  "module-search"
Text:  " "
Name.Variable:  "fn"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "pos"
Punctuation:  ")"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "pos"
Punctuation:  ")))))"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Name.Function:  "fn"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Function:  "module-uses"
Text:  " "
Name.Variable:  "m"
Punctuation:  "))))"
Text:  "<newline><newline><newline>"
Comment.Single:  ";;; {Is a symbol bound in a module?}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; Symbol S in Module M is bound if S is interned in M and if the binding"
Text:  "<newline>"
Comment.Single:  ";;; of S in M has been set to some well-defined value."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";; module-locally-bound? module symbol"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Is a symbol bound (interned and defined) locally in a given module?"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-locally-bound?"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "var"
Text:  " "
Punctuation:  "("
Name.Function:  "module-local-variable"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "var"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "variable-bound?"
Text:  " "
Name.Variable:  "var"
Punctuation:  "))))"
Text:  "<newline><newline>"
Comment.Single:  ";; module-bound? module symbol"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Is a symbol bound (interned and defined) anywhere in a given module"
Text:  "<newline>"
Comment.Single:  ";; or its uses?"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-bound?"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "module-search"
Text:  " "
Name.Variable:  "module-locally-bound?"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";;; {Is a symbol interned in a module?}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; Symbol S in Module M is interned if S occurs in"
Text:  "<newline>"
Comment.Single:  ";;; of S in M has been set to some well-defined value."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; It is possible to intern a symbol in a module without providing"
Text:  "<newline>"
Comment.Single:  ";;; an initial binding for the corresponding variable.  This is done"
Text:  "<newline>"
Comment.Single:  ";;; with:"
Text:  "<newline>"
Comment.Single:  ";;;       (module-add! module symbol (make-undefined-variable))"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; In that case, the symbol is interned in the module, but not"
Text:  "<newline>"
Comment.Single:  ";;; bound there.  The unbound symbol shadows any binding for that"
Text:  "<newline>"
Comment.Single:  ";;; symbol that might otherwise be inherited from a member of the uses list."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray-get-handle"
Text:  " "
Name.Variable:  "ob"
Text:  " "
Name.Variable:  "key"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "(("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbol?"
Text:  " "
Name.Variable:  "key"
Punctuation:  ")"
Text:  " "
Name.Variable:  "hashq-get-handle"
Text:  " "
Name.Variable:  "hash-get-handle"
Punctuation:  ")"
Text:  " "
Name.Variable:  "ob"
Text:  " "
Name.Variable:  "key"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray-ref"
Text:  " "
Name.Variable:  "ob"
Text:  " "
Name.Variable:  "key"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "(("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbol?"
Text:  " "
Name.Variable:  "key"
Punctuation:  ")"
Text:  " "
Name.Variable:  "hashq-ref"
Text:  " "
Name.Variable:  "hash-ref"
Punctuation:  ")"
Text:  " "
Name.Variable:  "ob"
Text:  " "
Name.Variable:  "key"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray-set!"
Text:  " "
Name.Variable:  "ob"
Text:  " "
Name.Variable:  "key"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "(("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbol?"
Text:  " "
Name.Variable:  "key"
Punctuation:  ")"
Text:  " "
Name.Variable:  "hashq-set!"
Text:  " "
Name.Variable:  "hash-set!"
Punctuation:  ")"
Text:  " "
Name.Variable:  "ob"
Text:  " "
Name.Variable:  "key"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray-remove!"
Text:  " "
Name.Variable:  "ob"
Text:  " "
Name.Variable:  "key"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "(("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "symbol?"
Text:  " "
Name.Variable:  "key"
Punctuation:  ")"
Text:  " "
Name.Variable:  "hashq-remove!"
Text:  " "
Name.Variable:  "hash-remove!"
Punctuation:  ")"
Text:  " "
Name.Variable:  "ob"
Text:  " "
Name.Variable:  "key"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";; module-symbol-locally-interned? module symbol"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; is a symbol interned (not neccessarily defined) locally in a given module"
Text:  "<newline>"
Comment.Single:  ";; or its uses?  Interned symbols shadow inherited bindings even if"
Text:  "<newline>"
Comment.Single:  ";; they are not themselves bound to a defined value."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-symbol-locally-interned?"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray-get-handle"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  " "
Name.Variable:  "v"
Punctuation:  "))))"
Text:  "<newline><newline>"
Comment.Single:  ";; module-symbol-interned? module symbol"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; is a symbol interned (not neccessarily defined) anywhere in a given module"
Text:  "<newline>"
Comment.Single:  ";; or its uses?  Interned symbols shadow inherited bindings even if"
Text:  "<newline>"
Comment.Single:  ";; they are not themselves bound to a defined value."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-symbol-interned?"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "module-search"
Text:  " "
Name.Variable:  "module-symbol-locally-interned?"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  "))"
Text:  "<newline><newline><newline>"
Comment.Single:  ";;; {Mapping modules x symbols --> variables}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";; module-local-variable module symbol"
Text:  "<newline>"
Comment.Single:  ";; return the local variable associated with a MODULE and SYMBOL."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";;; This function is very important. It is the only function that can"
Text:  "<newline>"
Comment.Single:  ";;; return a variable from a module other than the mutators that store"
Text:  "<newline>"
Comment.Single:  ";;; new variables in modules.  Therefore, this function is the location"
Text:  "<newline>"
Comment.Single:  ";;; of the \"lazy binder\" hack."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; If symbol is defined in MODULE, and if the definition binds symbol"
Text:  "<newline>"
Comment.Single:  ";;; to a variable, return that variable object."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; If the symbols is not found at first, but the module has a lazy binder,"
Text:  "<newline>"
Comment.Single:  ";;; then try the binder."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; If the symbol is not found at all, return #f."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-local-variable"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>"
Comment.Single:  ";  (caddr"
Text:  "<newline>"
Comment.Single:  ";   (list m v"
Text:  "<newline>\t "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "b"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray-ref"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")))"
Text:  "<newline>\t   "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Function:  "variable?"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")"
Text:  "<newline>\t       "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Function:  "module-binder"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  "<newline>\t\t    "
Punctuation:  "(("
Name.Function:  "module-binder"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Text:  " "
Name.Constant:  "#f"
Punctuation:  ")))))"
Text:  "<newline>"
Comment.Single:  ";))"
Text:  "<newline><newline>"
Comment.Single:  ";; module-variable module symbol"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; like module-local-variable, except search the uses in the"
Text:  "<newline>"
Comment.Single:  ";; case V is not found in M."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; NOTE: This function is superseded with C code (see modules.c)"
Text:  "<newline>"
Comment.Single:  ";;;      when using the standard eval closure."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-variable"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "module-search"
Text:  " "
Name.Variable:  "module-local-variable"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  "))"
Text:  "<newline><newline><newline>"
Comment.Single:  ";;; {Mapping modules x symbols --> bindings}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; These are similar to the mapping to variables, except that the"
Text:  "<newline>"
Comment.Single:  ";;; variable is dereferenced."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";; module-symbol-binding module symbol opt-value"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; return the binding of a variable specified by name within"
Text:  "<newline>"
Comment.Single:  ";; a given module, signalling an error if the variable is unbound."
Text:  "<newline>"
Comment.Single:  ";; If the OPT-VALUE is passed, then instead of signalling an error,"
Text:  "<newline>"
Comment.Single:  ";; return OPT-VALUE."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-symbol-local-binding"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "opt-val"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "var"
Text:  " "
Punctuation:  "("
Name.Function:  "module-local-variable"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "var"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "variable-ref"
Text:  " "
Name.Variable:  "var"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "opt-val"
Punctuation:  "))"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "opt-val"
Punctuation:  ")"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String:  "\"Locally unbound variable.\""
Text:  " "
Name.Variable:  "v"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Comment.Single:  ";; module-symbol-binding module symbol opt-value"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; return the binding of a variable specified by name within"
Text:  "<newline>"
Comment.Single:  ";; a given module, signalling an error if the variable is unbound."
Text:  "<newline>"
Comment.Single:  ";; If the OPT-VALUE is passed, then instead of signalling an error,"
Text:  "<newline>"
Comment.Single:  ";; return OPT-VALUE."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-symbol-binding"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "opt-val"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "var"
Text:  " "
Punctuation:  "("
Name.Function:  "module-variable"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "var"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "variable-ref"
Text:  " "
Name.Variable:  "var"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "opt-val"
Punctuation:  "))"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "opt-val"
Punctuation:  ")"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String:  "\"Unbound variable.\""
Text:  " "
Name.Variable:  "v"
Punctuation:  ")))))"
Text:  "<newline><newline><newline>\f<newline>"
Comment.Single:  ";;; {Adding Variables to Modules}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline><newline>"
Comment.Single:  ";; module-make-local-var! module symbol"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; ensure a variable for V in the local namespace of M."
Text:  "<newline>"
Comment.Single:  ";; If no variable was already there, then create a new and uninitialzied"
Text:  "<newline>"
Comment.Single:  ";; variable."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-make-local-var!"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "b"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray-ref"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")))"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Function:  "variable?"
Text:  " "
Name.Variable:  "b"
Punctuation:  ")"
Text:  "<newline>\t     "
Punctuation:  "("
Keyword:  "begin"
Text:  "<newline>\t       "
Punctuation:  "("
Name.Function:  "module-modified"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  "<newline>\t       "
Name.Variable:  "b"
Punctuation:  ")))"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Function:  "module-binder"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  "<newline>\t   "
Punctuation:  "(("
Name.Function:  "module-binder"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Text:  " "
Name.Constant:  "#t"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "begin"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "answer"
Text:  " "
Punctuation:  "("
Name.Function:  "make-undefined-variable"
Punctuation:  ")))"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "variable-set-name-hint!"
Text:  " "
Name.Variable:  "answer"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "module-obarray-set!"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  " "
Name.Variable:  "v"
Text:  " "
Name.Variable:  "answer"
Punctuation:  ")"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "module-modified"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "answer"
Punctuation:  "))))"
Text:  "<newline><newline>"
Comment.Single:  ";; module-ensure-local-variable! module symbol"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Ensure that there is a local variable in MODULE for SYMBOL.  If"
Text:  "<newline>"
Comment.Single:  ";; there is no binding for SYMBOL, create a new uninitialized"
Text:  "<newline>"
Comment.Single:  ";; variable.  Return the local variable."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-ensure-local-variable!"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "symbol"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "or"
Text:  " "
Punctuation:  "("
Name.Function:  "module-local-variable"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "symbol"
Punctuation:  ")"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "var"
Text:  " "
Punctuation:  "("
Name.Function:  "make-undefined-variable"
Punctuation:  ")))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "variable-set-name-hint!"
Text:  " "
Name.Variable:  "var"
Text:  " "
Name.Variable:  "symbol"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "module-add!"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "symbol"
Text:  " "
Name.Variable:  "var"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "var"
Punctuation:  ")))"
Text:  "<newline><newline>"
Comment.Single:  ";; module-add! module symbol var"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; ensure a particular variable for V in the local namespace of M."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-add!"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Text:  " "
Name.Variable:  "var"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Function:  "variable?"
Text:  " "
Name.Variable:  "var"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String:  "\"Bad variable to module-add!\""
Text:  " "
Name.Variable:  "var"
Punctuation:  "))"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "module-obarray-set!"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  " "
Name.Variable:  "v"
Text:  " "
Name.Variable:  "var"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "module-modified"
Text:  " "
Name.Variable:  "m"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";; module-remove!"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; make sure that a symbol is undefined in the local namespace of M."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-remove!"
Text:  " "
Name.Variable:  "m"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "module-obarray-remove!"
Text:  "  "
Punctuation:  "("
Name.Function:  "module-obarray"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  " "
Name.Variable:  "v"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "module-modified"
Text:  " "
Name.Variable:  "m"
Punctuation:  "))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-clear!"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Builtin:  "vector-fill!"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray"
Text:  " "
Name.Variable:  "m"
Punctuation:  ")"
Text:  " "
Operator:  "'"
Punctuation:  "())"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "module-modified"
Text:  " "
Name.Variable:  "m"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";; MODULE-FOR-EACH -- exported"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Call PROC on each symbol in MODULE, with arguments of (SYMBOL VARIABLE)."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-for-each"
Text:  " "
Name.Variable:  "proc"
Text:  " "
Name.Variable:  "module"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "obarray"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray"
Text:  " "
Name.Variable:  "module"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "do"
Text:  " "
Punctuation:  "(("
Name.Function:  "index"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Name.Variable:  "index"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  "))"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "end"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-length"
Text:  " "
Name.Variable:  "obarray"
Punctuation:  ")))"
Text:  "<newline>\t"
Punctuation:  "(("
Name.Builtin:  "="
Text:  " "
Name.Variable:  "index"
Text:  " "
Name.Variable:  "end"
Punctuation:  "))"
Text:  "<newline>      "
Punctuation:  "("
Name.Builtin:  "for-each"
Text:  "<newline>       "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "bucket"
Punctuation:  ")"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "proc"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "bucket"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "bucket"
Punctuation:  ")))"
Text:  "<newline>       "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obarray"
Text:  " "
Name.Variable:  "index"
Punctuation:  ")))))"
Text:  "<newline><newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-map"
Text:  " "
Name.Variable:  "proc"
Text:  " "
Name.Variable:  "module"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let*"
Text:  " "
Punctuation:  "(("
Name.Function:  "obarray"
Text:  " "
Punctuation:  "("
Name.Function:  "module-obarray"
Text:  " "
Name.Variable:  "module"
Punctuation:  "))"
Text:  "<newline>\t "
Punctuation:  "("
Name.Function:  "end"
Text:  " "
Punctuation:  "("
Name.Builtin:  "vector-length"
Text:  " "
Name.Variable:  "obarray"
Punctuation:  ")))"
Text:  "<newline><newline>    "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "i"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t       "
Punctuation:  "("
Name.Function:  "answer"
Text:  " "
Operator:  "'"
Punctuation:  "()))"
Text:  "<newline>      "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "="
Text:  " "
Name.Variable:  "i"
Text:  " "
Name.Variable:  "end"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "answer"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Builtin:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Name.Variable:  "i"
Punctuation:  ")"
Text:  "<newline>\t\t"
Punctuation:  "("
Name.Function:  "append!"
Text:  "<newline>\t\t "
Punctuation:  "("
Name.Builtin:  "map"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "("
Name.Function:  "bucket"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Punctuation:  "("
Name.Function:  "proc"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "bucket"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "bucket"
Punctuation:  ")))"
Text:  "<newline>\t\t      "
Punctuation:  "("
Name.Builtin:  "vector-ref"
Text:  " "
Name.Variable:  "obarray"
Text:  " "
Name.Variable:  "i"
Punctuation:  "))"
Text:  "<newline>\t\t "
Name.Variable:  "answer"
Punctuation:  "))))))"
Text:  "<newline>\f<newline><newline>"
Comment.Single:  ";;; {Low Level Bootstrapping}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Comment.Single:  ";; make-root-module"
Text:  "<newline><newline>"
Comment.Single:  ";; A root module uses the pre-modules-obarray as its obarray.  This"
Text:  "<newline>"
Comment.Single:  ";; special obarray accumulates all bindings that have been established"
Text:  "<newline>"
Comment.Single:  ";; before the module system is fully booted."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; (The obarray continues to be used by code that has been closed over"
Text:  "<newline>"
Comment.Single:  ";;  before the module system has been booted.)"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "make-root-module"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "m"
Text:  " "
Punctuation:  "("
Name.Function:  "make-module"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "set-module-obarray!"
Text:  " "
Name.Variable:  "m"
Text:  " "
Punctuation:  "("
Name.Function:  "%get-pre-modules-obarray"
Punctuation:  "))"
Text:  "<newline>    "
Name.Variable:  "m"
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  ";; make-scm-module"
Text:  "<newline><newline>"
Comment.Single:  ";; The root interface is a module that uses the same obarray as the"
Text:  "<newline>"
Comment.Single:  ";; root module.  It does not allow new definitions, tho."
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "make-scm-module"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "m"
Text:  " "
Punctuation:  "("
Name.Function:  "make-module"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "set-module-obarray!"
Text:  " "
Name.Variable:  "m"
Text:  " "
Punctuation:  "("
Name.Function:  "%get-pre-modules-obarray"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Name.Function:  "set-module-eval-closure!"
Text:  " "
Name.Variable:  "m"
Text:  " "
Punctuation:  "("
Name.Function:  "standard-interface-eval-closure"
Text:  " "
Name.Variable:  "m"
Punctuation:  "))"
Text:  "<newline>    "
Name.Variable:  "m"
Punctuation:  "))"
Text:  "<newline><newline><newline>\f<newline>"
Comment.Single:  ";;; {Module-based Loading}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "save-module-excursion"
Text:  " "
Name.Variable:  "thunk"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "inner-module"
Text:  " "
Punctuation:  "("
Name.Function:  "current-module"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "outer-module"
Text:  " "
Name.Constant:  "#f"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Name.Builtin:  "dynamic-wind"
Text:  " "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "()"
Text:  "<newline>\t\t    "
Punctuation:  "("
Keyword:  "set!"
Text:  " "
Name.Variable:  "outer-module"
Text:  " "
Punctuation:  "("
Name.Function:  "current-module"
Punctuation:  "))"
Text:  "<newline>\t\t    "
Punctuation:  "("
Name.Function:  "set-current-module"
Text:  " "
Name.Variable:  "inner-module"
Punctuation:  ")"
Text:  "<newline>\t\t    "
Punctuation:  "("
Keyword:  "set!"
Text:  " "
Name.Variable:  "inner-module"
Text:  " "
Name.Constant:  "#f"
Punctuation:  "))"
Text:  "<newline>\t\t  "
Name.Variable:  "thunk"
Text:  "<newline>\t\t  "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "()"
Text:  "<newline>\t\t    "
Punctuation:  "("
Keyword:  "set!"
Text:  " "
Name.Variable:  "inner-module"
Text:  " "
Punctuation:  "("
Name.Function:  "current-module"
Punctuation:  "))"
Text:  "<newline>\t\t    "
Punctuation:  "("
Name.Function:  "set-current-module"
Text:  " "
Name.Variable:  "outer-module"
Punctuation:  ")"
Text:  "<newline>\t\t    "
Punctuation:  "("
Keyword:  "set!"
Text:  " "
Name.Variable:  "outer-module"
Text:  " "
Name.Constant:  "#f"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Name.Variable:  "basic-load"
Text:  " "
Name.Variable:  "load"
Punctuation:  ")"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "load-module"
Text:  " "
Name.Variable:  "filename"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "save-module-excursion"
Text:  "<newline>   "
Punctuation:  "("
Keyword:  "lambda"
Text:  " "
Punctuation:  "()"
Text:  "<newline>     "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "oldname"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Punctuation:  "("
Name.Function:  "current-load-port"
Punctuation:  ")"
Text:  "<newline>\t\t\t "
Punctuation:  "("
Name.Function:  "port-filename"
Text:  " "
Punctuation:  "("
Name.Function:  "current-load-port"
Punctuation:  ")))))"
Text:  "<newline>       "
Punctuation:  "("
Name.Function:  "basic-load"
Text:  " "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "oldname"
Text:  "<newline>\t\t\t    "
Punctuation:  "("
Name.Builtin:  ">"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-length"
Text:  " "
Name.Variable:  "filename"
Punctuation:  ")"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  "<newline>\t\t\t    "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "char=?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string-ref"
Text:  " "
Name.Variable:  "filename"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Literal.String.Char:  "#\\/"
Punctuation:  "))"
Text:  "<newline>\t\t\t    "
Punctuation:  "("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Builtin:  "string=?"
Text:  " "
Punctuation:  "("
Name.Function:  "dirname"
Text:  " "
Name.Variable:  "oldname"
Punctuation:  ")"
Text:  " "
Literal.String:  "\".\""
Punctuation:  ")))"
Text:  "<newline>\t\t       "
Punctuation:  "("
Name.Builtin:  "string-append"
Text:  " "
Punctuation:  "("
Name.Function:  "dirname"
Text:  " "
Name.Variable:  "oldname"
Punctuation:  ")"
Text:  " "
Literal.String:  "\"/\""
Text:  " "
Name.Variable:  "filename"
Punctuation:  ")"
Text:  "<newline>\t\t       "
Name.Variable:  "filename"
Punctuation:  "))))))"
Text:  "<newline><newline><newline>\f<newline>"
Comment.Single:  ";;; {MODULE-REF -- exported}"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Returns the value of a variable called NAME in MODULE or any of its"
Text:  "<newline>"
Comment.Single:  ";; used modules.  If there is no such variable, then if the optional third"
Text:  "<newline>"
Comment.Single:  ";; argument DEFAULT is present, it is returned; otherwise an error is signaled."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-ref"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "name"
Text:  " "
Operator:  "."
Text:  " "
Name.Variable:  "rest"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "variable"
Text:  " "
Punctuation:  "("
Name.Function:  "module-variable"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "name"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "variable"
Text:  " "
Punctuation:  "("
Name.Function:  "variable-bound?"
Text:  " "
Name.Variable:  "variable"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "variable-ref"
Text:  " "
Name.Variable:  "variable"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "rest"
Punctuation:  ")"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String:  "\"No variable named\""
Text:  " "
Name.Variable:  "name"
Text:  " "
Literal.String.Symbol:  "'in"
Text:  " "
Name.Variable:  "module"
Punctuation:  ")"
Text:  "<newline>\t    "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "rest"
Punctuation:  ")"
Text:  "\t\t\t"
Comment.Single:  "; default value"
Text:  "<newline>\t    "
Punctuation:  "))))"
Text:  "<newline><newline>"
Comment.Single:  ";; MODULE-SET! -- exported"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Sets the variable called NAME in MODULE (or in a module that MODULE uses)"
Text:  "<newline>"
Comment.Single:  ";; to VALUE; if there is no such variable, an error is signaled."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-set!"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "name"
Text:  " "
Name.Variable:  "value"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "variable"
Text:  " "
Punctuation:  "("
Name.Function:  "module-variable"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "name"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "variable"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "variable-set!"
Text:  " "
Name.Variable:  "variable"
Text:  " "
Name.Variable:  "value"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "error"
Text:  " "
Literal.String:  "\"No variable named\""
Text:  " "
Name.Variable:  "name"
Text:  " "
Literal.String.Symbol:  "'in"
Text:  " "
Name.Variable:  "module"
Punctuation:  "))))"
Text:  "<newline><newline>"
Comment.Single:  ";; MODULE-DEFINE! -- exported"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Sets the variable called NAME in MODULE to VALUE; if there is no such"
Text:  "<newline>"
Comment.Single:  ";; variable, it is added first."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-define!"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "name"
Text:  " "
Name.Variable:  "value"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "variable"
Text:  " "
Punctuation:  "("
Name.Function:  "module-local-variable"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "name"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Name.Variable:  "variable"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "begin"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "variable-set!"
Text:  " "
Name.Variable:  "variable"
Text:  " "
Name.Variable:  "value"
Punctuation:  ")"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "module-modified"
Text:  " "
Name.Variable:  "module"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "variable"
Text:  " "
Punctuation:  "("
Name.Function:  "make-variable"
Text:  " "
Name.Variable:  "value"
Punctuation:  ")))"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "variable-set-name-hint!"
Text:  " "
Name.Variable:  "variable"
Text:  " "
Name.Variable:  "name"
Punctuation:  ")"
Text:  "<newline>\t  "
Punctuation:  "("
Name.Function:  "module-add!"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "name"
Text:  " "
Name.Variable:  "variable"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Comment.Single:  ";; MODULE-DEFINED? -- exported"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Return #t iff NAME is defined in MODULE (or in a module that MODULE"
Text:  "<newline>"
Comment.Single:  ";; uses)"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-defined?"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "name"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Punctuation:  "(("
Name.Function:  "variable"
Text:  " "
Punctuation:  "("
Name.Function:  "module-variable"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "name"
Punctuation:  ")))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "and"
Text:  " "
Name.Variable:  "variable"
Text:  " "
Punctuation:  "("
Name.Function:  "variable-bound?"
Text:  " "
Name.Variable:  "variable"
Punctuation:  "))))"
Text:  "<newline><newline>"
Comment.Single:  ";; MODULE-USE! module interface"
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Comment.Single:  ";; Add INTERFACE to the list of interfaces used by MODULE."
Text:  "<newline>"
Comment.Single:  ";;"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "module-use!"
Text:  " "
Name.Variable:  "module"
Text:  " "
Name.Variable:  "interface"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "set-module-uses!"
Text:  " "
Name.Variable:  "module"
Text:  "<newline>\t\t    "
Punctuation:  "("
Name.Builtin:  "cons"
Text:  " "
Name.Variable:  "interface"
Text:  " "
Punctuation:  "("
Name.Function:  "delq!"
Text:  " "
Name.Variable:  "interface"
Text:  " "
Punctuation:  "("
Name.Function:  "module-uses"
Text:  " "
Name.Variable:  "module"
Punctuation:  "))))"
Text:  "<newline>  "
Punctuation:  "("
Name.Function:  "module-modified"
Text:  " "
Name.Variable:  "module"
Punctuation:  "))"
Text:  "<newline><newline>\f<newline>"
Comment.Single:  ";;; {Recursive Namespaces}"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; A hierarchical namespace emerges if we consider some module to be"
Text:  "<newline>"
Comment.Single:  ";;; root, and variables bound to modules as nested namespaces."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; The routines in this file manage variable names in hierarchical namespace."
Text:  "<newline>"
Comment.Single:  ";;; Each variable name is a list of elements, looked up in successively nested"
Text:  "<newline>"
Comment.Single:  ";;; modules."
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;;\t\t(nested-ref some-root-module '(foo bar baz))"
Text:  "<newline>"
Comment.Single:  ";;;\t\t=> <value of a variable named baz in the module bound to bar in"
Text:  "<newline>"
Comment.Single:  ";;;\t\t    the module bound to foo in some-root-module>"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; There are:"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;;\t;; a-root is a module"
Text:  "<newline>"
Comment.Single:  ";;;\t;; name is a list of symbols"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;;\tnested-ref a-root name"
Text:  "<newline>"
Comment.Single:  ";;;\tnested-set! a-root name val"
Text:  "<newline>"
Comment.Single:  ";;;\tnested-define! a-root name val"
Text:  "<newline>"
Comment.Single:  ";;;\tnested-remove! a-root name"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;; (current-module) is a natural choice for a-root so for convenience there are"
Text:  "<newline>"
Comment.Single:  ";;; also:"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline>"
Comment.Single:  ";;;\tlocal-ref name\t\t==\tnested-ref (current-module) name"
Text:  "<newline>"
Comment.Single:  ";;;\tlocal-set! name val\t==\tnested-set! (current-module) name val"
Text:  "<newline>"
Comment.Single:  ";;;\tlocal-define! name val\t==\tnested-define! (current-module) name val"
Text:  "<newline>"
Comment.Single:  ";;;\tlocal-remove! name\t==\tnested-remove! (current-module) name"
Text:  "<newline>"
Comment.Single:  ";;;"
Text:  "<newline><newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "nested-ref"
Text:  " "
Name.Variable:  "root"
Text:  " "
Name.Variable:  "names"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "cur"
Text:  " "
Name.Variable:  "root"
Punctuation:  ")"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "elts"
Text:  " "
Name.Variable:  "names"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "cond"
Text:  "<newline>     "
Punctuation:  "(("
Name.Builtin:  "null?"
Text:  " "
Name.Variable:  "elts"
Punctuation:  ")"
Text:  "\t\t"
Name.Variable:  "cur"
Punctuation:  ")"
Text:  "<newline>     "
Punctuation:  "(("
Name.Builtin:  "not"
Text:  " "
Punctuation:  "("
Name.Function:  "module?"
Text:  " "
Name.Variable:  "cur"
Punctuation:  "))"
Text:  "\t"
Name.Constant:  "#f"
Punctuation:  ")"
Text:  "<newline>     "
Punctuation:  "("
Keyword:  "else"
Text:  " "
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Function:  "module-ref"
Text:  " "
Name.Variable:  "cur"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "elts"
Punctuation:  ")"
Text:  " "
Name.Constant:  "#f"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "elts"
Punctuation:  "))))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "nested-set!"
Text:  " "
Name.Variable:  "root"
Text:  " "
Name.Variable:  "names"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "cur"
Text:  " "
Name.Variable:  "root"
Punctuation:  ")"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "elts"
Text:  " "
Name.Variable:  "names"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "elts"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "module-set!"
Text:  " "
Name.Variable:  "cur"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "elts"
Punctuation:  ")"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Function:  "module-ref"
Text:  " "
Name.Variable:  "cur"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "elts"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "elts"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "nested-define!"
Text:  " "
Name.Variable:  "root"
Text:  " "
Name.Variable:  "names"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "cur"
Text:  " "
Name.Variable:  "root"
Punctuation:  ")"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "elts"
Text:  " "
Name.Variable:  "names"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "elts"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "module-define!"
Text:  " "
Name.Variable:  "cur"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "elts"
Punctuation:  ")"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Function:  "module-ref"
Text:  " "
Name.Variable:  "cur"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "elts"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "elts"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "nested-remove!"
Text:  " "
Name.Variable:  "root"
Text:  " "
Name.Variable:  "names"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "("
Keyword:  "let"
Text:  " "
Name.Variable:  "loop"
Text:  " "
Punctuation:  "(("
Name.Function:  "cur"
Text:  " "
Name.Variable:  "root"
Punctuation:  ")"
Text:  "<newline>\t     "
Punctuation:  "("
Name.Function:  "elts"
Text:  " "
Name.Variable:  "names"
Punctuation:  "))"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "null?"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "elts"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "module-remove!"
Text:  " "
Name.Variable:  "cur"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "elts"
Punctuation:  "))"
Text:  "<newline>\t"
Punctuation:  "("
Name.Function:  "loop"
Text:  " "
Punctuation:  "("
Name.Function:  "module-ref"
Text:  " "
Name.Variable:  "cur"
Text:  " "
Punctuation:  "("
Name.Builtin:  "car"
Text:  " "
Name.Variable:  "elts"
Punctuation:  "))"
Text:  " "
Punctuation:  "("
Name.Builtin:  "cdr"
Text:  " "
Name.Variable:  "elts"
Punctuation:  ")))))"
Text:  "<newline><newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "local-ref"
Text:  " "
Name.Variable:  "names"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "nested-ref"
Text:  " "
Punctuation:  "("
Name.Function:  "current-module"
Punctuation:  ")"
Text:  " "
Name.Variable:  "names"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "local-set!"
Text:  " "
Name.Variable:  "names"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "nested-set!"
Text:  " "
Punctuation:  "("
Name.Function:  "current-module"
Punctuation:  ")"
Text:  " "
Name.Variable:  "names"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "local-define"
Text:  " "
Name.Variable:  "names"
Text:  " "
Name.Variable:  "val"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "nested-define!"
Text:  " "
Punctuation:  "("
Name.Function:  "current-module"
Punctuation:  ")"
Text:  " "
Name.Variable:  "names"
Text:  " "
Name.Variable:  "val"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "("
Keyword:  "define"
Text:  " "
Punctuation:  "("
Name.Function:  "local-remove"
Text:  " "
Name.Variable:  "names"
Punctuation:  ")"
Text:  " "
Punctuation:  "("
Name.Function:  "nested-remove!"
Text:  " "
Punctuation:  "("
Name.Function:  "current-module"
Punctuation:  ")"
Text:  " "
Name.Variable:  "names"
Punctuation:  "))"
Text:  "<newline>"
Comment.Single:  ";;; boot-9.scm ends here"
Text:  "<newline>"
