Name.Builtin:  "echo"
Text:  " "
Literal.String.Single:  "$'ansi"
Literal.String.Escape:  "\\t"
Literal.String.Single:  "strings'"
Text:  "<newline><newline>"
Name.Builtin:  "echo"
Text:  " "
Operator:  "<<"
Name.Constant:  "HERE"
Literal.String.Heredoc:  "<newline> HEREE<newline>"
Name.Constant:  "  HERE<newline>"
Comment:  "# comment"
Text:  "<newline><newline>ry::setup"
Operator:  "()"
Text:  " "
Operator:  "{"
Text:  "<newline>"
Name.Builtin:  "cat"
Text:  " "
Operator:  "<<"
Name.Constant:  "sh"
Literal.String.Heredoc:  "<newline>export PATH=\""
Literal.String.Interpol:  "$("
Text:  "ry fullpath "
Literal.String.Double:  "\""
Name.Variable:  "$@"
Literal.String.Double:  "\""
Literal.String.Interpol:  ")"
Literal.String.Heredoc:  "\";<newline>if [ -n \""
Literal.String.Escape:  "\\$"
Literal.String.Heredoc:  "BASH_VERSION\" ]; then . \""
Name.Variable:  "$RY_PREFIX"
Literal.String.Heredoc:  "/lib/ry.bash_completion\"; fi<newline>"
Name.Constant:  "sh<newline>"
Operator:  "}"
Text:  "<newline><newline>"
Name.Builtin:  "export "
Name.Variable:  "PATH"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Interpol:  "$("
Text:  "ry fullpath "
Literal.String.Double:  "\""
Name.Variable:  "$@"
Literal.String.Double:  "\""
Literal.String.Interpol:  ")"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "if"
Text:  " "
Operator:  "["
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$BASH_VERSION"
Literal.String.Double:  "\""
Text:  " "
Operator:  "]"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  " "
Name.Builtin:  "."
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$RY_PREFIX"
Literal.String.Double:  "/lib/ry.bash_completion\""
Punctuation:  ";"
Text:  " "
Keyword:  "fi<newline><newline>"
Name.Builtin:  "echo"
Text:  " "
Keyword:  "$(("
Literal.Number:  "16#0F"
Keyword:  "))"
Text:  " "
Comment:  "# should be 15"
Text:  "<newline><newline>"
Name.Builtin:  "echo"
Text:  " "
Literal.String.Double:  "\"Balanced paren interpolation: "
Literal.String.Interpol:  "$("
Text:  " "
Keyword:  "if"
Text:  " "
Operator:  "(("
Text:  " a "
Operator:  "=="
Text:  " b "
Operator:  "))"
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then "
Name.Builtin:  "echo"
Text:  " "
Literal.String.Double:  "\"equal\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "fi"
Text:  " "
Literal.String.Interpol:  ")"
Literal.String.Double:  "\""
Text:  "<newline>"
Name.Builtin:  "echo"
Text:  " "
Literal.String.Double:  "\"Balanced paren interpolation: "
Literal.String.Interpol:  "$("
Text:  " "
Operator:  "("
Text:  " "
Name.Builtin:  "seq "
Text:  "10"
Punctuation:  ";"
Text:  " "
Name.Builtin:  "seq "
Text:  "10 "
Operator:  ")"
Text:  " | "
Name.Builtin:  "grep "
Text:  "0 "
Literal.String.Interpol:  ")"
Literal.String.Double:  "\""
Text:  "<newline><newline>"
Comment:  "# ltmain.sh - Provide generalized library-building support services."
Text:  "<newline>"
Comment:  "# NOTE: Changing this file will not affect anything until you rerun configure."
Text:  "<newline>"
Comment:  "#"
Text:  "<newline>"
Comment:  "# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005"
Text:  "<newline>"
Comment:  "# Free Software Foundation, Inc."
Text:  "<newline>"
Comment:  "# Originally by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996"
Text:  "<newline>"
Comment:  "#"
Text:  "<newline>"
Comment:  "# This program is free software; you can redistribute it and/or modify"
Text:  "<newline>"
Comment:  "# it under the terms of the GNU General Public License as published by"
Text:  "<newline>"
Comment:  "# the Free Software Foundation; either version 2 of the License, or"
Text:  "<newline>"
Comment:  "# (at your option) any later version."
Text:  "<newline>"
Comment:  "#"
Text:  "<newline>"
Comment:  "# This program is distributed in the hope that it will be useful, but"
Text:  "<newline>"
Comment:  "# WITHOUT ANY WARRANTY; without even the implied warranty of"
Text:  "<newline>"
Comment:  "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU"
Text:  "<newline>"
Comment:  "# General Public License for more details."
Text:  "<newline>"
Comment:  "#"
Text:  "<newline>"
Comment:  "# You should have received a copy of the GNU General Public License"
Text:  "<newline>"
Comment:  "# along with this program; if not, write to the Free Software"
Text:  "<newline>"
Comment:  "# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA."
Text:  "<newline>"
Comment:  "#"
Text:  "<newline>"
Comment:  "# As a special exception to the GNU General Public License, if you"
Text:  "<newline>"
Comment:  "# distribute this file as part of a program that contains a"
Text:  "<newline>"
Comment:  "# configuration script generated by Autoconf, you may include it under"
Text:  "<newline>"
Comment:  "# the same distribution terms that you use for the rest of that program."
Text:  "<newline><newline>"
Name.Builtin:  "basename"
Operator:  "="
Literal.String.Double:  "\"s,^.*/,,g\""
Text:  "<newline><newline>"
Comment:  "# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh"
Text:  "<newline>"
Comment:  "# is ksh but when the shell is invoked as \"sh\" and the current value of"
Text:  "<newline>"
Comment:  "# the _XPG environment variable is not equal to 1 (one), the special"
Text:  "<newline>"
Comment:  "# positional parameter $0, within a function call, is the name of the"
Text:  "<newline>"
Comment:  "# function."
Text:  "<newline>"
Name.Variable:  "progpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$0"
Literal.String.Double:  "\""
Text:  "<newline><newline>"
Comment:  "# define SED for historic ltconfig's generated by Libtool 1.3"
Text:  "<newline>"
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$SED"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "SED"
Operator:  "="
Name.Builtin:  "sed"
Text:  "<newline><newline>"
Comment:  "# The name of this program:"
Text:  "<newline>"
Name.Variable:  "progname"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$progpath"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$SED"
Text:  " "
Name.Variable:  "$basename"
Literal.String.Backtick:  "`"
Text:  "<newline>"
Name.Variable:  "modename"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$progname"
Literal.String.Double:  "\""
Text:  "<newline><newline>"
Comment:  "# Global variables:"
Text:  "<newline>"
Name.Variable:  "EXIT_SUCCESS"
Operator:  "="
Text:  "0<newline>"
Name.Variable:  "EXIT_FAILURE"
Operator:  "="
Text:  "1<newline><newline>"
Name.Variable:  "PROGRAM"
Operator:  "="
Text:  "ltmain.sh<newline>"
Name.Variable:  "PACKAGE"
Operator:  "="
Text:  "libtool<newline>"
Name.Variable:  "VERSION"
Operator:  "="
Text:  "1.5.22<newline>"
Name.Variable:  "TIMESTAMP"
Operator:  "="
Literal.String.Double:  "\" (1.1220.2.365 2005/12/18 22:14:06)\""
Text:  "<newline><newline>"
Comment:  "# See if we are running on zsh, and set the options which allow our"
Text:  "<newline>"
Comment:  "# commands through without removal of \\ escapes."
Text:  "<newline>"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "ZSH_VERSION"
Punctuation:  "+set"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>  "
Text:  "setopt NO_GLOB_SUBST<newline>"
Keyword:  "fi"
Text:  "<newline>"
Comment:  "# Same for EGREP, and just to be sure, do LTCC as well"
Text:  "<newline>"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$EGREP"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " X "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>    "
Name.Variable:  "EGREP"
Operator:  "="
Text:  "egrep<newline>"
Keyword:  "fi<newline>if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$LTCC"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " X "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>    "
Name.Variable:  "LTCC"
Operator:  "="
Keyword:  "${"
Name.Variable:  "CC"
Punctuation:  "-gcc"
Keyword:  "}"
Text:  "<newline>"
Keyword:  "fi"
Text:  "<newline><newline>"
Comment:  "# Check that we have a working $echo."
Text:  "<newline>"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$1"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " X--no-reexec"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>  "
Comment:  "# Discard the --no-reexec flag, and continue."
Text:  "<newline>  "
Name.Builtin:  "shift<newline>"
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$1"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " X--fallback-echo"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>  "
Comment:  "# Avoid inline document here, it may be left over"
Text:  "<newline>  :<newline>"
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Literal.String.Backtick:  "`"
Operator:  "("
Name.Variable:  "$echo"
Text:  " "
Literal.String.Single:  "'\\t'"
Operator:  ")"
Text:  " 2>/dev/null"
Literal.String.Backtick:  "`"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Single:  "'X\\t'"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>  "
Comment:  "# Yippee, $echo works!"
Text:  "<newline>  :<newline>"
Keyword:  "else"
Text:  "<newline>  "
Comment:  "# Restart under the correct shell, and then maybe $echo will work."
Text:  "<newline>  "
Name.Builtin:  "exec"
Text:  " "
Name.Variable:  "$SHELL"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$progpath"
Literal.String.Double:  "\""
Text:  " "
Name.Tag:  "--no-reexec"
Text:  " "
Keyword:  "${"
Name.Variable:  "1"
Punctuation:  "+"
Literal.String.Double:  "\""
Name.Variable:  "$@"
Literal.String.Double:  "\""
Keyword:  "}"
Text:  "<newline>"
Keyword:  "fi<newline><newline>if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$1"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " X--fallback-echo"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>  "
Comment:  "# used as fallback echo"
Text:  "<newline>  "
Name.Builtin:  "shift<newline>  cat"
Text:  " "
Operator:  "<<"
Name.Constant:  "EOF"
Literal.String.Heredoc:  "<newline>"
Name.Variable:  "$*"
Literal.String.Heredoc:  "<newline>"
Name.Constant:  "EOF<newline>"
Text:  "  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_SUCCESS"
Text:  "<newline>"
Keyword:  "fi<newline><newline>"
Name.Variable:  "default_mode"
Operator:  "="
Text:  "<newline>"
Name.Builtin:  "help"
Operator:  "="
Literal.String.Double:  "\"Try "
Literal.String.Escape:  "\\`"
Name.Variable:  "$progname"
Literal.String.Double:  " --help' for more information.\""
Text:  "<newline>"
Name.Variable:  "magic"
Operator:  "="
Literal.String.Double:  "\"%%%MAGIC variable%%%\""
Text:  "<newline>"
Name.Builtin:  "mkdir"
Operator:  "="
Literal.String.Double:  "\"mkdir\""
Text:  "<newline>"
Name.Builtin:  "mv"
Operator:  "="
Literal.String.Double:  "\"mv -f\""
Text:  "<newline>"
Name.Builtin:  "rm"
Operator:  "="
Literal.String.Double:  "\"rm -f\""
Text:  "<newline><newline>"
Comment:  "# Sed substitution that helps us do robust quoting.  It backslashifies"
Text:  "<newline>"
Comment:  "# metacharacters that are still active within double-quoted strings."
Text:  "<newline>"
Name.Variable:  "Xsed"
Operator:  "="
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "SED"
Keyword:  "}"
Literal.String.Double:  "\""
Literal.String.Single:  "' -e 1s/^X//'"
Text:  "<newline>"
Name.Variable:  "sed_quote_subst"
Operator:  "="
Literal.String.Single:  "'s/\\([\\\\`\\\\\"$\\\\\\\\]\\)/\\\\\\1/g'"
Text:  "<newline>"
Comment:  "# test EBCDIC or ASCII"
Text:  "<newline>"
Keyword:  "case"
Text:  " "
Literal.String.Backtick:  "`"
Name.Builtin:  "echo "
Text:  "X|tr X "
Literal.String.Single:  "'\\101'"
Literal.String.Backtick:  "`"
Text:  " "
Keyword:  "in<newline> "
Text:  "A"
Punctuation:  ")"
Text:  " "
Comment:  "# ASCII based system"
Text:  "<newline>    "
Comment:  "# <newline> is not interpreted correctly by Solaris 8 /usr/ucb/tr"
Text:  "<newline>  "
Name.Variable:  "SP2NL"
Operator:  "="
Literal.String.Single:  "'tr \\040 \\012'"
Text:  "<newline>  "
Name.Variable:  "NL2SP"
Operator:  "="
Literal.String.Single:  "'tr \\015\\012 \\040\\040'"
Text:  "<newline>  "
Punctuation:  ";;"
Text:  "<newline> "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Comment:  "# EBCDIC based system"
Text:  "<newline>  "
Name.Variable:  "SP2NL"
Operator:  "="
Literal.String.Single:  "'tr \\100 <newline>'"
Text:  "<newline>  "
Name.Variable:  "NL2SP"
Operator:  "="
Literal.String.Single:  "'tr \\r<newline> \\100\\100'"
Text:  "<newline>  "
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "esac"
Text:  "<newline><newline>"
Comment:  "# NLS nuisances."
Text:  "<newline>"
Comment:  "# Only set LANG and LC_ALL to C if already set."
Text:  "<newline>"
Comment:  "# These must not be set unconditionally because not all systems understand"
Text:  "<newline>"
Comment:  "# e.g. LANG=C (notably SCO)."
Text:  "<newline>"
Comment:  "# We save the old values to restore during execute mode."
Text:  "<newline>"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "LC_ALL"
Punctuation:  "+set"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "set"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>  "
Name.Variable:  "save_LC_ALL"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$LC_ALL"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "LC_ALL"
Operator:  "="
Text:  "C"
Punctuation:  ";"
Text:  " "
Name.Builtin:  "export "
Text:  "LC_ALL<newline>"
Keyword:  "fi<newline>if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "LANG"
Punctuation:  "+set"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "set"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>  "
Name.Variable:  "save_LANG"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$LANG"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "LANG"
Operator:  "="
Text:  "C"
Punctuation:  ";"
Text:  " "
Name.Builtin:  "export "
Text:  "LANG<newline>"
Keyword:  "fi"
Text:  "<newline><newline>"
Comment:  "# Make sure IFS has a sensible default"
Text:  "<newline>"
Name.Variable:  "lt_nl"
Operator:  "="
Literal.String.Single:  "'<newline>'"
Text:  "<newline>"
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Double:  "\" \t"
Name.Variable:  "$lt_nl"
Literal.String.Double:  "\""
Text:  "<newline><newline>"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_libtool_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_old_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": not configured to build any kind of library\""
Text:  " 1>&2<newline>  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"Fatal configuration error.  See the "
Name.Variable:  "$PACKAGE"
Literal.String.Double:  " docs for more information.\""
Text:  " 1>&2<newline>  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>"
Keyword:  "fi"
Text:  "<newline><newline>"
Comment:  "# Global variables."
Text:  "<newline>"
Name.Variable:  "mode"
Operator:  "="
Name.Variable:  "$default_mode"
Text:  "<newline>"
Name.Variable:  "nonopt"
Operator:  "="
Text:  "<newline>"
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>"
Name.Variable:  "prevopt"
Operator:  "="
Text:  "<newline>"
Name.Variable:  "run"
Operator:  "="
Text:  "<newline>"
Name.Variable:  "show"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$echo"
Literal.String.Double:  "\""
Text:  "<newline>"
Name.Variable:  "show_help"
Operator:  "="
Text:  "<newline>"
Name.Variable:  "execute_dlfiles"
Operator:  "="
Text:  "<newline>"
Name.Variable:  "duplicate_deps"
Operator:  "="
Text:  "no<newline>"
Name.Variable:  "preserve_args"
Operator:  "="
Text:  "<newline>"
Name.Variable:  "lo2o"
Operator:  "="
Literal.String.Double:  "\"s/"
Literal.String.Escape:  "\\\\"
Literal.String.Double:  ".lo"
Literal.String.Escape:  "\\$"
Literal.String.Double:  "/."
Keyword:  "${"
Name.Variable:  "objext"
Keyword:  "}"
Literal.String.Double:  "/\""
Text:  "<newline>"
Name.Variable:  "o2lo"
Operator:  "="
Literal.String.Double:  "\"s/"
Literal.String.Escape:  "\\\\"
Literal.String.Double:  "."
Keyword:  "${"
Name.Variable:  "objext"
Keyword:  "}"
Literal.String.Escape:  "\\$"
Literal.String.Double:  "/.lo/\""
Text:  "<newline><newline>"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$max_cmd_len"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>  "
Name.Variable:  "i"
Operator:  "="
Text:  "0<newline>  "
Name.Variable:  "testring"
Operator:  "="
Literal.String.Double:  "\"ABCD\""
Text:  "<newline>  "
Name.Variable:  "new_result"
Operator:  "="
Text:  "<newline>  <newline>  "
Comment:  "# If test is not a shell built-in, we'll probably end up computing a"
Text:  "<newline>  "
Comment:  "# maximum length that is only half of the actual maximum length, but"
Text:  "<newline>  "
Comment:  "# we can't tell."
Text:  "<newline>  "
Keyword:  "while"
Text:  " "
Operator:  "("
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X\""
Literal.String.Backtick:  "`"
Name.Variable:  "$SHELL"
Text:  " "
Name.Variable:  "$0"
Text:  " "
Name.Tag:  "--fallback-echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$testring"
Literal.String.Double:  "\""
Text:  " 2>/dev/null"
Literal.String.Backtick:  "`"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>             "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"XX"
Name.Variable:  "$testring"
Literal.String.Double:  "\""
Operator:  ")"
Text:  " "
Operator:  ">"
Text:  "/dev/null 2>&1 "
Operator:  "&&"
Text:  "<newline>          "
Name.Variable:  "new_result"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "expr"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$testring"
Literal.String.Double:  "\""
Text:  " : "
Literal.String.Double:  "\".*\""
Text:  " 2>&1"
Literal.String.Backtick:  "`"
Text:  " "
Operator:  "&&"
Text:  "<newline>          "
Name.Variable:  "max_cmd_len"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$new_result"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  "<newline>          "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$i"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " 17 "
Comment:  "# 1/2 MB should be enough"
Text:  "<newline>  "
Keyword:  "do<newline>    "
Name.Variable:  "i"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "expr"
Text:  " "
Name.Variable:  "$i"
Text:  " + 1"
Literal.String.Backtick:  "`"
Text:  "<newline>    "
Name.Variable:  "testring"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$testring$testring"
Literal.String.Double:  "\""
Text:  "<newline>  "
Keyword:  "done<newline>  "
Name.Variable:  "testring"
Operator:  "="
Text:  "<newline>  "
Comment:  "# Add a significant safety factor because C++ compilers can tack on massive"
Text:  "<newline>  "
Comment:  "# amounts of additional arguments before passing them to the linker."
Text:  "<newline>  "
Comment:  "# It appears as though 1/2 is a usable value."
Text:  "<newline>  "
Name.Variable:  "max_cmd_len"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "expr"
Text:  " "
Name.Variable:  "$max_cmd_len"
Text:  " "
Literal.String.Escape:  "\\/"
Text:  " 2"
Literal.String.Backtick:  "`"
Text:  "<newline>"
Keyword:  "fi"
Text:  "<newline><newline>"
Comment:  "#####################################"
Text:  "<newline>"
Comment:  "# Shell function definitions:"
Text:  "<newline>"
Comment:  "# This seems to be the best place for them"
Text:  "<newline><newline>"
Comment:  "# func_mktempdir [string]"
Text:  "<newline>"
Comment:  "# Make a temporary directory that won't clash with other running"
Text:  "<newline>"
Comment:  "# libtool processes, and avoids race conditions if possible.  If"
Text:  "<newline>"
Comment:  "# given, STRING is the basename for that directory."
Text:  "<newline>func_mktempdir "
Operator:  "()"
Text:  "<newline>"
Operator:  "{"
Text:  "<newline>    "
Name.Variable:  "my_template"
Operator:  "="
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "TMPDIR"
Punctuation:  "-/tmp"
Keyword:  "}"
Literal.String.Double:  "/"
Keyword:  "${"
Name.Variable:  "1"
Punctuation:  "-"
Name.Variable:  "$progname"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  "<newline><newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$run"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\":\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Comment:  "# Return a directory name, but don't create it in dry-run mode"
Text:  "<newline>      "
Name.Variable:  "my_tmpdir"
Operator:  "="
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "my_template"
Keyword:  "}"
Literal.String.Double:  "-"
Name.Variable:  "$$"
Literal.String.Double:  "\""
Text:  "<newline>    "
Keyword:  "else"
Text:  "<newline><newline>      "
Comment:  "# If mktemp works, use that first and foremost"
Text:  "<newline>      "
Name.Variable:  "my_tmpdir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "mktemp"
Text:  " "
Name.Tag:  "-d"
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "my_template"
Keyword:  "}"
Literal.String.Double:  "-XXXXXXXX\""
Text:  " 2>/dev/null"
Literal.String.Backtick:  "`"
Text:  "<newline><newline>      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Operator:  "!"
Text:  " "
Name.Tag:  "-d"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$my_tmpdir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t"
Comment:  "# Failing that, at least try and use $RANDOM to avoid a race"
Text:  "<newline>\t"
Name.Variable:  "my_tmpdir"
Operator:  "="
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "my_template"
Keyword:  "}"
Literal.String.Double:  "-"
Keyword:  "${"
Name.Variable:  "RANDOM"
Punctuation:  "-0"
Keyword:  "}"
Name.Variable:  "$$"
Literal.String.Double:  "\""
Text:  "<newline><newline>\t"
Name.Variable:  "save_mktempdir_umask"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "umask"
Literal.String.Backtick:  "`"
Text:  "<newline>\t"
Name.Builtin:  "umask "
Text:  "0077<newline>\t"
Name.Variable:  "$mkdir"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$my_tmpdir"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Builtin:  "umask"
Text:  " "
Name.Variable:  "$save_mktempdir_umask"
Text:  "<newline>      "
Keyword:  "fi"
Text:  "<newline><newline>      "
Comment:  "# If we're not in dry-run mode, bomb out on failure"
Text:  "<newline>      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-d"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$my_tmpdir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  " "
Operator:  "{"
Text:  "<newline>        "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"cannot create temporary directory "
Literal.String.Escape:  "\\`"
Name.Variable:  "$my_tmpdir"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>\t"
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>      "
Operator:  "}"
Text:  "<newline>    "
Keyword:  "fi"
Text:  "<newline><newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$my_tmpdir"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  "<newline>"
Operator:  "}"
Text:  "<newline><newline><newline>"
Comment:  "# func_win32_libid arg"
Text:  "<newline>"
Comment:  "# return the library type of file 'arg'"
Text:  "<newline>"
Comment:  "#"
Text:  "<newline>"
Comment:  "# Need a lot of goo to handle *both* DLLs and import libs"
Text:  "<newline>"
Comment:  "# Has to be a shell function in order to 'eat' the argument"
Text:  "<newline>"
Comment:  "# that is supplied when $file_magic_command is called."
Text:  "<newline>func_win32_libid "
Operator:  "()"
Text:  "<newline>"
Operator:  "{"
Text:  "<newline>  "
Name.Variable:  "win32_libid_type"
Operator:  "="
Literal.String.Double:  "\"unknown\""
Text:  "<newline>  "
Name.Variable:  "win32_fileres"
Operator:  "="
Literal.String.Backtick:  "`"
Text:  "file "
Name.Tag:  "-L"
Text:  " "
Name.Variable:  "$1"
Text:  " 2>/dev/null"
Literal.String.Backtick:  "`"
Text:  "<newline>  "
Keyword:  "case"
Text:  " "
Name.Variable:  "$win32_fileres"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Keyword:  "*"
Text:  "ar"
Literal.String.Escape:  "\\ "
Text:  "archive"
Literal.String.Escape:  "\\ "
Text:  "import"
Literal.String.Escape:  "\\ "
Text:  "library"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Comment:  "# definitely import"
Text:  "<newline>    "
Name.Variable:  "win32_libid_type"
Operator:  "="
Literal.String.Double:  "\"x86 archive import\""
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline>  "
Keyword:  "*"
Text:  "ar"
Literal.String.Escape:  "\\ "
Text:  "archive"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Comment:  "# could be an import, or static"
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "eval"
Text:  " "
Name.Variable:  "$OBJDUMP"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Name.Variable:  "$1"
Text:  " | "
Name.Variable:  "$SED"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'10q'"
Text:  " 2>/dev/null | "
Literal.String.Escape:  "\\"
Text:  "<newline>      "
Name.Variable:  "$EGREP"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'file format pe-i386(.*architecture: i386)?'"
Text:  " "
Operator:  ">"
Text:  "/dev/null "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      "
Name.Variable:  "win32_nmres"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "eval"
Text:  " "
Name.Variable:  "$NM"
Text:  " "
Name.Tag:  "-f"
Text:  " posix "
Name.Tag:  "-A"
Text:  " "
Name.Variable:  "$1"
Text:  " | "
Literal.String.Escape:  "\\"
Text:  "<newline>\t"
Name.Variable:  "$SED"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'1,100{/ I /{s,.*,import,;p;q;};}'"
Literal.String.Backtick:  "`"
Text:  "<newline>      "
Keyword:  "case"
Text:  " "
Name.Variable:  "$win32_nmres"
Text:  " "
Keyword:  "in<newline>      "
Text:  "import"
Keyword:  "*"
Punctuation:  ")"
Text:  "  "
Name.Variable:  "win32_libid_type"
Operator:  "="
Literal.String.Double:  "\"x86 archive import\""
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "*"
Punctuation:  ")"
Text:  "        "
Name.Variable:  "win32_libid_type"
Operator:  "="
Literal.String.Double:  "\"x86 archive static\""
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  "<newline>    "
Keyword:  "fi"
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline>  "
Keyword:  "*"
Text:  "DLL"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "win32_libid_type"
Operator:  "="
Literal.String.Double:  "\"x86 DLL\""
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline>  "
Keyword:  "*"
Text:  "executable"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Comment:  "# but shell scripts are \"executable\" too..."
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$win32_fileres"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Keyword:  "*"
Text:  "MS"
Literal.String.Escape:  "\\ "
Text:  "Windows"
Literal.String.Escape:  "\\ "
Text:  "PE"
Literal.String.Escape:  "\\ "
Text:  "Intel"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "win32_libid_type"
Operator:  "="
Literal.String.Double:  "\"x86 DLL\""
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline>  "
Keyword:  "esac"
Text:  "<newline>  "
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$win32_libid_type"
Text:  "<newline>"
Operator:  "}"
Text:  "<newline><newline><newline>"
Comment:  "# func_infer_tag arg"
Text:  "<newline>"
Comment:  "# Infer tagged configuration to use if any are available and"
Text:  "<newline>"
Comment:  "# if one wasn't chosen via the \"--tag\" command line option."
Text:  "<newline>"
Comment:  "# Only attempt this if the compiler in the base compile"
Text:  "<newline>"
Comment:  "# command doesn't match the default compiler."
Text:  "<newline>"
Comment:  "# arg is usually of the form 'gcc ...'"
Text:  "<newline>func_infer_tag "
Operator:  "()"
Text:  "<newline>"
Operator:  "{"
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$available_tags"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$tagname"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      "
Name.Variable:  "CC_quoted"
Operator:  "="
Text:  "<newline>      "
Keyword:  "for "
Text:  "arg "
Keyword:  "in"
Text:  " "
Name.Variable:  "$CC"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\tcase"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t  "
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Name.Variable:  "$arg"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Name.Variable:  "CC_quoted"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$CC_quoted"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>      "
Keyword:  "done<newline>      case"
Text:  " "
Name.Variable:  "$@"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Comment:  "# Blanks in the command may have been stripped by the calling shell,"
Text:  "<newline>      "
Comment:  "# but not from the CC environment variable when configure was run."
Text:  "<newline>      "
Literal.String.Double:  "\" "
Name.Variable:  "$CC"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$CC"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$CC"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$CC"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Name.Variable:  "$CC_quoted"
Literal.String.Double:  "\""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$CC_quoted"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$CC_quoted"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$CC_quoted"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>      "
Comment:  "# Blanks at the start of $base_compile will cause this to fail"
Text:  "<newline>      "
Comment:  "# if we don't check for them as well."
Text:  "<newline>      "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "for "
Text:  "z "
Keyword:  "in"
Text:  " "
Name.Variable:  "$available_tags"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t  if "
Name.Builtin:  "grep"
Text:  " "
Literal.String.Double:  "\"^# ### BEGIN LIBTOOL TAG CONFIG: "
Name.Variable:  "$z"
Literal.String.Double:  "$\""
Text:  " < "
Literal.String.Double:  "\""
Name.Variable:  "$progpath"
Literal.String.Double:  "\""
Text:  " "
Operator:  ">"
Text:  " /dev/null"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Comment:  "# Evaluate the configuration."
Text:  "<newline>\t    "
Name.Builtin:  "eval"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Keyword:  "${"
Name.Variable:  "SED"
Keyword:  "}"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'/^# ### BEGIN LIBTOOL TAG CONFIG: '"
Name.Variable:  "$z"
Literal.String.Single:  "'$/,/^# ### END LIBTOOL TAG CONFIG: '"
Name.Variable:  "$z"
Literal.String.Single:  "'$/p'"
Text:  " < "
Name.Variable:  "$progpath"
Literal.String.Backtick:  "`"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "CC_quoted"
Operator:  "="
Text:  "<newline>\t    "
Keyword:  "for "
Text:  "arg "
Keyword:  "in"
Text:  " "
Name.Variable:  "$CC"
Punctuation:  ";"
Text:  " "
Keyword:  "do"
Text:  "<newline>\t    "
Comment:  "# Double-quote args containing other shell metacharacters."
Text:  "<newline>\t    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t      "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Name.Variable:  "$arg"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline>\t    "
Name.Variable:  "CC_quoted"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$CC_quoted"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "done"
Text:  "<newline>\t    "
Comment:  "# user sometimes does CC=<HOST>-gcc so we need to match that to 'gcc'"
Text:  "<newline>\t    "
Name.Variable:  "trimedcc"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "echo"
Text:  " "
Keyword:  "${"
Name.Variable:  "CC"
Keyword:  "}"
Text:  " | "
Name.Variable:  "$SED"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\"s/"
Keyword:  "${"
Name.Variable:  "host"
Keyword:  "}"
Literal.String.Double:  "-//g\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Comment:  "# and sometimes libtool has CC=<HOST>-gcc but user does CC=gcc"
Text:  "<newline>\t    "
Name.Variable:  "extendcc"
Operator:  "="
Keyword:  "${"
Name.Variable:  "host"
Keyword:  "}"
Text:  "-"
Keyword:  "${"
Name.Variable:  "CC"
Keyword:  "}"
Text:  "<newline>\t    "
Comment:  "# and sometimes libtool has CC=<OLDHOST>-gcc but user has CC=<NEWHOST>-gcc  "
Text:  "<newline>\t    "
Comment:  "# (Gentoo-specific hack because we always export $CHOST)"
Text:  "<newline>\t    "
Name.Variable:  "mungedcc"
Operator:  "="
Keyword:  "${"
Name.Variable:  "CHOST"
Punctuation:  "-"
Keyword:  "${"
Name.Variable:  "host"
Keyword:  "}}"
Text:  "-"
Keyword:  "${"
Name.Variable:  "trimedcc"
Keyword:  "}"
Text:  "<newline>\t    "
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$@"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t      "
Literal.String.Double:  "\"cc \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" cc \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "host"
Keyword:  "}"
Literal.String.Double:  "-cc \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Keyword:  "${"
Name.Variable:  "host"
Keyword:  "}"
Literal.String.Double:  "-cc \""
Keyword:  "*"
Punctuation:  "|"
Literal.String.Escape:  "\\"
Text:  "<newline>\t      "
Literal.String.Double:  "\"gcc \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" gcc \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "host"
Keyword:  "}"
Literal.String.Double:  "-gcc \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Keyword:  "${"
Name.Variable:  "host"
Keyword:  "}"
Literal.String.Double:  "-gcc \""
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t      "
Name.Variable:  "tagname"
Operator:  "="
Text:  "CC<newline>\t      "
Name.Builtin:  "break"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Literal.String.Double:  "\""
Name.Variable:  "$trimedcc"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Name.Variable:  "$trimedcc"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$trimedcc"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$trimedcc"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  "|"
Literal.String.Escape:  "\\"
Text:  "<newline>\t      "
Literal.String.Double:  "\""
Name.Variable:  "$extendcc"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Name.Variable:  "$extendcc"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$extendcc"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$extendcc"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  "|"
Literal.String.Escape:  "\\"
Text:  "<newline>\t      "
Literal.String.Double:  "\""
Name.Variable:  "$mungedcc"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Name.Variable:  "$mungedcc"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$mungedcc"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$mungedcc"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  "|"
Literal.String.Escape:  "\\"
Text:  "<newline>\t      "
Literal.String.Double:  "\" "
Name.Variable:  "$CC"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$CC"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$CC"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$CC"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Name.Variable:  "$CC_quoted"
Literal.String.Double:  "\""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$CC_quoted"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\" "
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$CC_quoted"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$CC_quoted"
Literal.String.Backtick:  "`"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t      "
Comment:  "# The compiler in the base compile command matches"
Text:  "<newline>\t      "
Comment:  "# the one in the tagged configuration."
Text:  "<newline>\t      "
Comment:  "# Assume this is the tagged configuration we want."
Text:  "<newline>\t      "
Name.Variable:  "tagname"
Operator:  "="
Name.Variable:  "$z"
Text:  "<newline>\t      "
Name.Builtin:  "break"
Text:  "<newline>\t      "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline>\t  "
Keyword:  "fi<newline>\tdone"
Text:  "<newline>\t"
Comment:  "# If $tagname still isn't set, then no tagged configuration"
Text:  "<newline>\t"
Comment:  "# was found and let the user know that the \"--tag\" command"
Text:  "<newline>\t"
Comment:  "# line option must be used."
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$tagname"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": unable to infer tagged configuration\""
Text:  "<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": specify a tag with "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "--tag'\""
Text:  " 1>&2<newline>\t  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>"
Comment:  "#        else"
Text:  "<newline>"
Comment:  "#          $echo \"$modename: using $tagname tagged configuration\""
Text:  "<newline>\t"
Keyword:  "fi"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  "<newline>    "
Keyword:  "fi"
Text:  "<newline>"
Operator:  "}"
Text:  "<newline><newline><newline>"
Comment:  "# func_extract_an_archive dir oldlib"
Text:  "<newline>func_extract_an_archive "
Operator:  "()"
Text:  "<newline>"
Operator:  "{"
Text:  "<newline>    "
Name.Variable:  "f_ex_an_ar_dir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$1"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Name.Builtin:  "shift<newline>    "
Name.Variable:  "f_ex_an_ar_oldlib"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$1"
Literal.String.Double:  "\""
Text:  "<newline><newline>    "
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\"(cd "
Name.Variable:  "$f_ex_an_ar_dir"
Literal.String.Double:  " && "
Name.Variable:  "$AR"
Literal.String.Double:  " x "
Name.Variable:  "$f_ex_an_ar_oldlib"
Literal.String.Double:  ")\""
Text:  "<newline>    "
Name.Variable:  "$run"
Text:  " "
Name.Builtin:  "eval"
Text:  " "
Literal.String.Double:  "\"(cd "
Literal.String.Escape:  "\\$"
Literal.String.Double:  "f_ex_an_ar_dir && "
Name.Variable:  "$AR"
Literal.String.Double:  " x "
Literal.String.Escape:  "\\$"
Literal.String.Double:  "f_ex_an_ar_oldlib)\""
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$?"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Operator:  "("
Name.Variable:  "$AR"
Text:  " t "
Literal.String.Double:  "\""
Name.Variable:  "$f_ex_an_ar_oldlib"
Literal.String.Double:  "\""
Text:  " | "
Name.Builtin:  "sort"
Text:  " | "
Name.Builtin:  "sort"
Text:  " "
Name.Tag:  "-uc"
Text:  " "
Operator:  ">"
Text:  "/dev/null 2>&1"
Operator:  ")"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>     :<newline>    "
Keyword:  "else"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": ERROR: object name conflicts: "
Name.Variable:  "$f_ex_an_ar_dir"
Literal.String.Double:  "/"
Name.Variable:  "$f_ex_an_ar_oldlib"
Literal.String.Double:  "\""
Text:  " 1>&2<newline>      "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>    "
Keyword:  "fi"
Text:  "<newline>"
Operator:  "}"
Text:  "<newline><newline>"
Comment:  "# func_extract_archives gentop oldlib ..."
Text:  "<newline>func_extract_archives "
Operator:  "()"
Text:  "<newline>"
Operator:  "{"
Text:  "<newline>    "
Name.Variable:  "my_gentop"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$1"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Name.Builtin:  "shift<newline>    "
Name.Variable:  "my_oldlibs"
Operator:  "="
Keyword:  "${"
Name.Variable:  "1"
Punctuation:  "+"
Literal.String.Double:  "\""
Name.Variable:  "$@"
Literal.String.Double:  "\""
Keyword:  "}"
Text:  "<newline>    "
Name.Variable:  "my_oldobjs"
Operator:  "="
Literal.String.Double:  "\"\""
Text:  "<newline>    "
Name.Variable:  "my_xlib"
Operator:  "="
Literal.String.Double:  "\"\""
Text:  "<newline>    "
Name.Variable:  "my_xabs"
Operator:  "="
Literal.String.Double:  "\"\""
Text:  "<newline>    "
Name.Variable:  "my_xdir"
Operator:  "="
Literal.String.Double:  "\"\""
Text:  "<newline>    "
Name.Variable:  "my_status"
Operator:  "="
Literal.String.Double:  "\"\""
Text:  "<newline><newline>    "
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "rm"
Keyword:  "}"
Literal.String.Double:  "r "
Name.Variable:  "$my_gentop"
Literal.String.Double:  "\""
Text:  "<newline>    "
Name.Variable:  "$run"
Text:  " "
Keyword:  "${"
Name.Variable:  "rm"
Keyword:  "}"
Text:  "r "
Literal.String.Double:  "\""
Name.Variable:  "$my_gentop"
Literal.String.Double:  "\""
Text:  "<newline>    "
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$mkdir"
Literal.String.Double:  " "
Name.Variable:  "$my_gentop"
Literal.String.Double:  "\""
Text:  "<newline>    "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$mkdir"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$my_gentop"
Literal.String.Double:  "\""
Text:  "<newline>    "
Name.Variable:  "my_status"
Operator:  "="
Name.Variable:  "$?"
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$my_status"
Literal.String.Double:  "\""
Text:  " "
Name.Tag:  "-ne"
Text:  " 0 "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Operator:  "!"
Text:  " "
Name.Tag:  "-d"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$my_gentop"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$my_status"
Text:  "<newline>    "
Keyword:  "fi<newline><newline>    for "
Text:  "my_xlib "
Keyword:  "in"
Text:  " "
Name.Variable:  "$my_oldlibs"
Punctuation:  ";"
Text:  " "
Keyword:  "do"
Text:  "<newline>      "
Comment:  "# Extract the objects."
Text:  "<newline>      "
Keyword:  "case"
Text:  " "
Name.Variable:  "$my_xlib"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Operator:  "["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Operator:  "["
Text:  "A-Za-z]:["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "my_xabs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$my_xlib"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "my_xabs"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "pwd"
Literal.String.Backtick:  "`"
Literal.String.Double:  "\"/"
Name.Variable:  "$my_xlib"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  "<newline>      "
Name.Variable:  "my_xlib"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$my_xlib"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%^.*/%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>      "
Name.Variable:  "my_xdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$my_gentop"
Literal.String.Double:  "/"
Name.Variable:  "$my_xlib"
Literal.String.Double:  "\""
Text:  "<newline><newline>      "
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "rm"
Keyword:  "}"
Literal.String.Double:  "r "
Name.Variable:  "$my_xdir"
Literal.String.Double:  "\""
Text:  "<newline>      "
Name.Variable:  "$run"
Text:  " "
Keyword:  "${"
Name.Variable:  "rm"
Keyword:  "}"
Text:  "r "
Literal.String.Double:  "\""
Name.Variable:  "$my_xdir"
Literal.String.Double:  "\""
Text:  "<newline>      "
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$mkdir"
Literal.String.Double:  " "
Name.Variable:  "$my_xdir"
Literal.String.Double:  "\""
Text:  "<newline>      "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$mkdir"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$my_xdir"
Literal.String.Double:  "\""
Text:  "<newline>      "
Name.Variable:  "exit_status"
Operator:  "="
Name.Variable:  "$?"
Text:  "<newline>      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$exit_status"
Literal.String.Double:  "\""
Text:  " "
Name.Tag:  "-ne"
Text:  " 0 "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Operator:  "!"
Text:  " "
Name.Tag:  "-d"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$my_xdir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t"
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$exit_status"
Text:  "<newline>      "
Keyword:  "fi<newline>      case"
Text:  " "
Name.Variable:  "$host"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Keyword:  "*"
Name.Tag:  "-darwin"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\"Extracting "
Name.Variable:  "$my_xabs"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Comment:  "# Do not bother doing anything if just a dry run"
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$run"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  "
Name.Variable:  "darwin_orig_dir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "pwd"
Literal.String.Backtick:  "`"
Text:  "<newline>\t  "
Name.Builtin:  "cd"
Text:  " "
Name.Variable:  "$my_xdir"
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$?"
Text:  "<newline>\t  "
Name.Variable:  "darwin_archive"
Operator:  "="
Name.Variable:  "$my_xabs"
Text:  "<newline>\t  "
Name.Variable:  "darwin_curdir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "pwd"
Literal.String.Backtick:  "`"
Text:  "<newline>\t  "
Name.Variable:  "darwin_base_archive"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$darwin_archive"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%^.*/%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t  "
Name.Variable:  "darwin_arches"
Operator:  "="
Literal.String.Backtick:  "`"
Text:  "lipo "
Name.Tag:  "-info"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$darwin_archive"
Literal.String.Double:  "\""
Text:  " 2>/dev/null | "
Name.Variable:  "$EGREP"
Text:  " Architectures 2>/dev/null"
Literal.String.Backtick:  "`"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$darwin_arches"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then <newline>\t    "
Name.Variable:  "darwin_arches"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$darwin_arches"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$SED"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/.*are://'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Name.Variable:  "darwin_arch"
Operator:  "="
Text:  "<newline>\t    "
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$darwin_base_archive"
Literal.String.Double:  " has multiple architectures "
Name.Variable:  "$darwin_arches"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "for "
Text:  "darwin_arch "
Keyword:  "in"
Text:  "  "
Name.Variable:  "$darwin_arches"
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t      "
Name.Builtin:  "mkdir"
Text:  " "
Name.Tag:  "-p"
Text:  " "
Literal.String.Double:  "\"unfat-"
Name.Variable:  "$$"
Literal.String.Double:  "/"
Keyword:  "${"
Name.Variable:  "darwin_base_archive"
Keyword:  "}"
Literal.String.Double:  "-"
Keyword:  "${"
Name.Variable:  "darwin_arch"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  "<newline>\t      lipo "
Name.Tag:  "-thin"
Text:  " "
Name.Variable:  "$darwin_arch"
Text:  " "
Name.Tag:  "-output"
Text:  " "
Literal.String.Double:  "\"unfat-"
Name.Variable:  "$$"
Literal.String.Double:  "/"
Keyword:  "${"
Name.Variable:  "darwin_base_archive"
Keyword:  "}"
Literal.String.Double:  "-"
Keyword:  "${"
Name.Variable:  "darwin_arch"
Keyword:  "}"
Literal.String.Double:  "/"
Keyword:  "${"
Name.Variable:  "darwin_base_archive"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "darwin_archive"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Builtin:  "cd"
Text:  " "
Literal.String.Double:  "\"unfat-"
Name.Variable:  "$$"
Literal.String.Double:  "/"
Keyword:  "${"
Name.Variable:  "darwin_base_archive"
Keyword:  "}"
Literal.String.Double:  "-"
Keyword:  "${"
Name.Variable:  "darwin_arch"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  "<newline>\t      func_extract_an_archive "
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Name.Builtin:  "pwd"
Literal.String.Backtick:  "`"
Literal.String.Double:  "\""
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "darwin_base_archive"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Builtin:  "cd"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$darwin_curdir"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Variable:  "$rm"
Text:  " "
Literal.String.Double:  "\"unfat-"
Name.Variable:  "$$"
Literal.String.Double:  "/"
Keyword:  "${"
Name.Variable:  "darwin_base_archive"
Keyword:  "}"
Literal.String.Double:  "-"
Keyword:  "${"
Name.Variable:  "darwin_arch"
Keyword:  "}"
Literal.String.Double:  "/"
Keyword:  "${"
Name.Variable:  "darwin_base_archive"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "done"
Text:  " "
Comment:  "# $darwin_arches"
Text:  "<newline>      "
Comment:  "## Okay now we have a bunch of thin objects, gotta fatten them up :)"
Text:  "<newline>\t    "
Name.Variable:  "darwin_filelist"
Operator:  "="
Literal.String.Backtick:  "`"
Text:  "find unfat-"
Name.Variable:  "$$"
Text:  " "
Name.Tag:  "-type"
Text:  " f "
Name.Tag:  "-name"
Text:  " "
Literal.String.Escape:  "\\*"
Text:  ".o "
Name.Tag:  "-print"
Text:  " "
Name.Tag:  "-o"
Text:  " "
Name.Tag:  "-name"
Text:  " "
Literal.String.Escape:  "\\*"
Text:  ".lo "
Name.Tag:  "-print"
Text:  "| xargs "
Name.Builtin:  "basename"
Text:  " | "
Name.Builtin:  "sort"
Text:  " "
Name.Tag:  "-u"
Text:  " | "
Name.Variable:  "$NL2SP"
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Name.Variable:  "darwin_file"
Operator:  "="
Text:  "<newline>\t    "
Name.Variable:  "darwin_files"
Operator:  "="
Text:  "<newline>\t    "
Keyword:  "for "
Text:  "darwin_file "
Keyword:  "in"
Text:  " "
Name.Variable:  "$darwin_filelist"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t      "
Name.Variable:  "darwin_files"
Operator:  "="
Literal.String.Backtick:  "`"
Text:  "find unfat-"
Name.Variable:  "$$"
Text:  " "
Name.Tag:  "-name"
Text:  " "
Name.Variable:  "$darwin_file"
Text:  " "
Name.Tag:  "-print"
Text:  " | "
Name.Variable:  "$NL2SP"
Literal.String.Backtick:  "`"
Text:  "<newline>\t      lipo "
Name.Tag:  "-create"
Text:  " "
Name.Tag:  "-output"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$darwin_file"
Literal.String.Double:  "\""
Text:  " "
Name.Variable:  "$darwin_files"
Text:  "<newline>\t    "
Keyword:  "done"
Text:  " "
Comment:  "# $darwin_filelist"
Text:  "<newline>\t    "
Keyword:  "${"
Name.Variable:  "rm"
Keyword:  "}"
Text:  "r unfat-"
Name.Variable:  "$$"
Text:  "<newline>\t    "
Name.Builtin:  "cd"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$darwin_orig_dir"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "else<newline>\t    "
Name.Builtin:  "cd"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$darwin_orig_dir"
Literal.String.Double:  "\""
Text:  "<newline> \t    func_extract_an_archive "
Literal.String.Double:  "\""
Name.Variable:  "$my_xdir"
Literal.String.Double:  "\""
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$my_xabs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi"
Text:  " "
Comment:  "# $darwin_arches"
Text:  "<newline>\t"
Keyword:  "fi"
Text:  " "
Comment:  "# $run"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>        func_extract_an_archive "
Literal.String.Double:  "\""
Name.Variable:  "$my_xdir"
Literal.String.Double:  "\""
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$my_xabs"
Literal.String.Double:  "\""
Text:  "<newline>        "
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  "<newline>      "
Name.Variable:  "my_oldobjs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$my_oldobjs"
Literal.String.Double:  " \""
Literal.String.Backtick:  "`"
Text:  "find "
Name.Variable:  "$my_xdir"
Text:  " "
Name.Tag:  "-name"
Text:  " "
Literal.String.Escape:  "\\*"
Text:  "."
Name.Variable:  "$objext"
Text:  " "
Name.Tag:  "-print"
Text:  " "
Name.Tag:  "-o"
Text:  " "
Name.Tag:  "-name"
Text:  " "
Literal.String.Escape:  "\\*"
Text:  ".lo "
Name.Tag:  "-print"
Text:  " | "
Name.Variable:  "$NL2SP"
Literal.String.Backtick:  "`"
Text:  "<newline>    "
Keyword:  "done<newline>    "
Name.Variable:  "func_extract_archives_result"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$my_oldobjs"
Literal.String.Double:  "\""
Text:  "<newline>"
Operator:  "}"
Text:  "<newline>"
Comment:  "# End of Shell function definitions"
Text:  "<newline>"
Comment:  "#####################################"
Text:  "<newline><newline>"
Comment:  "# Darwin sucks"
Text:  "<newline>"
Name.Builtin:  "eval "
Name.Variable:  "std_shrext"
Operator:  "="
Literal.String.Escape:  "\\\""
Name.Variable:  "$shrext_cmds"
Literal.String.Escape:  "\\\""
Text:  "<newline><newline>"
Name.Variable:  "disable_libs"
Operator:  "="
Text:  "no<newline><newline>"
Comment:  "# Parse our command line options once, thoroughly."
Text:  "<newline>"
Keyword:  "while "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"$#\""
Text:  " "
Name.Tag:  "-gt"
Text:  " 0<newline>"
Keyword:  "do<newline>  "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$1"
Literal.String.Double:  "\""
Text:  "<newline>  "
Name.Builtin:  "shift<newline><newline>  "
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>  -"
Keyword:  "*"
Operator:  "="
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "optarg"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/[-_a-zA-Z0-9]*=//'"
Literal.String.Backtick:  "`"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>  "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "optarg"
Operator:  "="
Text:  " "
Punctuation:  ";;"
Text:  "<newline>  "
Keyword:  "esac"
Text:  "<newline><newline>  "
Comment:  "# If the previous option needs an argument, assign it."
Text:  "<newline>  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>    case"
Text:  " "
Name.Variable:  "$prev"
Text:  " "
Keyword:  "in<newline>    "
Text:  "execute_dlfiles"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "execute_dlfiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$execute_dlfiles"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    tag"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "tagname"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>      "
Name.Variable:  "preserve_args"
Operator:  "="
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "preserve_args"
Keyword:  "}"
Literal.String.Double:  "="
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline><newline>      "
Comment:  "# Check whether tagname contains only valid characters"
Text:  "<newline>      "
Keyword:  "case"
Text:  " "
Name.Variable:  "$tagname"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Keyword:  "*"
Operator:  "[!"
Name.Tag:  "-_A-Za-z0-9"
Text:  ",/]"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$progname"
Literal.String.Double:  ": invalid tag name: "
Name.Variable:  "$tagname"
Literal.String.Double:  "\""
Text:  " 1>&2<newline>\t"
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  "<newline><newline>      "
Keyword:  "case"
Text:  " "
Name.Variable:  "$tagname"
Text:  " "
Keyword:  "in<newline>      "
Text:  "CC"
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "# Don't test for the \"default\" C tag, as we know, it's there, but"
Text:  "<newline>\t"
Comment:  "# not specially marked."
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "grep"
Text:  " "
Literal.String.Double:  "\"^# ### BEGIN LIBTOOL TAG CONFIG: "
Name.Variable:  "$tagname"
Literal.String.Double:  "$\""
Text:  " < "
Literal.String.Double:  "\""
Name.Variable:  "$progpath"
Literal.String.Double:  "\""
Text:  " "
Operator:  ">"
Text:  " /dev/null"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  "
Name.Variable:  "taglist"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$taglist"
Literal.String.Double:  " "
Name.Variable:  "$tagname"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Comment:  "# Evaluate the configuration."
Text:  "<newline>\t  "
Name.Builtin:  "eval"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Keyword:  "${"
Name.Variable:  "SED"
Keyword:  "}"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'/^# ### BEGIN LIBTOOL TAG CONFIG: '"
Name.Variable:  "$tagname"
Literal.String.Single:  "'$/,/^# ### END LIBTOOL TAG CONFIG: '"
Name.Variable:  "$tagname"
Literal.String.Single:  "'$/p'"
Text:  " < "
Name.Variable:  "$progpath"
Literal.String.Backtick:  "`"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "else"
Text:  "<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$progname"
Literal.String.Double:  ": ignoring unknown tag "
Name.Variable:  "$tagname"
Literal.String.Double:  "\""
Text:  " 1>&2<newline>\t"
Keyword:  "fi"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>      "
Name.Builtin:  "eval"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "="
Literal.String.Escape:  "\\$"
Literal.String.Double:  "arg\""
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline><newline>    "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "prevopt"
Operator:  "="
Text:  "<newline>    "
Keyword:  "continue<newline>  fi"
Text:  "<newline><newline>  "
Comment:  "# Have we seen a non-optional argument yet?"
Text:  "<newline>  "
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Name.Tag:  "--help"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "show_help"
Operator:  "="
Name.Builtin:  "yes"
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Name.Tag:  "--version"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$PROGRAM"
Literal.String.Double:  " (GNU "
Name.Variable:  "$PACKAGE"
Literal.String.Double:  ") "
Name.Variable:  "$VERSION$TIMESTAMP"
Literal.String.Double:  "\""
Text:  "<newline>    "
Name.Variable:  "$echo"
Text:  "<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"Copyright (C) 2005  Free Software Foundation, Inc.\""
Text:  "<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"This is free software; see the source for copying conditions.  There is NO\""
Text:  "<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\""
Text:  "<newline>    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$?"
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Name.Tag:  "--config"
Punctuation:  ")"
Text:  "<newline>    "
Keyword:  "${"
Name.Variable:  "SED"
Keyword:  "}"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'1,/^# ### BEGIN LIBTOOL CONFIG/d'"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'/^# ### END LIBTOOL CONFIG/,$d'"
Text:  " "
Name.Variable:  "$progpath"
Text:  "<newline>    "
Comment:  "# Now print the configurations for the tags."
Text:  "<newline>    "
Keyword:  "for "
Text:  "tagname "
Keyword:  "in"
Text:  " "
Name.Variable:  "$taglist"
Punctuation:  ";"
Text:  " "
Keyword:  "do"
Text:  "<newline>      "
Keyword:  "${"
Name.Variable:  "SED"
Keyword:  "}"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\"/^# ### BEGIN LIBTOOL TAG CONFIG: "
Name.Variable:  "$tagname$/"
Literal.String.Double:  ",/^# ### END LIBTOOL TAG CONFIG: "
Name.Variable:  "$tagname$/"
Literal.String.Double:  "p\""
Text:  " < "
Literal.String.Double:  "\""
Name.Variable:  "$progpath"
Literal.String.Double:  "\""
Text:  "<newline>    "
Keyword:  "done<newline>    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$?"
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Name.Tag:  "--debug"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$progname"
Literal.String.Double:  ": enabling shell trace mode\""
Text:  "<newline>    "
Name.Builtin:  "set"
Text:  " "
Name.Tag:  "-x"
Text:  "<newline>    "
Name.Variable:  "preserve_args"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$preserve_args"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Name.Tag:  "--dry-run"
Text:  " "
Punctuation:  "|"
Text:  " "
Name.Tag:  "-n"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "run"
Operator:  "="
Text:  ":<newline>    "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Name.Tag:  "--features"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"host: "
Name.Variable:  "$host"
Literal.String.Double:  "\""
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_libtool_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"enable shared libraries\""
Text:  "<newline>    "
Keyword:  "else"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"disable shared libraries\""
Text:  "<newline>    "
Keyword:  "fi<newline>    if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_old_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"enable static libraries\""
Text:  "<newline>    "
Keyword:  "else"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"disable static libraries\""
Text:  "<newline>    "
Keyword:  "fi<newline>    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$?"
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Name.Tag:  "--finish"
Punctuation:  ")"
Text:  " "
Name.Variable:  "mode"
Operator:  "="
Literal.String.Double:  "\"finish\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Name.Tag:  "--mode"
Punctuation:  ")"
Text:  " "
Name.Variable:  "prevopt"
Operator:  "="
Literal.String.Double:  "\"--mode\""
Text:  " "
Name.Variable:  "prev"
Operator:  "="
Text:  "mode "
Punctuation:  ";;"
Text:  "<newline>  "
Name.Tag:  "--mode"
Operator:  "="
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "mode"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$optarg"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Name.Tag:  "--preserve-dup-deps"
Punctuation:  ")"
Text:  " "
Name.Variable:  "duplicate_deps"
Operator:  "="
Literal.String.Double:  "\"yes\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Name.Tag:  "--quiet"
Text:  " "
Punctuation:  "|"
Text:  " "
Name.Tag:  "--silent"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "show"
Operator:  "="
Text:  ":<newline>    "
Name.Variable:  "preserve_args"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$preserve_args"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Name.Tag:  "--tag"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "prevopt"
Operator:  "="
Literal.String.Double:  "\"--tag\""
Text:  "<newline>    "
Name.Variable:  "prev"
Operator:  "="
Text:  "tag<newline>    "
Name.Variable:  "preserve_args"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$preserve_args"
Literal.String.Double:  " --tag\""
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline>  "
Name.Tag:  "--tag"
Operator:  "="
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>    "
Name.Builtin:  "set "
Text:  "tag "
Literal.String.Double:  "\""
Name.Variable:  "$optarg"
Literal.String.Double:  "\""
Text:  " "
Keyword:  "${"
Name.Variable:  "1"
Punctuation:  "+"
Literal.String.Double:  "\""
Name.Variable:  "$@"
Literal.String.Double:  "\""
Keyword:  "}"
Text:  "<newline>    "
Name.Builtin:  "shift<newline>    "
Name.Variable:  "prev"
Operator:  "="
Text:  "tag<newline>    "
Name.Variable:  "preserve_args"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$preserve_args"
Literal.String.Double:  " --tag\""
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Name.Tag:  "-dlopen"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "prevopt"
Operator:  "="
Literal.String.Double:  "\"-dlopen\""
Text:  "<newline>    "
Name.Variable:  "prev"
Operator:  "="
Text:  "execute_dlfiles<newline>    "
Punctuation:  ";;"
Text:  "<newline><newline>  -"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": unrecognized option "
Literal.String.Escape:  "\\`"
Name.Variable:  "$arg"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$help"
Literal.String.Double:  "\""
Text:  " 1>&2<newline>    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "nonopt"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>    "
Name.Builtin:  "break"
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline>  "
Keyword:  "esac"
Text:  "<newline>"
Keyword:  "done<newline><newline>if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prevopt"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": option "
Literal.String.Escape:  "\\`"
Name.Variable:  "$prevopt"
Literal.String.Double:  "' requires an argument\""
Text:  " 1>&2<newline>  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$help"
Literal.String.Double:  "\""
Text:  " 1>&2<newline>  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>"
Keyword:  "fi<newline><newline>case"
Text:  " "
Name.Variable:  "$disable_libs"
Text:  " "
Keyword:  "in<newline>"
Text:  "no"
Punctuation:  ")"
Text:  " <newline>  "
Punctuation:  ";;"
Text:  "<newline>shared"
Punctuation:  ")"
Text:  "<newline>  "
Name.Variable:  "build_libtool_libs"
Operator:  "="
Text:  "no<newline>  "
Name.Variable:  "build_old_libs"
Operator:  "="
Name.Builtin:  "yes"
Text:  "<newline>  "
Punctuation:  ";;"
Text:  "<newline>static"
Punctuation:  ")"
Text:  "<newline>  "
Name.Variable:  "build_old_libs"
Operator:  "="
Literal.String.Backtick:  "`"
Keyword:  "case"
Text:  " "
Name.Variable:  "$build_libtool_libs"
Text:  " "
Keyword:  "in "
Name.Builtin:  "yes"
Punctuation:  ")"
Text:  " "
Name.Builtin:  "echo "
Text:  "no"
Punctuation:  ";;"
Text:  " "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Builtin:  "echo yes"
Punctuation:  ";;"
Text:  " "
Keyword:  "esac"
Literal.String.Backtick:  "`"
Text:  "<newline>  "
Punctuation:  ";;"
Text:  "<newline>"
Keyword:  "esac"
Text:  "<newline><newline>"
Comment:  "# If this variable is set in any of the actions, the command in it"
Text:  "<newline>"
Comment:  "# will be execed at the end.  This prevents here-documents from being"
Text:  "<newline>"
Comment:  "# left over by shells."
Text:  "<newline>"
Name.Variable:  "exec_cmd"
Operator:  "="
Text:  "<newline><newline>"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$show_help"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline><newline>  "
Comment:  "# Infer the operation mode."
Text:  "<newline>  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$mode"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** Warning: inferring the mode of operation is deprecated.\""
Text:  " 1>&2<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** Future versions of Libtool will require --mode=MODE be specified.\""
Text:  " 1>&2<newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$nonopt"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Keyword:  "*"
Text:  "cc "
Punctuation:  "|"
Text:  " cc"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "++ "
Punctuation:  "|"
Text:  " gcc"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Name.Tag:  "-gcc"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " g++"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " xlc"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "mode"
Operator:  "="
Name.Builtin:  "link<newline>      "
Keyword:  "for "
Text:  "arg<newline>      "
Keyword:  "do<newline>\tcase"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Name.Tag:  "-c"
Punctuation:  ")"
Text:  "<newline>\t   "
Name.Variable:  "mode"
Operator:  "="
Text:  "compile<newline>\t   "
Name.Builtin:  "break"
Text:  "<newline>\t   "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>      "
Keyword:  "done"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  "db "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "dbx "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "strace "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "truss"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "mode"
Operator:  "="
Text:  "execute<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Name.Builtin:  "install"
Keyword:  "*"
Punctuation:  "|"
Name.Builtin:  "cp"
Punctuation:  "|"
Name.Builtin:  "mv"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "mode"
Operator:  "="
Name.Builtin:  "install"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Name.Builtin:  "rm"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "mode"
Operator:  "="
Text:  "uninstall<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>      "
Comment:  "# If we have no mode, but dlfiles were specified, then do execute mode."
Text:  "<newline>      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$execute_dlfiles"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "mode"
Operator:  "="
Text:  "execute<newline><newline>      "
Comment:  "# Just use the default operation mode."
Text:  "<newline>      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$mode"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\tif "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$nonopt"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": warning: cannot infer operation mode from "
Literal.String.Escape:  "\\`"
Name.Variable:  "$nonopt"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>\t"
Keyword:  "else"
Text:  "<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": warning: cannot infer operation mode without MODE-ARGS\""
Text:  " 1>&2<newline>\t"
Keyword:  "fi<newline>      fi"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline>  "
Keyword:  "fi"
Text:  "<newline><newline>  "
Comment:  "# Only execute mode is allowed to have -dlopen flags."
Text:  "<newline>  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$execute_dlfiles"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$mode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " execute"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": unrecognized option "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-dlopen'\""
Text:  " 1>&2<newline>    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$help"
Literal.String.Double:  "\""
Text:  " 1>&2<newline>    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>  "
Keyword:  "fi"
Text:  "<newline><newline>  "
Comment:  "# Change the help message to a mode-specific one."
Text:  "<newline>  "
Name.Variable:  "generic_help"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$help"
Literal.String.Double:  "\""
Text:  "<newline>  "
Name.Builtin:  "help"
Operator:  "="
Literal.String.Double:  "\"Try "
Literal.String.Escape:  "\\`"
Name.Variable:  "$modename"
Literal.String.Double:  " --help --mode="
Name.Variable:  "$mode"
Literal.String.Double:  "' for more information.\""
Text:  "<newline><newline>  "
Comment:  "# These modes are in order of execution frequency so that they run quickly."
Text:  "<newline>  "
Keyword:  "case"
Text:  " "
Name.Variable:  "$mode"
Text:  " "
Keyword:  "in"
Text:  "<newline>  "
Comment:  "# libtool compile mode"
Text:  "<newline>  compile"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "modename"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": compile\""
Text:  "<newline>    "
Comment:  "# Get the compilation command and the source file."
Text:  "<newline>    "
Name.Variable:  "base_compile"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "srcfile"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$nonopt"
Literal.String.Double:  "\""
Text:  "  "
Comment:  "#  always keep a non-empty value in \"srcfile\""
Text:  "<newline>    "
Name.Variable:  "suppress_opt"
Operator:  "="
Name.Builtin:  "yes<newline>    "
Name.Variable:  "suppress_output"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "arg_mode"
Operator:  "="
Text:  "normal<newline>    "
Name.Variable:  "libobj"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "later"
Operator:  "="
Text:  "<newline><newline>    "
Keyword:  "for "
Text:  "arg<newline>    "
Keyword:  "do<newline>      case"
Text:  " "
Name.Variable:  "$arg_mode"
Text:  " "
Keyword:  "in<newline>      "
Text:  "arg  "
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "# do not \"continue\".  Instead, add this to base_compile"
Text:  "<newline>\t"
Name.Variable:  "lastarg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "arg_mode"
Operator:  "="
Text:  "normal<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      target "
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "libobj"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "arg_mode"
Operator:  "="
Text:  "normal<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      normal "
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "# Accept any command-line options."
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Name.Tag:  "-o"
Punctuation:  ")"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$libobj"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": you cannot specify "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-o' more than once\""
Text:  " 1>&2<newline>\t    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  "
Name.Variable:  "arg_mode"
Operator:  "="
Text:  "target<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline><newline>\t"
Name.Tag:  "-static"
Text:  " "
Punctuation:  "|"
Text:  " "
Name.Tag:  "-prefer-pic"
Text:  " "
Punctuation:  "|"
Text:  " "
Name.Tag:  "-prefer-non-pic"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "later"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$later"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline><newline>\t"
Name.Tag:  "-no-suppress"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "suppress_opt"
Operator:  "="
Text:  "no<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline><newline>\t"
Name.Tag:  "-Xcompiler"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "arg_mode"
Operator:  "="
Text:  "arg  "
Comment:  "#  the next one goes into the \"base_compile\" arg list"
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "      "
Comment:  "#  The current \"srcfile\" will either be retained or"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "            "
Comment:  "#  replaced later.  I would guess that would be a bug."
Text:  "<newline><newline>\t"
Name.Tag:  "-Wc"
Text:  ","
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "args"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\"s/^-Wc,//\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t  "
Name.Variable:  "lastarg"
Operator:  "="
Text:  "<newline>\t  "
Name.Variable:  "save_ifs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$IFS"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Single:  "','"
Text:  "<newline> \t  "
Keyword:  "for "
Text:  "arg "
Keyword:  "in"
Text:  " "
Name.Variable:  "$args"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t    "
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$save_ifs"
Literal.String.Double:  "\""
Text:  "<newline><newline>\t    "
Comment:  "# Double-quote args containing other shell metacharacters."
Text:  "<newline>\t    "
Comment:  "# Many Bourne shells cannot handle close brackets correctly"
Text:  "<newline>\t    "
Comment:  "# in scan sets, so we specify it separately."
Text:  "<newline>\t    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t      "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Name.Variable:  "$arg"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline>\t    "
Name.Variable:  "lastarg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$lastarg"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "done<newline>\t  "
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$save_ifs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "lastarg"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$lastarg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\"s/^ //\""
Literal.String.Backtick:  "`"
Text:  "<newline><newline>\t  "
Comment:  "# Add the arguments to base_compile."
Text:  "<newline>\t  "
Name.Variable:  "base_compile"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$base_compile"
Literal.String.Double:  " "
Name.Variable:  "$lastarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline><newline>\t"
Keyword:  "*"
Text:  " "
Punctuation:  ")"
Text:  "<newline>\t  "
Comment:  "# Accept the current argument as the source file."
Text:  "<newline>\t  "
Comment:  "# The previous \"srcfile\" becomes the current argument."
Text:  "<newline>\t  "
Comment:  "#"
Text:  "<newline>\t  "
Name.Variable:  "lastarg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$srcfile"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "srcfile"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "  "
Comment:  "#  case $arg"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  "    "
Comment:  "#  case $arg_mode"
Text:  "<newline><newline>      "
Comment:  "# Aesthetically quote the previous argument."
Text:  "<newline>      "
Name.Variable:  "lastarg"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$lastarg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$sed_quote_subst"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  "<newline><newline>      "
Keyword:  "case"
Text:  " "
Name.Variable:  "$lastarg"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Comment:  "# Double-quote args containing other shell metacharacters."
Text:  "<newline>      "
Comment:  "# Many Bourne shells cannot handle close brackets correctly"
Text:  "<newline>      "
Comment:  "# in scan sets, and some SunOS ksh mistreat backslash-escaping"
Text:  "<newline>      "
Comment:  "# in scan sets (worked around with variable expansion),"
Text:  "<newline>      "
Comment:  "# and furthermore cannot handle '|' '&' '(' ')' in scan sets "
Text:  "<newline>      "
Comment:  "# at all, so we specify them separately."
Text:  "<newline>      "
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "lastarg"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Name.Variable:  "$lastarg"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  "<newline><newline>      "
Name.Variable:  "base_compile"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$base_compile"
Literal.String.Double:  " "
Name.Variable:  "$lastarg"
Literal.String.Double:  "\""
Text:  "<newline>    "
Keyword:  "done"
Text:  " "
Comment:  "# for arg"
Text:  "<newline><newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg_mode"
Text:  " "
Keyword:  "in<newline>    "
Text:  "arg"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": you must specify an argument for -Xcompile\""
Text:  "<newline>      "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    target"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": you must specify a target with "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-o'\""
Text:  " 1>&2<newline>      "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>      "
Comment:  "# Get the name of the library object."
Text:  "<newline>      "
Operator:  "["
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$libobj"
Literal.String.Double:  "\""
Text:  " "
Operator:  "]"
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "libobj"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$srcfile"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%^.*/%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline><newline>    "
Comment:  "# Recognize several different file suffixes."
Text:  "<newline>    "
Comment:  "# If the user specifies -o file.o, it is replaced with file.lo"
Text:  "<newline>    "
Name.Variable:  "xform"
Operator:  "="
Literal.String.Single:  "'[cCFSifmso]'"
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$libobj"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".ada"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "ada "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".adb"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "adb "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".ads"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "ads "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".asm"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "asm "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".c++"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "c++ "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".cc"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "cc "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".ii"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "ii "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".class"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "class "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".cpp"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "cpp "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".cxx"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "cxx "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".f90"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "f90 "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".for"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Keyword:  "for"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".java"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xform"
Operator:  "="
Text:  "java "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline><newline>    "
Name.Variable:  "libobj"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$libobj"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\"s/"
Literal.String.Escape:  "\\."
Name.Variable:  "$xform$/"
Literal.String.Double:  ".lo/\""
Literal.String.Backtick:  "`"
Text:  "<newline><newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$libobj"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".lo"
Punctuation:  ")"
Text:  " "
Name.Variable:  "obj"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$libobj"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lo2o"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": cannot determine name of library object from "
Literal.String.Escape:  "\\`"
Name.Variable:  "$libobj"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>      "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline><newline>    func_infer_tag "
Name.Variable:  "$base_compile"
Text:  "<newline><newline>    "
Keyword:  "for "
Text:  "arg "
Keyword:  "in"
Text:  " "
Name.Variable:  "$later"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>      case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Name.Tag:  "-static"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "build_old_libs"
Operator:  "="
Name.Builtin:  "yes<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-prefer-pic"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "pic_mode"
Operator:  "="
Name.Builtin:  "yes<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-prefer-non-pic"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "pic_mode"
Operator:  "="
Text:  "no<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  "<newline>    "
Keyword:  "done<newline><newline>    "
Name.Variable:  "qlibobj"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$libobj"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$sed_quote_subst"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$qlibobj"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "qlibobj"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Name.Variable:  "$qlibobj"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline>    "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$libobj"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$qlibobj"
Literal.String.Double:  "\""
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t"
Operator:  "&&"
Text:  " "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$libobj"
Literal.String.Double:  "\""
Text:  " | "
Name.Builtin:  "grep"
Text:  " "
Literal.String.Single:  "'[]~#^*{};<>?\"'"
Literal.String.Double:  "\"'\""
Literal.String.Single:  "' \t&()|`$[]'"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t"
Operator:  "&&"
Text:  " "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": libobj name "
Literal.String.Escape:  "\\`"
Name.Variable:  "$libobj"
Literal.String.Double:  "' may not contain shell special characters.\""
Text:  "<newline>    "
Name.Variable:  "objname"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$obj"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%^.*/%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>    "
Name.Variable:  "xdir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$obj"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%/[^/]*$%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$xdir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$obj"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      "
Name.Variable:  "xdir"
Operator:  "="
Text:  "<newline>    "
Keyword:  "else<newline>      "
Name.Variable:  "xdir"
Operator:  "="
Name.Variable:  "$xdir"
Text:  "/<newline>    "
Keyword:  "fi<newline>    "
Name.Variable:  "lobj"
Operator:  "="
Keyword:  "${"
Name.Variable:  "xdir"
Keyword:  "}"
Name.Variable:  "$objdir"
Text:  "/"
Name.Variable:  "$objname"
Text:  "<newline><newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$base_compile"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": you must specify a compilation command\""
Text:  " 1>&2<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$help"
Literal.String.Double:  "\""
Text:  " 1>&2<newline>      "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>    "
Keyword:  "fi"
Text:  "<newline><newline>    "
Comment:  "# Delete any leftover library objects."
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_old_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      "
Name.Variable:  "removelist"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$obj"
Literal.String.Double:  " "
Name.Variable:  "$lobj"
Literal.String.Double:  " "
Name.Variable:  "$libobj"
Literal.String.Double:  " "
Keyword:  "${"
Name.Variable:  "libobj"
Keyword:  "}"
Literal.String.Double:  "T\""
Text:  "<newline>    "
Keyword:  "else<newline>      "
Name.Variable:  "removelist"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$lobj"
Literal.String.Double:  " "
Name.Variable:  "$libobj"
Literal.String.Double:  " "
Keyword:  "${"
Name.Variable:  "libobj"
Keyword:  "}"
Literal.String.Double:  "T\""
Text:  "<newline>    "
Keyword:  "fi"
Text:  "<newline><newline>    "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Name.Variable:  "$removelist"
Text:  "<newline>    "
Name.Builtin:  "trap"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$run"
Literal.String.Double:  " "
Name.Variable:  "$rm"
Literal.String.Double:  " "
Name.Variable:  "$removelist"
Literal.String.Double:  "; exit "
Name.Variable:  "$EXIT_FAILURE"
Literal.String.Double:  "\""
Text:  " 1 2 15<newline><newline>    "
Comment:  "# On Cygwin there's no \"real\" PIC flag so we must build both object types"
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$host_os"
Text:  " "
Keyword:  "in<newline>    "
Text:  "cygwin"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " mingw"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " pw32"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " os2"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "pic_mode"
Operator:  "="
Text:  "default<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_mode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$deplibs_check_method"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " pass_all"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Comment:  "# non-PIC code in shared libraries is not supported"
Text:  "<newline>      "
Name.Variable:  "pic_mode"
Operator:  "="
Text:  "default<newline>    "
Keyword:  "fi"
Text:  "<newline><newline>    "
Comment:  "# Calculate the filename of the output object if compiler does"
Text:  "<newline>    "
Comment:  "# not support -o with -c"
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$compiler_c_o"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      "
Name.Variable:  "output_obj"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$srcfile"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%^.*/%%'"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%\\.[^.]*$%%'"
Literal.String.Backtick:  "`"
Text:  "."
Keyword:  "${"
Name.Variable:  "objext"
Keyword:  "}"
Text:  "<newline>      "
Name.Variable:  "lockfile"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$output_obj"
Literal.String.Double:  ".lock\""
Text:  "<newline>      "
Name.Variable:  "removelist"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$removelist"
Literal.String.Double:  " "
Name.Variable:  "$output_obj"
Literal.String.Double:  " "
Name.Variable:  "$lockfile"
Literal.String.Double:  "\""
Text:  "<newline>      "
Name.Builtin:  "trap"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$run"
Literal.String.Double:  " "
Name.Variable:  "$rm"
Literal.String.Double:  " "
Name.Variable:  "$removelist"
Literal.String.Double:  "; exit "
Name.Variable:  "$EXIT_FAILURE"
Literal.String.Double:  "\""
Text:  " 1 2 15<newline>    "
Keyword:  "else<newline>      "
Name.Variable:  "output_obj"
Operator:  "="
Text:  "<newline>      "
Name.Variable:  "need_locks"
Operator:  "="
Text:  "no<newline>      "
Name.Variable:  "lockfile"
Operator:  "="
Text:  "<newline>    "
Keyword:  "fi"
Text:  "<newline><newline>    "
Comment:  "# Lock this critical section if it is needed"
Text:  "<newline>    "
Comment:  "# We use this script file to make the link, it avoids creating a new file"
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$need_locks"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      until"
Text:  " "
Name.Variable:  "$run"
Text:  " "
Name.Builtin:  "ln"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$srcfile"
Literal.String.Double:  "\""
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lockfile"
Literal.String.Double:  "\""
Text:  " 2>/dev/null"
Punctuation:  ";"
Text:  " "
Keyword:  "do"
Text:  "<newline>\t"
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\"Waiting for "
Name.Variable:  "$lockfile"
Literal.String.Double:  " to be removed\""
Text:  "<newline>\t"
Name.Builtin:  "sleep "
Text:  "2<newline>      "
Keyword:  "done<newline>    elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$need_locks"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " warn"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lockfile"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\"
Literal.String.Double:  "<newline>*** ERROR, "
Name.Variable:  "$lockfile"
Literal.String.Double:  " exists and contains:<newline>"
Literal.String.Backtick:  "`"
Name.Builtin:  "cat"
Text:  " "
Name.Variable:  "$lockfile"
Text:  " 2>/dev/null"
Literal.String.Backtick:  "`"
Literal.String.Double:  "<newline><newline>This indicates that another process is trying to use the same<newline>temporary object file, and libtool could not work around it because<newline>your compiler does not support "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-c' and "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-o' together.  If you<newline>repeat this compilation, it may succeed, by chance, but you had better<newline>avoid parallel builds (make -j) in this platform, or get a better<newline>compiler.\""
Text:  "<newline><newline>\t"
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Name.Variable:  "$removelist"
Text:  "<newline>\t"
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>      "
Keyword:  "fi"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$srcfile"
Literal.String.Double:  "\""
Text:  " "
Operator:  ">"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lockfile"
Literal.String.Double:  "\""
Text:  "<newline>    "
Keyword:  "fi<newline><newline>    if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$fix_srcfile_path"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      "
Name.Builtin:  "eval "
Name.Variable:  "srcfile"
Operator:  "="
Literal.String.Escape:  "\\\""
Name.Variable:  "$fix_srcfile_path"
Literal.String.Escape:  "\\\""
Text:  "<newline>    "
Keyword:  "fi<newline>    "
Name.Variable:  "qsrcfile"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$srcfile"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$sed_quote_subst"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$qsrcfile"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "qsrcfile"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Name.Variable:  "$qsrcfile"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline><newline>    "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$libobj"
Literal.String.Double:  "\""
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "libobj"
Keyword:  "}"
Literal.String.Double:  "T\""
Text:  "<newline><newline>    "
Comment:  "# Create a libtool object file (analogous to a \".la\" file),"
Text:  "<newline>    "
Comment:  "# but don't create it if we're doing a dry run."
Text:  "<newline>    "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$run"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "cat"
Text:  " "
Operator:  ">"
Text:  " "
Keyword:  "${"
Name.Variable:  "libobj"
Keyword:  "}"
Text:  "T "
Operator:  "<<"
Name.Constant:  "EOF"
Literal.String.Heredoc:  "<newline># "
Name.Variable:  "$libobj"
Literal.String.Heredoc:  " - a libtool object file<newline># Generated by "
Name.Variable:  "$PROGRAM"
Literal.String.Heredoc:  " - GNU "
Name.Variable:  "$PACKAGE"
Literal.String.Heredoc:  " "
Name.Variable:  "$VERSION$TIMESTAMP"
Literal.String.Heredoc:  "<newline>#<newline># Please DO NOT delete this file!<newline># It is necessary for linking the library.<newline><newline># Name of the PIC object.<newline>"
Name.Constant:  "EOF<newline><newline>"
Text:  "    "
Comment:  "# Only build a PIC object if we are building libtool libraries."
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_libtool_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Comment:  "# Without this assignment, base_compile gets emptied."
Text:  "<newline>      "
Name.Variable:  "fbsd_hideous_sh_bug"
Operator:  "="
Name.Variable:  "$base_compile"
Text:  "<newline><newline>      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_mode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t"
Name.Builtin:  "command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$base_compile"
Literal.String.Double:  " "
Name.Variable:  "$qsrcfile"
Literal.String.Double:  " "
Name.Variable:  "$pic_flag"
Literal.String.Double:  "\""
Text:  "<newline>      "
Keyword:  "else"
Text:  "<newline>\t"
Comment:  "# Don't build PIC code"
Text:  "<newline>\t"
Name.Builtin:  "command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$base_compile"
Literal.String.Double:  " "
Name.Variable:  "$qsrcfile"
Literal.String.Double:  "\""
Text:  "<newline>      "
Keyword:  "fi<newline><newline>      if "
Name.Builtin:  "test"
Text:  " "
Operator:  "!"
Text:  " "
Name.Tag:  "-d"
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "xdir"
Keyword:  "}"
Name.Variable:  "$objdir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t"
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$mkdir"
Literal.String.Double:  " "
Keyword:  "${"
Name.Variable:  "xdir"
Keyword:  "}"
Name.Variable:  "$objdir"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$mkdir"
Text:  " "
Keyword:  "${"
Name.Variable:  "xdir"
Keyword:  "}"
Name.Variable:  "$objdir"
Text:  "<newline>\t"
Name.Variable:  "exit_status"
Operator:  "="
Name.Variable:  "$?"
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$exit_status"
Literal.String.Double:  "\""
Text:  " "
Name.Tag:  "-ne"
Text:  " 0 "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Operator:  "!"
Text:  " "
Name.Tag:  "-d"
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "xdir"
Keyword:  "}"
Name.Variable:  "$objdir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$exit_status"
Text:  "<newline>\t"
Keyword:  "fi<newline>      fi<newline><newline>      if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$output_obj"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t"
Comment:  "# Place PIC objects in $objdir"
Text:  "<newline>\t"
Name.Builtin:  "command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$command"
Literal.String.Double:  " -o "
Name.Variable:  "$lobj"
Literal.String.Double:  "\""
Text:  "<newline>      "
Keyword:  "fi"
Text:  "<newline><newline>      "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lobj"
Literal.String.Double:  "\""
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$output_obj"
Literal.String.Double:  "\""
Text:  "<newline><newline>      "
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$command"
Literal.String.Double:  "\""
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Variable:  "$run"
Text:  " "
Name.Builtin:  "eval"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$command"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  " :<newline>      "
Keyword:  "else<newline>\t"
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$output_obj"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Name.Variable:  "$removelist"
Text:  "<newline>\t"
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>      "
Keyword:  "fi<newline><newline>      if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$need_locks"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " warn "
Operator:  "&&"
Text:  "<newline>\t "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Literal.String.Backtick:  "`"
Name.Builtin:  "cat"
Text:  " "
Name.Variable:  "$lockfile"
Text:  " 2>/dev/null"
Literal.String.Backtick:  "`"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$srcfile"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\"
Literal.String.Double:  "<newline>*** ERROR, "
Name.Variable:  "$lockfile"
Literal.String.Double:  " contains:<newline>"
Literal.String.Backtick:  "`"
Name.Builtin:  "cat"
Text:  " "
Name.Variable:  "$lockfile"
Text:  " 2>/dev/null"
Literal.String.Backtick:  "`"
Literal.String.Double:  "<newline><newline>but it should contain:<newline>"
Name.Variable:  "$srcfile"
Literal.String.Double:  "<newline><newline>This indicates that another process is trying to use the same<newline>temporary object file, and libtool could not work around it because<newline>your compiler does not support "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-c' and "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-o' together.  If you<newline>repeat this compilation, it may succeed, by chance, but you had better<newline>avoid parallel builds (make -j) in this platform, or get a better<newline>compiler.\""
Text:  "<newline><newline>\t"
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Name.Variable:  "$removelist"
Text:  "<newline>\t"
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>      "
Keyword:  "fi"
Text:  "<newline><newline>      "
Comment:  "# Just move the object if needed, then go on to compile the next one"
Text:  "<newline>      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$output_obj"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$output_obj"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$lobj"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t"
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$mv"
Literal.String.Double:  " "
Name.Variable:  "$output_obj"
Literal.String.Double:  " "
Name.Variable:  "$lobj"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$mv"
Text:  " "
Name.Variable:  "$output_obj"
Text:  " "
Name.Variable:  "$lobj"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  " :<newline>\t"
Keyword:  "else<newline>\t  "
Name.Variable:  "error"
Operator:  "="
Name.Variable:  "$?"
Text:  "<newline>\t  "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Name.Variable:  "$removelist"
Text:  "<newline>\t  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$error"
Text:  "<newline>\t"
Keyword:  "fi<newline>      fi"
Text:  "<newline><newline>      "
Comment:  "# Append the name of the PIC object to the libtool object file."
Text:  "<newline>      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$run"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "cat"
Text:  " "
Operator:  ">>"
Text:  " "
Keyword:  "${"
Name.Variable:  "libobj"
Keyword:  "}"
Text:  "T "
Operator:  "<<"
Literal.String.Heredoc:  "\""
Name.Constant:  "EOF"
Literal.String.Heredoc:  "\"<newline>pic_object='"
Name.Variable:  "$objdir"
Literal.String.Heredoc:  "/"
Name.Variable:  "$objname"
Literal.String.Heredoc:  "'<newline>"
Name.Constant:  "<newline>EOF<newline><newline>"
Text:  "      "
Comment:  "# Allow error messages only from the first compilation."
Text:  "<newline>      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$suppress_opt"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>        "
Name.Variable:  "suppress_output"
Operator:  "="
Literal.String.Single:  "' >/dev/null 2>&1'"
Text:  "<newline>      "
Keyword:  "fi<newline>    else"
Text:  "<newline>      "
Comment:  "# No PIC object so indicate it doesn't exist in the libtool"
Text:  "<newline>      "
Comment:  "# object file."
Text:  "<newline>      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$run"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "cat"
Text:  " "
Operator:  ">>"
Text:  " "
Keyword:  "${"
Name.Variable:  "libobj"
Keyword:  "}"
Text:  "T "
Operator:  "<<"
Literal.String.Heredoc:  "'"
Name.Constant:  "EOF"
Literal.String.Heredoc:  "'<newline>pic_object=none<newline>"
Name.Constant:  "<newline>EOF<newline>"
Text:  "    "
Keyword:  "fi"
Text:  "<newline><newline>    "
Comment:  "# Only build a position-dependent object if we build old libraries."
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_old_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_mode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t"
Comment:  "# Don't build PIC code"
Text:  "<newline>\t"
Name.Builtin:  "command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$base_compile"
Literal.String.Double:  " "
Name.Variable:  "$qsrcfile"
Literal.String.Double:  "\""
Text:  "<newline>      "
Keyword:  "else<newline>\t"
Name.Builtin:  "command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$base_compile"
Literal.String.Double:  " "
Name.Variable:  "$qsrcfile"
Literal.String.Double:  " "
Name.Variable:  "$pic_flag"
Literal.String.Double:  "\""
Text:  "<newline>      "
Keyword:  "fi<newline>      if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$compiler_c_o"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t"
Name.Builtin:  "command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$command"
Literal.String.Double:  " -o "
Name.Variable:  "$obj"
Literal.String.Double:  "\""
Text:  "<newline>      "
Keyword:  "fi"
Text:  "<newline><newline>      "
Comment:  "# Suppress compiler output if we already did a PIC compilation."
Text:  "<newline>      "
Name.Builtin:  "command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$command$suppress_output"
Literal.String.Double:  "\""
Text:  "<newline>      "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$obj"
Literal.String.Double:  "\""
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$output_obj"
Literal.String.Double:  "\""
Text:  "<newline>      "
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$command"
Literal.String.Double:  "\""
Text:  "<newline>      "
Keyword:  "if"
Text:  " "
Name.Variable:  "$run"
Text:  " "
Name.Builtin:  "eval"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$command"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  " :<newline>      "
Keyword:  "else"
Text:  "<newline>\t"
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Name.Variable:  "$removelist"
Text:  "<newline>\t"
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>      "
Keyword:  "fi<newline><newline>      if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$need_locks"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " warn "
Operator:  "&&"
Text:  "<newline>\t "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Literal.String.Backtick:  "`"
Name.Builtin:  "cat"
Text:  " "
Name.Variable:  "$lockfile"
Text:  " 2>/dev/null"
Literal.String.Backtick:  "`"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$srcfile"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Literal.String.Escape:  "\\"
Literal.String.Double:  "<newline>*** ERROR, "
Name.Variable:  "$lockfile"
Literal.String.Double:  " contains:<newline>"
Literal.String.Backtick:  "`"
Name.Builtin:  "cat"
Text:  " "
Name.Variable:  "$lockfile"
Text:  " 2>/dev/null"
Literal.String.Backtick:  "`"
Literal.String.Double:  "<newline><newline>but it should contain:<newline>"
Name.Variable:  "$srcfile"
Literal.String.Double:  "<newline><newline>This indicates that another process is trying to use the same<newline>temporary object file, and libtool could not work around it because<newline>your compiler does not support "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-c' and "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-o' together.  If you<newline>repeat this compilation, it may succeed, by chance, but you had better<newline>avoid parallel builds (make -j) in this platform, or get a better<newline>compiler.\""
Text:  "<newline><newline>\t"
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Name.Variable:  "$removelist"
Text:  "<newline>\t"
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>      "
Keyword:  "fi"
Text:  "<newline><newline>      "
Comment:  "# Just move the object if needed"
Text:  "<newline>      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$output_obj"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$output_obj"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$obj"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t"
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$mv"
Literal.String.Double:  " "
Name.Variable:  "$output_obj"
Literal.String.Double:  " "
Name.Variable:  "$obj"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$mv"
Text:  " "
Name.Variable:  "$output_obj"
Text:  " "
Name.Variable:  "$obj"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  " :<newline>\t"
Keyword:  "else<newline>\t  "
Name.Variable:  "error"
Operator:  "="
Name.Variable:  "$?"
Text:  "<newline>\t  "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Name.Variable:  "$removelist"
Text:  "<newline>\t  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$error"
Text:  "<newline>\t"
Keyword:  "fi<newline>      fi"
Text:  "<newline><newline>      "
Comment:  "# Append the name of the non-PIC object the libtool object file."
Text:  "<newline>      "
Comment:  "# Only append if the libtool object file exists."
Text:  "<newline>      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$run"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "cat"
Text:  " "
Operator:  ">>"
Text:  " "
Keyword:  "${"
Name.Variable:  "libobj"
Keyword:  "}"
Text:  "T "
Operator:  "<<"
Name.Constant:  "EOF"
Literal.String.Heredoc:  "<newline># Name of the non-PIC object.<newline>non_pic_object='"
Name.Variable:  "$objname"
Literal.String.Heredoc:  "'<newline>"
Name.Constant:  "<newline>EOF<newline>"
Text:  "    "
Keyword:  "else"
Text:  "<newline>      "
Comment:  "# Append the name of the non-PIC object the libtool object file."
Text:  "<newline>      "
Comment:  "# Only append if the libtool object file exists."
Text:  "<newline>      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$run"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "cat"
Text:  " "
Operator:  ">>"
Text:  " "
Keyword:  "${"
Name.Variable:  "libobj"
Keyword:  "}"
Text:  "T "
Operator:  "<<"
Name.Constant:  "EOF"
Literal.String.Heredoc:  "<newline># Name of the non-PIC object.<newline>non_pic_object=none<newline>"
Name.Constant:  "<newline>EOF<newline>"
Text:  "    "
Keyword:  "fi"
Text:  "<newline><newline>    "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$mv"
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "libobj"
Keyword:  "}"
Literal.String.Double:  "T\""
Text:  " "
Literal.String.Double:  "\""
Keyword:  "${"
Name.Variable:  "libobj"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  "<newline><newline>    "
Comment:  "# Unlock the critical section if it was locked"
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$need_locks"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$rm"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lockfile"
Literal.String.Double:  "\""
Text:  "<newline>    "
Keyword:  "fi<newline><newline>    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_SUCCESS"
Text:  "<newline>    "
Punctuation:  ";;"
Text:  "<newline><newline>  "
Comment:  "# libtool link mode"
Text:  "<newline>  "
Name.Builtin:  "link"
Text:  " "
Punctuation:  "|"
Text:  " relink"
Punctuation:  ")"
Text:  "<newline>    "
Name.Variable:  "modename"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": link\""
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$host"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-cygwin"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-mingw"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-pw32"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-os2"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>      "
Comment:  "# It is impossible to link a dll without this setting, and"
Text:  "<newline>      "
Comment:  "# we shouldn't force the makefile maintainer to figure out"
Text:  "<newline>      "
Comment:  "# which system we are compiling for in order to pass an extra"
Text:  "<newline>      "
Comment:  "# flag for every libtool invocation."
Text:  "<newline>      "
Comment:  "# allow_undefined=no"
Text:  "<newline><newline>      "
Comment:  "# FIXME: Unfortunately, there are problems with the above when trying"
Text:  "<newline>      "
Comment:  "# to make a dll which has undefined symbols, in which case not"
Text:  "<newline>      "
Comment:  "# even a static library is built.  For now, we need to specify"
Text:  "<newline>      "
Comment:  "# -no-undefined on the libtool link line when we can be certain"
Text:  "<newline>      "
Comment:  "# that all symbols are satisfied, otherwise we get a static library."
Text:  "<newline>      "
Name.Variable:  "allow_undefined"
Operator:  "="
Name.Builtin:  "yes"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "allow_undefined"
Operator:  "="
Name.Builtin:  "yes"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline>    "
Name.Variable:  "libtool_args"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$nonopt"
Literal.String.Double:  "\""
Text:  "<newline>    "
Name.Variable:  "base_compile"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$nonopt"
Literal.String.Double:  " "
Name.Variable:  "$@"
Literal.String.Double:  "\""
Text:  "<newline>    "
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$nonopt"
Literal.String.Double:  "\""
Text:  "<newline>    "
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$nonopt"
Literal.String.Double:  "\""
Text:  "<newline><newline>    "
Name.Variable:  "compile_rpath"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "finalize_rpath"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "compile_shlibpath"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "finalize_shlibpath"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "convenience"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "old_convenience"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "deplibs"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "old_deplibs"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "compiler_flags"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "linker_flags"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "dllsearchpath"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "lib_search_path"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "pwd"
Literal.String.Backtick:  "`"
Text:  "<newline>    "
Name.Variable:  "inst_prefix_dir"
Operator:  "="
Text:  "<newline><newline>    "
Name.Variable:  "avoid_version"
Operator:  "="
Text:  "no<newline>    "
Name.Variable:  "dlfiles"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "dlprefiles"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "dlself"
Operator:  "="
Text:  "no<newline>    "
Name.Variable:  "export_dynamic"
Operator:  "="
Text:  "no<newline>    "
Name.Variable:  "export_symbols"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "export_symbols_regex"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "generated"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "libobjs"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "ltlibs"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "module"
Operator:  "="
Text:  "no<newline>    "
Name.Variable:  "no_install"
Operator:  "="
Text:  "no<newline>    "
Name.Variable:  "objs"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "non_pic_objects"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "notinst_path"
Operator:  "="
Text:  " "
Comment:  "# paths that contain not-installed libtool libraries"
Text:  "<newline>    "
Name.Variable:  "precious_files_regex"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "prefer_static_libs"
Operator:  "="
Text:  "no<newline>    "
Name.Variable:  "preload"
Operator:  "="
Text:  "no<newline>    "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "prevarg"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "release"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "rpath"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "xrpath"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "perm_rpath"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "temp_rpath"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "thread_safe"
Operator:  "="
Text:  "no<newline>    "
Name.Variable:  "vinfo"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "vinfo_number"
Operator:  "="
Text:  "no<newline><newline>    func_infer_tag "
Name.Variable:  "$base_compile"
Text:  "<newline><newline>    "
Comment:  "# We need to know -static, to get the right output filenames."
Text:  "<newline>    "
Keyword:  "for "
Text:  "arg<newline>    "
Keyword:  "do<newline>      case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Name.Tag:  "-all-static"
Text:  " "
Punctuation:  "|"
Text:  " "
Name.Tag:  "-static"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X-all-static\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_libtool_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$link_static_flag"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": warning: complete static linking is impossible in this configuration\""
Text:  " 1>&2<newline>\t  "
Keyword:  "fi<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$link_static_flag"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "dlopen_self"
Operator:  "="
Name.Variable:  "$dlopen_self_static"
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  "
Name.Variable:  "prefer_static_libs"
Operator:  "="
Name.Builtin:  "yes<newline>\t"
Keyword:  "else<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_flag"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$link_static_flag"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "dlopen_self"
Operator:  "="
Name.Variable:  "$dlopen_self_static"
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  "
Name.Variable:  "prefer_static_libs"
Operator:  "="
Text:  "built<newline>\t"
Keyword:  "fi<newline>\t"
Name.Variable:  "build_libtool_libs"
Operator:  "="
Text:  "no<newline>\t"
Name.Variable:  "build_old_libs"
Operator:  "="
Name.Builtin:  "yes<newline>\tbreak"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  "<newline>    "
Keyword:  "done"
Text:  "<newline><newline>    "
Comment:  "# See if our shared archives depend on static archives."
Text:  "<newline>    "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$old_archive_from_new_cmds"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "build_old_libs"
Operator:  "="
Name.Builtin:  "yes"
Text:  "<newline><newline>    "
Comment:  "# Go through the arguments, transforming them on the way."
Text:  "<newline>    "
Keyword:  "while "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"$#\""
Text:  " "
Name.Tag:  "-gt"
Text:  " 0"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>      "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$1"
Literal.String.Double:  "\""
Text:  "<newline>      "
Name.Builtin:  "shift<newline>      "
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "qarg"
Operator:  "="
Literal.String.Escape:  "\\\""
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$sed_quote_subst"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Literal.String.Escape:  "\\\""
Text:  " "
Comment:  "### testsuite: skip nested quoting test"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "qarg"
Operator:  "="
Name.Variable:  "$arg"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  "<newline>      "
Name.Variable:  "libtool_args"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$libtool_args"
Literal.String.Double:  " "
Name.Variable:  "$qarg"
Literal.String.Double:  "\""
Text:  "<newline><newline>      "
Comment:  "# If the previous option needs an argument, assign it."
Text:  "<newline>      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\tcase"
Text:  " "
Name.Variable:  "$prev"
Text:  " "
Keyword:  "in<newline>\t"
Text:  "output"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " @OUTPUT@\""
Text:  "<newline>\t  "
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " @OUTPUT@\""
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline><newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$prev"
Text:  " "
Keyword:  "in<newline>\t"
Text:  "dlfiles|dlprefiles"
Punctuation:  ")"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$preload"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Comment:  "# Add the symbol object into the linking commands."
Text:  "<newline>\t    "
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " @SYMFILE@\""
Text:  "<newline>\t    "
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " @SYMFILE@\""
Text:  "<newline>\t    "
Name.Variable:  "preload"
Operator:  "="
Name.Builtin:  "yes<newline>\t  "
Keyword:  "fi<newline>\t  case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t  "
Keyword:  "*"
Text:  ".la "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  ".lo"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "  "
Comment:  "# We handle these cases below."
Text:  "<newline>\t  force"
Punctuation:  ")"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dlself"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "dlself"
Operator:  "="
Text:  "needless<newline>\t      "
Name.Variable:  "export_dynamic"
Operator:  "="
Name.Builtin:  "yes<newline>\t    "
Keyword:  "fi<newline>\t    "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t    "
Keyword:  "continue"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  self"
Punctuation:  ")"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlprefiles"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "dlself"
Operator:  "="
Name.Builtin:  "yes<newline>\t    "
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlfiles "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dlopen_self"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "dlself"
Operator:  "="
Name.Builtin:  "yes<newline>\t    "
Keyword:  "else<newline>\t      "
Name.Variable:  "dlself"
Operator:  "="
Text:  "needless<newline>\t      "
Name.Variable:  "export_dynamic"
Operator:  "="
Name.Builtin:  "yes<newline>\t    "
Keyword:  "fi<newline>\t    "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t    "
Keyword:  "continue"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlfiles"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "dlfiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlfiles"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "else<newline>\t      "
Name.Variable:  "dlprefiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlprefiles"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t    "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t    "
Keyword:  "continue"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\texpsyms"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "export_symbols"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Operator:  "!"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": symbol file "
Literal.String.Escape:  "\\`"
Name.Variable:  "$arg"
Literal.String.Double:  "' does not exist\""
Text:  "<newline>\t    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\texpsyms_regex"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "export_symbols_regex"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\tinst_prefix"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "inst_prefix_dir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\tprecious_regex"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "precious_files_regex"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\trelease"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "release"
Operator:  "="
Literal.String.Double:  "\"-"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\tobjectlist"
Punctuation:  ")"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "save_arg"
Operator:  "="
Name.Variable:  "$arg"
Text:  "<newline>\t    "
Name.Variable:  "moreargs"
Operator:  "="
Text:  "<newline>\t    "
Keyword:  "for "
Text:  "fil "
Keyword:  "in"
Text:  " "
Literal.String.Backtick:  "`"
Name.Builtin:  "cat"
Text:  " "
Name.Variable:  "$save_arg"
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Keyword:  "do"
Text:  "<newline>"
Comment:  "#\t      moreargs=\"$moreargs $fil\""
Text:  "<newline>\t      "
Name.Variable:  "arg"
Operator:  "="
Name.Variable:  "$fil"
Text:  "<newline>\t      "
Comment:  "# A libtool-controlled object."
Text:  "<newline><newline>\t      "
Comment:  "# Check to see that this really is a libtool object."
Text:  "<newline>\t      "
Keyword:  "if"
Text:  " "
Operator:  "("
Keyword:  "${"
Name.Variable:  "SED"
Keyword:  "}"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'2q'"
Text:  " "
Name.Variable:  "$arg"
Text:  " | "
Name.Builtin:  "grep"
Text:  " "
Literal.String.Double:  "\"^# Generated by .*"
Name.Variable:  "$PACKAGE"
Literal.String.Double:  "\""
Operator:  ")"
Text:  " "
Operator:  ">"
Text:  "/dev/null 2>&1"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t"
Name.Variable:  "pic_object"
Operator:  "="
Text:  "<newline>\t\t"
Name.Variable:  "non_pic_object"
Operator:  "="
Text:  "<newline><newline>\t\t"
Comment:  "# Read the .lo file"
Text:  "<newline>\t\t"
Comment:  "# If there is no directory component, then add one."
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t\t"
Keyword:  "*"
Text:  "/"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Literal.String.Escape:  "\\\\"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Builtin:  "."
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t\t"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Builtin:  "."
Text:  " ./"
Name.Variable:  "$arg"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t\t"
Keyword:  "esac"
Text:  "<newline><newline>\t\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t\t   "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  "<newline>\t\t   "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " none "
Operator:  "&&"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t\t   "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " none"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": cannot find name of object for "
Literal.String.Escape:  "\\`"
Name.Variable:  "$arg"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>\t\t  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t\t"
Keyword:  "fi"
Text:  "<newline><newline>\t\t"
Comment:  "# Extract subdirectory from the argument."
Text:  "<newline>\t\t"
Name.Variable:  "xdir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%/[^/]*$%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$xdir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t  "
Name.Variable:  "xdir"
Operator:  "="
Text:  "<newline>\t\t"
Keyword:  "else<newline>\t\t  "
Name.Variable:  "xdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$xdir"
Literal.String.Double:  "/\""
Text:  "<newline>\t\t"
Keyword:  "fi<newline><newline>\t\tif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " none"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t  "
Comment:  "# Prepend the subdirectory the object is found in."
Text:  "<newline>\t\t  "
Name.Variable:  "pic_object"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$xdir$pic_object"
Literal.String.Double:  "\""
Text:  "<newline><newline>\t\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlfiles"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t    if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_libtool_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dlopen_support"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t      "
Name.Variable:  "dlfiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlfiles"
Literal.String.Double:  " "
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t\t      "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t\t      "
Keyword:  "continue<newline>\t\t    else"
Text:  "<newline>\t\t      "
Comment:  "# If libtool objects are unsupported, then we need to preload."
Text:  "<newline>\t\t      "
Name.Variable:  "prev"
Operator:  "="
Text:  "dlprefiles<newline>\t\t    "
Keyword:  "fi<newline>\t\t  fi"
Text:  "<newline><newline>\t\t  "
Comment:  "# CHECK ME:  I think I busted this.  -Ossama"
Text:  "<newline>\t\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlprefiles"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t    "
Comment:  "# Preload the old-style object."
Text:  "<newline>\t\t    "
Name.Variable:  "dlprefiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlprefiles"
Literal.String.Double:  " "
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t\t    "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t\t  "
Keyword:  "fi"
Text:  "<newline><newline>\t\t  "
Comment:  "# A PIC object."
Text:  "<newline>\t\t  "
Name.Variable:  "libobjs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$libobjs"
Literal.String.Double:  " "
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t\t  "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "fi"
Text:  "<newline><newline>\t\t"
Comment:  "# Non-PIC object."
Text:  "<newline>\t\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " none"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t  "
Comment:  "# Prepend the subdirectory the object is found in."
Text:  "<newline>\t\t  "
Name.Variable:  "non_pic_object"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$xdir$non_pic_object"
Literal.String.Double:  "\""
Text:  "<newline><newline>\t\t  "
Comment:  "# A standard non-PIC object"
Text:  "<newline>\t\t  "
Name.Variable:  "non_pic_objects"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_objects"
Literal.String.Double:  " "
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " none "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t    "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t\t  "
Keyword:  "fi<newline>\t\telse"
Text:  "<newline>\t\t  "
Comment:  "# If the PIC object exists, use it instead."
Text:  "<newline>\t\t  "
Comment:  "# $xdir was prepended to $pic_object above."
Text:  "<newline>\t\t  "
Name.Variable:  "non_pic_object"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t\t  "
Name.Variable:  "non_pic_objects"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_objects"
Literal.String.Double:  " "
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "fi<newline>\t      else"
Text:  "<newline>\t\t"
Comment:  "# Only an error if not doing a dry-run."
Text:  "<newline>\t\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$run"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": "
Literal.String.Escape:  "\\`"
Name.Variable:  "$arg"
Literal.String.Double:  "' is not a valid libtool object\""
Text:  " 1>&2<newline>\t\t  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t\t"
Keyword:  "else"
Text:  "<newline>\t\t  "
Comment:  "# Dry-run case."
Text:  "<newline><newline>\t\t  "
Comment:  "# Extract subdirectory from the argument."
Text:  "<newline>\t\t  "
Name.Variable:  "xdir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%/[^/]*$%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$xdir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t    "
Name.Variable:  "xdir"
Operator:  "="
Text:  "<newline>\t\t  "
Keyword:  "else<newline>\t\t    "
Name.Variable:  "xdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$xdir"
Literal.String.Double:  "/\""
Text:  "<newline>\t\t  "
Keyword:  "fi<newline><newline>\t\t  "
Name.Variable:  "pic_object"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Keyword:  "${"
Name.Variable:  "xdir"
Keyword:  "}${"
Name.Variable:  "objdir"
Keyword:  "}"
Literal.String.Double:  "/"
Keyword:  "${"
Name.Variable:  "arg"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lo2o"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t\t  "
Name.Variable:  "non_pic_object"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Keyword:  "${"
Name.Variable:  "xdir"
Keyword:  "}${"
Name.Variable:  "arg"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lo2o"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t\t  "
Name.Variable:  "libobjs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$libobjs"
Literal.String.Double:  " "
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t\t  "
Name.Variable:  "non_pic_objects"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_objects"
Literal.String.Double:  " "
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "fi<newline>\t      fi<newline>\t    done<newline>\t  else"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": link input file "
Literal.String.Escape:  "\\`"
Name.Variable:  "$save_arg"
Literal.String.Double:  "' does not exist\""
Text:  "<newline>\t    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  "
Name.Variable:  "arg"
Operator:  "="
Name.Variable:  "$save_arg"
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\trpath "
Punctuation:  "|"
Text:  " xrpath"
Punctuation:  ")"
Text:  "<newline>\t  "
Comment:  "# We need an absolute path."
Text:  "<newline>\t  "
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t  "
Operator:  "["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Operator:  "["
Text:  "A-Za-z]:["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": only absolute run-paths are allowed\""
Text:  " 1>&2<newline>\t    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " rpath"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$rpath"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t    "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$arg"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "rpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$rpath"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline>\t  "
Keyword:  "else<newline>\t    case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$xrpath"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t    "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$arg"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xrpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$xrpath"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\txcompiler"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "compiler_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compiler_flags"
Literal.String.Double:  " "
Name.Variable:  "$qarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$qarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$qarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\txlinker"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "linker_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$linker_flags"
Literal.String.Double:  " "
Name.Variable:  "$qarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "compiler_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compiler_flags"
Literal.String.Double:  " "
Name.Variable:  "$wl$qarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$wl$qarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$wl$qarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\txcclinker"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "linker_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$linker_flags"
Literal.String.Double:  " "
Name.Variable:  "$qarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "compiler_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compiler_flags"
Literal.String.Double:  " "
Name.Variable:  "$qarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$qarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$qarg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\tshrext"
Punctuation:  ")"
Text:  "<newline>  \t  "
Name.Variable:  "shrext_cmds"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\tdarwin_framework|darwin_framework_skip"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"darwin_framework\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "compiler_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compiler_flags"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Builtin:  "eval"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "="
Literal.String.Escape:  "\\\"\\$"
Literal.String.Double:  "arg"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>      "
Keyword:  "fi"
Text:  " "
Comment:  "# test -n \"$prev\""
Text:  "<newline><newline>      "
Name.Variable:  "prevarg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline><newline>      "
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>      "
Name.Tag:  "-all-static"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$link_static_flag"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  "
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$link_static_flag"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$link_static_flag"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "fi<newline>\tcontinue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-allow-undefined"
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "# FIXME: remove this flag sometime in the future."
Text:  "<newline>\t"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-allow-undefined' is deprecated because it is the default\""
Text:  " 1>&2<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-avoid-version"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "avoid_version"
Operator:  "="
Name.Builtin:  "yes<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-dlopen"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "dlfiles<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-dlpreopen"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "dlprefiles<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-export-dynamic"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "export_dynamic"
Operator:  "="
Name.Builtin:  "yes<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-export-symbols"
Text:  " "
Punctuation:  "|"
Text:  " "
Name.Tag:  "-export-symbols-regex"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$export_symbols"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$export_symbols_regex"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": more than one -exported-symbols argument is not allowed\""
Text:  "<newline>\t  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t"
Keyword:  "fi<newline>\tif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X-export-symbols\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "expsyms<newline>\t"
Keyword:  "else<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "expsyms_regex<newline>\t"
Keyword:  "fi<newline>\tcontinue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-framework"
Punctuation:  "|"
Name.Tag:  "-arch"
Punctuation:  "|"
Name.Tag:  "-isysroot"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\" "
Name.Variable:  "$CC"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t  "
Keyword:  "*"
Literal.String.Double:  "\" "
Keyword:  "${"
Name.Variable:  "arg"
Keyword:  "}"
Literal.String.Double:  " "
Keyword:  "${"
Name.Variable:  "1"
Keyword:  "}"
Literal.String.Double:  " \""
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Literal.String.Double:  "\" "
Keyword:  "${"
Name.Variable:  "arg"
Keyword:  "}"
Literal.String.Double:  "\t"
Keyword:  "${"
Name.Variable:  "1"
Keyword:  "}"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " <newline>\t\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "darwin_framework_skip "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "compiler_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compiler_flags"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t     "
Name.Variable:  "prev"
Operator:  "="
Text:  "darwin_framework "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-inst-prefix-dir"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "inst_prefix<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Comment:  "# The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*"
Text:  "<newline>      "
Comment:  "# so, if we see these flags be careful not to treat them like -L"
Text:  "<newline>      "
Name.Tag:  "-L"
Operator:  "["
Text:  "A-Z][A-Z]"
Keyword:  "*"
Text:  ":"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$with_gcc"
Text:  "/"
Name.Variable:  "$host"
Text:  " "
Keyword:  "in<newline>\t"
Text:  "no/"
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-irix"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " /"
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-irix"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-L"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Builtin:  "dir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/^-L//'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t"
Comment:  "# We need an absolute path."
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$dir"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Operator:  "["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Operator:  "["
Text:  "A-Za-z]:["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "absdir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "cd"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "pwd"
Literal.String.Backtick:  "`"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$absdir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": cannot determine absolute directory name of "
Literal.String.Escape:  "\\`"
Name.Variable:  "$dir"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>\t    "
Name.Variable:  "absdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "notinst_path"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$notinst_path"
Literal.String.Double:  " "
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  "
Name.Builtin:  "dir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$absdir"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$deplibs"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Keyword:  "*"
Literal.String.Double:  "\" -L"
Name.Variable:  "$dir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplibs"
Literal.String.Double:  " -L"
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "lib_search_path"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$lib_search_path"
Literal.String.Double:  " "
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$host"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-cygwin"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-mingw"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-pw32"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-os2"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "testbindir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s*/lib$*/bin*'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t  "
Keyword:  "case"
Text:  " :"
Name.Variable:  "$dllsearchpath"
Text:  ": "
Keyword:  "in"
Text:  "<newline>\t  "
Keyword:  "*"
Literal.String.Double:  "\":"
Name.Variable:  "$dir"
Literal.String.Double:  ":\""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "dllsearchpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dllsearchpath"
Literal.String.Double:  ":"
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  "<newline>\t  "
Keyword:  "case"
Text:  " :"
Name.Variable:  "$dllsearchpath"
Text:  ": "
Keyword:  "in"
Text:  "<newline>\t  "
Keyword:  "*"
Literal.String.Double:  "\":"
Name.Variable:  "$testbindir"
Literal.String.Double:  ":\""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "dllsearchpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dllsearchpath"
Literal.String.Double:  ":"
Name.Variable:  "$testbindir"
Literal.String.Double:  "\""
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-l"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X-lc\""
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X-lm\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  case"
Text:  " "
Name.Variable:  "$host"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t  "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-cygwin"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-mingw"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-pw32"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-beos"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t    "
Comment:  "# These systems don't actually have a C or math library (as such)"
Text:  "<newline>\t    "
Keyword:  "continue"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-os2"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t    "
Comment:  "# These systems don't actually have a C library (as such)"
Text:  "<newline>\t    "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X-lc\""
Text:  " "
Operator:  "&&"
Text:  " "
Keyword:  "continue"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-openbsd"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-freebsd"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-dragonfly"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t    "
Comment:  "# Do not include libc due to us having libc/libc_r."
Text:  "<newline>\t    "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X-lc\""
Text:  " "
Operator:  "&&"
Text:  " "
Keyword:  "continue"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-rhapsody"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-darwin1"
Text:  ".[012]"
Punctuation:  ")"
Text:  "<newline>\t    "
Comment:  "# Rhapsody C and math libraries are in the System framework"
Text:  "<newline>\t    "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplibs"
Literal.String.Double:  " -framework System\""
Text:  "<newline>\t    "
Keyword:  "continue"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-sco3"
Text:  ".2v5"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-sco5v6"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t    "
Comment:  "# Causes problems with __ctype"
Text:  "<newline>\t    "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X-lc\""
Text:  " "
Operator:  "&&"
Text:  " "
Keyword:  "continue"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-sysv4"
Text:  ".2uw2"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-sysv5"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-unixware"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-OpenUNIX"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t    "
Comment:  "# Compiler inserts libc in the correct place for threads to work"
Text:  "<newline>\t    "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X-lc\""
Text:  " "
Operator:  "&&"
Text:  " "
Keyword:  "continue"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  "<newline>\t"
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X-lc_r\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t case"
Text:  " "
Name.Variable:  "$host"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-openbsd"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-freebsd"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-dragonfly"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t   "
Comment:  "# Do not include libc_r directly, use -pthread flag."
Text:  "<newline>\t   "
Keyword:  "continue"
Text:  "<newline>\t   "
Punctuation:  ";;"
Text:  "<newline>\t "
Keyword:  "esac"
Text:  "<newline>\t"
Keyword:  "fi<newline>\t"
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplibs"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Comment:  "# Tru64 UNIX uses -model [arg] to determine the layout of C++"
Text:  "<newline>      "
Comment:  "# classes, name mangling, and exception handling."
Text:  "<newline>      "
Name.Tag:  "-model"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "compiler_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compiler_flags"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "xcompiler<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>     "
Name.Tag:  "-mt"
Punctuation:  "|"
Name.Tag:  "-mthreads"
Punctuation:  "|"
Name.Tag:  "-kthread"
Punctuation:  "|"
Name.Tag:  "-Kthread"
Punctuation:  "|"
Name.Tag:  "-pthread"
Punctuation:  "|"
Name.Tag:  "-pthreads"
Punctuation:  "|"
Name.Tag:  "--thread-safe"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "compiler_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compiler_flags"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-module"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "module"
Operator:  "="
Name.Builtin:  "yes<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Comment:  "# -64, -mips[0-9] enable 64-bit mode on the SGI compiler"
Text:  "<newline>      "
Comment:  "# -r[0-9][0-9]* specifies the processor on the SGI compiler"
Text:  "<newline>      "
Comment:  "# -xarch=*, -xtarget=* enable 64-bit mode on the Sun compiler"
Text:  "<newline>      "
Comment:  "# +DA*, +DD* enable 64-bit mode on the HP compiler"
Text:  "<newline>      "
Comment:  "# -q* pass through compiler args for the IBM compiler"
Text:  "<newline>      "
Comment:  "# -m* pass through architecture-specific compiler args for GCC"
Text:  "<newline>      "
Comment:  "# -m*, -t[45]*, -txscale* pass through architecture-specific"
Text:  "<newline>      "
Comment:  "# compiler args for GCC"
Text:  "<newline>      "
Comment:  "# -pg pass through profiling flag for GCC"
Text:  "<newline>      "
Comment:  "# @file GCC response files"
Text:  "<newline>      "
Name.Tag:  "-64"
Punctuation:  "|"
Name.Tag:  "-mips"
Operator:  "["
Text:  "0-9]|-r[0-9][0-9]"
Keyword:  "*"
Punctuation:  "|"
Name.Tag:  "-xarch"
Operator:  "="
Keyword:  "*"
Punctuation:  "|"
Name.Tag:  "-xtarget"
Operator:  "="
Keyword:  "*"
Punctuation:  "|"
Text:  "+DA"
Keyword:  "*"
Punctuation:  "|"
Text:  "+DD"
Keyword:  "*"
Punctuation:  "|"
Name.Tag:  "-q"
Keyword:  "*"
Punctuation:  "|"
Name.Tag:  "-m"
Keyword:  "*"
Punctuation:  "|"
Name.Tag:  "-pg"
Punctuation:  "|"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>      "
Name.Tag:  "-t"
Operator:  "["
Text:  "45]"
Keyword:  "*"
Punctuation:  "|"
Name.Tag:  "-txscale"
Keyword:  "*"
Punctuation:  "|"
Text:  "@"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline><newline>\t"
Comment:  "# Unknown arguments in both finalize_command and compile_command need"
Text:  "<newline>\t"
Comment:  "# to be aesthetically quoted because they are evaled later."
Text:  "<newline>\t"
Name.Variable:  "arg"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$sed_quote_subst"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Name.Variable:  "$arg"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>        "
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>        "
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>        "
Name.Variable:  "compiler_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compiler_flags"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>        "
Keyword:  "continue"
Text:  "<newline>        "
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-shrext"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "shrext<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-no-fast-install"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "fast_install"
Operator:  "="
Text:  "no<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-no-install"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$host"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-cygwin"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-mingw"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-pw32"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-os2"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Comment:  "# The PATH hackery in wrapper scripts is required on Windows"
Text:  "<newline>\t  "
Comment:  "# in order for the loader to find any dlls it needs."
Text:  "<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": warning: "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-no-install' is ignored for "
Name.Variable:  "$host"
Literal.String.Double:  "\""
Text:  " 1>&2<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": warning: assuming "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-no-fast-install' instead\""
Text:  " 1>&2<newline>\t  "
Name.Variable:  "fast_install"
Operator:  "="
Text:  "no<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "no_install"
Operator:  "="
Name.Builtin:  "yes"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-no-undefined"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "allow_undefined"
Operator:  "="
Text:  "no<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-objectlist"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "objectlist<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-o"
Punctuation:  ")"
Text:  " "
Name.Variable:  "prev"
Operator:  "="
Text:  "output "
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-precious-files-regex"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "precious_regex<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-release"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "release<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-rpath"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "rpath<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-R"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "xrpath<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-R"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Builtin:  "dir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/^-R//'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t"
Comment:  "# We need an absolute path."
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$dir"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Operator:  "["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Operator:  "["
Text:  "A-Za-z]:["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": only absolute run-paths are allowed\""
Text:  " 1>&2<newline>\t  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$xrpath"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$dir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xrpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$xrpath"
Literal.String.Double:  " "
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-static"
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "# The effects of -static are defined in a previous loop."
Text:  "<newline>\t"
Comment:  "# We used to do the same as -all-static on platforms that"
Text:  "<newline>\t"
Comment:  "# didn't have a PIC flag, but the assumption that the effects"
Text:  "<newline>\t"
Comment:  "# would be equivalent was wrong.  It would break on at least"
Text:  "<newline>\t"
Comment:  "# Digital Unix and AIX."
Text:  "<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-thread-safe"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "thread_safe"
Operator:  "="
Name.Builtin:  "yes<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-version-info"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "vinfo<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Name.Tag:  "-version-number"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "vinfo<newline>\t"
Name.Variable:  "vinfo_number"
Operator:  "="
Name.Builtin:  "yes<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-Wc"
Text:  ","
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "args"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$sed_quote_subst"
Literal.String.Double:  "\""
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/^-Wc,//'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t"
Name.Variable:  "arg"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "save_ifs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$IFS"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Single:  "','"
Text:  "<newline>\t"
Keyword:  "for "
Text:  "flag "
Keyword:  "in"
Text:  " "
Name.Variable:  "$args"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t  "
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$save_ifs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "case"
Text:  " "
Name.Variable:  "$flag"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t    "
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t    "
Name.Variable:  "flag"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Name.Variable:  "$flag"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  "<newline>\t  "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  " "
Name.Variable:  "$wl$flag"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "compiler_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compiler_flags"
Literal.String.Double:  " "
Name.Variable:  "$flag"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "done<newline>\t"
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$save_ifs"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "arg"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\"s/^ //\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-Wl"
Text:  ","
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "args"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$sed_quote_subst"
Literal.String.Double:  "\""
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/^-Wl,//'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t"
Name.Variable:  "arg"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "save_ifs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$IFS"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Single:  "','"
Text:  "<newline>\t"
Keyword:  "for "
Text:  "flag "
Keyword:  "in"
Text:  " "
Name.Variable:  "$args"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t  "
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$save_ifs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "case"
Text:  " "
Name.Variable:  "$flag"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t    "
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t    "
Name.Variable:  "flag"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Name.Variable:  "$flag"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  "<newline>\t  "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  " "
Name.Variable:  "$wl$flag"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "compiler_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compiler_flags"
Literal.String.Double:  " "
Name.Variable:  "$wl$flag"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "linker_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$linker_flags"
Literal.String.Double:  " "
Name.Variable:  "$flag"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "done<newline>\t"
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$save_ifs"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "arg"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\"s/^ //\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-Xcompiler"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "xcompiler<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-Xlinker"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "xlinker<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Name.Tag:  "-XCClinker"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "xcclinker<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Comment:  "# Some other compiler flag."
Text:  "<newline>      -"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " +"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "# Unknown arguments in both finalize_command and compile_command need"
Text:  "<newline>\t"
Comment:  "# to be aesthetically quoted because they are evaled later."
Text:  "<newline>\t"
Name.Variable:  "arg"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$sed_quote_subst"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Name.Variable:  "$arg"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Keyword:  "*"
Text:  "."
Name.Variable:  "$objext"
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "# A standard object."
Text:  "<newline>\t"
Name.Variable:  "objs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$objs"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Keyword:  "*"
Text:  ".lo"
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "# A libtool-controlled object."
Text:  "<newline><newline>\t"
Comment:  "# Check to see that this really is a libtool object."
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Operator:  "("
Keyword:  "${"
Name.Variable:  "SED"
Keyword:  "}"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'2q'"
Text:  " "
Name.Variable:  "$arg"
Text:  " | "
Name.Builtin:  "grep"
Text:  " "
Literal.String.Double:  "\"^# Generated by .*"
Name.Variable:  "$PACKAGE"
Literal.String.Double:  "\""
Operator:  ")"
Text:  " "
Operator:  ">"
Text:  "/dev/null 2>&1"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  "
Name.Variable:  "pic_object"
Operator:  "="
Text:  "<newline>\t  "
Name.Variable:  "non_pic_object"
Operator:  "="
Text:  "<newline><newline>\t  "
Comment:  "# Read the .lo file"
Text:  "<newline>\t  "
Comment:  "# If there is no directory component, then add one."
Text:  "<newline>\t  "
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t  "
Keyword:  "*"
Text:  "/"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Literal.String.Escape:  "\\\\"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Builtin:  "."
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Builtin:  "."
Text:  " ./"
Name.Variable:  "$arg"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  "<newline><newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t     "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  "<newline>\t     "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " none "
Operator:  "&&"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t     "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " none"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": cannot find name of object for "
Literal.String.Escape:  "\\`"
Name.Variable:  "$arg"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>\t    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t  "
Keyword:  "fi"
Text:  "<newline><newline>\t  "
Comment:  "# Extract subdirectory from the argument."
Text:  "<newline>\t  "
Name.Variable:  "xdir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%/[^/]*$%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$xdir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "xdir"
Operator:  "="
Text:  "<newline> \t  "
Keyword:  "else<newline>\t    "
Name.Variable:  "xdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$xdir"
Literal.String.Double:  "/\""
Text:  "<newline>\t  "
Keyword:  "fi<newline><newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " none"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Comment:  "# Prepend the subdirectory the object is found in."
Text:  "<newline>\t    "
Name.Variable:  "pic_object"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$xdir$pic_object"
Literal.String.Double:  "\""
Text:  "<newline><newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlfiles"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_libtool_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dlopen_support"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t"
Name.Variable:  "dlfiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlfiles"
Literal.String.Double:  " "
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t\t"
Keyword:  "continue<newline>\t      else"
Text:  "<newline>\t\t"
Comment:  "# If libtool objects are unsupported, then we need to preload."
Text:  "<newline>\t\t"
Name.Variable:  "prev"
Operator:  "="
Text:  "dlprefiles<newline>\t      "
Keyword:  "fi<newline>\t    fi"
Text:  "<newline><newline>\t    "
Comment:  "# CHECK ME:  I think I busted this.  -Ossama"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlprefiles"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t      "
Comment:  "# Preload the old-style object."
Text:  "<newline>\t      "
Name.Variable:  "dlprefiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlprefiles"
Literal.String.Double:  " "
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t    "
Keyword:  "fi"
Text:  "<newline><newline>\t    "
Comment:  "# A PIC object."
Text:  "<newline>\t    "
Name.Variable:  "libobjs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$libobjs"
Literal.String.Double:  " "
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi"
Text:  "<newline><newline>\t  "
Comment:  "# Non-PIC object."
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " none"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Comment:  "# Prepend the subdirectory the object is found in."
Text:  "<newline>\t    "
Name.Variable:  "non_pic_object"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$xdir$non_pic_object"
Literal.String.Double:  "\""
Text:  "<newline><newline>\t    "
Comment:  "# A standard non-PIC object"
Text:  "<newline>\t    "
Name.Variable:  "non_pic_objects"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_objects"
Literal.String.Double:  " "
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " none "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t  else"
Text:  "<newline>\t    "
Comment:  "# If the PIC object exists, use it instead."
Text:  "<newline>\t    "
Comment:  "# $xdir was prepended to $pic_object above."
Text:  "<newline>\t    "
Name.Variable:  "non_pic_object"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "non_pic_objects"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_objects"
Literal.String.Double:  " "
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi<newline>\telse"
Text:  "<newline>\t  "
Comment:  "# Only an error if not doing a dry-run."
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$run"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": "
Literal.String.Escape:  "\\`"
Name.Variable:  "$arg"
Literal.String.Double:  "' is not a valid libtool object\""
Text:  " 1>&2<newline>\t    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t  "
Keyword:  "else"
Text:  "<newline>\t    "
Comment:  "# Dry-run case."
Text:  "<newline><newline>\t    "
Comment:  "# Extract subdirectory from the argument."
Text:  "<newline>\t    "
Name.Variable:  "xdir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%/[^/]*$%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$xdir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "xdir"
Operator:  "="
Text:  "<newline>\t    "
Keyword:  "else<newline>\t      "
Name.Variable:  "xdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$xdir"
Literal.String.Double:  "/\""
Text:  "<newline>\t    "
Keyword:  "fi<newline><newline>\t    "
Name.Variable:  "pic_object"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Keyword:  "${"
Name.Variable:  "xdir"
Keyword:  "}${"
Name.Variable:  "objdir"
Keyword:  "}"
Literal.String.Double:  "/"
Keyword:  "${"
Name.Variable:  "arg"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lo2o"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Name.Variable:  "non_pic_object"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Keyword:  "${"
Name.Variable:  "xdir"
Keyword:  "}${"
Name.Variable:  "arg"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lo2o"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Name.Variable:  "libobjs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$libobjs"
Literal.String.Double:  " "
Name.Variable:  "$pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "non_pic_objects"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$non_pic_objects"
Literal.String.Double:  " "
Name.Variable:  "$non_pic_object"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi<newline>\tfi"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Keyword:  "*"
Text:  "."
Name.Variable:  "$libext"
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "# An archive."
Text:  "<newline>\t"
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplibs"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "old_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$old_deplibs"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "continue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Keyword:  "*"
Text:  ".la"
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "# A libtool-controlled library."
Text:  "<newline><newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlfiles"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t  "
Comment:  "# This library was specified with -dlopen."
Text:  "<newline>\t  "
Name.Variable:  "dlfiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlfiles"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t"
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlprefiles"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t  "
Comment:  "# The library was specified with -dlpreopen."
Text:  "<newline>\t  "
Name.Variable:  "dlprefiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlprefiles"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "prev"
Operator:  "="
Text:  "<newline>\t"
Keyword:  "else<newline>\t  "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplibs"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "fi<newline>\tcontinue"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline><newline>      "
Comment:  "# Some other compiler argument."
Text:  "<newline>      "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t"
Comment:  "# Unknown arguments in both finalize_command and compile_command need"
Text:  "<newline>\t"
Comment:  "# to be aesthetically quoted because they are evaled later."
Text:  "<newline>\t"
Name.Variable:  "arg"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$sed_quote_subst"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$arg"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Keyword:  "*"
Operator:  "["
Literal.String.Escape:  "\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Keyword:  "*"
Operator:  "]"
Keyword:  "*"
Punctuation:  "|"
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Double:  "\""
Literal.String.Escape:  "\\\""
Name.Variable:  "$arg"
Literal.String.Escape:  "\\\""
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>      "
Keyword:  "esac"
Text:  " "
Comment:  "# arg"
Text:  "<newline><newline>      "
Comment:  "# Now actually substitute the argument into the commands."
Text:  "<newline>      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t"
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>      "
Keyword:  "fi<newline>    done"
Text:  " "
Comment:  "# argument parsing loop"
Text:  "<newline><newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prev"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": the "
Literal.String.Escape:  "\\`"
Name.Variable:  "$prevarg"
Literal.String.Double:  "' option requires an argument\""
Text:  " 1>&2<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$help"
Literal.String.Double:  "\""
Text:  " 1>&2<newline>      "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>    "
Keyword:  "fi<newline><newline>    if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$export_dynamic"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$export_dynamic_flag_spec"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      "
Name.Builtin:  "eval "
Name.Variable:  "arg"
Operator:  "="
Literal.String.Escape:  "\\\""
Name.Variable:  "$export_dynamic_flag_spec"
Literal.String.Escape:  "\\\""
Text:  "<newline>      "
Name.Variable:  "compile_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>      "
Name.Variable:  "finalize_command"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_command"
Literal.String.Double:  " "
Name.Variable:  "$arg"
Literal.String.Double:  "\""
Text:  "<newline>    "
Keyword:  "fi<newline><newline>    "
Name.Variable:  "oldlibs"
Operator:  "="
Text:  "<newline>    "
Comment:  "# calculate the name of the file, without its directory"
Text:  "<newline>    "
Name.Variable:  "outputname"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$output"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%^.*/%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>    "
Name.Variable:  "libobjs_save"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$libobjs"
Literal.String.Double:  "\""
Text:  "<newline><newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$shlibpath_var"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Comment:  "# get the directories listed in $shlibpath_var"
Text:  "<newline>      "
Name.Builtin:  "eval "
Name.Variable:  "shlib_search_path"
Operator:  "="
Literal.String.Escape:  "\\`\\$"
Name.Builtin:  "echo"
Text:  " "
Literal.String.Escape:  "\\\""
Text:  "X"
Literal.String.Escape:  "\\$"
Operator:  "{"
Name.Variable:  "$shlibpath_var"
Operator:  "}"
Literal.String.Escape:  "\\\""
Text:  " "
Literal.String.Escape:  "\\|"
Text:  " "
Literal.String.Escape:  "\\$"
Text:  "Xsed "
Name.Tag:  "-e"
Text:  " "
Literal.String.Escape:  "\\'"
Text:  "s/:/ /g"
Literal.String.Escape:  "\\'\\`"
Text:  "<newline>    "
Keyword:  "else<newline>      "
Name.Variable:  "shlib_search_path"
Operator:  "="
Text:  "<newline>    "
Keyword:  "fi<newline>    "
Name.Builtin:  "eval "
Name.Variable:  "sys_lib_search_path"
Operator:  "="
Literal.String.Escape:  "\\\""
Name.Variable:  "$sys_lib_search_path_spec"
Literal.String.Escape:  "\\\""
Text:  "<newline>    "
Name.Builtin:  "eval "
Name.Variable:  "sys_lib_dlsearch_path"
Operator:  "="
Literal.String.Escape:  "\\\""
Name.Variable:  "$sys_lib_dlsearch_path_spec"
Literal.String.Escape:  "\\\""
Text:  "<newline><newline>    "
Name.Variable:  "output_objdir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$output"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%/[^/]*$%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$output_objdir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$output"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      "
Name.Variable:  "output_objdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$objdir"
Literal.String.Double:  "\""
Text:  "<newline>    "
Keyword:  "else<newline>      "
Name.Variable:  "output_objdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$output_objdir"
Literal.String.Double:  "/"
Name.Variable:  "$objdir"
Literal.String.Double:  "\""
Text:  "<newline>    "
Keyword:  "fi"
Text:  "<newline>    "
Comment:  "# Create the object directory."
Text:  "<newline>    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Operator:  "!"
Text:  " "
Name.Tag:  "-d"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$output_objdir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>      "
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$mkdir"
Literal.String.Double:  " "
Name.Variable:  "$output_objdir"
Literal.String.Double:  "\""
Text:  "<newline>      "
Name.Variable:  "$run"
Text:  " "
Name.Variable:  "$mkdir"
Text:  " "
Name.Variable:  "$output_objdir"
Text:  "<newline>      "
Name.Variable:  "exit_status"
Operator:  "="
Name.Variable:  "$?"
Text:  "<newline>      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$exit_status"
Literal.String.Double:  "\""
Text:  " "
Name.Tag:  "-ne"
Text:  " 0 "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Operator:  "!"
Text:  " "
Name.Tag:  "-d"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$output_objdir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t"
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$exit_status"
Text:  "<newline>      "
Keyword:  "fi<newline>    fi"
Text:  "<newline><newline>    "
Comment:  "# Determine the type of output"
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$output"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Literal.String.Double:  "\"\""
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": you must specify an output file\""
Text:  " 1>&2<newline>      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$help"
Literal.String.Double:  "\""
Text:  " 1>&2<newline>      "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  "."
Name.Variable:  "$libext"
Punctuation:  ")"
Text:  " "
Name.Variable:  "linkmode"
Operator:  "="
Text:  "oldlib "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".lo "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "."
Name.Variable:  "$objext"
Punctuation:  ")"
Text:  " "
Name.Variable:  "linkmode"
Operator:  "="
Text:  "obj "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Text:  ".la"
Punctuation:  ")"
Text:  " "
Name.Variable:  "linkmode"
Operator:  "="
Text:  "lib "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "linkmode"
Operator:  "="
Text:  "prog "
Punctuation:  ";;"
Text:  " "
Comment:  "# Anything else should be a program."
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline><newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$host"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Keyword:  "*"
Text:  "cygwin"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "mingw"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "pw32"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>      "
Comment:  "# don't eliminate duplications in $postdeps and $predeps"
Text:  "<newline>      "
Name.Variable:  "duplicate_compiler_generated_deps"
Operator:  "="
Name.Builtin:  "yes"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>      "
Name.Variable:  "duplicate_compiler_generated_deps"
Operator:  "="
Name.Variable:  "$duplicate_deps"
Text:  "<newline>      "
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline>    "
Name.Variable:  "specialdeplibs"
Operator:  "="
Text:  "<newline><newline>    "
Name.Variable:  "libs"
Operator:  "="
Text:  "<newline>    "
Comment:  "# Find all interdependent deplibs by searching for libraries"
Text:  "<newline>    "
Comment:  "# that are linked more than once (e.g. -la -lb -la)"
Text:  "<newline>    "
Keyword:  "for "
Text:  "deplib "
Keyword:  "in"
Text:  " "
Name.Variable:  "$deplibs"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>      if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$duplicate_deps"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Xyes\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\tcase"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$libs"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$deplib"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "specialdeplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$specialdeplibs"
Literal.String.Double:  " "
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>      "
Keyword:  "fi<newline>      "
Name.Variable:  "libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$libs"
Literal.String.Double:  " "
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  "<newline>    "
Keyword:  "done<newline><newline>    if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " lib"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>      "
Name.Variable:  "libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$predeps"
Literal.String.Double:  " "
Name.Variable:  "$libs"
Literal.String.Double:  " "
Name.Variable:  "$compiler_lib_search_path"
Literal.String.Double:  " "
Name.Variable:  "$postdeps"
Literal.String.Double:  "\""
Text:  "<newline><newline>      "
Comment:  "# Compute libraries that are listed more than once in $predeps"
Text:  "<newline>      "
Comment:  "# $postdeps and mark them as special (i.e., whose duplicates are"
Text:  "<newline>      "
Comment:  "# not to be eliminated)."
Text:  "<newline>      "
Name.Variable:  "pre_post_deps"
Operator:  "="
Text:  "<newline>      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$duplicate_compiler_generated_deps"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Xyes\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\tfor "
Text:  "pre_post_dep "
Keyword:  "in"
Text:  " "
Name.Variable:  "$predeps"
Text:  " "
Name.Variable:  "$postdeps"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t  case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pre_post_deps"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t  "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$pre_post_dep"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "specialdeplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$specialdeplibs"
Literal.String.Double:  " "
Name.Variable:  "$pre_post_deps"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  "<newline>\t  "
Name.Variable:  "pre_post_deps"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$pre_post_deps"
Literal.String.Double:  " "
Name.Variable:  "$pre_post_dep"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "done<newline>      fi<newline>      "
Name.Variable:  "pre_post_deps"
Operator:  "="
Text:  "<newline>    "
Keyword:  "fi<newline><newline>    "
Name.Variable:  "deplibs"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "newdependency_libs"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "newlib_search_path"
Operator:  "="
Text:  "<newline>    "
Name.Variable:  "need_relink"
Operator:  "="
Text:  "no "
Comment:  "# whether we're linking any uninstalled libtool libraries"
Text:  "<newline>    "
Name.Variable:  "notinst_deplibs"
Operator:  "="
Text:  " "
Comment:  "# not-installed libtool libraries"
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$linkmode"
Text:  " "
Keyword:  "in<newline>    "
Text:  "lib"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "passes"
Operator:  "="
Literal.String.Double:  "\"conv link\""
Text:  "<newline>\t"
Keyword:  "for "
Text:  "file "
Keyword:  "in"
Text:  " "
Name.Variable:  "$dlfiles"
Text:  " "
Name.Variable:  "$dlprefiles"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t  case"
Text:  " "
Name.Variable:  "$file"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t  "
Keyword:  "*"
Text:  ".la"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": libraries can "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-dlopen' only libtool libraries: "
Name.Variable:  "$file"
Literal.String.Double:  "\""
Text:  " 1>&2<newline>\t    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  "<newline>\t"
Keyword:  "done"
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>    prog"
Punctuation:  ")"
Text:  "<newline>\t"
Name.Variable:  "compile_deplibs"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "finalize_deplibs"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "alldeplibs"
Operator:  "="
Text:  "no<newline>\t"
Name.Variable:  "newdlfiles"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "newdlprefiles"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "passes"
Operator:  "="
Literal.String.Double:  "\"conv scan dlopen dlpreopen link\""
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "*"
Punctuation:  ")"
Text:  "  "
Name.Variable:  "passes"
Operator:  "="
Literal.String.Double:  "\"conv\""
Text:  "<newline>\t"
Punctuation:  ";;"
Text:  "<newline>    "
Keyword:  "esac"
Text:  "<newline>    "
Keyword:  "for "
Text:  "pass "
Keyword:  "in"
Text:  " "
Name.Variable:  "$passes"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>      if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  ","
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"lib,link\""
Text:  " "
Operator:  "||"
Text:  "<newline>\t "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  ","
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"prog,scan\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t"
Name.Variable:  "libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "deplibs"
Operator:  "="
Text:  "<newline>      "
Keyword:  "fi<newline>      if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " prog"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\tcase"
Text:  " "
Name.Variable:  "$pass"
Text:  " "
Keyword:  "in<newline>\t"
Text:  "dlopen"
Punctuation:  ")"
Text:  " "
Name.Variable:  "libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlfiles"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\tdlpreopen"
Punctuation:  ")"
Text:  " "
Name.Variable:  "libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlprefiles"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Name.Builtin:  "link"
Punctuation:  ")"
Text:  " "
Name.Variable:  "libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplibs"
Literal.String.Double:  " %DEPLIBS% "
Name.Variable:  "$dependency_libs"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>      "
Keyword:  "fi<newline>      if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlopen"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t"
Comment:  "# Collect dlpreopened libraries"
Text:  "<newline>\t"
Name.Variable:  "save_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Name.Variable:  "deplibs"
Operator:  "="
Text:  "<newline>      "
Keyword:  "fi<newline>      for "
Text:  "deplib "
Keyword:  "in"
Text:  " "
Name.Variable:  "$libs"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t"
Name.Variable:  "lib"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "found"
Operator:  "="
Text:  "no<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$deplib"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Name.Tag:  "-mt"
Punctuation:  "|"
Name.Tag:  "-mthreads"
Punctuation:  "|"
Name.Tag:  "-kthread"
Punctuation:  "|"
Name.Tag:  "-Kthread"
Punctuation:  "|"
Name.Tag:  "-pthread"
Punctuation:  "|"
Name.Tag:  "-pthreads"
Punctuation:  "|"
Name.Tag:  "--thread-safe"
Punctuation:  ")"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  ","
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"prog,link\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "compile_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$compile_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "finalize_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$finalize_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "else<newline>\t    "
Name.Variable:  "compiler_flags"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compiler_flags"
Literal.String.Double:  " "
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Name.Tag:  "-l"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " lib "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " prog"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": warning: "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-l' is ignored for archives/objects\""
Text:  " 1>&2<newline>\t    "
Keyword:  "continue<newline>\t  fi<newline>\t  "
Name.Variable:  "name"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/^-l//'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t  "
Keyword:  "for "
Text:  "searchdir "
Keyword:  "in"
Text:  " "
Name.Variable:  "$newlib_search_path"
Text:  " "
Name.Variable:  "$lib_search_path"
Text:  " "
Name.Variable:  "$sys_lib_search_path"
Text:  " "
Name.Variable:  "$shlib_search_path"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t    for "
Text:  "search_ext "
Keyword:  "in"
Text:  " .la "
Name.Variable:  "$std_shrext"
Text:  " .so .a"
Punctuation:  ";"
Text:  " "
Keyword:  "do"
Text:  "<newline>\t      "
Comment:  "# Search the libtool library"
Text:  "<newline>\t      "
Name.Variable:  "lib"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$searchdir"
Literal.String.Double:  "/lib"
Keyword:  "${"
Name.Variable:  "name"
Keyword:  "}${"
Name.Variable:  "search_ext"
Keyword:  "}"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lib"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\tif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$search_ext"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\".la\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t  "
Name.Variable:  "found"
Operator:  "="
Name.Builtin:  "yes<newline>\t\t"
Keyword:  "else<newline>\t\t  "
Name.Variable:  "found"
Operator:  "="
Text:  "no<newline>\t\t"
Keyword:  "fi<newline>\t\t"
Name.Builtin:  "break "
Text:  "2<newline>\t      "
Keyword:  "fi<newline>\t    done<newline>\t  done<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$found"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Comment:  "# deplib doesn't seem to be a libtool library"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  ","
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"prog,link\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "compile_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$compile_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Variable:  "finalize_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$finalize_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "else<newline>\t      "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " lib "
Operator:  "&&"
Text:  " "
Name.Variable:  "newdependency_libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$newdependency_libs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t    continue<newline>\t  else"
Text:  " "
Comment:  "# deplib is a libtool library"
Text:  "<newline>\t    "
Comment:  "# If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,"
Text:  "<newline>\t    "
Comment:  "# We need to do some special things here, and not later."
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$allow_libtool_libs_with_static_runtimes"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Xyes\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      case"
Text:  " "
Literal.String.Double:  "\" "
Name.Variable:  "$predeps"
Literal.String.Double:  " "
Name.Variable:  "$postdeps"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$deplib"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " "
Operator:  "("
Keyword:  "${"
Name.Variable:  "SED"
Keyword:  "}"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'2q'"
Text:  " "
Name.Variable:  "$lib"
Text:  " |<newline>                    "
Name.Builtin:  "grep"
Text:  " "
Literal.String.Double:  "\"^# Generated by .*"
Name.Variable:  "$PACKAGE"
Literal.String.Double:  "\""
Operator:  ")"
Text:  " "
Operator:  ">"
Text:  "/dev/null 2>&1"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t  "
Name.Variable:  "library_names"
Operator:  "="
Text:  "<newline>\t\t  "
Name.Variable:  "old_library"
Operator:  "="
Text:  "<newline>\t\t  "
Keyword:  "case"
Text:  " "
Name.Variable:  "$lib"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t\t  "
Keyword:  "*"
Text:  "/"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Literal.String.Escape:  "\\\\"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Builtin:  "."
Text:  " "
Name.Variable:  "$lib"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t\t  "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Builtin:  "."
Text:  " ./"
Name.Variable:  "$lib"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t\t  "
Keyword:  "esac"
Text:  "<newline>\t\t  "
Keyword:  "for "
Text:  "l "
Keyword:  "in"
Text:  " "
Name.Variable:  "$old_library"
Text:  " "
Name.Variable:  "$library_names"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t\t    "
Name.Variable:  "ll"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$l"
Literal.String.Double:  "\""
Text:  "<newline>\t\t  "
Keyword:  "done<newline>\t\t  if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$ll"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  " "
Comment:  "# only static version available"
Text:  "<newline>\t\t    "
Name.Variable:  "found"
Operator:  "="
Text:  "no<newline>\t\t    "
Name.Variable:  "ladir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$lib"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%/[^/]*$%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t\t    "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$ladir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$lib"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "ladir"
Operator:  "="
Literal.String.Double:  "\".\""
Text:  "<newline>\t\t    "
Name.Variable:  "lib"
Operator:  "="
Name.Variable:  "$ladir"
Text:  "/"
Name.Variable:  "$old_library"
Text:  "<newline>\t\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  ","
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"prog,link\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t      "
Name.Variable:  "compile_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$compile_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t\t      "
Name.Variable:  "finalize_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$finalize_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t\t    "
Keyword:  "else<newline>\t\t      "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t\t      "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " lib "
Operator:  "&&"
Text:  " "
Name.Variable:  "newdependency_libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$newdependency_libs"
Literal.String.Double:  "\""
Text:  "<newline>\t\t    "
Keyword:  "fi<newline>\t\t    continue<newline>\t\t  fi<newline>\t\tfi"
Text:  "<newline>\t        "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "esac"
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t  fi"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  " "
Comment:  "# -l"
Text:  "<newline>\t"
Name.Tag:  "-L"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Keyword:  "case"
Text:  " "
Name.Variable:  "$linkmode"
Text:  " "
Keyword:  "in<newline>\t  "
Text:  "lib"
Punctuation:  ")"
Text:  "<newline>\t    "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " conv "
Operator:  "&&"
Text:  " "
Keyword:  "continue<newline>\t    "
Name.Variable:  "newdependency_libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$newdependency_libs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "newlib_search_path"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$newlib_search_path"
Literal.String.Double:  " \""
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/^-L//'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  prog"
Punctuation:  ")"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " conv"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "continue<newline>\t    fi<newline>\t    if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " scan"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "else<newline>\t      "
Name.Variable:  "compile_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$compile_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Variable:  "finalize_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$finalize_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t    "
Name.Variable:  "newlib_search_path"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$newlib_search_path"
Literal.String.Double:  " \""
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/^-L//'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": warning: "
Literal.String.Escape:  "\\`"
Literal.String.Double:  "-L' is ignored for archives/objects\""
Text:  " 1>&2<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  " "
Comment:  "# linkmode"
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  " "
Comment:  "# -L"
Text:  "<newline>\t"
Name.Tag:  "-R"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "link"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Builtin:  "dir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/^-R//'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Comment:  "# Make sure the xrpath contains only unique directories."
Text:  "<newline>\t    "
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$xrpath"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t    "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$dir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "xrpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$xrpath"
Literal.String.Double:  " "
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "*"
Text:  ".la"
Punctuation:  ")"
Text:  " "
Name.Variable:  "lib"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "*"
Text:  "."
Name.Variable:  "$libext"
Punctuation:  ")"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " conv"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "continue<newline>\t  fi<newline>\t  case"
Text:  " "
Name.Variable:  "$linkmode"
Text:  " "
Keyword:  "in<newline>\t  "
Text:  "lib"
Punctuation:  ")"
Text:  "<newline>\t    "
Name.Variable:  "valid_a_lib"
Operator:  "="
Text:  "no<newline>\t    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$deplibs_check_method"
Text:  " "
Keyword:  "in<newline>\t      "
Text:  "match_pattern"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name.Builtin:  "set "
Text:  "dummy "
Name.Variable:  "$deplibs_check_method"
Text:  "<newline>\t        "
Name.Variable:  "match_pattern_regex"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "expr"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$deplibs_check_method"
Literal.String.Double:  "\""
Text:  " : "
Literal.String.Double:  "\""
Name.Variable:  "$2"
Literal.String.Double:  " "
Literal.String.Escape:  "\\("
Literal.String.Double:  ".*"
Literal.String.Escape:  "\\)"
Literal.String.Double:  "\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t\t"
Keyword:  "if "
Name.Builtin:  "eval"
Text:  " "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Escape:  "\\\""
Name.Variable:  "$deplib"
Literal.String.Escape:  "\\\""
Text:  " 2>/dev/null "
Literal.String.Escape:  "\\"
Text:  "<newline>\t\t    | "
Name.Variable:  "$SED"
Text:  " 10q "
Literal.String.Escape:  "\\"
Text:  "<newline>\t\t    | "
Name.Variable:  "$EGREP"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$match_pattern_regex"
Literal.String.Double:  "\""
Text:  " "
Operator:  ">"
Text:  " /dev/null"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t  "
Name.Variable:  "valid_a_lib"
Operator:  "="
Name.Builtin:  "yes<newline>\t\t"
Keyword:  "fi"
Text:  "<newline>\t\t"
Punctuation:  ";;"
Text:  "<newline>\t      pass_all"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name.Variable:  "valid_a_lib"
Operator:  "="
Name.Builtin:  "yes"
Text:  "<newline>\t\t"
Punctuation:  ";;"
Text:  "<newline>            "
Keyword:  "esac"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$valid_a_lib"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** Warning: Trying to link with static lib archive "
Name.Variable:  "$deplib"
Literal.String.Double:  ".\""
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** I have the capability to make that library automatically link in when\""
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** you link to this library.  But I can only do this if you have a\""
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** shared version of the library, which you do not appear to have\""
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** because the file extensions ."
Name.Variable:  "$libext"
Literal.String.Double:  " of this argument makes me believe\""
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** that it is just a static archive that I should not used here.\""
Text:  "<newline>\t    "
Keyword:  "else"
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** Warning: Linking the shared library "
Name.Variable:  "$output"
Literal.String.Double:  " against the\""
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** static library "
Name.Variable:  "$deplib"
Literal.String.Double:  " is not portable!\""
Text:  "<newline>\t      "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t    continue"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  prog"
Punctuation:  ")"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "link"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "else<newline>\t      "
Name.Variable:  "compile_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$compile_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Variable:  "finalize_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$finalize_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t    continue"
Text:  "<newline>\t    "
Punctuation:  ";;"
Text:  "<newline>\t  "
Keyword:  "esac"
Text:  " "
Comment:  "# linkmode"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  " "
Comment:  "# *.$libext"
Text:  "<newline>\t"
Keyword:  "*"
Text:  ".lo "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "."
Name.Variable:  "$objext"
Punctuation:  ")"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " conv"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " prog"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlpreopen "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dlopen_support"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_libtool_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t      "
Comment:  "# If there is no dlopen support or we're linking statically,"
Text:  "<newline>\t      "
Comment:  "# we need to preload."
Text:  "<newline>\t      "
Name.Variable:  "newdlprefiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$newdlprefiles"
Literal.String.Double:  " "
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Variable:  "compile_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$compile_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Variable:  "finalize_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$finalize_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "else<newline>\t      "
Name.Variable:  "newdlfiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$newdlfiles"
Literal.String.Double:  " "
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t  fi<newline>\t  continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t%DEPLIBS%"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "alldeplibs"
Operator:  "="
Name.Builtin:  "yes<newline>\t  "
Keyword:  "continue"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  " "
Comment:  "# case $deplib"
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$found"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lib"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  " :<newline>\t"
Keyword:  "else"
Text:  "<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": cannot find the library "
Literal.String.Escape:  "\\`"
Name.Variable:  "$lib"
Literal.String.Double:  "' or unhandled argument "
Literal.String.Escape:  "\\`"
Name.Variable:  "$deplib"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>\t  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t"
Keyword:  "fi"
Text:  "<newline><newline>\t"
Comment:  "# Check to see that this really is a libtool archive."
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Operator:  "("
Keyword:  "${"
Name.Variable:  "SED"
Keyword:  "}"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'2q'"
Text:  " "
Name.Variable:  "$lib"
Text:  " | "
Name.Builtin:  "grep"
Text:  " "
Literal.String.Double:  "\"^# Generated by .*"
Name.Variable:  "$PACKAGE"
Literal.String.Double:  "\""
Operator:  ")"
Text:  " "
Operator:  ">"
Text:  "/dev/null 2>&1"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  " :<newline>\t"
Keyword:  "else"
Text:  "<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": "
Literal.String.Escape:  "\\`"
Name.Variable:  "$lib"
Literal.String.Double:  "' is not a valid libtool archive\""
Text:  " 1>&2<newline>\t  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t"
Keyword:  "fi<newline><newline>\t"
Name.Variable:  "ladir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$lib"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%/[^/]*$%%'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t"
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$ladir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$lib"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "ladir"
Operator:  "="
Literal.String.Double:  "\".\""
Text:  "<newline><newline>\t"
Name.Variable:  "dlname"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "dlopen"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "dlpreopen"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "libdir"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "library_names"
Operator:  "="
Text:  "<newline>\t"
Name.Variable:  "old_library"
Operator:  "="
Text:  "<newline>\t"
Comment:  "# If the library was installed with an old release of libtool,"
Text:  "<newline>\t"
Comment:  "# it will not redefine variables installed, or shouldnotlink"
Text:  "<newline>\t"
Name.Variable:  "installed"
Operator:  "="
Name.Builtin:  "yes<newline>\t"
Name.Variable:  "shouldnotlink"
Operator:  "="
Text:  "no<newline>\t"
Name.Variable:  "avoidtemprpath"
Operator:  "="
Text:  "<newline><newline><newline>\t"
Comment:  "# Read the .la file"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$lib"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Keyword:  "*"
Text:  "/"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Literal.String.Escape:  "\\\\"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Builtin:  "."
Text:  " "
Name.Variable:  "$lib"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Builtin:  "."
Text:  " ./"
Name.Variable:  "$lib"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline><newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  ","
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"lib,link\""
Text:  " "
Operator:  "||"
Text:  "<newline>\t   "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  ","
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"prog,scan\""
Text:  " "
Operator:  "||"
Text:  "<newline>\t   "
Operator:  "{"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " prog "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " lib"
Punctuation:  ";"
Text:  " "
Operator:  "}"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dlopen"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "dlfiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlfiles"
Literal.String.Double:  " "
Name.Variable:  "$dlopen"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dlpreopen"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "dlprefiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlprefiles"
Literal.String.Double:  " "
Name.Variable:  "$dlpreopen"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "fi<newline><newline>\tif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " conv"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t  "
Comment:  "# Only check for convenience libraries"
Text:  "<newline>\t  "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$lib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$libdir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": cannot find name of link library for "
Literal.String.Escape:  "\\`"
Name.Variable:  "$lib"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>\t      "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t    "
Keyword:  "fi"
Text:  "<newline>\t    "
Comment:  "# It is a libtool convenience library, so add in its objects."
Text:  "<newline>\t    "
Name.Variable:  "convenience"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$convenience"
Literal.String.Double:  " "
Name.Variable:  "$ladir"
Literal.String.Double:  "/"
Name.Variable:  "$objdir"
Literal.String.Double:  "/"
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "old_convenience"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$old_convenience"
Literal.String.Double:  " "
Name.Variable:  "$ladir"
Literal.String.Double:  "/"
Name.Variable:  "$objdir"
Literal.String.Double:  "/"
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "tmp_libs"
Operator:  "="
Text:  "<newline>\t    "
Keyword:  "for "
Text:  "deplib "
Keyword:  "in"
Text:  " "
Name.Variable:  "$dependency_libs"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t      "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>              "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$duplicate_deps"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Xyes\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t        case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$tmp_libs"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t        "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$deplib"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "specialdeplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$specialdeplibs"
Literal.String.Double:  " "
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t        "
Keyword:  "esac"
Text:  "<newline>              "
Keyword:  "fi<newline>\t      "
Name.Variable:  "tmp_libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$tmp_libs"
Literal.String.Double:  " "
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "done<newline>\t  elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " prog "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " lib"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": "
Literal.String.Escape:  "\\`"
Name.Variable:  "$lib"
Literal.String.Double:  "' is not a convenience library\""
Text:  " 1>&2<newline>\t    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  continue<newline>\tfi"
Text:  " "
Comment:  "# $pass = conv"
Text:  "<newline><newline><newline>\t"
Comment:  "# Get the name of the library we link against."
Text:  "<newline>\t"
Name.Variable:  "linklib"
Operator:  "="
Text:  "<newline>\t"
Keyword:  "for "
Text:  "l "
Keyword:  "in"
Text:  " "
Name.Variable:  "$old_library"
Text:  " "
Name.Variable:  "$library_names"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t  "
Name.Variable:  "linklib"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$l"
Literal.String.Double:  "\""
Text:  "<newline>\t"
Keyword:  "done<newline>\tif "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t  "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": cannot find name of link library for "
Literal.String.Escape:  "\\`"
Name.Variable:  "$lib"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>\t  "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t"
Keyword:  "fi"
Text:  "<newline><newline>\t"
Comment:  "# This library was specified with -dlopen."
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlopen"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$libdir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": cannot -dlopen a convenience library: "
Literal.String.Escape:  "\\`"
Name.Variable:  "$lib"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>\t    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dlname"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  "<newline>\t     "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dlopen_support"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "||"
Text:  "<newline>\t     "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_libtool_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Comment:  "# If there is no dlname, no dlopen support or we're linking"
Text:  "<newline>\t    "
Comment:  "# statically, we need to preload.  We also need to preload any"
Text:  "<newline>\t    "
Comment:  "# dependent libraries so libltdl's deplib preloader doesn't"
Text:  "<newline>\t    "
Comment:  "# bomb out in the load deplibs phase."
Text:  "<newline>\t    "
Name.Variable:  "dlprefiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlprefiles"
Literal.String.Double:  " "
Name.Variable:  "$lib"
Literal.String.Double:  " "
Name.Variable:  "$dependency_libs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "else<newline>\t    "
Name.Variable:  "newdlfiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$newdlfiles"
Literal.String.Double:  " "
Name.Variable:  "$lib"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  continue<newline>\tfi"
Text:  " "
Comment:  "# $pass = dlopen"
Text:  "<newline><newline>\t"
Comment:  "# We need an absolute path."
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$ladir"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t"
Operator:  "["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Operator:  "["
Text:  "A-Za-z]:["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "abs_ladir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$ladir"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t  "
Name.Variable:  "abs_ladir"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "cd"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$ladir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "pwd"
Literal.String.Backtick:  "`"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$abs_ladir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": warning: cannot determine absolute directory name of "
Literal.String.Escape:  "\\`"
Name.Variable:  "$ladir"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": passing it literally to the linker, although it might fail\""
Text:  " 1>&2<newline>\t    "
Name.Variable:  "abs_ladir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$ladir"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi"
Text:  "<newline>\t  "
Punctuation:  ";;"
Text:  "<newline>\t"
Keyword:  "esac"
Text:  "<newline>\t"
Name.Variable:  "laname"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$lib"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s%^.*/%%'"
Literal.String.Backtick:  "`"
Text:  "<newline><newline>\t"
Comment:  "# Find the relevant object directory and library name."
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$installed"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " Xyes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Operator:  "!"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$libdir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$abs_ladir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": warning: library "
Literal.String.Escape:  "\\`"
Name.Variable:  "$lib"
Literal.String.Double:  "' was moved.\""
Text:  " 1>&2<newline>\t    "
Name.Builtin:  "dir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$ladir"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "absdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$abs_ladir"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "libdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$abs_ladir"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "else<newline>\t    "
Name.Builtin:  "dir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$libdir"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "absdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$libdir"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$hardcode_automatic"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " Xyes "
Operator:  "&&"
Text:  " "
Name.Variable:  "avoidtemprpath"
Operator:  "="
Name.Builtin:  "yes<newline>\t"
Keyword:  "else<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Operator:  "!"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$ladir"
Literal.String.Double:  "/"
Name.Variable:  "$objdir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$abs_ladir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Builtin:  "dir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$ladir"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "absdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$abs_ladir"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Comment:  "# Remove this search path later"
Text:  "<newline>\t    "
Name.Variable:  "notinst_path"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$notinst_path"
Literal.String.Double:  " "
Name.Variable:  "$abs_ladir"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "else<newline>\t    "
Name.Builtin:  "dir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$ladir"
Literal.String.Double:  "/"
Name.Variable:  "$objdir"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "absdir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$abs_ladir"
Literal.String.Double:  "/"
Name.Variable:  "$objdir"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Comment:  "# Remove this search path later"
Text:  "<newline>\t    "
Name.Variable:  "notinst_path"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$notinst_path"
Literal.String.Double:  " "
Name.Variable:  "$abs_ladir"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi<newline>\tfi"
Text:  " "
Comment:  "# $installed = yes"
Text:  "<newline>\t"
Name.Variable:  "name"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$laname"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/\\.la$//'"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/^lib//'"
Literal.String.Backtick:  "`"
Text:  "<newline><newline>\t"
Comment:  "# This library was specified with -dlpreopen."
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " dlpreopen"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$libdir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": cannot -dlpreopen a convenience library: "
Literal.String.Escape:  "\\`"
Name.Variable:  "$lib"
Literal.String.Double:  "'\""
Text:  " 1>&2<newline>\t    "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t  "
Keyword:  "fi"
Text:  "<newline>\t  "
Comment:  "# Prefer using a static library (so that no silly _DYNAMIC symbols"
Text:  "<newline>\t  "
Comment:  "# are required to link)."
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "newdlprefiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$newdlprefiles"
Literal.String.Double:  " "
Name.Variable:  "$dir"
Literal.String.Double:  "/"
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Comment:  "# Otherwise, use the dlname, so that lt_dlopen finds it."
Text:  "<newline>\t  "
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dlname"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "newdlprefiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$newdlprefiles"
Literal.String.Double:  " "
Name.Variable:  "$dir"
Literal.String.Double:  "/"
Name.Variable:  "$dlname"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "else<newline>\t    "
Name.Variable:  "newdlprefiles"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$newdlprefiles"
Literal.String.Double:  " "
Name.Variable:  "$dir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi<newline>\tfi"
Text:  " "
Comment:  "# $pass = dlpreopen"
Text:  "<newline><newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$libdir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t  "
Comment:  "# Link the convenience library"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " lib"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "/"
Name.Variable:  "$old_library"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  ","
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"prog,link\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "compile_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "/"
Name.Variable:  "$old_library"
Literal.String.Double:  " "
Name.Variable:  "$compile_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "finalize_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "/"
Name.Variable:  "$old_library"
Literal.String.Double:  " "
Name.Variable:  "$finalize_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "else<newline>\t    "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$lib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  " "
Comment:  "# used for prog,scan pass"
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  continue<newline>\tfi<newline><newline><newline>\tif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " prog "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "link"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  "
Name.Variable:  "newlib_search_path"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$newlib_search_path"
Literal.String.Double:  " "
Name.Variable:  "$ladir"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$lib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline><newline>\t  "
Name.Variable:  "linkalldeplibs"
Operator:  "="
Text:  "no<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$link_all_deplibs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " no "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$library_names"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  "<newline>\t     "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_libtool_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "linkalldeplibs"
Operator:  "="
Name.Builtin:  "yes<newline>\t  "
Keyword:  "fi<newline><newline>\t  "
Name.Variable:  "tmp_libs"
Operator:  "="
Text:  "<newline>\t  "
Keyword:  "for "
Text:  "deplib "
Keyword:  "in"
Text:  " "
Name.Variable:  "$dependency_libs"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t    case"
Text:  " "
Name.Variable:  "$deplib"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t    "
Name.Tag:  "-L"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "newlib_search_path"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$newlib_search_path"
Literal.String.Double:  " \""
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  " | "
Name.Variable:  "$Xsed"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/^-L//'"
Literal.String.Backtick:  "`"
Punctuation:  ";;"
Text:  " "
Comment:  "### testsuite: skip nested quoting test"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline>\t    "
Comment:  "# Need to link against all dependency_libs?"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkalldeplibs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "else"
Text:  "<newline>\t      "
Comment:  "# Need to hardcode shared library paths"
Text:  "<newline>\t      "
Comment:  "# or/and link against static libraries"
Text:  "<newline>\t      "
Name.Variable:  "newdependency_libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$deplib"
Literal.String.Double:  " "
Name.Variable:  "$newdependency_libs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t    if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\"X"
Name.Variable:  "$duplicate_deps"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"Xyes\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$tmp_libs"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$deplib"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "specialdeplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$specialdeplibs"
Literal.String.Double:  " "
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "esac"
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t    "
Name.Variable:  "tmp_libs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$tmp_libs"
Literal.String.Double:  " "
Name.Variable:  "$deplib"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "done"
Text:  " "
Comment:  "# for deplib"
Text:  "<newline>\t  "
Keyword:  "continue<newline>\tfi"
Text:  " "
Comment:  "# $linkmode = prog..."
Text:  "<newline><newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  ","
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "\"prog,link\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$library_names"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  "<newline>\t     "
Operator:  "{"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$prefer_static_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Operator:  "}"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Comment:  "# We need to hardcode the library path"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$shlibpath_var"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$avoidtemprpath"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t      "
Comment:  "# Make sure the rpath contains only unique directories."
Text:  "<newline>\t      "
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$temp_rpath"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$dir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$absdir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "temp_rpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$temp_rpath"
Literal.String.Double:  " "
Name.Variable:  "$absdir"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "esac"
Text:  "<newline>\t    "
Keyword:  "fi"
Text:  "<newline><newline>\t    "
Comment:  "# Hardcode the library path."
Text:  "<newline>\t    "
Comment:  "# Skip directories that are in the system default run-time"
Text:  "<newline>\t    "
Comment:  "# search path."
Text:  "<newline>\t    "
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\" "
Name.Variable:  "$sys_lib_dlsearch_path"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t    "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$absdir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t      "
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$compile_rpath"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$absdir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "compile_rpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_rpath"
Literal.String.Double:  " "
Name.Variable:  "$absdir"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "esac"
Text:  "<newline>\t      "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline>\t    "
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\" "
Name.Variable:  "$sys_lib_dlsearch_path"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t    "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$libdir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t      "
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$finalize_rpath"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$libdir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "finalize_rpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_rpath"
Literal.String.Double:  " "
Name.Variable:  "$libdir"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "esac"
Text:  "<newline>\t      "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline>\t  "
Keyword:  "fi"
Text:  " "
Comment:  "# $linkmode,$pass = prog,link..."
Text:  "<newline><newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$alldeplibs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "&&"
Text:  "<newline>\t     "
Operator:  "{"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$deplibs_check_method"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " pass_all "
Operator:  "||"
Text:  "<newline>\t       "
Operator:  "{"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_libtool_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "&&"
Text:  "<newline>\t\t "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$library_names"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Operator:  "}"
Punctuation:  ";"
Text:  " "
Operator:  "}"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Comment:  "# We only need to search for static libraries"
Text:  "<newline>\t    "
Keyword:  "continue<newline>\t  fi<newline>\tfi<newline><newline>\t"
Name.Variable:  "link_static"
Operator:  "="
Text:  "no "
Comment:  "# Whether the deplib will be linked statically"
Text:  "<newline>\t"
Name.Variable:  "use_static_libs"
Operator:  "="
Name.Variable:  "$prefer_static_libs"
Text:  "<newline>\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$use_static_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " built "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$installed"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  "
Name.Variable:  "use_static_libs"
Operator:  "="
Text:  "no<newline>\t"
Keyword:  "fi<newline>\tif "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$library_names"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  "<newline>\t   "
Operator:  "{"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$use_static_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Operator:  "}"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$installed"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "notinst_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$notinst_deplibs"
Literal.String.Double:  " "
Name.Variable:  "$lib"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "need_relink"
Operator:  "="
Name.Builtin:  "yes<newline>\t  "
Keyword:  "fi"
Text:  "<newline>\t  "
Comment:  "# This is a shared library"
Text:  "<newline><newline>\t  "
Comment:  "# Warn about portability, can't link against -module's on"
Text:  "<newline>\t  "
Comment:  "# some systems (darwin)"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$shouldnotlink"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "&&"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$pass"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "link"
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " prog"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** Warning: Linking the executable "
Name.Variable:  "$output"
Literal.String.Double:  " against the loadable module\""
Text:  "<newline>\t    "
Keyword:  "else"
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** Warning: Linking the shared library "
Name.Variable:  "$output"
Literal.String.Double:  " against the loadable module\""
Text:  "<newline>\t    "
Keyword:  "fi"
Text:  "<newline>\t    "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"*** "
Name.Variable:  "$linklib"
Literal.String.Double:  " is not portable!\""
Text:  "<newline>\t  "
Keyword:  "fi<newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " lib "
Operator:  "&&"
Text:  "<newline>\t     "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_into_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Comment:  "# Hardcode the library path."
Text:  "<newline>\t    "
Comment:  "# Skip directories that are in the system default run-time"
Text:  "<newline>\t    "
Comment:  "# search path."
Text:  "<newline>\t    "
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\" "
Name.Variable:  "$sys_lib_dlsearch_path"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t    "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$absdir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t      "
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$compile_rpath"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$absdir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "compile_rpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_rpath"
Literal.String.Double:  " "
Name.Variable:  "$absdir"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "esac"
Text:  "<newline>\t      "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline>\t    "
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\" "
Name.Variable:  "$sys_lib_dlsearch_path"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t    "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$libdir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t      "
Keyword:  "case"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$finalize_rpath"
Literal.String.Double:  " \""
Text:  " "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Literal.String.Double:  "\" "
Name.Variable:  "$libdir"
Literal.String.Double:  " \""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "finalize_rpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_rpath"
Literal.String.Double:  " "
Name.Variable:  "$libdir"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "esac"
Text:  "<newline>\t      "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline>\t  "
Keyword:  "fi<newline><newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$old_archive_from_expsyms_cmds"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Comment:  "# figure out the soname"
Text:  "<newline>\t    "
Name.Builtin:  "set "
Text:  "dummy "
Name.Variable:  "$library_names"
Text:  "<newline>\t    "
Name.Variable:  "realname"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$2"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Builtin:  "shift"
Punctuation:  ";"
Text:  " "
Name.Builtin:  "shift<newline>\t    "
Name.Variable:  "libname"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "eval"
Text:  " "
Literal.String.Escape:  "\\\\"
Name.Variable:  "$echo"
Text:  " "
Literal.String.Escape:  "\\\""
Name.Variable:  "$libname_spec"
Literal.String.Escape:  "\\\""
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Comment:  "# use dlname if we got it. it's perfectly good, no?"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$dlname"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "soname"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dlname"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$soname_spec"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t      "
Comment:  "# bleh windows"
Text:  "<newline>\t      "
Keyword:  "case"
Text:  " "
Name.Variable:  "$host"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Text:  "cygwin"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " mingw"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t\t"
Name.Variable:  "major"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Builtin:  "expr"
Text:  " "
Name.Variable:  "$current"
Text:  " - "
Name.Variable:  "$age"
Literal.String.Backtick:  "`"
Text:  "<newline>\t\t"
Name.Variable:  "versuffix"
Operator:  "="
Literal.String.Double:  "\"-"
Name.Variable:  "$major"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "esac"
Text:  "<newline>\t      "
Name.Builtin:  "eval "
Name.Variable:  "soname"
Operator:  "="
Literal.String.Escape:  "\\\""
Name.Variable:  "$soname_spec"
Literal.String.Escape:  "\\\""
Text:  "<newline>\t    "
Keyword:  "else<newline>\t      "
Name.Variable:  "soname"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$realname"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi"
Text:  "<newline><newline>\t    "
Comment:  "# Make a new name for the extract_expsyms_cmds to use"
Text:  "<newline>\t    "
Name.Variable:  "soroot"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$soname"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "soname"
Operator:  "="
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$soroot"
Text:  " | "
Keyword:  "${"
Name.Variable:  "SED"
Keyword:  "}"
Text:  " "
Name.Tag:  "-e"
Text:  " "
Literal.String.Single:  "'s/^.*\\///'"
Literal.String.Backtick:  "`"
Text:  "<newline>\t    "
Name.Variable:  "newlib"
Operator:  "="
Literal.String.Double:  "\"libimp-"
Literal.String.Backtick:  "`"
Name.Variable:  "$echo"
Text:  " "
Name.Variable:  "$soname"
Text:  " | "
Keyword:  "${"
Name.Variable:  "SED"
Keyword:  "}"
Text:  " "
Literal.String.Single:  "'s/^lib//;s/\\.dll$//'"
Literal.String.Backtick:  "`"
Literal.String.Double:  ".a\""
Text:  "<newline><newline>\t    "
Comment:  "# If the library has no export list, then create one now"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$output_objdir"
Literal.String.Double:  "/"
Name.Variable:  "$soname"
Literal.String.Double:  "-def\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  " :<newline>\t    "
Keyword:  "else"
Text:  "<newline>\t      "
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\"extracting exported symbol list from "
Literal.String.Escape:  "\\`"
Name.Variable:  "$soname"
Literal.String.Double:  "'\""
Text:  "<newline>\t      "
Name.Variable:  "save_ifs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$IFS"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Single:  "'~'"
Text:  "<newline>\t      "
Name.Variable:  "cmds"
Operator:  "="
Name.Variable:  "$extract_expsyms_cmds"
Text:  "<newline>\t      "
Keyword:  "for "
Text:  "cmd "
Keyword:  "in"
Text:  " "
Name.Variable:  "$cmds"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t\t"
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$save_ifs"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Name.Builtin:  "eval "
Name.Variable:  "cmd"
Operator:  "="
Literal.String.Escape:  "\\\""
Name.Variable:  "$cmd"
Literal.String.Escape:  "\\\""
Text:  "<newline>\t\t"
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$cmd"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Name.Variable:  "$run"
Text:  " "
Name.Builtin:  "eval"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$cmd"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$?"
Text:  "<newline>\t      "
Keyword:  "done<newline>\t      "
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$save_ifs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi"
Text:  "<newline><newline>\t    "
Comment:  "# Create $newlib"
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$output_objdir"
Literal.String.Double:  "/"
Name.Variable:  "$newlib"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  " :"
Punctuation:  ";"
Text:  " "
Keyword:  "else"
Text:  "<newline>\t      "
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\"generating import library for "
Literal.String.Escape:  "\\`"
Name.Variable:  "$soname"
Literal.String.Double:  "'\""
Text:  "<newline>\t      "
Name.Variable:  "save_ifs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$IFS"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Single:  "'~'"
Text:  "<newline>\t      "
Name.Variable:  "cmds"
Operator:  "="
Name.Variable:  "$old_archive_from_expsyms_cmds"
Text:  "<newline>\t      "
Keyword:  "for "
Text:  "cmd "
Keyword:  "in"
Text:  " "
Name.Variable:  "$cmds"
Punctuation:  ";"
Text:  " "
Keyword:  "do<newline>\t\t"
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$save_ifs"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Name.Builtin:  "eval "
Name.Variable:  "cmd"
Operator:  "="
Literal.String.Escape:  "\\\""
Name.Variable:  "$cmd"
Literal.String.Escape:  "\\\""
Text:  "<newline>\t\t"
Name.Variable:  "$show"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$cmd"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Name.Variable:  "$run"
Text:  " "
Name.Builtin:  "eval"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$cmd"
Literal.String.Double:  "\""
Text:  " "
Operator:  "||"
Text:  " "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$?"
Text:  "<newline>\t      "
Keyword:  "done<newline>\t      "
Name.Variable:  "IFS"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$save_ifs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi"
Text:  "<newline>\t    "
Comment:  "# make sure the library variables are pointing to the new library"
Text:  "<newline>\t    "
Name.Builtin:  "dir"
Operator:  "="
Name.Variable:  "$output_objdir"
Text:  "<newline>\t    "
Name.Variable:  "linklib"
Operator:  "="
Name.Variable:  "$newlib"
Text:  "<newline>\t  "
Keyword:  "fi"
Text:  " "
Comment:  "# test -n \"$old_archive_from_expsyms_cmds\""
Text:  "<newline><newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " prog "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$mode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " relink"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "add_shlibpath"
Operator:  "="
Text:  "<newline>\t    "
Name.Variable:  "add_dir"
Operator:  "="
Text:  "<newline>\t    "
Name.Variable:  "add"
Operator:  "="
Text:  "<newline>\t    "
Name.Variable:  "lib_linked"
Operator:  "="
Name.Builtin:  "yes<newline>\t    "
Keyword:  "case"
Text:  " "
Name.Variable:  "$hardcode_action"
Text:  " "
Keyword:  "in<newline>\t    "
Text:  "immediate "
Punctuation:  "|"
Text:  " unsupported"
Punctuation:  ")"
Text:  "<newline>\t      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_direct"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t"
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Keyword:  "case"
Text:  " "
Name.Variable:  "$host"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t\t  "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-sco3"
Text:  ".2v5.0.[024]"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "add_dir"
Operator:  "="
Literal.String.Double:  "\"-L"
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t\t  "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-sysv4"
Keyword:  "*"
Text:  "uw2"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "add_dir"
Operator:  "="
Literal.String.Double:  "\"-L"
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t\t  "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-sysv5OpenUNIX"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-sysv5UnixWare7"
Text:  ".[01].[10]"
Keyword:  "*"
Text:  " "
Punctuation:  "|"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t\t    "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-unixware7"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "add_dir"
Operator:  "="
Literal.String.Double:  "\"-L"
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t\t  "
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-darwin"
Keyword:  "*"
Text:  " "
Punctuation:  ")"
Text:  "<newline>\t\t    "
Comment:  "# if the lib is a module then we can not link against"
Text:  "<newline>\t\t    "
Comment:  "# it, someone is ignoring the new warnings I added"
Text:  "<newline>\t\t    "
Keyword:  "if"
Text:  " /usr/bin/file "
Name.Tag:  "-L"
Text:  " "
Name.Variable:  "$add"
Text:  " 2> /dev/null |<newline>                      "
Name.Variable:  "$EGREP"
Text:  " "
Literal.String.Double:  "\": [^:]* bundle\""
Text:  " "
Operator:  ">"
Text:  "/dev/null "
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"** Warning, lib "
Name.Variable:  "$linklib"
Literal.String.Double:  " is a module, not a shared library\""
Text:  "<newline>\t\t      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-z"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t\t        "
Name.Variable:  "$echo"
Text:  "<newline>\t\t        "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"** And there doesn't seem to be a static archive available\""
Text:  "<newline>\t\t        "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\"** The link will probably fail, sorry\""
Text:  "<newline>\t\t      "
Keyword:  "else<newline>\t\t        "
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "/"
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Text:  "<newline>\t\t      "
Keyword:  "fi<newline>\t\t    fi<newline>\t\tesac<newline>\t      elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_minus_L"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\tcase"
Text:  " "
Name.Variable:  "$host"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t\t"
Keyword:  "*"
Text:  "-"
Keyword:  "*"
Name.Tag:  "-sunos"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "add_shlibpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t\t"
Keyword:  "esac"
Text:  "<newline>\t\t"
Name.Variable:  "add_dir"
Operator:  "="
Literal.String.Double:  "\"-L"
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\"-l"
Name.Variable:  "$name"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_shlibpath_var"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " no"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t"
Name.Variable:  "add_shlibpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\"-l"
Name.Variable:  "$name"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "else<newline>\t\t"
Name.Variable:  "lib_linked"
Operator:  "="
Text:  "no<newline>\t      "
Keyword:  "fi"
Text:  "<newline>\t      "
Punctuation:  ";;"
Text:  "<newline>\t    relink"
Punctuation:  ")"
Text:  "<newline>\t      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_direct"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t"
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_minus_L"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t"
Name.Variable:  "add_dir"
Operator:  "="
Literal.String.Double:  "\"-L"
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Comment:  "# Try looking first in the location we're being installed to."
Text:  "<newline>\t\t"
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$inst_prefix_dir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t  case"
Text:  " "
Name.Variable:  "$libdir"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t\t    "
Operator:  "["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t\t      "
Name.Variable:  "add_dir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$add_dir"
Literal.String.Double:  " -L"
Name.Variable:  "$inst_prefix_dir$libdir"
Literal.String.Double:  "\""
Text:  "<newline>\t\t      "
Punctuation:  ";;"
Text:  "<newline>\t\t  "
Keyword:  "esac"
Text:  "<newline>\t\t"
Keyword:  "fi<newline>\t\t"
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\"-l"
Name.Variable:  "$name"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_shlibpath_var"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\t"
Name.Variable:  "add_shlibpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "\""
Text:  "<newline>\t\t"
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\"-l"
Name.Variable:  "$name"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "else<newline>\t\t"
Name.Variable:  "lib_linked"
Operator:  "="
Text:  "no<newline>\t      "
Keyword:  "fi"
Text:  "<newline>\t      "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "lib_linked"
Operator:  "="
Text:  "no "
Punctuation:  ";;"
Text:  "<newline>\t    "
Keyword:  "esac"
Text:  "<newline><newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$lib_linked"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t      "
Name.Variable:  "$echo"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$modename"
Literal.String.Double:  ": configuration error: unsupported hardcode properties\""
Text:  "<newline>\t      "
Name.Builtin:  "exit"
Text:  " "
Name.Variable:  "$EXIT_FAILURE"
Text:  "<newline>\t    "
Keyword:  "fi<newline><newline>\t    if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$add_shlibpath"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      case"
Text:  " :"
Name.Variable:  "$compile_shlibpath"
Text:  ": "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Literal.String.Double:  "\":"
Name.Variable:  "$add_shlibpath"
Literal.String.Double:  ":\""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "compile_shlibpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$compile_shlibpath$add_shlibpath"
Literal.String.Double:  ":\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "esac"
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t    if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " prog"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$add_dir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "compile_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$add_dir"
Literal.String.Double:  " "
Name.Variable:  "$compile_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$add"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "compile_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$add"
Literal.String.Double:  " "
Name.Variable:  "$compile_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "else<newline>\t      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$add_dir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$add_dir"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$add"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$add"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_direct"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "&&"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t\t "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_minus_L"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " "
Name.Builtin:  "yes"
Text:  " "
Operator:  "&&"
Text:  " "
Literal.String.Escape:  "\\"
Text:  "<newline>\t\t "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_shlibpath_var"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\tcase"
Text:  " :"
Name.Variable:  "$finalize_shlibpath"
Text:  ": "
Keyword:  "in"
Text:  "<newline>\t\t"
Keyword:  "*"
Literal.String.Double:  "\":"
Name.Variable:  "$libdir"
Literal.String.Double:  ":\""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t\t"
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "finalize_shlibpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_shlibpath$libdir"
Literal.String.Double:  ":\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t\t"
Keyword:  "esac"
Text:  "<newline>\t      "
Keyword:  "fi<newline>\t    fi<newline>\t  fi<newline><newline>\t  if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " prog "
Operator:  "||"
Text:  " "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$mode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " relink"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Variable:  "add_shlibpath"
Operator:  "="
Text:  "<newline>\t    "
Name.Variable:  "add_dir"
Operator:  "="
Text:  "<newline>\t    "
Name.Variable:  "add"
Operator:  "="
Text:  "<newline>\t    "
Comment:  "# Finalize command for both is simple: just hardcode it."
Text:  "<newline>\t    "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_direct"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$libdir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_minus_L"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Variable:  "add_dir"
Operator:  "="
Literal.String.Double:  "\"-L"
Name.Variable:  "$libdir"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\"-l"
Name.Variable:  "$name"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_shlibpath_var"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      case"
Text:  " :"
Name.Variable:  "$finalize_shlibpath"
Text:  ": "
Keyword:  "in"
Text:  "<newline>\t      "
Keyword:  "*"
Literal.String.Double:  "\":"
Name.Variable:  "$libdir"
Literal.String.Double:  ":\""
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "*"
Punctuation:  ")"
Text:  " "
Name.Variable:  "finalize_shlibpath"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$finalize_shlibpath$libdir"
Literal.String.Double:  ":\""
Text:  " "
Punctuation:  ";;"
Text:  "<newline>\t      "
Keyword:  "esac"
Text:  "<newline>\t      "
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\"-l"
Name.Variable:  "$name"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "elif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_automatic"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$inst_prefix_dir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  "<newline>\t\t "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-f"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$inst_prefix_dir$libdir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Text:  " "
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t        "
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$inst_prefix_dir$libdir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "else<newline>\t        "
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$libdir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Keyword:  "fi<newline>\t    else"
Text:  "<newline>\t      "
Comment:  "# We cannot seem to hardcode it, guess we'll fake it."
Text:  "<newline>\t      "
Name.Variable:  "add_dir"
Operator:  "="
Literal.String.Double:  "\"-L"
Name.Variable:  "$libdir"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Comment:  "# Try looking first in the location we're being installed to."
Text:  "<newline>\t      "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$inst_prefix_dir"
Literal.String.Double:  "\""
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t\tcase"
Text:  " "
Name.Variable:  "$libdir"
Text:  " "
Keyword:  "in"
Text:  "<newline>\t\t  "
Operator:  "["
Literal.String.Escape:  "\\\\"
Text:  "/]"
Keyword:  "*"
Punctuation:  ")"
Text:  "<newline>\t\t    "
Name.Variable:  "add_dir"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$add_dir"
Literal.String.Double:  " -L"
Name.Variable:  "$inst_prefix_dir$libdir"
Literal.String.Double:  "\""
Text:  "<newline>\t\t    "
Punctuation:  ";;"
Text:  "<newline>\t\t"
Keyword:  "esac"
Text:  "<newline>\t      "
Keyword:  "fi<newline>\t      "
Name.Variable:  "add"
Operator:  "="
Literal.String.Double:  "\"-l"
Name.Variable:  "$name"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi<newline><newline>\t    if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " prog"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$add_dir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "finalize_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$add_dir"
Literal.String.Double:  " "
Name.Variable:  "$finalize_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$add"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "finalize_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$add"
Literal.String.Double:  " "
Name.Variable:  "$finalize_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "else<newline>\t      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$add_dir"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$add_dir"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t      "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$add"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$add"
Literal.String.Double:  " "
Name.Variable:  "$deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Keyword:  "fi<newline>\t  fi<newline>\telif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$linkmode"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " prog"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t  "
Comment:  "# Here we assume that one of hardcode_direct or hardcode_minus_L"
Text:  "<newline>\t  "
Comment:  "# is not unsupported.  This is valid on all known static and"
Text:  "<newline>\t  "
Comment:  "# shared platforms."
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$hardcode_direct"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " unsupported"
Punctuation:  ";"
Text:  " "
Keyword:  "then<newline>\t    "
Name.Builtin:  "test"
Text:  " "
Name.Tag:  "-n"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Text:  " "
Operator:  "&&"
Text:  " "
Name.Variable:  "linklib"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$old_library"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "compile_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  " "
Name.Variable:  "$compile_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "finalize_deplibs"
Operator:  "="
Literal.String.Double:  "\""
Name.Variable:  "$dir"
Literal.String.Double:  "/"
Name.Variable:  "$linklib"
Literal.String.Double:  " "
Name.Variable:  "$finalize_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "else<newline>\t    "
Name.Variable:  "compile_deplibs"
Operator:  "="
Literal.String.Double:  "\"-l"
Name.Variable:  "$name"
Literal.String.Double:  " -L"
Name.Variable:  "$dir"
Literal.String.Double:  " "
Name.Variable:  "$compile_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t    "
Name.Variable:  "finalize_deplibs"
Operator:  "="
Literal.String.Double:  "\"-l"
Name.Variable:  "$name"
Literal.String.Double:  " -L"
Name.Variable:  "$dir"
Literal.String.Double:  " "
Name.Variable:  "$finalize_deplibs"
Literal.String.Double:  "\""
Text:  "<newline>\t  "
Keyword:  "fi<newline>\telif "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$build_libtool_libs"
Literal.String.Double:  "\""
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "yes"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t  "
Comment:  "# Not a shared library"
Text:  "<newline>\t  "
Keyword:  "if "
Name.Builtin:  "test"
Text:  " "
Literal.String.Double:  "\""
Name.Variable:  "$deplibs_check_method"
Literal.String.Double:  "\""
Text:  " "
Operator:  "!="
Text:  " pass_all"
Punctuation:  ";"
Text:  " "
Keyword:  "then"
Text:  "<newline>\t    "
Comment:  "# We're trying link a shared library against a static one"
Text:  "<newline>\t    "
Comment:  "# but the system doesn't support it."
Text:  "<newline>"
