Keyword.Declaration:  "import"
Text:  " "
Keyword.Type:  "Foundation"
Text:  "<newline>"
Keyword.Declaration:  "@testable"
Text:  " "
Keyword.Declaration:  "import"
Text:  " "
Keyword.Type:  "MyModule"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "sayHello"
Punctuation:  "("
Name.Variable:  "person"
Punctuation:  ":"
Keyword.Type:  "String"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "String"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.String:  "\"Hello, "
Literal.String.Escape:  "\\("
Name.Function:  "capitalize"
Punctuation:  "("
Name.Variable:  "word"
Punctuation:  ":"
Name:  "person"
Punctuation:  ")"
Literal.String.Escape:  ")"
Literal.String:  ". "
Literal.String.Escape:  "\\\""
Literal.String:  "How're are you doin"
Literal.String.Escape:  "\\'"
Literal.String:  "?"
Literal.String.Escape:  "\\\""
Literal.String:  "\""
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "capitalize"
Punctuation:  "("
Name.Variable:  "#word"
Punctuation:  ":"
Keyword.Type:  "String"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "String"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "//TODO: test this"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "word"
Operator:  "."
Name:  "capitalizedString"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Function:  "sayHello"
Punctuation:  "("
Literal.String:  "\"Toto\""
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "var"
Text:  " "
Name.Variable:  "pi"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "3.1415"
Text:  "<newline><newline>"
Keyword:  "var"
Text:  " "
Name.Variable:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Name:  "cast"
Text:  " "
Keyword:  "as"
Text:  " "
Keyword.Type:  "SomeType"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Name.Variable:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Name:  "optionalCast"
Text:  " "
Keyword:  "as?"
Text:  " "
Keyword.Type:  "SomeType"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Name.Variable:  "foo"
Text:  " "
Operator:  "="
Text:  " "
Name:  "forcedCast"
Text:  " "
Keyword:  "as!"
Text:  " "
Keyword.Type:  "SomeType"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "halfOpenRangeLength"
Punctuation:  "("
Name.Variable:  "start"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ","
Text:  " "
Name.Variable:  "end"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Int"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "end"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "start"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Function:  "halfOpenRangeLength"
Punctuation:  "("
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "8"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Keyword:  "let"
Text:  " "
Name.Variable:  "var"
Text:  " "
Operator:  "="
Text:  " "
Name:  "option"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Name:  "more"
Text:  " "
Operator:  "&&"
Text:  " "
Name:  "complex"
Punctuation:  ","
Text:  " "
Keyword:  "let"
Text:  " "
Name.Variable:  "optional"
Text:  " "
Operator:  "="
Text:  " "
Name:  "binding"
Punctuation:  ","
Text:  " "
Name:  "example"
Text:  " "
Operator:  "="
Text:  " "
Name:  "here"
Text:  " "
Keyword:  "where"
Text:  " "
Name:  "option"
Operator:  "."
Name:  "foo"
Text:  " "
Operator:  "=="
Text:  " "
Name:  "example"
Operator:  "."
Name:  "foo"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Comment.Single:  "// things"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "count"
Punctuation:  "("
Name.Variable:  "string"
Punctuation:  ":"
Keyword.Type:  "String"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "("
Name.Variable:  "vowels"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ","
Text:  " "
Name.Variable:  "consonants"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ","
Text:  " "
Name.Variable:  "others"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "var"
Text:  " "
Name.Variable:  "vowels"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name:  "consonants"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name:  "emoji"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name:  "whitespace"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name:  "others"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline><newline>    "
Keyword:  "for"
Text:  " "
Name:  "character"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "string"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>        "
Keyword:  "switch"
Text:  " "
Keyword.Type:  "String"
Punctuation:  "("
Name:  "character"
Punctuation:  ")"
Operator:  "."
Name:  "lowercaseString"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Literal.String:  "\"a\""
Punctuation:  ","
Literal.String:  "\"o\""
Punctuation:  ","
Literal.String:  "\"i\""
Punctuation:  ","
Literal.String:  "\"u\""
Punctuation:  ","
Literal.String:  "\"e\""
Punctuation:  ":"
Text:  "<newline>            "
Operator:  "++"
Name:  "vowels"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Literal.String:  "\"b\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"c\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"d\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"f\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"g\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"h\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"j\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"k\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"l\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"m\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"n\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"p\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"q\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"r\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"s\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"t\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"v\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"w\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"x\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"y\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"z\""
Punctuation:  ":"
Text:  "<newline>            "
Operator:  "++"
Name:  "consonants"
Text:  "<newline>        "
Comment.Single:  "//TODO: Add more emoji"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Literal.String:  "\""
Literal.String.Escape:  "\\u{1F604}"
Literal.String:  "\""
Punctuation:  ":"
Text:  "<newline>            "
Operator:  "++"
Name:  "emoji"
Text:  "<newline>        "
Keyword:  "case"
Text:  " "
Literal.String:  "\""
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Literal.String:  "\""
Literal.String.Escape:  "\\r"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Literal.String:  "\""
Literal.String.Escape:  "\\t"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Literal.String:  "\""
Literal.String.Escape:  "\\0"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Literal.String:  "\""
Literal.String.Escape:  "\\u{A0}"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Literal.String:  "\""
Literal.String.Escape:  "\\u{205F}"
Literal.String:  "\""
Punctuation:  ":"
Text:  "<newline>            "
Operator:  "++"
Name:  "whitespace"
Text:  "<newline>        "
Keyword:  "default"
Punctuation:  ":"
Text:  "<newline>            "
Operator:  "++"
Name:  "others"
Text:  "<newline>        "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Function:  "return"
Text:  " "
Punctuation:  "("
Name:  "vowels"
Punctuation:  ","
Name:  "consonants"
Punctuation:  ","
Name:  "others"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Function:  "count"
Punctuation:  "("
Name.Function:  "sayHello"
Punctuation:  "("
Literal.String:  "\"John\""
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  "// Unicode and Emoji support"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "\u{1F604}face"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"Happy Face\""
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "\u10E5\u10D0\u10E0\u10D7\u10E3\u10DA\u10D0\u10D3\u10D0\u10EA"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"This is Georgian\""
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "\u3053\u3093\u306B\u3061\u306F"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"...and Japanese\""
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "\u{13080}"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"and hieroglyphs\""
Text:  "<newline><newline>"
Comment.Single:  "// Integer Literals"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "decimalInteger"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1234567"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "decimalIntegerWithGroupings"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1_234_567"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "hexadecimalInteger"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Hex:  "0xABCDEF"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "octalInteger"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Oct:  "0o0644"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "binaryInteger"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Bin:  "0b1010"
Text:  "<newline><newline>"
Comment.Single:  "// Floating-Point Literals"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "decimalFloatingPoint"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "1234567.89"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "decimalFloatingPointWithGroupings"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "1_2345_67.89"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "hexadecimalFloatingPoint"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Hex:  "0xA.1p-3"
Text:  "<newline><newline>"
Comment.Single:  "// String Literals"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "string"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"Hello, world!\""
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "multilineString"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"\"\"<newline>All human beings are born free and equal in dignity and rights.<newline>They are endowed with reason and conscience<newline>and should act towards one another in a spirit of brotherhood.<newline>\"\"\""
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "join"
Punctuation:  "("
Name.Variable:  "#firstString"
Punctuation:  ":"
Keyword.Type:  "String"
Punctuation:  ","
Name.Variable:  "#secondString"
Punctuation:  ":"
Keyword.Type:  "String"
Punctuation:  ","
Name.Variable:  "joiner"
Punctuation:  ":"
Keyword.Type:  "String"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\" & \""
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "String"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.String:  "\""
Literal.String.Escape:  "\\("
Name:  "firstString"
Literal.String.Escape:  ")\\("
Name:  "joiner"
Literal.String.Escape:  ")\\("
Name:  "secondString"
Literal.String.Escape:  ")"
Literal.String:  "\""
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Function:  "join"
Punctuation:  "("
Name.Variable:  "firstString"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Toto\""
Punctuation:  ","
Text:  " "
Name.Variable:  "secondString"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Someone Other\""
Punctuation:  ","
Text:  " "
Name.Variable:  "joiner"
Punctuation:  ":"
Text:  " "
Literal.String:  "\" + \""
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "alignedRight"
Punctuation:  "("
Keyword:  "inout"
Text:  " "
Name.Variable:  "#string"
Punctuation:  ":"
Keyword.Type:  "String"
Punctuation:  ","
Text:  " "
Name.Variable:  "count"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ","
Text:  " "
Name.Variable:  "pad"
Punctuation:  ":"
Keyword.Type:  "Character"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "String"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name.Variable:  "amountToPad"
Text:  " "
Operator:  "="
Text:  " "
Name:  "count"
Text:  " "
Operator:  "-"
Text:  " "
Name.Function:  "countElements"
Punctuation:  "("
Name:  "string"
Punctuation:  ")"
Text:  "<newline><newline>    "
Keyword:  "for"
Text:  " "
Name:  "_"
Text:  " "
Keyword:  "in"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  "..."
Name:  "amountToPad"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "string"
Text:  " "
Operator:  "="
Text:  " "
Name:  "pad"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "string"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword:  "return"
Text:  " "
Name:  "string"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* This is a multiline comment<newline>/*<newline>This part is nested into the parent comment<newline>*/<newline>Trailing part of parent comment<newline>*/"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "thisIsNotAComment"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline><newline>"
Comment.Multiline:  "/* Singleline Comment */"
Text:  "<newline><newline>"
Keyword:  "var"
Text:  " "
Name.Variable:  "textToAlign"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"Toto\""
Text:  "<newline>"
Name.Function:  "alignedRight"
Punctuation:  "("
Name.Variable:  "string"
Punctuation:  ":"
Text:  " "
Operator:  "&"
Name:  "textToAlign"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ","
Text:  " "
Literal.String:  "\"-\""
Punctuation:  ")"
Text:  "<newline>"
Name:  "textToAlign"
Text:  "<newline><newline>"
Comment.Single:  "//MARK: Function Types"
Text:  "<newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "addToInts"
Punctuation:  "("
Name.Variable:  "a"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ","
Name.Variable:  "b"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Int"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "a"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "b"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "addNumbers"
Punctuation:  ":"
Text:  " "
Punctuation:  "("
Keyword.Type:  "Int"
Punctuation:  ","
Keyword.Type:  "Int"
Punctuation:  ")"
Operator:  "->"
Punctuation:  "("
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Name:  "addToInts"
Punctuation:  ";"
Text:  "<newline>"
Name.Function:  "addNumbers"
Punctuation:  "("
Literal.Number.Integer:  "3"
Punctuation:  ","
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "printMathProblem"
Punctuation:  "("
Name.Variable:  "mathFunction"
Punctuation:  ":("
Keyword.Type:  "Int"
Punctuation:  ","
Keyword.Type:  "Int"
Punctuation:  ")"
Operator:  "->"
Keyword.Type:  "Int"
Punctuation:  ","
Name.Variable:  "a"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ","
Name.Variable:  "b"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ")"
Operator:  "->"
Keyword.Type:  "String"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Literal.String:  "\"Result \""
Text:  " "
Operator:  "+"
Text:  " "
Keyword.Type:  "String"
Punctuation:  "("
Name.Function:  "mathFunction"
Punctuation:  "("
Name:  "a"
Punctuation:  ","
Name:  "b"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Name.Function:  "printMathProblem"
Punctuation:  "("
Name:  "addNumbers"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "// Function return types + Nested Functions"
Text:  "<newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "chooseSteperFunction"
Punctuation:  "("
Name.Variable:  "backward"
Punctuation:  ":"
Keyword.Type:  "Bool"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "("
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Int"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "stepForward"
Punctuation:  "("
Name.Variable:  "input"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ")"
Operator:  "->"
Keyword.Type:  "Int"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "input"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "stepBackward"
Punctuation:  "("
Name.Variable:  "input"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ")"
Operator:  "->"
Keyword.Type:  "Int"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "input"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "1"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword:  "return"
Text:  " "
Name:  "backward"
Text:  " "
Punctuation:  "?"
Text:  " "
Name.Variable:  "stepBackward"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "stepForward"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "currentValue"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "5"
Text:  "<newline>"
Name.Function:  "chooseSteperFunction"
Punctuation:  "("
Name:  "currentValue"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")("
Name:  "currentValue"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "// Closures"
Text:  "<newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "comparator"
Punctuation:  "("
Name.Variable:  "s1"
Punctuation:  ":"
Keyword.Type:  "String"
Punctuation:  ","
Name.Variable:  "s2"
Punctuation:  ":"
Keyword.Type:  "String"
Punctuation:  ")"
Operator:  "->"
Keyword.Type:  "Bool"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "s2"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "s1"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "names"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String:  "\"Chris\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"Alex\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"Ewa\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"Barry\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"Daniella\""
Punctuation:  "]"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "revised"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "sorted"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Name:  "comparator"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "revised2"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "sorted"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "("
Name.Variable:  "s1"
Punctuation:  ":"
Keyword.Type:  "String"
Punctuation:  ","
Name.Variable:  "s2"
Punctuation:  ":"
Keyword.Type:  "String"
Punctuation:  ")"
Operator:  "->"
Keyword.Type:  "Bool"
Text:  " "
Keyword:  "in"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "s2"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "s1"
Text:  "<newline>    "
Punctuation:  "})"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "revised3"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "sorted"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "s1"
Punctuation:  ","
Text:  " "
Name:  "s2"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "s1"
Text:  " "
Operator:  ">"
Text:  " "
Name:  "s2"
Text:  " "
Punctuation:  "})"
Text:  "<newline>"
Name:  "revised3"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "revised4"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "sorted"
Punctuation:  "("
Name:  "names"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "$0"
Text:  " "
Operator:  ">"
Text:  " "
Name.Variable:  "$1"
Text:  " "
Punctuation:  "}"
Text:  " "
Comment.Single:  "// This is also a trailing closure"
Text:  "<newline>"
Name:  "revised4"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "revised5"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "sorted"
Punctuation:  "("
Name:  "names"
Punctuation:  ","
Text:  " "
Operator:  ">"
Punctuation:  ")"
Text:  "<newline><newline>"
Comment.Single:  "// Long closures"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "digitNames"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Text:  "<newline>    "
Literal.Number.Integer:  "0"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Zero\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"One\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Two\""
Punctuation:  ","
Text:  "   "
Literal.Number.Integer:  "3"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Three\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Four\""
Punctuation:  ","
Text:  "<newline>    "
Literal.Number.Integer:  "5"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Five\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "6"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Six\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "7"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Seven\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "8"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Eight\""
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "9"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Nine\""
Text:  "<newline>"
Punctuation:  "]"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "numbers"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.Number.Integer:  "16"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "58"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "510"
Punctuation:  "]"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "strings"
Text:  " "
Operator:  "="
Text:  " "
Name:  "numbers"
Operator:  "."
Name:  "map"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "("
Keyword:  "var"
Text:  " "
Name.Variable:  "number"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "String"
Text:  " "
Keyword:  "in"
Text:  "<newline>    "
Keyword:  "var"
Text:  " "
Name.Variable:  "output"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"\""
Text:  "<newline>    "
Keyword:  "while"
Text:  " "
Name:  "number"
Text:  " "
Operator:  ">"
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "output"
Text:  " "
Operator:  "="
Text:  " "
Name:  "digitNames"
Punctuation:  "["
Name:  "number"
Text:  " "
Operator:  "%"
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  "]"
Operator:  "!"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "output"
Text:  "<newline>        "
Name:  "number"
Text:  " "
Operator:  "/="
Text:  " "
Literal.Number.Integer:  "10"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "output"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Name:  "strings"
Text:  "<newline><newline>"
Comment.Single:  "// Closure Value Capturing"
Text:  "<newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "makeIncrementor"
Punctuation:  "("
Name:  "firstNumber"
Text:  " "
Name.Variable:  "number"
Punctuation:  ":"
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Int"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "var"
Text:  " "
Name.Variable:  "runningTotal"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  "<newline>    "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "incrementor"
Punctuation:  "()"
Operator:  "->"
Keyword.Type:  "Int"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "runningTotal"
Text:  " "
Operator:  "+="
Text:  " "
Name:  "number"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Name:  "runningTotal"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name:  "incrementor"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "incrementor"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "makeIncrementor"
Punctuation:  "("
Name.Variable:  "firstNumber"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  ")"
Text:  "<newline>"
Name.Function:  "incrementor"
Punctuation:  "()"
Text:  "<newline><newline>"
Comment.Single:  "// @autoclosure"
Text:  "<newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "simpleAssert"
Punctuation:  "("
Keyword.Declaration:  "@autoclosure"
Text:  " "
Name.Variable:  "condition"
Punctuation:  ":"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Bool"
Punctuation:  ","
Text:  " "
Name.Variable:  "message"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "String"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"Assertion failed\""
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "if"
Text:  " "
Operator:  "!"
Name.Function:  "condition"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Function:  "println"
Punctuation:  "("
Name:  "message"
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "lazyAssertion"
Punctuation:  "("
Keyword.Declaration:  "@autoclosure"
Punctuation:  "("
Name:  "escaping"
Punctuation:  ")"
Text:  " "
Name.Variable:  "condition"
Punctuation:  ":"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Bool"
Punctuation:  ","
Text:  " "
Name.Variable:  "message"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "String"
Text:  " "
Operator:  "="
Text:  " "
Literal.String:  "\"\""
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "lazyAssertions"
Operator:  "."
Name.Function:  "append"
Punctuation:  "("
Name:  "condition"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "autoreleasepool"
Punctuation:  "("
Keyword.Declaration:  "@noescape"
Text:  " "
Name.Variable:  "code"
Punctuation:  ":"
Text:  " "
Punctuation:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "())"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "pushAutoreleasePool"
Punctuation:  "()"
Text:  "<newline>    "
Name.Function:  "code"
Punctuation:  "()"
Text:  "<newline>    "
Name.Function:  "popAutoreleasePool"
Punctuation:  "()"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// optional function call"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "maybeFunction"
Punctuation:  ":"
Text:  " "
Punctuation:  "(()"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "())?"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "nil"
Text:  "<newline>"
Name.Function:  "maybeFunction"
Punctuation:  "?()"
Text:  "<newline>"
Name.Function:  "maybeFunction"
Operator:  "!"
Punctuation:  "()"
Text:  "<newline><newline>"
Comment.Single:  "// Swift 2 exceptions"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "throwingFunction"
Punctuation:  "()"
Text:  " "
Keyword:  "throws"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "String"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "throw"
Text:  " "
Keyword.Type:  "ErrorType"
Operator:  "."
Keyword.Type:  "Error"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "do"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name.Function:  "throwingFunction"
Punctuation:  "()"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "catch"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "println"
Punctuation:  "("
Name:  "error"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "try!"
Text:  " "
Name.Function:  "throwingFunction"
Punctuation:  "()"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "rethrowingFunction"
Punctuation:  "("
Name.Variable:  "f"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "T"
Text:  " "
Keyword:  "throws"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "U"
Punctuation:  ")"
Text:  " "
Keyword:  "rethrows"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "U"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>"
Comment.Single:  "// other swift 2 stuff"
Text:  "<newline><newline>"
Keyword:  "guard"
Text:  " "
Keyword:  "let"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "optionalValue"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>   "
Name.Function:  "print"
Punctuation:  "("
Literal.String:  "\"Fail\""
Punctuation:  ")"
Text:  "<newline>   "
Keyword:  "throw"
Text:  " "
Keyword.Type:  "NSError"
Punctuation:  "("
Name.Variable:  "domain"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"\""
Punctuation:  ","
Text:  " "
Name.Variable:  "code"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name.Variable:  "userInfo"
Punctuation:  ":"
Text:  " "
Keyword.Constant:  "nil"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "defer"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Function:  "callback"
Punctuation:  "()"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Keyword:  "case"
Text:  " "
Keyword:  "let"
Text:  " "
Name.Variable:  "x"
Punctuation:  "?"
Text:  " "
Operator:  "="
Text:  " "
Name:  "optionalValue"
Text:  " "
Punctuation:  "{"
Name.Function:  "print"
Punctuation:  "("
Literal.String:  "\"Unwrapped: "
Literal.String.Escape:  "\\("
Name:  "x"
Literal.String.Escape:  ")"
Literal.String:  "\""
Punctuation:  ")}"
Text:  "<newline><newline>"
Keyword:  "repeat"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// loop\u2026"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "while"
Text:  " "
Name:  "condition"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Keyword.Declaration:  "#available(iOS 8.0, OSX 10.10, *)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>   "
Comment.Single:  "// Use Handoff APIs when available."
Text:  "<newline>   "
Keyword:  "let"
Text:  " "
Name.Variable:  "activity"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "NSUserActivity"
Punctuation:  "("
Name.Variable:  "activityType"
Punctuation:  ":"
Literal.String:  "\"com.example.ShoppingList.view\""
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// Fall back when Handoff APIs not available."
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "//MARK: Classes"
Text:  "<newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Keyword.Type:  "Person"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword.Type:  "NSObject"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name.Variable:  "firstName"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "String"
Text:  "<newline><newline>    "
Keyword.Declaration:  "private"
Text:  " "
Keyword:  "var"
Text:  " "
Name.Variable:  "lastName"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "String"
Text:  "<newline><newline>    "
Keyword.Declaration:  "private(set)"
Text:  " "
Keyword:  "var"
Text:  " "
Name.Variable:  "age"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Int"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "didSet"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Function:  "println"
Punctuation:  "("
Literal.String:  "\"Happy Birthday\""
Punctuation:  ")"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Declaration:  "internal(set)"
Text:  " "
Keyword:  "var"
Text:  " "
Name.Variable:  "doubleAge"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "0.0"
Text:  "<newline>    "
Keyword.Declaration:  "unowned(safe)"
Text:  " "
Keyword:  "var"
Text:  " "
Name.Variable:  "safeUnowned"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "nil"
Text:  "<newline>    "
Keyword.Declaration:  "unowned(unsafe)"
Text:  " "
Keyword:  "var"
Text:  " "
Name.Variable:  "unsafeUnowned"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Constant:  "nil"
Text:  "<newline><newline>    "
Keyword.Declaration:  "lazy"
Text:  " "
Keyword:  "var"
Text:  " "
Name.Variable:  "phoneNumbers"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Keyword.Type:  "String"
Punctuation:  "]()"
Text:  "<newline>    "
Keyword.Declaration:  "@NSCopying"
Text:  " "
Keyword:  "var"
Text:  " "
Name.Variable:  "modificationDate"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "NSDate"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "NSDate"
Punctuation:  "()"
Text:  "<newline><newline>    "
Keyword.Declaration:  "required"
Text:  " "
Keyword.Declaration:  "public"
Text:  " "
Name.Function:  "init"
Punctuation:  "("
Name.Variable:  "name"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "String"
Punctuation:  ","
Text:  " "
Name.Variable:  "age"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "self"
Operator:  "."
Name:  "name"
Text:  " "
Operator:  "="
Text:  " "
Name:  "name"
Text:  "<newline>        "
Keyword:  "self"
Operator:  "."
Name:  "age"
Text:  " "
Operator:  "="
Text:  " "
Name:  "age"
Text:  "<newline>        "
Keyword:  "super"
Operator:  "."
Name.Function:  "init"
Punctuation:  "()"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Declaration:  "internal"
Text:  " "
Keyword:  "var"
Text:  " "
Name.Variable:  "isAdmin"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Bool"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "false"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Declaration:  "final"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "doSomething"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Comment.Single:  "//TODO: Do something"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword.Declaration:  "dynamic"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "somethingDynamic"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "@objc"
Punctuation:  "("
Keyword.Type:  "MYCustomView"
Punctuation:  ")"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Keyword.Type:  "CustomView"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "NSView"
Punctuation:  ","
Text:  " "
Keyword.Type:  "SomeProtocol"
Text:  " "
Punctuation:  ","
Text:  " "
Keyword.Type:  "OtherProtocol"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "@IBOutlet"
Text:  " "
Keyword:  "var"
Text:  " "
Name.Variable:  "button"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "AnyObject"
Operator:  "!"
Text:  "<newline><newline>    "
Keyword.Declaration:  "@IBAction"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "doSomething"
Punctuation:  "("
Name.Variable:  "sender"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "AnyObject"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Comment.Single:  "//TODO: Do something"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "//MARK: Protocols"
Text:  "<newline>"
Keyword.Declaration:  "@objc"
Text:  " "
Keyword.Declaration:  "protocol"
Text:  " "
Keyword.Type:  "Random"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "typealias"
Text:  " "
Keyword.Type:  "T"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "SomeConstraint"
Text:  "<newline>    "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "random"
Punctuation:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Keyword:  "Self"
Text:  "<newline>    "
Keyword.Declaration:  "optional"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "seed"
Punctuation:  "("
Name.Variable:  "seed"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  "<newline>    "
Keyword.Declaration:  "required"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "foo"
Punctuation:  "()"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "extension"
Text:  " "
Keyword.Type:  "SomeProtocol"
Text:  " "
Keyword:  "where"
Text:  " "
Keyword.Type:  "T"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "OtherProtocol"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "blah"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Comment.Single:  "// default implementation"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "extension"
Text:  " "
Keyword.Type:  "SomeClass"
Text:  " "
Punctuation:  "{"
Text:  "<newline><newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "struct"
Text:  " "
Keyword.Type:  "Stack"
Operator:  "<"
Keyword.Type:  "T"
Punctuation:  ","
Text:  " "
Keyword.Type:  "U"
Operator:  ">"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Equatable"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "var"
Text:  " "
Name.Variable:  "items"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Keyword.Type:  "T"
Punctuation:  "]()"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "typealias"
Text:  " "
Keyword.Type:  "Speed"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "Double"
Text:  "<newline><newline>"
Keyword.Declaration:  "enum"
Text:  " "
Keyword.Type:  "State"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Equatable"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Keyword.Type:  "Stopped"
Punctuation:  ","
Text:  " "
Keyword.Type:  "Paused"
Text:  "<newline>    "
Keyword:  "case"
Text:  " "
Keyword.Type:  "Running"
Punctuation:  "("
Keyword.Type:  "Speed"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "@availability"
Punctuation:  "("
Keyword.Type:  "OSX"
Punctuation:  ","
Text:  " "
Name:  "introduced"
Operator:  "="
Literal.Number.Float:  "10.10"
Punctuation:  ")"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "localizedCaseInsensitiveContainsString"
Punctuation:  "("
Name.Variable:  "aString"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "String"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Bool"
Text:  "<newline><newline>"
Comment.Single:  "//MARK: Conditional compilation"
Text:  "<newline>"
Comment.Preproc:  "#if os(iOS)"
Text:  "<newline>    "
Name.Function:  "sayHello"
Punctuation:  "("
Literal.String:  "\"iOS\""
Punctuation:  ")"
Text:  "<newline>    "
Comment.Preproc:  "#if arch(arm)"
Text:  "<newline>        "
Keyword.Declaration:  "typealias"
Text:  " "
Keyword.Type:  "View"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "UIView"
Text:  "<newline>    "
Comment.Preproc:  "#elseif arch(arm64)"
Text:  "<newline>        "
Keyword.Declaration:  "typealias"
Text:  " "
Keyword.Type:  "View"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "UIView64"
Text:  "<newline>    "
Comment.Preproc:  "#else"
Text:  "<newline>        "
Comment.Preproc:  "#warning(\"Unknown architecture\")"
Text:  "<newline>    "
Comment.Preproc:  "#endif"
Text:  "<newline>"
Comment.Preproc:  "#elseif os(OSX)"
Text:  "<newline>    "
Comment.Multiline:  "/* Uncomment this when the Mac goes 64bit<newline>    #if arch(i386)<newline>        typealias View = NSView<newline>    #elseif arch(x86_64)<newline>        typealias View = NSView64<newline>    #endif<newline>    */"
Text:  "<newline>"
Comment.Preproc:  "#endif"
Text:  "<newline><newline>"
Keyword.Declaration:  "protocol"
Text:  " "
Keyword.Type:  "Protocol"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "associatedtype"
Text:  " "
Keyword.Type:  "AssociatedType"
Text:  "<newline>    "
Keyword.Declaration:  "typealias"
Text:  " "
Keyword.Type:  "TypeAlias"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// keywords acceptable as argument names now:"
Text:  "<newline>"
Keyword.Type:  "NSURLProtectionSpace"
Punctuation:  "("
Name.Variable:  "host"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"somedomain.com\""
Punctuation:  ","
Text:  " "
Name.Variable:  "port"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "443"
Punctuation:  ","
Text:  " "
Name.Variable:  "protocol"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"https\""
Punctuation:  ","
Text:  " "
Name.Variable:  "realm"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Some Domain\""
Punctuation:  ","
Text:  " "
Name.Variable:  "authenticationMethod"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"Basic\""
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "fn1"
Text:  " "
Operator:  "="
Text:  " "
Name:  "someView"
Operator:  "."
Name.Function:  "insertSubview"
Punctuation:  "("
Name.Variable:  "_"
Punctuation:  ":"
Name.Variable:  "at"
Punctuation:  ":)"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "fn2"
Text:  " "
Operator:  "="
Text:  " "
Name:  "someView"
Operator:  "."
Name.Function:  "insertSubview"
Punctuation:  "("
Name.Variable:  "_"
Punctuation:  ":"
Name.Variable:  "aboveSubview"
Punctuation:  ":)"
Text:  "<newline><newline>"
Comment.Preproc:  "#if swift(>=2.2) || os(macOS)"
Text:  "<newline>  "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "foo"
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "("
Name.Variable:  "y"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>"
Comment.Preproc:  "#else"
Text:  "<newline>  "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "foo"
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Int"
Punctuation:  ")("
Name.Variable:  "y"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>"
Comment.Preproc:  "#endif"
Text:  "<newline><newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "sel"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "foo"
Punctuation:  "("
Keyword.Declaration:  "#selector("
Name.Function:  "insertSubview(_:aboveSubview:)"
Keyword.Declaration:  ")"
Punctuation:  ")"
Text:  "<newline><newline>"
Keyword.Declaration:  "open"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Keyword.Type:  "SubclassableParentClass"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "public"
Text:  " "
Keyword:  "var"
Text:  " "
Name.Variable:  "size"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Int"
Text:  "<newline>    "
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "foo"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>    "
Keyword.Declaration:  "open"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "bar"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>    "
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "final"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "baz"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>    "
Keyword.Declaration:  "private"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "a"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>    "
Keyword.Declaration:  "fileprivate"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "b"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "final"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Keyword.Type:  "FinalClass"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " "
Keyword:  "case"
Text:  " "
Keyword:  "let"
Text:  " "
Name.Variable:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name:  "a"
Punctuation:  ","
Text:  " "
Keyword:  "case"
Text:  " "
Keyword:  "let"
Text:  " "
Name.Variable:  "y"
Text:  " "
Operator:  "="
Text:  " "
Name:  "b"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "firstFunc"
Punctuation:  "("
Name.Variable:  "x"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "A"
Text:  " "
Operator:  "&"
Text:  " "
Keyword.Type:  "B"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Keyword:  "let"
Text:  " "
Name.Variable:  "a"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword.Type:  "A"
Text:  " "
Operator:  "&"
Text:  " "
Keyword.Type:  "B"
Text:  " "
Operator:  "&"
Text:  " "
Keyword.Type:  "C"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "Foo"
Punctuation:  "()"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name:  "anyCommonElements"
Operator:  "<"
Keyword.Type:  "T"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword.Type:  "SequenceType"
Punctuation:  ","
Text:  " "
Keyword.Type:  "U"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword.Type:  "SequenceType"
Operator:  ">"
Punctuation:  "("
Name.Variable:  "lhs"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "T"
Punctuation:  ","
Text:  " "
Name:  "_"
Text:  " "
Name.Variable:  "rhs"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "U"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Bool"
Text:  " "
Keyword:  "where"
Text:  "<newline>    "
Keyword.Type:  "T"
Operator:  "."
Keyword.Type:  "Generator"
Operator:  "."
Keyword.Type:  "Element"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Equatable"
Punctuation:  ","
Text:  "<newline>    "
Keyword.Type:  "T"
Operator:  "."
Keyword.Type:  "Generator"
Operator:  "."
Keyword.Type:  "Element"
Text:  " "
Operator:  "=="
Text:  " "
Keyword.Type:  "U"
Operator:  "."
Keyword.Type:  "Generator"
Operator:  "."
Keyword.Type:  "Element"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name.Variable:  "firstNameGetter"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Declaration:  "#selector("
Name.Function:  "getter: Person.firstName"
Keyword.Declaration:  ")"
Text:  "<newline>    "
Keyword:  "let"
Text:  " "
Name.Variable:  "firstNameSetter"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Declaration:  "#selector("
Name.Function:  "setter: Person.firstName"
Keyword.Declaration:  ")"
Text:  "<newline>    "
Name:  "chris"
Operator:  "."
Name.Function:  "valueForKeyPath"
Punctuation:  "("
Keyword.Declaration:  "#keyPath("
Name.Function:  "Person.bestFriend.lastName"
Keyword.Declaration:  ")"
Punctuation:  ")"
Text:  " "
Comment.Single:  "// => Groff"
Text:  "<newline>    <newline>    "
Keyword:  "let"
Text:  " "
Name.Variable:  "cell"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "UITableViewCell"
Punctuation:  "("
Name.Variable:  "style"
Punctuation:  ":"
Text:  " "
Operator:  "."
Keyword:  "default"
Punctuation:  ","
Text:  " "
Name.Variable:  "reuseIdentifier"
Punctuation:  ":"
Text:  " "
Keyword.Constant:  "nil"
Punctuation:  ")"
Text:  "<newline>    "
Name:  "particleSystem"
Operator:  "."
Name:  "imageSequenceAnimationMode"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "SCNParticleImageSequenceAnimationMode"
Operator:  "."
Keyword:  "repeat"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "typealias"
Text:  " "
Keyword.Type:  "StringDictionary"
Operator:  "<"
Keyword.Type:  "T"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Type:  "Dictionary"
Operator:  "<"
Keyword.Type:  "String"
Punctuation:  ","
Text:  " "
Keyword.Type:  "T"
Operator:  ">"
Text:  "<newline><newline>"
Keyword.Declaration:  "@available"
Punctuation:  "("
Operator:  "*"
Punctuation:  ","
Text:  " "
Name:  "unavailable"
Punctuation:  ","
Text:  " "
Name.Variable:  "renamed"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"MyRenamedProtocol\""
Punctuation:  ")"
Text:  "<newline>"
Keyword.Declaration:  "@discardableResult"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "f"
Punctuation:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "T"
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>"
Comment.Preproc:  "#sourceLocation(file: \"foo\", line: 42)"
Text:  "<newline><newline>"
Keyword.Declaration:  "@available"
Punctuation:  "("
Name:  "swift"
Punctuation:  ","
Text:  " "
Name.Variable:  "obsoleted"
Punctuation:  ":"
Text:  " "
Literal.Number.Float:  "5.0"
Operator:  "."
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  " "
Name.Variable:  "renamed"
Punctuation:  ":"
Text:  " "
Literal.String:  "\"foo2(file:line:)\""
Punctuation:  ")"
Text:  "<newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "foo"
Punctuation:  "("
Name:  "_"
Text:  " "
Name.Variable:  "file"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "StaticString"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Declaration:  "#file"
Punctuation:  ","
Text:  " "
Name.Variable:  "line"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "UInt"
Text:  " "
Operator:  "="
Text:  " "
Keyword.Declaration:  "#line"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "precedencegroup"
Text:  " "
Keyword.Type:  "ComparisonPrecedence"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Variable:  "associativity"
Punctuation:  ":"
Text:  " "
Name:  "left"
Text:  "<newline>  "
Name.Variable:  "higherThan"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "LogicalConjunctionPrecedence"
Text:  "<newline>  "
Name.Variable:  "lowerThan"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Additive"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "infix"
Text:  " "
Keyword:  "operator"
Text:  " "
Operator:  "<>"
Text:  " "
Punctuation:  ":"
Text:  " "
Keyword.Type:  "ComparisonPrecedence"
Text:  "<newline><newline>"
Comment.Single:  "// keyword as identifier"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Punctuation:  "`"
Name.Variable:  "var"
Punctuation:  "`"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "3"
Text:  "<newline><newline>"
Comment.Single:  "// keypath"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Name.Variable:  "keypath"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "\\"
Keyword.Type:  "Person"
Operator:  "."
Name:  "firstName"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Name.Variable:  "keyPath"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "KeyPath"
Operator:  "<"
Keyword.Type:  "String"
Punctuation:  ","
Text:  " "
Keyword.Type:  "Bool"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "\\"
Operator:  "."
Name:  "isEmpty"
Text:  "<newline><newline>"
Comment.Single:  "// tuple destructuring"
Text:  "<newline>"
Keyword:  "let"
Text:  " "
Punctuation:  "("
Name.Variable:  "t1"
Punctuation:  ","
Text:  " "
Name.Variable:  "t2"
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Punctuation:  "((`"
Name.Variable:  "func"
Punctuation:  "`,"
Text:  " "
Name.Variable:  "foo"
Punctuation:  "),"
Text:  " "
Punctuation:  "`"
Name.Variable:  "protocol"
Punctuation:  "`)"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "(("
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "4"
Punctuation:  "),"
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  ")"
Text:  "<newline>"
Keyword:  "var"
Text:  " "
Punctuation:  "("
Text:  " "
Name.Variable:  "t3"
Text:  " "
Punctuation:  ","
Text:  " "
Comment.Multiline:  "/* comment */"
Text:  "<newline>    "
Punctuation:  "("
Text:  " "
Name.Variable:  "t4"
Text:  " "
Punctuation:  ","
Text:  " "
Name.Variable:  "t5"
Text:  " "
Punctuation:  ")"
Text:  " "
Punctuation:  ")"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Literal.String:  "\"a\""
Punctuation:  ","
Text:  " "
Punctuation:  "("
Literal.String:  "\"b\""
Punctuation:  ","
Text:  " "
Literal.String:  "\"c\""
Punctuation:  "))"
Text:  "<newline><newline>"
Comment.Single:  "// function with lambda argument"
Text:  "<newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "funcWithLambdaArg"
Punctuation:  "("
Name:  "_"
Text:  " "
Name.Variable:  "fn"
Punctuation:  ":"
Text:  " "
Punctuation:  "("
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Int"
Punctuation:  ")"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Int"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Function:  "fn"
Punctuation:  "("
Literal.Number.Integer:  "1"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name:  "funcWithLambdaArg"
Text:  " "
Punctuation:  "{"
Text:  " "
Name:  "x"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name:  "funcWithLambdaArg"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Variable:  "$0"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Punctuation:  "}"
Text:  "<newline>"
Name.Function:  "funcWithLambdaArg"
Punctuation:  "({"
Text:  " "
Name:  "x"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Punctuation:  "})"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "newView"
Punctuation:  "()"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Declaration:  "some"
Text:  " "
Keyword.Type:  "View"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t"
Keyword.Type:  "ViewRegistry"
Operator:  "."
Name.Function:  "find"
Punctuation:  "(\\"
Operator:  "."
Keyword.Type:  "MyView"
Operator:  "."
Name:  "name"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "@frozen"
Text:  "<newline>"
Keyword.Declaration:  "public"
Text:  " "
Keyword.Declaration:  "enum"
Text:  " "
Keyword.Type:  "Types"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name:  "a"
Punctuation:  ","
Text:  " "
Name:  "b"
Punctuation:  ","
Text:  " "
Name:  "c"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Name:  "d"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "test"
Punctuation:  "("
Name.Variable:  "t"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "Types"
Punctuation:  "?)"
Text:  " "
Operator:  "->"
Text:  " "
Keyword.Type:  "Bool"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "switch"
Text:  " "
Name:  "t"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Operator:  "."
Name:  "a"
Punctuation:  "?:"
Text:  " "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Operator:  "."
Name:  "b"
Punctuation:  "?:"
Text:  " "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>\t"
Keyword:  "case"
Text:  " "
Operator:  "."
Name.Variable:  "c"
Punctuation:  ":"
Text:  " "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>\t"
Keyword:  "default"
Punctuation:  ":"
Text:  " "
Keyword:  "return"
Text:  " "
Keyword.Constant:  "false"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "actor"
Text:  " "
Keyword.Type:  "AnActor"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword.Declaration:  "nonisolated"
Text:  " "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "funcA"
Punctuation:  "()"
Text:  " "
Punctuation:  "{}"
Text:  "<newline>  "
Keyword.Declaration:  "func"
Text:  " "
Name.Function:  "funcB"
Punctuation:  "("
Name.Variable:  "otherActor"
Punctuation:  ":"
Text:  " "
Keyword:  "isolated"
Text:  " "
Keyword.Type:  "AnActor"
Punctuation:  ")"
Text:  " "
Keyword:  "async"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "await"
Text:  " "
Name:  "otherActor"
Operator:  "."
Name.Function:  "funcB"
Punctuation:  "()"
Text:  "<newline>    "
Keyword:  "async"
Text:  " "
Keyword:  "let"
Text:  " "
Name.Variable:  "v"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "funcA"
Punctuation:  "()"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Function:  "foo"
Punctuation:  "()"
Text:  " "
Comment.Single:  "// end-of-file comment"
Text:  "<newline>"
