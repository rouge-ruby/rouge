Keyword:  "\\documentclass"
Punctuation:  "{"
Text:  "article"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Tag:  "\\begin{document}"
Text:  "<newline><newline><newline><newline>"
Keyword:  "\\centerline"
Punctuation:  "{"
Keyword:  "\\sc"
Text:  " "
Keyword:  "\\large"
Text:  " A Simple Sample "
Keyword:  "\\LaTeX\\ "
Text:  "File"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "\\vspace"
Punctuation:  "{"
Text:  ".5pc"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "\\centerline"
Punctuation:  "{"
Keyword:  "\\sc"
Text:  " Stupid Stuff I Wish Someone Had Told Me Four Years Ago"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "\\centerline"
Punctuation:  "{"
Keyword:  "\\it"
Text:  " (Read the .tex file along with this or it won't <newline>            make much sense)"
Punctuation:  "}"
Text:  "<newline>"
Keyword:  "\\vspace"
Punctuation:  "{"
Text:  "2pc"
Punctuation:  "}"
Text:  "<newline><newline>The first thing to realize about "
Keyword:  "\\LaTeX\\ "
Text:  "is that it is not ``WYSIWYG''. <newline>In other words, it isn't a word processor; what you type into your <newline>.tex file is not what you'll see in your .dvi file.  For example, <newline>"
Keyword:  "\\LaTeX\\ "
Text:  "will      completely     ignore               extra<newline>spaces    within                             a line of your .tex file.<newline>Pressing return<newline>in <newline>the <newline>middle <newline>of<newline>a<newline>line<newline>will not register in your .dvi file. However, a double carriage-return<newline>is read as a paragraph break.<newline><newline>Like this.  But any carriage-returns after the first two will be <newline>completely ignored; in other words, you <newline><newline><newline>can't <newline><newline>add<newline><newline><newline><newline><newline><newline><newline>more <newline><newline><newline><newline><newline>space <newline><newline><newline>between <newline><newline><newline><newline><newline>lines, no matter how many times you press return in your .tex file.<newline><newline>In order to add vertical space you have to use ``vspace''; for example, <newline>you could add an inch of space by typing "
Name.Builtin:  "\\verb"
Keyword.Pseudo:  "|"
Literal.String.Other:  "\\vspace{1in}"
Keyword.Pseudo:  "|"
Text:  ", like this:<newline>"
Keyword:  "\\vspace"
Punctuation:  "{"
Text:  "1in"
Punctuation:  "}"
Text:  "<newline><newline>To get three lines of space you would type "
Name.Builtin:  "\\verb"
Keyword.Pseudo:  "|"
Literal.String.Other:  "\\vspace{3pc}"
Keyword.Pseudo:  "|"
Text:  "<newline>(``pc'' stands for ``pica'', a font-relative size), like this:<newline>"
Keyword:  "\\vspace"
Punctuation:  "{"
Text:  "3pc"
Punctuation:  "}"
Text:  "<newline><newline>Notice that "
Keyword:  "\\LaTeX\\ "
Text:  "commands are always preceeded by a backslash.  <newline>Some commands, like "
Name.Builtin:  "\\verb"
Keyword.Pseudo:  "|"
Literal.String.Other:  "\\vspace"
Keyword.Pseudo:  "|"
Text:  ", take arguments (here, a length) in<newline>curly brackets.  <newline><newline>The second important thing to notice about "
Keyword:  "\\LaTeX\\ "
Text:  "is that you type <newline>in various ``environments''...so far we've just been typing regular <newline>text (except for a few inescapable usages of "
Name.Builtin:  "\\verb"
Keyword.Pseudo:  "|"
Literal.String.Other:  "\\verb"
Keyword.Pseudo:  "|"
Text:  " and the<newline>centered, smallcaps, large title).  There are basically two ways that <newline>you can enter and/or exit an environment;<newline>"
Keyword:  "\\vspace"
Punctuation:  "{"
Text:  "1pc"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "\\centerline"
Punctuation:  "{"
Text:  "this is the first way..."
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Tag:  "\\begin{center}"
Text:  "<newline>this is the second way.<newline>"
Name.Tag:  "\\end{center}"
Text:  "<newline><newline>"
Keyword:  "<newline>oindent"
Text:  " Actually there is one more way, used above; for example, <newline>"
Punctuation:  "{"
Keyword:  "\\sc"
Text:  " this way"
Punctuation:  "}"
Text:  ".  The way that you get in and out of environment varies<newline>depending on which kind of environment you want; for example, you use <newline>"
Name.Builtin:  "\\verb"
Keyword.Pseudo:  "|"
Literal.String.Other:  "\\underline"
Keyword.Pseudo:  "|"
Text:  " ``outside'', but "
Name.Builtin:  "\\verb"
Keyword.Pseudo:  "|"
Literal.String.Other:  "\\it"
Keyword.Pseudo:  "|"
Text:  " ``inside''; <newline>notice "
Keyword:  "\\underline"
Punctuation:  "{"
Text:  "this"
Punctuation:  "}"
Text:  " versus "
Punctuation:  "{"
Keyword:  "\\it"
Text:  " this"
Punctuation:  "}"
Text:  ".<newline><newline>The real power of "
Keyword:  "\\LaTeX\\ "
Text:  "(for us) is in the math environment. You <newline>push and pop out of the math environment by typing "
Name.Builtin:  "\\verb"
Keyword.Pseudo:  "|"
Literal.String.Other:  "$"
Keyword.Pseudo:  "|"
Text:  ". For <newline>example, "
Punctuation:  "$"
Literal.Number:  "2"
Name.Builtin:  "x"
Punctuation:  "^"
Literal.Number:  "3"
Name.Builtin:  " "
Operator:  "-"
Name.Builtin:  " "
Literal.Number:  "1"
Name.Builtin:  " "
Operator:  "="
Name.Builtin:  " "
Literal.Number:  "5"
Punctuation:  "$"
Text:  " is typed between dollar signs as<newline>"
Name.Builtin:  "\\verb"
Keyword.Pseudo:  "|"
Literal.String.Other:  "$2x^3 - 1 = 5$"
Keyword.Pseudo:  "|"
Text:  ". Perhaps a more interesting example is<newline>"
Punctuation:  "$"
Name.Variable:  "\\lim"
Punctuation:  "_{"
Name.Builtin:  "N "
Name.Variable:  "\\to"
Name.Builtin:  " "
Name.Variable:  "\\infty"
Punctuation:  "}"
Name.Builtin:  " "
Name.Variable:  "\\sum"
Punctuation:  "_{"
Name.Builtin:  "k"
Operator:  "="
Literal.Number:  "1"
Punctuation:  "}^"
Name.Builtin:  "N f"
Operator:  "("
Name.Builtin:  "t"
Punctuation:  "_"
Name.Builtin:  "k"
Operator:  ")"
Name.Builtin:  " "
Name.Variable:  "\\Delta"
Name.Builtin:  " t"
Punctuation:  "$"
Text:  ".<newline><newline>You can get a fancier, display-style math <newline>environment by enclosing your equation with double dollar signs.  <newline>This will center your equation, and display sub- and super-scripts in <newline>a more readable fashion:<newline><newline>"
Punctuation:  "$$"
Name.Variable:  "\\lim"
Punctuation:  "_{"
Name.Builtin:  "N "
Name.Variable:  "\\to"
Name.Builtin:  " "
Name.Variable:  "\\infty"
Punctuation:  "}"
Name.Builtin:  " "
Name.Variable:  "\\sum"
Punctuation:  "_{"
Name.Builtin:  "k"
Operator:  "="
Literal.Number:  "1"
Punctuation:  "}^"
Name.Builtin:  "N f"
Operator:  "("
Name.Builtin:  "t"
Punctuation:  "_"
Name.Builtin:  "k"
Operator:  ")"
Name.Builtin:  " "
Name.Variable:  "\\Delta"
Name.Builtin:  " t."
Punctuation:  "$$"
Text:  "<newline><newline>If you don't want your equation to be centered, but you want the nice <newline>indicies and all that, you can use "
Name.Builtin:  "\\verb"
Keyword.Pseudo:  "|"
Literal.String.Other:  "\\displaystyle"
Keyword.Pseudo:  "|"
Text:  " and get your <newline>formula ``in-line''; using our example this is <newline>"
Punctuation:  "$"
Name.Variable:  "\\displaystyle"
Name.Builtin:  " "
Name.Variable:  "\\lim"
Punctuation:  "_{"
Name.Builtin:  "N "
Name.Variable:  "\\to"
Name.Builtin:  " "
Name.Variable:  "\\infty"
Punctuation:  "}"
Name.Builtin:  " "
Name.Variable:  "\\sum"
Punctuation:  "_{"
Name.Builtin:  "k"
Operator:  "="
Literal.Number:  "1"
Punctuation:  "}^"
Name.Builtin:  "N f"
Operator:  "("
Name.Builtin:  "t"
Punctuation:  "_"
Name.Builtin:  "k"
Operator:  ")"
Name.Builtin:  " "
Name.Variable:  "\\Delta"
Name.Builtin:  " t."
Punctuation:  "$"
Text:  "  Of <newline>course this can screw up your line spacing a little bit.<newline><newline>There are many more things to know about "
Keyword:  "\\LaTeX\\ "
Text:  "and we can't <newline>possibly talk about them all here.<newline>You can use "
Keyword:  "\\LaTeX\\ "
Text:  "to get tables, commutative diagrams, figures, <newline>aligned equations, cross-references, labels, matrices, and all manner <newline>of strange things into your documents.  You can control margins, <newline>spacing, alignment, "
Punctuation:  "{"
Keyword:  "\\it"
Text:  " et cetera"
Punctuation:  "}"
Text:  " to higher degrees of accuracy than <newline>the human eye can percieve.  You can waste entire days typesetting <newline>documents to be ``just so''.  In short, "
Keyword:  "\\LaTeX\\ "
Text:  "rules.<newline><newline>The best way to learn "
Keyword:  "\\LaTeX\\ "
Text:  "is by example. Get yourself a bunch<newline>of .tex files, see what kind of output they produce, and figure out how<newline>to modify them to do what you want.  There are many template and <newline>sample files on the department "
Keyword:  "\\LaTeX\\ "
Text:  "page and in real life in the <newline>big binder that should be in the computer lab somewhere.  Good luck!<newline><newline><newline><newline><newline><newline><newline><newline><newline><newline><newline><newline>"
Name.Tag:  "\\end{document}"
Text:  "<newline>"
