Comment.Single:  "// vim: ft=typescript"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myFloat"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "0.123"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myOctal"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Hex:  "0x123"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myRegex"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/asdf/"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myComplicatedRegex"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/."
Literal.String.Escape:  "["
Literal.String.Regex:  "."
Literal.String.Escape:  "](?="
Literal.String.Regex:  "x"
Literal.String.Escape:  "\\h\\[["
Literal.String.Regex:  ")"
Literal.String.Escape:  "])[^"
Literal.String.Regex:  ".{}abc"
Literal.String.Escape:  "]"
Literal.String.Regex:  "{foo}"
Literal.String.Escape:  "{3,}"
Literal.String.Regex:  "x"
Literal.String.Escape:  "{2,3}"
Literal.String.Regex:  "/"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "myObject"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "a"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  " "
Name.Attribute:  "b"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "ternary"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "?"
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Name.Attribute:  "object_key"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "?"
Text:  " "
Name.Other:  "variable"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "3"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "ternary2"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "a"
Text:  " "
Punctuation:  "?"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "object_key"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "c"
Text:  " "
Punctuation:  "}"
Text:  " "
Operator:  "+"
Text:  " "
Name.Other:  "variable"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "e"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "ternary3"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "a"
Text:  " "
Punctuation:  "?"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Attribute:  "key1"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "var1"
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "key2"
Punctuation:  ":"
Text:  " "
Name.Other:  "var2"
Text:  " "
Punctuation:  "?"
Text:  " "
Keyword.Declaration:  "function"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Label:  "label1"
Punctuation:  ":"
Text:  " "
Comment.Single:  "// break label, not an object key!"
Text:  "<newline>    "
Name.Function:  "while"
Punctuation:  "("
Keyword.Constant:  "true"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Keyword:  "break"
Text:  " "
Name.Other:  "label1"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Name.Label:  "label2"
Punctuation:  ":"
Text:  " "
Comment.Single:  "// also a break label"
Text:  "<newline>    "
Name.Function:  "while "
Punctuation:  "("
Keyword.Constant:  "true"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>      "
Keyword:  "break"
Text:  " "
Name.Other:  "label2"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>  "
Punctuation:  "}"
Text:  " "
Operator:  "+"
Text:  " "
Name.Other:  "var3"
Punctuation:  ":"
Text:  " "
Name.Other:  "var4"
Punctuation:  ","
Text:  " "
Comment.Single:  "// ternary, not object key"
Text:  "<newline>  "
Name.Attribute:  "key3"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "foo"
Literal.String.Delimiter:  "'"
Text:  "<newline>"
Punctuation:  "}"
Text:  " "
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "a"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Attribute:  "num"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "func"
Punctuation:  ":"
Text:  " "
Keyword.Declaration:  "function"
Punctuation:  "()"
Text:  " "
Punctuation:  "{},"
Text:  "<newline>  "
Name.Attribute:  "str"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "''"
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "bool"
Punctuation:  ":"
Text:  " "
Keyword.Constant:  "true"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "obj"
Text:  " "
Operator:  "="
Text:  "<newline>  "
Punctuation:  "{"
Text:  "<newline>    "
Comment.Single:  "// comment"
Text:  "<newline>    "
Name.Attribute:  "key"
Punctuation:  ":"
Text:  " "
Name.Other:  "val"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/*!<newline> * multiline comment<newline> */"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "quotedKeys"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "one"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "1"
Punctuation:  ","
Text:  "<newline>  "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "two"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "2"
Punctuation:  ","
Text:  "<newline>  "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "three"
Literal.String.Delimiter:  "\""
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Name.Other:  "Blag"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{};"
Text:  "<newline>"
Name.Other:  "jQuery"
Punctuation:  "."
Name.Function:  "noConflict"
Punctuation:  "();"
Text:  "<newline><newline>"
Name.Function:  "if "
Punctuation:  "("
Name.Other:  "cond"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>  "
Name.Label:  "label1"
Punctuation:  ":"
Text:  "<newline>  "
Name.Function:  "while "
Punctuation:  "("
Name.Other:  "cond"
Punctuation:  ")"
Text:  " "
Keyword:  "break"
Text:  " "
Name.Other:  "label1"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Name.Other:  "Blag"
Punctuation:  "."
Name.Other:  "ReadMore"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Keyword.Declaration:  "function"
Punctuation:  "("
Name.Other:  "$"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "getFold"
Punctuation:  "("
Name.Other:  "button"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Name.Function:  "$"
Punctuation:  "("
Name.Other:  "button"
Punctuation:  ")."
Name.Function:  "siblings"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  ".fold"
Literal.String.Delimiter:  "'"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "expand"
Punctuation:  "("
Name.Other:  "e"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Other:  "e"
Punctuation:  "."
Name.Function:  "preventDefault"
Punctuation:  "();"
Text:  "<newline><newline>    "
Keyword.Declaration:  "var"
Text:  " "
Name.Builtin:  "self"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "$"
Punctuation:  "("
Keyword:  "this"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name.Function:  "getFold"
Punctuation:  "("
Name.Builtin:  "self"
Punctuation:  ")."
Name.Function:  "show"
Punctuation:  "();"
Text:  "<newline>    "
Name.Builtin:  "self"
Punctuation:  "."
Name.Function:  "html"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "&laquo; less"
Literal.String.Delimiter:  "'"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "contract"
Punctuation:  "("
Name.Other:  "e"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Other:  "e"
Punctuation:  "."
Name.Function:  "preventDefault"
Punctuation:  "();"
Text:  "<newline><newline>    "
Keyword.Declaration:  "var"
Text:  " "
Name.Builtin:  "self"
Text:  " "
Operator:  "="
Text:  " "
Name.Function:  "$"
Punctuation:  "("
Keyword:  "this"
Punctuation:  ");"
Text:  "<newline><newline>    "
Name.Function:  "getFold"
Punctuation:  "("
Name.Builtin:  "self"
Punctuation:  ")."
Name.Function:  "hide"
Punctuation:  "();"
Text:  "<newline>    "
Name.Builtin:  "self"
Punctuation:  "."
Name.Function:  "html"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "more &raquo;"
Literal.String.Delimiter:  "'"
Punctuation:  ")"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "init"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "$"
Punctuation:  "("
Literal.String.Delimiter:  "'"
Literal.String.Single:  "a.read-more"
Literal.String.Delimiter:  "'"
Punctuation:  ")."
Name.Function:  "toggle"
Punctuation:  "("
Name.Other:  "expand"
Punctuation:  ","
Text:  " "
Name.Other:  "contract"
Punctuation:  ");"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline><newline>  "
Name.Function:  "$"
Punctuation:  "("
Name.Builtin:  "document"
Punctuation:  ")."
Name.Function:  "ready"
Punctuation:  "("
Name.Other:  "init"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "})("
Name.Other:  "jQuery"
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Single:  "// evil regexes, from pygments"
Text:  "<newline><newline>"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "test"
Punctuation:  "("
Name.Other:  "foo"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "["
Literal.String.Regex:  "/regexp/"
Punctuation:  ","
Literal.String.Regex:  "/regexp/"
Punctuation:  ","
Text:  " "
Literal.String.Regex:  "/regexp/"
Punctuation:  ","
Text:  " "
Comment.Single:  "// comment"
Text:  "<newline>"
Comment.Single:  "// comment"
Text:  "<newline>"
Literal.String.Regex:  "/regexp/"
Punctuation:  "];"
Text:  "<newline>"
Name.Function:  "if "
Punctuation:  "("
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "test"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  "))"
Text:  "<newline>"
Punctuation:  "{"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "test"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ");};"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Literal.String.Regex:  "/regexp/"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/regexp/"
Punctuation:  ";"
Text:  "<newline>"
Name.Function:  "if "
Punctuation:  "("
Literal.Number.Integer:  "0"
Operator:  "<"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "||"
Text:  " "
Literal.Number.Integer:  "1"
Operator:  ">"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  "))"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "u"
Punctuation:  ":"
Literal.String.Regex:  "/regexp/"
Punctuation:  ","
Text:  " "
Name.Attribute:  "v"
Punctuation:  ":"
Text:  " "
Literal.String.Regex:  "/regexp/"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Name.Function:  "foo"
Punctuation:  "();"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "test"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ");"
Text:  " "
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "test"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ");"
Text:  "<newline>"
Name.Function:  "if "
Punctuation:  "("
Operator:  "!"
Literal.String.Regex:  "/regexp/"
Punctuation:  ")"
Text:  " "
Name.Function:  "foobar"
Punctuation:  "();"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "u"
Text:  " "
Operator:  "%"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "*"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "/"
Text:  " "
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ");"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "u"
Punctuation:  "?"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ")"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "v"
Text:  " "
Operator:  "+"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "-"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ");"
Text:  "<newline>"
Name.Other:  "a"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "u"
Operator:  "^"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "&"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "|"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ")"
Text:  " "
Operator:  "+~"
Literal.String.Regex:  "/regexp/"
Punctuation:  "."
Name.Function:  "exec"
Punctuation:  "("
Keyword.Reserved:  "string"
Punctuation:  ");"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/regexp/"
Text:  " "
Comment.Multiline:  "/* a comment */"
Text:  " "
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/"
Literal.String.Escape:  "["
Literal.String.Regex:  "reg"
Literal.String.Escape:  "/"
Literal.String.Regex:  "exp"
Literal.String.Escape:  "]"
Literal.String.Regex:  "/"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "4"
Operator:  "/"
Literal.Number.Integer:  "2"
Operator:  "/"
Name.Other:  "i"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "("
Name.Other:  "a"
Text:  " "
Operator:  "=="
Text:  " "
Name.Other:  "b"
Punctuation:  ")"
Text:  " "
Punctuation:  "?"
Comment.Multiline:  "/* this is a comment */"
Text:  " "
Name.Other:  "c"
Text:  " "
Punctuation:  ":"
Text:  " "
Name.Other:  "d"
Punctuation:  ";"
Text:  "<newline>"
Comment.Single:  "/// a comment //"
Text:  "<newline>"
Name.Other:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/regex/"
Operator:  "/"
Literal.Number.Integer:  "2"
Operator:  "/"
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  " "
Comment.Single:  "//syntactically correct, returns NaN"
Text:  "<newline><newline>"
Comment.Single:  "// bad regexen - should have an error token at the last char and recover"
Text:  "<newline>"
Comment.Single:  "// on the next line"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "a"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/fo"
Error:  "o<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "b"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/"
Literal.String.Escape:  "["
Literal.String.Regex:  "fo"
Error:  "o<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "c"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/valid-regex/"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "template"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "{{current}} of beer on the wall"
Literal.String.Delimiter:  "\""
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "stanza"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "template"
Punctuation:  "."
Name.Function:  "replace"
Punctuation:  "("
Literal.String.Regex:  "/{{current}}/g"
Punctuation:  ","
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "99 bottles"
Literal.String.Delimiter:  "\""
Punctuation:  ");"
Text:  "<newline><newline>"
Comment.Multiline:  "/* original examples */"
Text:  "<newline><newline>"
Comment.Single:  "// regex"
Text:  "<newline><newline>"
Name.Function:  "blah"
Punctuation:  "("
Literal.String.Regex:  "/abc/"
Punctuation:  ");"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/abc/"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Regex:  "/abc/"
Punctuation:  "."
Name.Other:  "match"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// math"
Text:  "<newline><newline>"
Name.Function:  "blah"
Punctuation:  "("
Literal.Number.Integer:  "1"
Operator:  "/"
Literal.Number.Integer:  "2"
Punctuation:  ");"
Text:  " "
Comment.Single:  "//comment"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Operator:  "/"
Text:  " "
Literal.Number.Integer:  "3"
Punctuation:  ";"
Text:  "<newline>"
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Operator:  "/"
Literal.Number.Integer:  "1"
Operator:  "/"
Punctuation:  "."
Literal.Number.Integer:  "1"
Punctuation:  ";"
Text:  "<newline><newline>"
Name.Other:  "x"
Operator:  "="
Literal.String.Regex:  "/1/"
Punctuation:  ";"
Text:  " "
Comment.Single:  "// regex"
Text:  "<newline>"
Name.Other:  "x"
Operator:  "="
Literal.Number.Integer:  "1"
Operator:  "/"
Name.Other:  "a"
Operator:  "/"
Name.Other:  "g"
Punctuation:  ";"
Text:  " "
Comment.Single:  "// division"
Text:  "<newline>"
Name.Other:  "x"
Operator:  "="
Name.Other:  "a"
Operator:  "/"
Name.Other:  "a"
Operator:  "/"
Name.Other:  "g"
Punctuation:  ";"
Text:  " "
Comment.Single:  "// division"
Text:  "<newline><newline>"
Comment.Single:  "// real-world"
Text:  "<newline><newline>"
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "1"
Operator:  "/"
Punctuation:  "("
Literal.Number.Integer:  "1"
Operator:  "+"
Name.Builtin:  "Math"
Punctuation:  "."
Name.Function:  "sqrt"
Punctuation:  "("
Name.Other:  "sum"
Punctuation:  "));"
Text:  " "
Comment.Single:  "// convert to number between 1-0"
Text:  "<newline>"
Keyword:  "return"
Text:  " "
Name.Builtin:  "Math"
Punctuation:  "."
Name.Function:  "round"
Punctuation:  "(("
Name.Other:  "num"
Text:  " "
Operator:  "/"
Text:  " "
Name.Other:  "den"
Punctuation:  ")"
Text:  " "
Operator:  "*"
Text:  " "
Literal.Number.Integer:  "100"
Punctuation:  ")"
Operator:  "/"
Literal.Number.Integer:  "100"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// generator"
Text:  "<newline>"
Keyword.Declaration:  "function"
Operator:  "*"
Text:  " "
Name.Function:  "range"
Punctuation:  "("
Keyword:  "from"
Punctuation:  ","
Text:  " "
Name.Other:  "to"
Punctuation:  ")"
Text:  "<newline>"
Punctuation:  "{"
Text:  "<newline>  "
Name.Other:  "to"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline>  "
Name.Function:  "while "
Punctuation:  "("
Keyword:  "from"
Text:  " "
Operator:  ">"
Text:  " "
Name.Other:  "to"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "yield"
Text:  " "
Keyword:  "from"
Operator:  "++"
Punctuation:  ";"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Multiline:  "/* TypeScript examples */"
Text:  "<newline><newline>"
Keyword.Reserved:  "declare"
Text:  " "
Keyword:  "namespace"
Text:  " "
Name.Other:  "Foo"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Reserved:  "interface"
Text:  " "
Name.Other:  "FooStatic"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Function:  "someFunc"
Punctuation:  "():"
Text:  " "
Keyword.Reserved:  "string"
Punctuation:  ";"
Text:  "<newline><newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Reserved:  "declare"
Text:  " "
Keyword.Declaration:  "var"
Text:  " "
Name.Other:  "foo"
Punctuation:  ":"
Text:  " "
Name.Other:  "Foo"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "export"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "foo"
Punctuation:  ";"
Text:  "<newline>"
Keyword:  "export"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Other:  "foo"
Text:  " "
Keyword:  "as"
Text:  " "
Keyword:  "default"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword.Reserved:  "declare"
Text:  " "
Keyword.Reserved:  "module"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "foo"
Literal.String.Delimiter:  "\""
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "export"
Text:  " "
Keyword.Reserved:  "interface"
Text:  " "
Name.Other:  "IFoo"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Label:  "theObject"
Punctuation:  ":"
Text:  " "
Keyword.Reserved:  "any"
Punctuation:  ";"
Text:  "<newline>        "
Name.Label:  "aWord"
Punctuation:  ":"
Text:  " "
Keyword.Reserved:  "string"
Punctuation:  ";"
Text:  "<newline>        "
Name.Label:  "aNumber"
Punctuation:  "?:"
Text:  " "
Keyword.Reserved:  "number"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "export"
Text:  " "
Keyword:  "default"
Text:  " "
Keyword.Declaration:  "abstract"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "FooClass"
Text:  " "
Keyword.Declaration:  "extends"
Text:  " "
Name.Class:  "Bar"
Operator:  "<"
Name.Other:  "T"
Operator:  ">"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name.Function:  "constructor"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name.Function:  "super"
Punctuation:  "();"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword:  "readonly"
Text:  " "
Name.Attribute:  "foo"
Punctuation:  ":"
Text:  " "
Keyword.Reserved:  "number"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "42"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "async"
Text:  " "
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "fooAsync"
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword.Declaration:  "let"
Text:  " "
Name.Other:  "result"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "await"
Text:  " "
Name.Function:  "barAsync"
Punctuation:  "();"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "import"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Other:  "Component"
Text:  " "
Punctuation:  "}"
Text:  " "
Keyword:  "from"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "@angular/core"
Literal.String.Delimiter:  "'"
Punctuation:  ";"
Text:  "<newline><newline>"
Punctuation:  "@"
Name.Decorator:  "Component"
Punctuation:  "({"
Text:  "<newline>  "
Name.Attribute:  "selector"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "my-app"
Literal.String.Delimiter:  "'"
Punctuation:  ","
Text:  "<newline>  "
Name.Attribute:  "template"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "<h1>My First Angular App</h1>"
Literal.String.Delimiter:  "'"
Text:  "<newline>"
Punctuation:  "})"
Text:  "<newline>"
Keyword:  "export"
Text:  " "
Keyword.Declaration:  "class"
Text:  " "
Name.Class:  "AppComponent"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// Mapped types"
Text:  "<newline>"
Keyword.Reserved:  "declare"
Text:  " "
Keyword.Reserved:  "module"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "foo"
Literal.String.Delimiter:  "\""
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "export"
Text:  " "
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "IFooPartial"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "Partial"
Operator:  "<"
Name.Other:  "IFoo"
Operator:  ">"
Text:  "<newline>  "
Keyword:  "export"
Text:  " "
Keyword.Reserved:  "interface"
Text:  " "
Name.Other:  "IFooPartial2"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Punctuation:  "["
Name.Other:  "K"
Text:  " "
Keyword:  "in"
Text:  " "
Keyword.Reserved:  "keyof"
Text:  " "
Name.Other:  "IFoo"
Punctuation:  "]?:"
Text:  " "
Name.Other:  "IFoo"
Punctuation:  "["
Name.Other:  "K"
Punctuation:  "]"
Text:  "<newline>  "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment.Single:  "// Template strings"
Text:  "<newline>"
Keyword.Declaration:  "const"
Text:  " "
Name.Other:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "`Hello world "
Punctuation:  "${"
Name.Other:  "a"
Punctuation:  "."
Name.Other:  "b"
Punctuation:  "}"
Literal.String.Double:  "`"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "const"
Text:  " "
Name.Other:  "y"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "`Hello world "
Punctuation:  "${"
Name.Other:  "a"
Punctuation:  "?."
Name.Other:  "b"
Punctuation:  "}"
Literal.String.Double:  "`"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "const"
Text:  " "
Name.Other:  "z"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "`Hello world`"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// Nullish coalescing in template strings"
Text:  "<newline>"
Keyword.Declaration:  "const"
Text:  " "
Name.Other:  "content"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Double:  "`Value is "
Punctuation:  "${"
Name.Other:  "value"
Text:  " "
Operator:  "??"
Text:  " "
Literal.String.Delimiter:  "'"
Literal.String.Single:  "not set"
Literal.String.Delimiter:  "'"
Punctuation:  "}"
Literal.String.Double:  "`"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "const"
Text:  " "
Name.Other:  "description"
Text:  " "
Operator:  "="
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "Highlighting is not broken now"
Literal.String.Delimiter:  "\""
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Single:  "// Utility types"
Text:  "<newline>"
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "updateTodo"
Punctuation:  "("
Name.Other:  "todo"
Punctuation:  ":"
Text:  " "
Name.Other:  "Todo"
Punctuation:  ","
Text:  " "
Name.Other:  "fieldsToUpdate"
Punctuation:  ":"
Text:  " "
Name.Builtin:  "Partial"
Operator:  "<"
Name.Other:  "Todo"
Operator:  ">"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "return"
Text:  " "
Punctuation:  "{"
Text:  " "
Punctuation:  "..."
Name.Other:  "todo"
Punctuation:  ","
Text:  " "
Punctuation:  "..."
Name.Other:  "fieldsToUpdate"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Keyword.Declaration:  "const"
Text:  " "
Name.Other:  "obj2"
Punctuation:  ":"
Text:  " "
Name.Builtin:  "Required"
Operator:  "<"
Name.Other:  "Props"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "a"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Punctuation:  "};"
Text:  "<newline>"
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "freeze"
Operator:  "<"
Name.Other:  "Type"
Operator:  ">"
Punctuation:  "("
Name.Other:  "obj"
Punctuation:  ":"
Text:  " "
Name.Other:  "Type"
Punctuation:  "):"
Text:  " "
Name.Builtin:  "Readonly"
Operator:  "<"
Name.Other:  "Type"
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "const"
Text:  " "
Name.Other:  "cats"
Punctuation:  ":"
Text:  " "
Name.Builtin:  "Record"
Operator:  "<"
Name.Other:  "CatName"
Punctuation:  ","
Text:  " "
Name.Other:  "CatInfo"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Attribute:  "miffy"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "age"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "10"
Punctuation:  ","
Text:  " "
Name.Attribute:  "breed"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "Persian"
Literal.String.Delimiter:  "\""
Text:  " "
Punctuation:  "},"
Text:  "<newline>  "
Name.Attribute:  "boris"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "age"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "5"
Punctuation:  ","
Text:  " "
Name.Attribute:  "breed"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "Maine Coon"
Literal.String.Delimiter:  "\""
Text:  " "
Punctuation:  "},"
Text:  "<newline>  "
Name.Attribute:  "mordred"
Punctuation:  ":"
Text:  " "
Punctuation:  "{"
Text:  " "
Name.Attribute:  "age"
Punctuation:  ":"
Text:  " "
Literal.Number.Integer:  "16"
Punctuation:  ","
Text:  " "
Name.Attribute:  "breed"
Punctuation:  ":"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "British Shorthair"
Literal.String.Delimiter:  "\""
Text:  " "
Punctuation:  "},"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "TodoPreview"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "Pick"
Operator:  "<"
Name.Other:  "Todo"
Punctuation:  ","
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "title"
Literal.String.Delimiter:  "\""
Text:  " "
Operator:  "|"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "completed"
Literal.String.Delimiter:  "\""
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "TodoPreview"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "Omit"
Operator:  "<"
Name.Other:  "Todo"
Punctuation:  ","
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "description"
Literal.String.Delimiter:  "\""
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "T0"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "Exclude"
Operator:  "<"
Literal.String.Delimiter:  "\""
Literal.String.Double:  "a"
Literal.String.Delimiter:  "\""
Text:  " "
Operator:  "|"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "b"
Literal.String.Delimiter:  "\""
Text:  " "
Operator:  "|"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "c"
Literal.String.Delimiter:  "\""
Punctuation:  ","
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "a"
Literal.String.Delimiter:  "\""
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "T0"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "Extract"
Operator:  "<"
Literal.String.Delimiter:  "\""
Literal.String.Double:  "a"
Literal.String.Delimiter:  "\""
Text:  " "
Operator:  "|"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "b"
Literal.String.Delimiter:  "\""
Text:  " "
Operator:  "|"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "c"
Literal.String.Delimiter:  "\""
Punctuation:  ","
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "a"
Literal.String.Delimiter:  "\""
Text:  " "
Operator:  "|"
Text:  " "
Literal.String.Delimiter:  "\""
Literal.String.Double:  "f"
Literal.String.Delimiter:  "\""
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "T0"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "NonNullable"
Operator:  "<"
Keyword.Reserved:  "string"
Text:  " "
Operator:  "|"
Text:  " "
Keyword.Reserved:  "number"
Text:  " "
Operator:  "|"
Text:  " "
Keyword.Constant:  "undefined"
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "T2"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "Parameters"
Operator:  "<<"
Name.Other:  "T"
Operator:  ">"
Punctuation:  "("
Name.Other:  "arg"
Punctuation:  ":"
Text:  " "
Name.Other:  "T"
Punctuation:  ")"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Other:  "T"
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "T0"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "ConstructorParameters"
Operator:  "<"
Name.Other:  "ErrorConstructor"
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "T3"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "ReturnType"
Operator:  "<<"
Name.Other:  "T"
Text:  " "
Keyword.Declaration:  "extends"
Text:  " "
Name.Other:  "U"
Punctuation:  ","
Text:  " "
Name.Other:  "U"
Text:  " "
Keyword.Declaration:  "extends"
Text:  " "
Keyword.Reserved:  "number"
Punctuation:  "[]"
Operator:  ">"
Punctuation:  "()"
Text:  " "
Operator:  "=>"
Text:  " "
Name.Other:  "T"
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "T0"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "InstanceType"
Operator:  "<"
Keyword:  "typeof"
Text:  " "
Name.Other:  "C"
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "function"
Text:  " "
Name.Function:  "numberToString"
Punctuation:  "("
Name.Other:  "n"
Punctuation:  ":"
Text:  " "
Name.Builtin:  "ThisParameterType"
Operator:  "<"
Keyword:  "typeof"
Text:  " "
Name.Other:  "toHex"
Operator:  ">"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "return"
Text:  " "
Name.Other:  "toHex"
Punctuation:  "."
Name.Function:  "apply"
Punctuation:  "("
Name.Other:  "n"
Punctuation:  ");"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
Keyword.Declaration:  "const"
Text:  " "
Name.Other:  "fiveToHex"
Punctuation:  ":"
Text:  " "
Name.Builtin:  "OmitThisParameter"
Operator:  "<"
Keyword:  "typeof"
Text:  " "
Name.Other:  "toHex"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Name.Other:  "toHex"
Punctuation:  "."
Name.Function:  "bind"
Punctuation:  "("
Literal.Number.Integer:  "5"
Punctuation:  ");"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "ObjectDescriptor"
Operator:  "<"
Name.Other:  "D"
Punctuation:  ","
Text:  " "
Name.Other:  "M"
Operator:  ">"
Text:  " "
Operator:  "="
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Name.Other:  "data"
Punctuation:  "?:"
Text:  " "
Name.Other:  "D"
Punctuation:  ";"
Text:  "<newline>  "
Name.Label:  "methods"
Punctuation:  "?:"
Text:  " "
Name.Other:  "M"
Text:  " "
Operator:  "&"
Text:  " "
Name.Builtin:  "ThisType"
Operator:  "<"
Name.Other:  "D"
Text:  " "
Operator:  "&"
Text:  " "
Name.Other:  "M"
Operator:  ">"
Punctuation:  ";"
Text:  " "
Comment.Single:  "// Type of 'this' in methods is D & M"
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "ShoutyGreeting"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "Uppercase"
Operator:  "<"
Name.Other:  "Greeting"
Operator:  ">"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "QuietGreeting"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "Lowercase"
Operator:  "<"
Name.Other:  "Greeting"
Operator:  ">"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "Greeting"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "Capitalize"
Operator:  "<"
Name.Other:  "LowercaseGreeting"
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
Keyword.Declaration:  "type"
Text:  " "
Name.Other:  "UncomfortableGreeting"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "Uncapitalize"
Operator:  "<"
Name.Other:  "UppercaseGreeting"
Operator:  ">"
Punctuation:  ";"
Text:  "<newline>"
