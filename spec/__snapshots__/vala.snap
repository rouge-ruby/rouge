Comment.Multiline:  "/* valablock.vala<newline> *<newline> * Copyright (C) 2006-2010  J\u00FCrg Billeter<newline> *<newline> * This library is free software; you can redistribute it and/or<newline> * modify it under the terms of the GNU Lesser General Public<newline> * License as published by the Free Software Foundation; either<newline> * version 2.1 of the License, or (at your option) any later version.<newline> * This library is distributed in the hope that it will be useful,<newline> * but WITHOUT ANY WARRANTY; without even the implied warranty of<newline> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU<newline> * Lesser General Public License for more details.<newline> * You should have received a copy of the GNU Lesser General Public<newline> * License along with this library; if not, write to the Free Software<newline> * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA<newline> *<newline> * Author:<newline> * \tJ\u00FCrg Billeter <j@bitron.ch><newline> */"
Text:  "<newline><newline>"
Keyword:  "using"
Text:  " "
Name.Namespace:  "GLib"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment.Multiline:  "/**<newline> * Represents a source code block.<newline> */"
Text:  "<newline>"
Keyword:  "public"
Text:  " "
Keyword:  "class"
Text:  " "
Name.Class:  "Vala"
Punctuation:  "."
Name:  "Block"
Text:  " "
Punctuation:  ":"
Text:  " "
Name:  "Symbol"
Punctuation:  ","
Text:  " "
Name:  "Statement"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t"
Comment.Multiline:  "/**<newline>\t * Specifies whether this block contains a jump statement. This<newline>\t * information can be used to remove unreachable block cleanup code.<newline>\t */"
Text:  "<newline>\t"
Keyword:  "public"
Text:  " "
Keyword.Type:  "bool"
Text:  " "
Name:  "contains_jump_statement"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "get"
Punctuation:  ";"
Text:  " "
Keyword:  "set"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "public"
Text:  " "
Keyword.Type:  "bool"
Text:  " "
Name:  "captured"
Text:  " "
Punctuation:  "{"
Text:  " "
Keyword:  "get"
Punctuation:  ";"
Text:  " "
Keyword:  "set"
Punctuation:  ";"
Text:  " "
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "private"
Text:  " "
Name:  "List"
Punctuation:  "<"
Name:  "Statement"
Punctuation:  ">"
Text:  " "
Name:  "statement_list"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "ArrayList"
Punctuation:  "<"
Name:  "Statement"
Punctuation:  ">"
Text:  " "
Punctuation:  "();"
Text:  "<newline>\t"
Keyword:  "private"
Text:  " "
Name:  "List"
Punctuation:  "<"
Name:  "LocalVariable"
Punctuation:  ">"
Text:  " "
Name:  "local_variables"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "ArrayList"
Punctuation:  "<"
Name:  "LocalVariable"
Punctuation:  ">"
Text:  " "
Punctuation:  "();"
Text:  "<newline>\t"
Keyword:  "private"
Text:  " "
Name:  "List"
Punctuation:  "<"
Name:  "Constant"
Punctuation:  ">"
Text:  " "
Name:  "local_constants"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "ArrayList"
Punctuation:  "<"
Name:  "Constant"
Punctuation:  ">"
Text:  " "
Punctuation:  "();"
Text:  "<newline>\t<newline>\t"
Comment.Multiline:  "/**<newline>\t * Creates a new block.<newline>\t *<newline>\t * @param source_reference  reference to source code<newline>\t */"
Text:  "<newline>\t"
Keyword:  "public"
Text:  " "
Name.Function:  "Block"
Text:  " "
Punctuation:  "("
Name:  "SourceReference"
Punctuation:  "?"
Text:  " "
Name:  "source_reference"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword:  "base"
Text:  " "
Punctuation:  "("
Keyword:  "null"
Punctuation:  ","
Text:  " "
Name:  "source_reference"
Punctuation:  ");"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline>\t<newline>\t"
Comment.Multiline:  "/**<newline>\t * Append a statement to this block.<newline>\t *<newline>\t * @param stmt a statement<newline>\t */"
Text:  "<newline>\t"
Keyword:  "public"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "add_statement"
Text:  " "
Punctuation:  "("
Name:  "Statement"
Text:  " "
Name:  "stmt"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "stmt"
Punctuation:  "."
Name:  "parent_node"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "this"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "statement_list"
Punctuation:  "."
Name.Function:  "add"
Text:  " "
Punctuation:  "("
Name:  "stmt"
Punctuation:  ");"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "public"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "insert_statement"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "index"
Punctuation:  ","
Text:  " "
Name:  "Statement"
Text:  " "
Name:  "stmt"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "stmt"
Punctuation:  "."
Name:  "parent_node"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "this"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "statement_list"
Punctuation:  "."
Name.Function:  "insert"
Text:  " "
Punctuation:  "("
Name:  "index"
Punctuation:  ","
Text:  " "
Name:  "stmt"
Punctuation:  ");"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Comment.Multiline:  "/**<newline>\t * Returns a copy of the list of statements.<newline>\t *<newline>\t * @return statement list<newline>\t */"
Text:  "<newline>\t"
Keyword:  "public"
Text:  " "
Name:  "List"
Punctuation:  "<"
Name:  "Statement"
Punctuation:  ">"
Text:  " "
Name.Function:  "get_statements"
Text:  " "
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword:  "var"
Text:  " "
Name:  "list"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name:  "ArrayList"
Punctuation:  "<"
Name:  "Statement"
Punctuation:  ">"
Text:  " "
Punctuation:  "();"
Text:  "<newline>\t\t"
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "Statement"
Text:  " "
Name:  "stmt"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "statement_list"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "var"
Text:  " "
Name:  "stmt_list"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "stmt"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "StatementList"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "stmt_list"
Text:  " "
Punctuation:  "!="
Text:  " "
Keyword:  "null"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "<"
Text:  " "
Name:  "stmt_list"
Punctuation:  "."
Name:  "length"
Punctuation:  ";"
Text:  " "
Name:  "i"
Punctuation:  "++)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Name:  "list"
Punctuation:  "."
Name.Function:  "add"
Text:  " "
Punctuation:  "("
Name:  "stmt_list"
Punctuation:  "."
Keyword:  "get"
Text:  " "
Punctuation:  "("
Name:  "i"
Punctuation:  "));"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "list"
Punctuation:  "."
Name.Function:  "add"
Text:  " "
Punctuation:  "("
Name:  "stmt"
Punctuation:  ");"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name:  "list"
Punctuation:  ";"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline>\t<newline>\t"
Comment.Multiline:  "/**<newline>\t * Add a local variable to this block.<newline>\t *<newline>\t * @param local a variable declarator<newline>\t */"
Text:  "<newline>\t"
Keyword:  "public"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "add_local_variable"
Text:  " "
Punctuation:  "("
Name:  "LocalVariable"
Text:  " "
Name:  "local"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword:  "var"
Text:  " "
Name:  "parent_block"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parent_symbol"
Punctuation:  ";"
Text:  "<newline>\t\t"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name:  "parent_block"
Text:  " "
Keyword:  "is"
Text:  " "
Name:  "Block"
Text:  " "
Punctuation:  "||"
Text:  " "
Name:  "parent_block"
Text:  " "
Keyword:  "is"
Text:  " "
Name:  "Method"
Text:  " "
Punctuation:  "||"
Text:  " "
Name:  "parent_block"
Text:  " "
Keyword:  "is"
Text:  " "
Name:  "PropertyAccessor"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "parent_block"
Punctuation:  "."
Name:  "scope"
Punctuation:  "."
Name.Function:  "lookup"
Text:  " "
Punctuation:  "("
Name:  "local"
Punctuation:  "."
Name:  "name"
Punctuation:  ")"
Text:  " "
Punctuation:  "!="
Text:  " "
Keyword:  "null"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "Report"
Punctuation:  "."
Name.Function:  "error"
Text:  " "
Punctuation:  "("
Name:  "local"
Punctuation:  "."
Name:  "source_reference"
Punctuation:  ","
Text:  " "
Literal.String:  "\"Local variable `%s' conflicts with a local variable or constant declared in a parent scope\""
Punctuation:  "."
Name.Function:  "printf"
Text:  " "
Punctuation:  "("
Name:  "local"
Punctuation:  "."
Name:  "name"
Punctuation:  "));"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "parent_block"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parent_block"
Punctuation:  "."
Name:  "parent_symbol"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Name:  "local_variables"
Punctuation:  "."
Name.Function:  "add"
Text:  " "
Punctuation:  "("
Name:  "local"
Punctuation:  ");"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "public"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "remove_local_variable"
Text:  " "
Punctuation:  "("
Name:  "LocalVariable"
Text:  " "
Name:  "local"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "local_variables"
Punctuation:  "."
Name.Function:  "remove"
Text:  " "
Punctuation:  "("
Name:  "local"
Punctuation:  ");"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Comment.Multiline:  "/**<newline>\t * Returns a copy of the list of local variables.<newline>\t *<newline>\t * @return variable declarator list<newline>\t */"
Text:  "<newline>\t"
Keyword:  "public"
Text:  " "
Name:  "List"
Punctuation:  "<"
Name:  "LocalVariable"
Punctuation:  ">"
Text:  " "
Name.Function:  "get_local_variables"
Text:  " "
Punctuation:  "()"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name:  "local_variables"
Punctuation:  ";"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "public"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "add_local_constant"
Text:  " "
Punctuation:  "("
Name:  "Constant"
Text:  " "
Name:  "constant"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword:  "var"
Text:  " "
Name:  "parent_block"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parent_symbol"
Punctuation:  ";"
Text:  "<newline>\t\t"
Keyword:  "while"
Text:  " "
Punctuation:  "("
Name:  "parent_block"
Text:  " "
Keyword:  "is"
Text:  " "
Name:  "Block"
Text:  " "
Punctuation:  "||"
Text:  " "
Name:  "parent_block"
Text:  " "
Keyword:  "is"
Text:  " "
Name:  "Method"
Text:  " "
Punctuation:  "||"
Text:  " "
Name:  "parent_block"
Text:  " "
Keyword:  "is"
Text:  " "
Name:  "PropertyAccessor"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "parent_block"
Punctuation:  "."
Name:  "scope"
Punctuation:  "."
Name.Function:  "lookup"
Text:  " "
Punctuation:  "("
Name:  "constant"
Punctuation:  "."
Name:  "name"
Punctuation:  ")"
Text:  " "
Punctuation:  "!="
Text:  " "
Keyword:  "null"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "Report"
Punctuation:  "."
Name.Function:  "error"
Text:  " "
Punctuation:  "("
Name:  "constant"
Punctuation:  "."
Name:  "source_reference"
Punctuation:  ","
Text:  " "
Literal.String:  "\"Local constant `%s' conflicts with a local variable or constant declared in a parent scope\""
Punctuation:  "."
Name.Function:  "printf"
Text:  " "
Punctuation:  "("
Name:  "constant"
Punctuation:  "."
Name:  "name"
Punctuation:  "));"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Name:  "parent_block"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "parent_block"
Punctuation:  "."
Name:  "parent_symbol"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Name:  "local_constants"
Punctuation:  "."
Name.Function:  "add"
Text:  " "
Punctuation:  "("
Name:  "constant"
Punctuation:  ");"
Text:  "<newline>\t\t"
Name:  "scope"
Punctuation:  "."
Name.Function:  "add"
Text:  " "
Punctuation:  "("
Name:  "constant"
Punctuation:  "."
Name:  "name"
Punctuation:  ","
Text:  " "
Name:  "constant"
Punctuation:  ");"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "public"
Text:  " "
Keyword:  "override"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "accept"
Text:  " "
Punctuation:  "("
Name:  "CodeVisitor"
Text:  " "
Name:  "visitor"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "visitor"
Punctuation:  "."
Name.Function:  "visit_block"
Text:  " "
Punctuation:  "("
Keyword:  "this"
Punctuation:  ");"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "public"
Text:  " "
Keyword:  "override"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "accept_children"
Text:  " "
Punctuation:  "("
Name:  "CodeVisitor"
Text:  " "
Name:  "visitor"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "Statement"
Text:  " "
Name:  "stmt"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "statement_list"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Name:  "stmt"
Punctuation:  "."
Name.Function:  "accept"
Text:  " "
Punctuation:  "("
Name:  "visitor"
Punctuation:  ");"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "public"
Text:  " "
Keyword:  "override"
Text:  " "
Keyword.Type:  "bool"
Text:  " "
Name.Function:  "check"
Text:  " "
Punctuation:  "("
Name:  "CodeContext"
Text:  " "
Name:  "context"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "checked"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " "
Punctuation:  "!"
Name:  "error"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Name:  "checked"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "true"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Name:  "owner"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "context"
Punctuation:  "."
Name:  "analyzer"
Punctuation:  "."
Name:  "current_symbol"
Punctuation:  "."
Name:  "scope"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "var"
Text:  " "
Name:  "old_symbol"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "context"
Punctuation:  "."
Name:  "analyzer"
Punctuation:  "."
Name:  "current_symbol"
Punctuation:  ";"
Text:  "<newline>\t\t"
Keyword:  "var"
Text:  " "
Name:  "old_insert_block"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "context"
Punctuation:  "."
Name:  "analyzer"
Punctuation:  "."
Name:  "insert_block"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "context"
Punctuation:  "."
Name:  "analyzer"
Punctuation:  "."
Name:  "current_symbol"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "this"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "context"
Punctuation:  "."
Name:  "analyzer"
Punctuation:  "."
Name:  "insert_block"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "this"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "<"
Text:  " "
Name:  "statement_list"
Punctuation:  "."
Name:  "size"
Punctuation:  ";"
Text:  " "
Name:  "i"
Punctuation:  "++)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Name:  "statement_list"
Punctuation:  "["
Name:  "i"
Punctuation:  "]."
Name.Function:  "check"
Text:  " "
Punctuation:  "("
Name:  "context"
Punctuation:  ");"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "LocalVariable"
Text:  " "
Name:  "local"
Text:  " "
Keyword:  "in"
Text:  " "
Name.Function:  "get_local_variables"
Text:  " "
Punctuation:  "())"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Name:  "local"
Punctuation:  "."
Name:  "active"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "false"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "Constant"
Text:  " "
Name:  "constant"
Text:  " "
Keyword:  "in"
Text:  " "
Name:  "local_constants"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Name:  "constant"
Punctuation:  "."
Name:  "active"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "false"
Punctuation:  ";"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Comment.Single:  "// use get_statements () instead of statement_list to not miss errors within StatementList objects"
Text:  "<newline>\t\t"
Keyword:  "foreach"
Text:  " "
Punctuation:  "("
Name:  "Statement"
Text:  " "
Name:  "stmt"
Text:  " "
Keyword:  "in"
Text:  " "
Name.Function:  "get_statements"
Text:  " "
Punctuation:  "())"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Name.Function:  "add_error_types"
Text:  " "
Punctuation:  "("
Name:  "stmt"
Punctuation:  "."
Name.Function:  "get_error_types"
Text:  " "
Punctuation:  "());"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline><newline>\t\t"
Name:  "context"
Punctuation:  "."
Name:  "analyzer"
Punctuation:  "."
Name:  "current_symbol"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "old_symbol"
Punctuation:  ";"
Text:  "<newline>\t\t"
Name:  "context"
Punctuation:  "."
Name:  "analyzer"
Punctuation:  "."
Name:  "insert_block"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "old_insert_block"
Punctuation:  ";"
Text:  "<newline><newline>\t\t"
Keyword:  "return"
Text:  " "
Punctuation:  "!"
Name:  "error"
Punctuation:  ";"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "public"
Text:  " "
Keyword:  "override"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "emit"
Text:  " "
Punctuation:  "("
Name:  "CodeGenerator"
Text:  " "
Name:  "codegen"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Name:  "codegen"
Punctuation:  "."
Name.Function:  "visit_block"
Text:  " "
Punctuation:  "("
Keyword:  "this"
Punctuation:  ");"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "public"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "insert_before"
Text:  " "
Punctuation:  "("
Name:  "Statement"
Text:  " "
Name:  "stmt"
Punctuation:  ","
Text:  " "
Name:  "Statement"
Text:  " "
Name:  "new_stmt"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "<"
Text:  " "
Name:  "statement_list"
Punctuation:  "."
Name:  "size"
Punctuation:  ";"
Text:  " "
Name:  "i"
Punctuation:  "++)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "var"
Text:  " "
Name:  "stmt_list"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "statement_list"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "StatementList"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "stmt_list"
Text:  " "
Punctuation:  "!="
Text:  " "
Keyword:  "null"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "0"
Punctuation:  ";"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "<"
Text:  " "
Name:  "stmt_list"
Punctuation:  "."
Name:  "length"
Punctuation:  ";"
Text:  " "
Name:  "j"
Punctuation:  "++)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "stmt_list"
Punctuation:  "."
Keyword:  "get"
Text:  " "
Punctuation:  "("
Name:  "j"
Punctuation:  ")"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "stmt"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "stmt_list"
Punctuation:  "."
Name.Function:  "insert"
Text:  " "
Punctuation:  "("
Name:  "j"
Punctuation:  ","
Text:  " "
Name:  "new_stmt"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "new_stmt"
Punctuation:  "."
Name:  "parent_node"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "this"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "statement_list"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "stmt"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "stmt_list"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "new"
Text:  " "
Name.Function:  "StatementList"
Text:  " "
Punctuation:  "("
Name:  "source_reference"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "stmt_list"
Punctuation:  "."
Name.Function:  "add"
Text:  " "
Punctuation:  "("
Name:  "new_stmt"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "stmt_list"
Punctuation:  "."
Name.Function:  "add"
Text:  " "
Punctuation:  "("
Name:  "stmt"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t"
Name:  "statement_list"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "stmt_list"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "new_stmt"
Punctuation:  "."
Name:  "parent_node"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "this"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline><newline>\t"
Keyword:  "public"
Text:  " "
Keyword:  "void"
Text:  " "
Name.Function:  "replace_statement"
Text:  " "
Punctuation:  "("
Name:  "Statement"
Text:  " "
Name:  "old_stmt"
Punctuation:  ","
Text:  " "
Name:  "Statement"
Text:  " "
Name:  "new_stmt"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "0"
Punctuation:  ";"
Text:  " "
Name:  "i"
Text:  " "
Punctuation:  "<"
Text:  " "
Name:  "statement_list"
Punctuation:  "."
Name:  "size"
Punctuation:  ";"
Text:  " "
Name:  "i"
Punctuation:  "++)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t"
Keyword:  "var"
Text:  " "
Name:  "stmt_list"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "statement_list"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Keyword:  "as"
Text:  " "
Name:  "StatementList"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "stmt_list"
Text:  " "
Punctuation:  "!="
Text:  " "
Keyword:  "null"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " "
Punctuation:  "("
Keyword.Type:  "int"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.Number:  "0"
Punctuation:  ";"
Text:  " "
Name:  "j"
Text:  " "
Punctuation:  "<"
Text:  " "
Name:  "stmt_list"
Punctuation:  "."
Name:  "length"
Punctuation:  ";"
Text:  " "
Name:  "j"
Punctuation:  "++)"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "stmt_list"
Punctuation:  "."
Keyword:  "get"
Text:  " "
Punctuation:  "("
Name:  "j"
Punctuation:  ")"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "old_stmt"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "stmt_list"
Punctuation:  "."
Keyword:  "set"
Text:  " "
Punctuation:  "("
Name:  "j"
Punctuation:  ","
Text:  " "
Name:  "new_stmt"
Punctuation:  ");"
Text:  "<newline>\t\t\t\t\t\t"
Name:  "new_stmt"
Punctuation:  "."
Name:  "parent_node"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "this"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  " "
Keyword:  "else"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "statement_list"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Punctuation:  "=="
Text:  " "
Name:  "old_stmt"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>\t\t\t\t"
Name:  "statement_list"
Punctuation:  "["
Name:  "i"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Name:  "new_stmt"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Name:  "new_stmt"
Punctuation:  "."
Name:  "parent_node"
Text:  " "
Punctuation:  "="
Text:  " "
Keyword:  "this"
Punctuation:  ";"
Text:  "<newline>\t\t\t\t"
Keyword:  "break"
Punctuation:  ";"
Text:  "<newline>\t\t\t"
Punctuation:  "}"
Text:  "<newline>\t\t"
Punctuation:  "}"
Text:  "<newline>\t"
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
