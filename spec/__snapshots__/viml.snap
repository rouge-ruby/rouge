Comment:  "\" Vim completion script"
Text:  "<newline>"
Comment:  "\" Language:\tPHP"
Text:  "<newline>"
Comment:  "\" Maintainer:\tMikolaj Machowski ( mikmach AT wp DOT pl )"
Text:  "<newline>"
Comment:  "\" Last Change:\t2006 May 9"
Text:  "<newline>"
Comment:  "\""
Text:  "<newline>"
Comment:  "\"   TODO:"
Text:  "<newline>"
Comment:  "\"   - Class aware completion:"
Text:  "<newline>"
Comment:  "\"      a) caching?"
Text:  "<newline>"
Comment:  "\"   - Switching to HTML (XML?) completion (SQL) inside of phpStrings"
Text:  "<newline>"
Comment:  "\"   - allow also for XML completion <- better do html_flavor for HTML"
Text:  "<newline>"
Comment:  "\"     completion"
Text:  "<newline>"
Comment:  "\"   - outside of <?php?> getting parent tag may cause problems. Heh, even in"
Text:  "<newline>"
Comment:  "\"     perfect conditions GetLastOpenTag doesn't cooperate... Inside of"
Text:  "<newline>"
Comment:  "\"     phpStrings this can be even a bonus but outside of <?php?> it is not the"
Text:  "<newline>"
Comment:  "\"     best situation"
Text:  "<newline><newline>"
Keyword:  "function"
Punctuation:  "!"
Text:  " phpcomplete#CompletePHP"
Punctuation:  "("
Text:  "findstart"
Punctuation:  ","
Text:  " base"
Punctuation:  ")"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Name.Variable:  "a:findstart"
Text:  "<newline>\t\tunlet"
Punctuation:  "!"
Text:  " "
Name.Variable:  "b:php_menu"
Text:  "<newline>\t\t"
Comment:  "\" Check if we are inside of PHP markup"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " pos "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getpos"
Punctuation:  "("
Literal.String.Single:  "'.'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " phpbegin "
Punctuation:  "="
Text:  " "
Name.Builtin:  "searchpairpos"
Punctuation:  "("
Literal.String.Single:  "'<?'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'?>'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'bWn'"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'synIDattr(synID(line(\".\"), col(\".\"), 0), \"name\") =~? \"string\\|comment\"'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " phpend   "
Punctuation:  "="
Text:  " "
Name.Builtin:  "searchpairpos"
Punctuation:  "("
Literal.String.Single:  "'<?'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'?>'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'Wn'"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'synIDattr(synID(line(\".\"), col(\".\"), 0), \"name\") =~? \"string\\|comment\"'"
Punctuation:  ")"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Text:  " phpbegin "
Punctuation:  "=="
Text:  " "
Punctuation:  "["
Literal.Number:  "0"
Punctuation:  ","
Literal.Number:  "0"
Punctuation:  "]"
Text:  " && phpend "
Punctuation:  "=="
Text:  " "
Punctuation:  "["
Literal.Number:  "0"
Punctuation:  ","
Literal.Number:  "0"
Punctuation:  "]"
Text:  "<newline>\t\t\t"
Comment:  "\" We are outside of any PHP markup. Complete HTML"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " htmlbegin "
Punctuation:  "="
Text:  " htmlcomplete#CompleteTags"
Punctuation:  "("
Literal.Number:  "1"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " cursor_col "
Punctuation:  "="
Text:  " pos"
Punctuation:  "["
Literal.Number:  "2"
Punctuation:  "]"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " base "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getline"
Punctuation:  "("
Literal.String.Single:  "'.'"
Punctuation:  ")["
Text:  "htmlbegin "
Punctuation:  ":"
Text:  " cursor_col"
Punctuation:  "]"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " "
Name.Variable:  "b:php_menu"
Text:  " "
Punctuation:  "="
Text:  " htmlcomplete#CompleteTags"
Punctuation:  "("
Literal.Number:  "0"
Punctuation:  ","
Text:  " base"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " htmlbegin<newline>\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t"
Comment:  "\" locate the start of the word"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " "
Name.Builtin:  "line"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getline"
Punctuation:  "("
Literal.String.Single:  "'.'"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " start "
Punctuation:  "="
Text:  " "
Keyword:  "col"
Punctuation:  "("
Literal.String.Single:  "'.'"
Punctuation:  ")"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number:  "1"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " curline "
Punctuation:  "="
Text:  " "
Name.Builtin:  "line"
Punctuation:  "("
Literal.String.Single:  "'.'"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " compl_begin "
Punctuation:  "="
Text:  " "
Keyword:  "col"
Punctuation:  "("
Literal.String.Single:  "'.'"
Punctuation:  ")"
Text:  " "
Punctuation:  "-"
Text:  " "
Literal.Number:  "2"
Text:  "<newline>\t\t\t"
Keyword:  "while"
Text:  " start "
Punctuation:  ">="
Text:  " "
Literal.Number:  "0"
Text:  " && "
Name.Builtin:  "line"
Punctuation:  "["
Text:  "start "
Punctuation:  "-"
Text:  " "
Literal.Number:  "1"
Punctuation:  "]"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'[a-zA-Z_0-9\\x7f-\\xff$]'"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " start "
Punctuation:  "-="
Text:  " "
Literal.Number:  "1"
Text:  "<newline>\t\t\t"
Keyword:  "endwhile"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " "
Name.Variable:  "b:compl_context"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getline"
Punctuation:  "("
Literal.String.Single:  "'.'"
Punctuation:  ")["
Literal.Number:  "0"
Punctuation:  ":"
Text:  "compl_begin"
Punctuation:  "]"
Text:  "<newline>\t\t\t"
Keyword:  "return"
Text:  " start<newline><newline>\t\t\t"
Comment:  "\" We can be also inside of phpString with HTML tags. Deal with"
Text:  "<newline>\t\t\t"
Comment:  "\" it later (time, not lines)."
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "endif"
Text:  "<newline>\t"
Comment:  "\" If exists b:php_menu it means completion was already constructed we"
Text:  "<newline>\t"
Comment:  "\" don't need to do anything more"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "exists"
Punctuation:  "("
Literal.String.Double:  "\"b:php_menu\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "return"
Text:  " "
Name.Variable:  "b:php_menu"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline>\t"
Comment:  "\" Initialize base return lists"
Text:  "<newline>\t"
Keyword:  "let"
Text:  " "
Keyword:  "res"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>\t"
Keyword:  "let"
Text:  " res2 "
Punctuation:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>\t"
Comment:  "\" a:base is very short - we need context"
Text:  "<newline>\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "exists"
Punctuation:  "("
Literal.String.Double:  "\"b:compl_context\""
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " context "
Punctuation:  "="
Text:  " "
Name.Variable:  "b:compl_context"
Text:  "<newline>\t\tunlet"
Punctuation:  "!"
Text:  " "
Name.Variable:  "b:compl_context"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "if"
Text:  " "
Punctuation:  "!"
Name.Builtin:  "exists"
Punctuation:  "("
Literal.String.Single:  "'g:php_builtin_functions'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " phpcomplete#LoadData"
Punctuation:  "()"
Text:  "<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "let"
Text:  " scontext "
Punctuation:  "="
Text:  " "
Name.Builtin:  "substitute"
Punctuation:  "("
Text:  "context"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'\\$\\?[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*$'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ")"
Text:  "<newline><newline>\t"
Keyword:  "if"
Text:  " scontext "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'\\(=\\s*new\\|extends\\)\\s\\+$'"
Text:  "<newline>\t\t"
Comment:  "\" Complete class name"
Text:  "<newline>\t\t"
Comment:  "\" Internal solution for finding classes in current file."
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " "
Keyword:  "file"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getline"
Punctuation:  "("
Literal.Number:  "1"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'$'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Keyword:  "filter"
Punctuation:  "("
Keyword:  "file"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'v:val =~ \"class\\\\s\\\\+[a-zA-Z_\\\\x7f-\\\\xff][a-zA-Z_0-9\\\\x7f-\\\\xff]*\\\\s*(\"'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " fnames "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Name.Builtin:  "map"
Punctuation:  "("
Name.Builtin:  "tagfiles"
Punctuation:  "(),"
Text:  " "
Literal.String.Single:  "'escape(v:val, \" \\\\#%\")'"
Punctuation:  "))"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " jfile "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Keyword:  "file"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "' '"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " int_values "
Punctuation:  "="
Text:  " "
Keyword:  "split"
Punctuation:  "("
Text:  "jfile"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'class\\s\\+'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " int_classes "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " int_values<newline>\t\t\t"
Keyword:  "let"
Text:  " c_name "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'^[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*'"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " c_name "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " int_classes"
Punctuation:  "["
Text:  "c_name"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Comment:  "\" Prepare list of classes from tags file"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " ext_classes "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " fnames "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Name.Builtin:  "map"
Punctuation:  "("
Name.Builtin:  "tagfiles"
Punctuation:  "(),"
Text:  " "
Literal.String.Single:  "'escape(v:val, \" \\\\#%\")'"
Punctuation:  "))"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " fnames "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\texe "
Literal.String.Single:  "'silent! vimgrep /^'"
Punctuation:  "."
Name.Variable:  "a:base"
Punctuation:  "."
Literal.String.Single:  "'.*\\tc\\(\\t\\|$\\)/j '"
Punctuation:  "."
Text:  "fnames<newline>\t\t\t"
Keyword:  "let"
Text:  " qflist "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getqflist"
Punctuation:  "()"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "len"
Punctuation:  "("
Text:  "qflist"
Punctuation:  ")"
Text:  " "
Punctuation:  ">"
Text:  " "
Literal.Number:  "0"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " field "
Keyword:  "in"
Text:  " qflist<newline>\t\t\t\t\t"
Comment:  "\" [:space:] thing: we don't have to be so strict when"
Text:  "<newline>\t\t\t\t\t"
Comment:  "\" dealing with tags files - entries there were already"
Text:  "<newline>\t\t\t\t\t"
Comment:  "\" checked by ctags."
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " item "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  " "
Literal.String.Single:  "'^[^[:space:]]\\+'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " ext_classes"
Punctuation:  "["
Text:  "item"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t"
Keyword:  "endfor"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Comment:  "\" Prepare list of built in classes from g:php_builtin_functions"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " "
Punctuation:  "!"
Name.Builtin:  "exists"
Punctuation:  "("
Literal.String.Double:  "\"g:php_omni_bi_classes\""
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " "
Name.Variable:  "g:php_omni_bi_classes"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Name.Builtin:  "keys"
Punctuation:  "("
Name.Variable:  "g:php_builtin_object_functions"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " "
Name.Variable:  "g:php_omni_bi_classes"
Punctuation:  "["
Name.Builtin:  "substitute"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'::.*$'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ")]"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t"
Keyword:  "endfor"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Keyword:  "let"
Text:  " classes "
Punctuation:  "="
Text:  " "
Keyword:  "sort"
Punctuation:  "("
Name.Builtin:  "keys"
Punctuation:  "("
Text:  "int_classes"
Punctuation:  "))"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " classes "
Punctuation:  "+="
Text:  " "
Keyword:  "sort"
Punctuation:  "("
Name.Builtin:  "keys"
Punctuation:  "("
Text:  "ext_classes"
Punctuation:  "))"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " classes "
Punctuation:  "+="
Text:  " "
Keyword:  "sort"
Punctuation:  "("
Name.Builtin:  "keys"
Punctuation:  "("
Name.Variable:  "g:php_omni_bi_classes"
Punctuation:  "))"
Text:  "<newline><newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "m"
Text:  " "
Keyword:  "in"
Text:  " classes<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Keyword:  "m"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'^'"
Punctuation:  "."
Name.Variable:  "a:base"
Text:  "<newline>\t\t\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "add"
Punctuation:  "("
Keyword:  "res"
Punctuation:  ","
Text:  " "
Keyword:  "m"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Keyword:  "let"
Text:  " final_menu "
Punctuation:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " "
Keyword:  "res"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " final_menu "
Punctuation:  "+="
Text:  " "
Punctuation:  "[{"
Literal.String.Single:  "'word'"
Punctuation:  ":"
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'kind'"
Punctuation:  ":"
Literal.String.Single:  "'c'"
Punctuation:  "}]"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Keyword:  "return"
Text:  " final_menu<newline><newline>\t"
Keyword:  "elseif"
Text:  " scontext "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'\\(->\\|::\\)$'"
Text:  "<newline>\t\t"
Comment:  "\" Complete user functions and variables"
Text:  "<newline>\t\t"
Comment:  "\" Internal solution for current file."
Text:  "<newline>\t\t"
Comment:  "\" That seems as unnecessary repeating of functions but there are"
Text:  "<newline>\t\t"
Comment:  "\" few not so subtle differences as not appending of $ and addition"
Text:  "<newline>\t\t"
Comment:  "\" of 'kind' tag (not necessary in regular completion)"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Text:  " scontext "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'->$'"
Text:  " && scontext "
Punctuation:  "!~"
Text:  " "
Literal.String.Single:  "'\\$this->$'"
Text:  "<newline><newline>\t\t\t"
Comment:  "\" Get name of the class"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " classname "
Punctuation:  "="
Text:  " phpcomplete#GetClassName"
Punctuation:  "("
Text:  "scontext"
Punctuation:  ")"
Text:  "<newline><newline>\t\t\t"
Comment:  "\" Get location of class definition, we have to iterate through all"
Text:  "<newline>\t\t\t"
Comment:  "\" tags files separately because we need relative path from current"
Text:  "<newline>\t\t\t"
Comment:  "\" file to the exact file (tags file can be in different dir)"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " classname "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " classlocation "
Punctuation:  "="
Text:  " phpcomplete#GetClassLocation"
Punctuation:  "("
Text:  "classname"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " classlocation "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t\t"
Keyword:  "if"
Text:  " classlocation "
Punctuation:  "=="
Text:  " "
Literal.String.Single:  "'VIMPHP_BUILTINOBJECT'"
Text:  "<newline><newline>\t\t\t\t"
Keyword:  "for"
Text:  " object "
Keyword:  "in"
Text:  " "
Name.Builtin:  "keys"
Punctuation:  "("
Name.Variable:  "g:php_builtin_object_functions"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " object "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'^'"
Punctuation:  "."
Text:  "classname<newline>\t\t\t\t\t\t"
Keyword:  "let"
Text:  " "
Keyword:  "res"
Text:  " "
Punctuation:  "+="
Text:  " "
Punctuation:  "[{"
Literal.String.Single:  "'word'"
Punctuation:  ":"
Name.Builtin:  "substitute"
Punctuation:  "("
Text:  "object"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'.*::'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  "),"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t   \t\\"
Text:  "    "
Literal.String.Single:  "'info'"
Punctuation:  ":"
Text:  " "
Name.Variable:  "g:php_builtin_object_functions"
Punctuation:  "["
Text:  "object"
Punctuation:  "]}]"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t\t\t"
Keyword:  "return"
Text:  " "
Keyword:  "res"
Text:  "<newline><newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "filereadable"
Punctuation:  "("
Text:  "classlocation"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " classfile "
Punctuation:  "="
Text:  " "
Name.Builtin:  "readfile"
Punctuation:  "("
Text:  "classlocation"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " classcontent "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " classcontent "
Punctuation:  ".="
Text:  " "
Literal.String.Double:  "\"<newline>\""
Punctuation:  "."
Text:  "phpcomplete#GetClassContents"
Punctuation:  "("
Text:  "classfile"
Punctuation:  ","
Text:  " classname"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " sccontent "
Punctuation:  "="
Text:  " "
Keyword:  "split"
Punctuation:  "("
Text:  "classcontent"
Punctuation:  ","
Text:  " "
Literal.String.Double:  "\"<newline>\""
Punctuation:  ")"
Text:  "<newline><newline>\t\t\t\t"
Comment:  "\" YES, YES, YES! - we have whole content including extends!"
Text:  "<newline>\t\t\t\t"
Comment:  "\" Now we need to get two elements: public functions and public"
Text:  "<newline>\t\t\t\t"
Comment:  "\" vars"
Text:  "<newline>\t\t\t\t"
Comment:  "\" NO, NO, NO! - third separate filtering looking for content"
Text:  "<newline>\t\t\t\t"
Comment:  "\" :(, but all of them have differences. To squeeze them into"
Text:  "<newline>\t\t\t\t"
Comment:  "\" one implementation would require many additional arguments"
Text:  "<newline>\t\t\t\t"
Comment:  "\" and ifs. No good solution"
Text:  "<newline>\t\t\t\t"
Comment:  "\" Functions declared with public keyword or without any"
Text:  "<newline>\t\t\t\t"
Comment:  "\" keyword are public"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " functions "
Punctuation:  "="
Text:  " "
Keyword:  "filter"
Punctuation:  "("
Name.Builtin:  "deepcopy"
Punctuation:  "("
Text:  "sccontent"
Punctuation:  "),"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'v:val =~ \"^\\\\s*\\\\(static\\\\s\\\\+\\\\|public\\\\s\\\\+\\\\)*function\"'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " jfuncs "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Text:  "functions"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "' '"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " sfuncs "
Punctuation:  "="
Text:  " "
Keyword:  "split"
Punctuation:  "("
Text:  "jfuncs"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'function\\s\\+'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " c_functions "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " sfuncs<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " f_name "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'^&\\?\\zs[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\ze'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " f_args "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'^&\\?[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\s*(\\zs.\\{-}\\ze)\\_s*{'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " f_name "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "let"
Text:  " c_functions"
Punctuation:  "["
Text:  "f_name"
Punctuation:  "."
Literal.String.Single:  "'('"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " f_args<newline>\t\t\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t\t"
Keyword:  "endfor"
Text:  "<newline>\t\t\t\t"
Comment:  "\" Variables declared with var or with public keyword are"
Text:  "<newline>\t\t\t\t"
Comment:  "\" public"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " variables "
Punctuation:  "="
Text:  " "
Keyword:  "filter"
Punctuation:  "("
Name.Builtin:  "deepcopy"
Punctuation:  "("
Text:  "sccontent"
Punctuation:  "),"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'v:val =~ \"^\\\\s*\\\\(public\\\\|var\\\\)\\\\s\\\\+\\\\$\"'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " jvars "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Text:  "variables"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "' '"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " svars "
Punctuation:  "="
Text:  " "
Keyword:  "split"
Punctuation:  "("
Text:  "jvars"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'\\$'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " c_variables "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " svars<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " c_var "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'^\\zs[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\ze'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " c_var "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "let"
Text:  " c_variables"
Punctuation:  "["
Text:  "c_var"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t\t\t"
Keyword:  "let"
Text:  " all_values "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "all_values"
Punctuation:  ","
Text:  " c_functions"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "all_values"
Punctuation:  ","
Text:  " c_variables"
Punctuation:  ")"
Text:  "<newline><newline>\t\t\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "m"
Text:  " "
Keyword:  "in"
Text:  " "
Keyword:  "sort"
Punctuation:  "("
Name.Builtin:  "keys"
Punctuation:  "("
Text:  "all_values"
Punctuation:  "))"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Keyword:  "m"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'^'"
Punctuation:  "."
Name.Variable:  "a:base"
Text:  " && "
Keyword:  "m"
Text:  " "
Punctuation:  "!~"
Text:  " "
Literal.String.Single:  "'::'"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "add"
Punctuation:  "("
Keyword:  "res"
Punctuation:  ","
Text:  " "
Keyword:  "m"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "elseif"
Text:  " "
Keyword:  "m"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'::'"
Punctuation:  "."
Name.Variable:  "a:base"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "add"
Punctuation:  "("
Text:  "res2"
Punctuation:  ","
Text:  " "
Keyword:  "m"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t\t\t"
Keyword:  "let"
Text:  " start_list "
Punctuation:  "="
Text:  " "
Keyword:  "res"
Text:  " "
Punctuation:  "+"
Text:  " res2<newline><newline>\t\t\t\t"
Keyword:  "let"
Text:  " final_list "
Punctuation:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " start_list<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "has_key"
Punctuation:  "("
Text:  "c_variables"
Punctuation:  ","
Text:  " "
Keyword:  "i"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "let"
Text:  " class "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "' '"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "if"
Text:  " all_values"
Punctuation:  "["
Keyword:  "i"
Punctuation:  "]"
Text:  " "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t\t\t\t"
Keyword:  "let"
Text:  " class "
Punctuation:  "="
Text:  " "
Keyword:  "i"
Punctuation:  "."
Literal.String.Single:  "' class '"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "let"
Text:  " final_list "
Punctuation:  "+="
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Punctuation:  "[{"
Literal.String.Single:  "'word'"
Punctuation:  ":"
Keyword:  "i"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  "   "
Literal.String.Single:  "'info'"
Punctuation:  ":"
Text:  "class"
Punctuation:  "."
Text:  "all_values"
Punctuation:  "["
Keyword:  "i"
Punctuation:  "],"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  "   "
Literal.String.Single:  "'kind'"
Punctuation:  ":"
Literal.String.Single:  "'v'"
Punctuation:  "}]"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "let"
Text:  " final_list "
Punctuation:  "+="
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Punctuation:  "[{"
Literal.String.Single:  "'word'"
Punctuation:  ":"
Name.Builtin:  "substitute"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'.*::'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  "),"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  "   "
Literal.String.Single:  "'info'"
Punctuation:  ":"
Keyword:  "i"
Punctuation:  "."
Text:  "all_values"
Punctuation:  "["
Keyword:  "i"
Punctuation:  "]."
Literal.String.Single:  "')'"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  "   "
Literal.String.Single:  "'kind'"
Punctuation:  ":"
Literal.String.Single:  "'f'"
Punctuation:  "}]"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t\t\t"
Keyword:  "return"
Text:  " final_list<newline><newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Keyword:  "if"
Text:  " "
Name.Variable:  "a:base"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'^\\$'"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " adddollar "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "'$'"
Text:  "<newline>\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " adddollar "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " "
Keyword:  "file"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getline"
Punctuation:  "("
Literal.Number:  "1"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'$'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " jfile "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Keyword:  "file"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "' '"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " sfile "
Punctuation:  "="
Text:  " "
Keyword:  "split"
Punctuation:  "("
Text:  "jfile"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'\\$'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " int_vars "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " sfile<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Keyword:  "i"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'^\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\s*=\\s*new'"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " val "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'^[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*'"
Punctuation:  ")."
Literal.String.Single:  "'->'"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " val "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'^[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*'"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " val "
Punctuation:  "!~"
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " int_vars"
Punctuation:  "["
Text:  "adddollar"
Punctuation:  "."
Text:  "val"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Comment:  "\" ctags has good support for PHP, use tags file for external"
Text:  "<newline>\t\t"
Comment:  "\" variables"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " fnames "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Name.Builtin:  "map"
Punctuation:  "("
Name.Builtin:  "tagfiles"
Punctuation:  "(),"
Text:  " "
Literal.String.Single:  "'escape(v:val, \" \\\\#%\")'"
Punctuation:  "))"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " ext_vars "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " fnames "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " sbase "
Punctuation:  "="
Text:  " "
Name.Builtin:  "substitute"
Punctuation:  "("
Name.Variable:  "a:base"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'^\\$'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ")"
Text:  "<newline>\t\t\texe "
Literal.String.Single:  "'silent! vimgrep /^'"
Punctuation:  "."
Text:  "sbase"
Punctuation:  "."
Literal.String.Single:  "'.*\\tv\\(\\t\\|$\\)/j '"
Punctuation:  "."
Text:  "fnames<newline>\t\t\t"
Keyword:  "let"
Text:  " qflist "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getqflist"
Punctuation:  "()"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "len"
Punctuation:  "("
Text:  "qflist"
Punctuation:  ")"
Text:  " "
Punctuation:  ">"
Text:  " "
Literal.Number:  "0"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " field "
Keyword:  "in"
Text:  " qflist<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " item "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  " "
Literal.String.Single:  "'^[^[:space:]]\\+'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Comment:  "\" Add -> if it is possible object declaration"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " classname "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "]"
Text:  " "
Punctuation:  "=~"
Text:  " item"
Punctuation:  "."
Literal.String.Single:  "'\\s*=\\s*new\\s\\+'"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "let"
Text:  " item "
Punctuation:  "="
Text:  " item"
Punctuation:  "."
Literal.String.Single:  "'->'"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "let"
Text:  " classname "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'=\\s*new\\s\\+\\zs[a-zA-Z_0-9\\x7f-\\xff]\\+\\ze'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " ext_vars"
Punctuation:  "["
Text:  "adddollar"
Punctuation:  "."
Text:  "item"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " classname<newline>\t\t\t\t"
Keyword:  "endfor"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Comment:  "\" Now we have all variables in int_vars dictionary"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "int_vars"
Punctuation:  ","
Text:  " ext_vars"
Punctuation:  ")"
Text:  "<newline><newline>\t\t"
Comment:  "\" Internal solution for finding functions in current file."
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " "
Keyword:  "file"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getline"
Punctuation:  "("
Literal.Number:  "1"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'$'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Keyword:  "filter"
Punctuation:  "("
Keyword:  "file"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'v:val =~ \"function\\\\s\\\\+&\\\\?[a-zA-Z_\\\\x7f-\\\\xff][a-zA-Z_0-9\\\\x7f-\\\\xff]*\\\\s*(\"'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " fnames "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Name.Builtin:  "map"
Punctuation:  "("
Name.Builtin:  "tagfiles"
Punctuation:  "(),"
Text:  " "
Literal.String.Single:  "'escape(v:val, \" \\\\#%\")'"
Punctuation:  "))"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " jfile "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Keyword:  "file"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "' '"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " int_values "
Punctuation:  "="
Text:  " "
Keyword:  "split"
Punctuation:  "("
Text:  "jfile"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'function\\s\\+'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " int_functions "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " int_values<newline>\t\t\t"
Keyword:  "let"
Text:  " f_name "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'^&\\?\\zs[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\ze'"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " f_args "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'^&\\?[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\s*(\\zs.\\{-}\\ze)\\_s*{'"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " int_functions"
Punctuation:  "["
Text:  "f_name"
Punctuation:  "."
Literal.String.Single:  "'('"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " f_args"
Punctuation:  "."
Literal.String.Single:  "')'"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Comment:  "\" Prepare list of functions from tags file"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " ext_functions "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " fnames "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\texe "
Literal.String.Single:  "'silent! vimgrep /^'"
Punctuation:  "."
Name.Variable:  "a:base"
Punctuation:  "."
Literal.String.Single:  "'.*\\tf\\(\\t\\|$\\)/j '"
Punctuation:  "."
Text:  "fnames<newline>\t\t\t"
Keyword:  "let"
Text:  " qflist "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getqflist"
Punctuation:  "()"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "len"
Punctuation:  "("
Text:  "qflist"
Punctuation:  ")"
Text:  " "
Punctuation:  ">"
Text:  " "
Literal.Number:  "0"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " field "
Keyword:  "in"
Text:  " qflist<newline>\t\t\t\t\t"
Comment:  "\" File name"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " item "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  " "
Literal.String.Single:  "'^[^[:space:]]\\+'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " fname "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  " "
Literal.String.Single:  "'\\t\\zs\\f\\+\\ze'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " prototype "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'function\\s\\+&\\?[^[:space:]]\\+\\s*(\\s*\\zs.\\{-}\\ze\\s*)\\s*{\\?'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " ext_functions"
Punctuation:  "["
Text:  "item"
Punctuation:  "."
Literal.String.Single:  "'('"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " prototype"
Punctuation:  "."
Literal.String.Single:  "') - '"
Punctuation:  "."
Text:  "fname<newline>\t\t\t\t"
Keyword:  "endfor"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Keyword:  "let"
Text:  " all_values "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "all_values"
Punctuation:  ","
Text:  " int_functions"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "all_values"
Punctuation:  ","
Text:  " ext_functions"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "all_values"
Punctuation:  ","
Text:  " int_vars"
Punctuation:  ")"
Text:  " \" external variables are already "
Keyword:  "in"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "all_values"
Punctuation:  ","
Text:  " "
Name.Variable:  "g:php_builtin_object_functions"
Punctuation:  ")"
Text:  "<newline><newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "m"
Text:  " "
Keyword:  "in"
Text:  " "
Keyword:  "sort"
Punctuation:  "("
Name.Builtin:  "keys"
Punctuation:  "("
Text:  "all_values"
Punctuation:  "))"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Keyword:  "m"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'\\(^\\|::\\)'"
Punctuation:  "."
Name.Variable:  "a:base"
Text:  "<newline>\t\t\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "add"
Punctuation:  "("
Keyword:  "res"
Punctuation:  ","
Text:  " "
Keyword:  "m"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Keyword:  "let"
Text:  " start_list "
Punctuation:  "="
Text:  " "
Keyword:  "res"
Text:  "<newline><newline>\t\t"
Keyword:  "let"
Text:  " final_list "
Punctuation:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " start_list<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "has_key"
Punctuation:  "("
Text:  "int_vars"
Punctuation:  ","
Text:  " "
Keyword:  "i"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " class "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "' '"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " all_values"
Punctuation:  "["
Keyword:  "i"
Punctuation:  "]"
Text:  " "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " class "
Punctuation:  "="
Text:  " "
Keyword:  "i"
Punctuation:  "."
Literal.String.Single:  "' class '"
Text:  "<newline>\t\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " final_list "
Punctuation:  "+="
Text:  " "
Punctuation:  "[{"
Literal.String.Single:  "'word'"
Punctuation:  ":"
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'info'"
Punctuation:  ":"
Text:  "class"
Punctuation:  "."
Text:  "all_values"
Punctuation:  "["
Keyword:  "i"
Punctuation:  "],"
Text:  " "
Literal.String.Single:  "'kind'"
Punctuation:  ":"
Literal.String.Single:  "'v'"
Punctuation:  "}]"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " final_list "
Punctuation:  "+="
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\\"
Text:  " "
Punctuation:  "[{"
Literal.String.Single:  "'word'"
Punctuation:  ":"
Name.Builtin:  "substitute"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'.*::'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  "),"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\\"
Text:  "   "
Literal.String.Single:  "'info'"
Punctuation:  ":"
Keyword:  "i"
Punctuation:  "."
Text:  "all_values"
Punctuation:  "["
Keyword:  "i"
Punctuation:  "],"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\\"
Text:  "   "
Literal.String.Single:  "'kind'"
Punctuation:  ":"
Literal.String.Single:  "'f'"
Punctuation:  "}]"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Keyword:  "return"
Text:  " final_list<newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>\t"
Keyword:  "if"
Text:  " "
Name.Variable:  "a:base"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'^\\$'"
Text:  "<newline>\t\t"
Comment:  "\" Complete variables"
Text:  "<newline>\t\t"
Comment:  "\" Built-in variables {{{"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " "
Name.Variable:  "g:php_builtin_vars"
Text:  " "
Punctuation:  "="
Text:  " "
Punctuation:  "{"
Literal.String.Single:  "'$GLOBALS'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$_SERVER'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$_GET'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$_POST'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$_COOKIE'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$_FILES'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$_ENV'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$_REQUEST'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$_SESSION'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$HTTP_SERVER_VARS'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$HTTP_ENV_VARS'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$HTTP_COOKIE_VARS'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$HTTP_GET_VARS'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$HTTP_POST_VARS'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$HTTP_POST_FILES'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$HTTP_SESSION_VARS'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$php_errormsg'"
Punctuation:  ":"
Literal.String.Single:  "''"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'$this'"
Punctuation:  ":"
Literal.String.Single:  "''"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Punctuation:  "}"
Text:  "<newline>\t\t"
Comment:  "\" }}}"
Text:  "<newline><newline>\t\t"
Comment:  "\" Internal solution for current file."
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " "
Keyword:  "file"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getline"
Punctuation:  "("
Literal.Number:  "1"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'$'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " jfile "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Keyword:  "file"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "' '"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " int_vals "
Punctuation:  "="
Text:  " "
Keyword:  "split"
Punctuation:  "("
Text:  "jfile"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'\\ze\\$'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " int_vars "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " int_vals<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Keyword:  "i"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'^\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\s*=\\s*new'"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " val "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'^\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*'"
Punctuation:  ")."
Literal.String.Single:  "'->'"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " val "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'^\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*'"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " val "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " int_vars"
Punctuation:  "["
Text:  "val"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "int_vars"
Punctuation:  ","
Name.Variable:  "g:php_builtin_vars"
Punctuation:  ")"
Text:  "<newline><newline>\t\t"
Comment:  "\" ctags has support for PHP, use tags file for external variables"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " fnames "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Name.Builtin:  "map"
Punctuation:  "("
Name.Builtin:  "tagfiles"
Punctuation:  "(),"
Text:  " "
Literal.String.Single:  "'escape(v:val, \" \\\\#%\")'"
Punctuation:  "))"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " ext_vars "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " fnames "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " sbase "
Punctuation:  "="
Text:  " "
Name.Builtin:  "substitute"
Punctuation:  "("
Name.Variable:  "a:base"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'^\\$'"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "''"
Punctuation:  ")"
Text:  "<newline>\t\t\texe "
Literal.String.Single:  "'silent! vimgrep /^'"
Punctuation:  "."
Text:  "sbase"
Punctuation:  "."
Literal.String.Single:  "'.*\\tv\\(\\t\\|$\\)/j '"
Punctuation:  "."
Text:  "fnames<newline>\t\t\t"
Keyword:  "let"
Text:  " qflist "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getqflist"
Punctuation:  "()"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "len"
Punctuation:  "("
Text:  "qflist"
Punctuation:  ")"
Text:  " "
Punctuation:  ">"
Text:  " "
Literal.Number:  "0"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " field "
Keyword:  "in"
Text:  " qflist<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " item "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "'$'"
Punctuation:  "."
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  " "
Literal.String.Single:  "'^[^[:space:]]\\+'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " m_menu "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t\t"
Comment:  "\" Add -> if it is possible object declaration"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "if"
Text:  " field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "]"
Text:  " "
Punctuation:  "=~"
Text:  " item"
Punctuation:  "."
Literal.String.Single:  "'\\s*=\\s*new\\s\\+'"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "let"
Text:  " item "
Punctuation:  "="
Text:  " item"
Punctuation:  "."
Literal.String.Single:  "'->'"
Text:  "<newline>\t\t\t\t\t\t"
Keyword:  "let"
Text:  " m_menu "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'=\\s*new\\s\\+\\zs[a-zA-Z_0-9\\x7f-\\xff]\\+\\ze'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " ext_vars"
Punctuation:  "["
Text:  "item"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " m_menu<newline>\t\t\t\t"
Keyword:  "endfor"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "int_vars"
Punctuation:  ","
Text:  " ext_vars"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " "
Name.Variable:  "g:a0"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Builtin:  "keys"
Punctuation:  "("
Text:  "int_vars"
Punctuation:  ")"
Text:  "<newline><newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "m"
Text:  " "
Keyword:  "in"
Text:  " "
Keyword:  "sort"
Punctuation:  "("
Name.Builtin:  "keys"
Punctuation:  "("
Text:  "int_vars"
Punctuation:  "))"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Keyword:  "m"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'^\\'"
Punctuation:  "."
Name.Variable:  "a:base"
Text:  "<newline>\t\t\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "add"
Punctuation:  "("
Keyword:  "res"
Punctuation:  ","
Text:  " "
Keyword:  "m"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Keyword:  "let"
Text:  " int_list "
Punctuation:  "="
Text:  " "
Keyword:  "res"
Text:  "<newline><newline>\t\t"
Keyword:  "let"
Text:  " int_dict "
Punctuation:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " int_list<newline>\t\t\t"
Keyword:  "if"
Text:  " int_vars"
Punctuation:  "["
Keyword:  "i"
Punctuation:  "]"
Text:  " "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " class "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "' '"
Text:  "<newline>\t\t\t\t"
Keyword:  "if"
Text:  " int_vars"
Punctuation:  "["
Keyword:  "i"
Punctuation:  "]"
Text:  " "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " class "
Punctuation:  "="
Text:  " "
Keyword:  "i"
Punctuation:  "."
Literal.String.Single:  "' class '"
Text:  "<newline>\t\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " int_dict "
Punctuation:  "+="
Text:  " "
Punctuation:  "[{"
Literal.String.Single:  "'word'"
Punctuation:  ":"
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'info'"
Punctuation:  ":"
Text:  "class"
Punctuation:  "."
Text:  "int_vars"
Punctuation:  "["
Keyword:  "i"
Punctuation:  "],"
Text:  " "
Literal.String.Single:  "'kind'"
Punctuation:  ":"
Literal.String.Single:  "'v'"
Punctuation:  "}]"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " int_dict "
Punctuation:  "+="
Text:  " "
Punctuation:  "[{"
Literal.String.Single:  "'word'"
Punctuation:  ":"
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'kind'"
Punctuation:  ":"
Literal.String.Single:  "'v'"
Punctuation:  "}]"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Keyword:  "return"
Text:  " int_dict<newline><newline>\t"
Keyword:  "else"
Text:  "<newline>\t\t"
Comment:  "\" Complete everything else -"
Text:  "<newline>\t\t"
Comment:  "\"  + functions,  DONE"
Text:  "<newline>\t\t"
Comment:  "\"  + keywords of language DONE"
Text:  "<newline>\t\t"
Comment:  "\"  + defines (constant definitions), DONE"
Text:  "<newline>\t\t"
Comment:  "\"  + extend keywords for predefined constants, DONE"
Text:  "<newline>\t\t"
Comment:  "\"  + classes (after new), DONE"
Text:  "<newline>\t\t"
Comment:  "\"  + limit choice after -> and :: to funcs and vars DONE"
Text:  "<newline><newline>\t\t"
Comment:  "\" Internal solution for finding functions in current file."
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " "
Keyword:  "file"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getline"
Punctuation:  "("
Literal.Number:  "1"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'$'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Keyword:  "filter"
Punctuation:  "("
Keyword:  "file"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'v:val =~ \"function\\\\s\\\\+&\\\\?[a-zA-Z_\\\\x7f-\\\\xff][a-zA-Z_0-9\\\\x7f-\\\\xff]*\\\\s*(\"'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " fnames "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Name.Builtin:  "map"
Punctuation:  "("
Name.Builtin:  "tagfiles"
Punctuation:  "(),"
Text:  " "
Literal.String.Single:  "'escape(v:val, \" \\\\#%\")'"
Punctuation:  "))"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " jfile "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Keyword:  "file"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "' '"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " int_values "
Punctuation:  "="
Text:  " "
Keyword:  "split"
Punctuation:  "("
Text:  "jfile"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'function\\s\\+'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " int_functions "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " int_values<newline>\t\t\t"
Keyword:  "let"
Text:  " f_name "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'^&\\?\\zs[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\ze'"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " f_args "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'^&\\?[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\s*(\\s*\\zs.\\{-}\\ze\\s*)\\_s*{'"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "let"
Text:  " int_functions"
Punctuation:  "["
Text:  "f_name"
Punctuation:  "."
Literal.String.Single:  "'('"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " f_args"
Punctuation:  "."
Literal.String.Single:  "')'"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Comment:  "\" Prepare list of functions from tags file"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " ext_functions "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " fnames "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\texe "
Literal.String.Single:  "'silent! vimgrep /^'"
Punctuation:  "."
Name.Variable:  "a:base"
Punctuation:  "."
Literal.String.Single:  "'.*\\tf\\(\\t\\|$\\)/j '"
Punctuation:  "."
Text:  "fnames<newline>\t\t\t"
Keyword:  "let"
Text:  " qflist "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getqflist"
Punctuation:  "()"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "len"
Punctuation:  "("
Text:  "qflist"
Punctuation:  ")"
Text:  " "
Punctuation:  ">"
Text:  " "
Literal.Number:  "0"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " field "
Keyword:  "in"
Text:  " qflist<newline>\t\t\t\t\t"
Comment:  "\" File name"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " item "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  " "
Literal.String.Single:  "'^[^[:space:]]\\+'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " fname "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  " "
Literal.String.Single:  "'\\t\\zs\\f\\+\\ze'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " prototype "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\t\\"
Text:  " "
Literal.String.Single:  "'function\\s\\+&\\?[^[:space:]]\\+\\s*(\\s*\\zs.\\{-}\\ze\\s*)\\s*{\\?'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " ext_functions"
Punctuation:  "["
Text:  "item"
Punctuation:  "."
Literal.String.Single:  "'('"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " prototype"
Punctuation:  "."
Literal.String.Single:  "') - '"
Punctuation:  "."
Text:  "fname<newline>\t\t\t\t"
Keyword:  "endfor"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Comment:  "\" All functions"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "int_functions"
Punctuation:  ","
Text:  " ext_functions"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "int_functions"
Punctuation:  ","
Text:  " "
Name.Variable:  "g:php_builtin_functions"
Punctuation:  ")"
Text:  "<newline><newline>\t\t"
Comment:  "\" Internal solution for finding constants in current file"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " "
Keyword:  "file"
Text:  " "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getline"
Punctuation:  "("
Literal.Number:  "1"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'$'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Keyword:  "filter"
Punctuation:  "("
Keyword:  "file"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'v:val =~ \"define\\\\s*(\"'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " jfile "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Keyword:  "file"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "' '"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " int_values "
Punctuation:  "="
Text:  " "
Keyword:  "split"
Punctuation:  "("
Text:  "jfile"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'define\\s*(\\s*'"
Punctuation:  ")"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " int_constants "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " int_values<newline>\t\t\t"
Keyword:  "let"
Text:  " c_name "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'\\([\"'']\\)\\zs[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\ze\\1'"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Comment:  "\" let c_value = matchstr(i,"
Text:  "<newline>\t\t\t"
Comment:  "\" \\ '\\([\"'']\\)[a-zA-Z_\\x7f-\\xff][a-zA-Z_0-9\\x7f-\\xff]*\\1\\s*,\\s*\\zs.\\{-}\\ze\\s*)')"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " c_name "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " int_constants"
Punctuation:  "["
Text:  "c_name"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  " \" c_value<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Comment:  "\" Prepare list of constants from tags file"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " fnames "
Punctuation:  "="
Text:  " "
Keyword:  "join"
Punctuation:  "("
Name.Builtin:  "map"
Punctuation:  "("
Name.Builtin:  "tagfiles"
Punctuation:  "(),"
Text:  " "
Literal.String.Single:  "'escape(v:val, \" \\\\#%\")'"
Punctuation:  "))"
Text:  "<newline>\t\t"
Keyword:  "let"
Text:  " ext_constants "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline>\t\t"
Keyword:  "if"
Text:  " fnames "
Punctuation:  "!="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\texe "
Literal.String.Single:  "'silent! vimgrep /^'"
Punctuation:  "."
Name.Variable:  "a:base"
Punctuation:  "."
Literal.String.Single:  "'.*\\td\\(\\t\\|$\\)/j '"
Punctuation:  "."
Text:  "fnames<newline>\t\t\t"
Keyword:  "let"
Text:  " qflist "
Punctuation:  "="
Text:  " "
Name.Builtin:  "getqflist"
Punctuation:  "()"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "len"
Punctuation:  "("
Text:  "qflist"
Punctuation:  ")"
Text:  " "
Punctuation:  ">"
Text:  " "
Literal.Number:  "0"
Text:  "<newline>\t\t\t\t"
Keyword:  "for"
Text:  " field "
Keyword:  "in"
Text:  " qflist<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " item "
Punctuation:  "="
Text:  " "
Name.Builtin:  "matchstr"
Punctuation:  "("
Text:  "field"
Punctuation:  "["
Literal.String.Single:  "'text'"
Punctuation:  "],"
Text:  " "
Literal.String.Single:  "'^[^[:space:]]\\+'"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t\t"
Keyword:  "let"
Text:  " ext_constants"
Punctuation:  "["
Text:  "item"
Punctuation:  "]"
Text:  " "
Punctuation:  "="
Text:  " "
Literal.String.Single:  "''"
Text:  "<newline>\t\t\t\t"
Keyword:  "endfor"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endif"
Text:  "<newline><newline>\t\t"
Comment:  "\" All constants"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "int_constants"
Punctuation:  ","
Text:  " ext_constants"
Punctuation:  ")"
Text:  "<newline>\t\t"
Comment:  "\" Treat keywords as constants"
Text:  "<newline><newline>\t\t"
Keyword:  "let"
Text:  " all_values "
Punctuation:  "="
Text:  " "
Punctuation:  "{}"
Text:  "<newline><newline>\t\t"
Comment:  "\" One big dictionary of functions"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "all_values"
Punctuation:  ","
Text:  " int_functions"
Punctuation:  ")"
Text:  "<newline><newline>\t\t"
Comment:  "\" Add constants"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "all_values"
Punctuation:  ","
Text:  " int_constants"
Punctuation:  ")"
Text:  "<newline>\t\t"
Comment:  "\" Add keywords"
Text:  "<newline>\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "extend"
Punctuation:  "("
Text:  "all_values"
Punctuation:  ","
Text:  " "
Name.Variable:  "g:php_keywords"
Punctuation:  ")"
Text:  "<newline><newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "m"
Text:  " "
Keyword:  "in"
Text:  " "
Keyword:  "sort"
Punctuation:  "("
Name.Builtin:  "keys"
Punctuation:  "("
Text:  "all_values"
Punctuation:  "))"
Text:  "<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Keyword:  "m"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'^'"
Punctuation:  "."
Name.Variable:  "a:base"
Text:  "<newline>\t\t\t\t"
Keyword:  "call"
Text:  " "
Name.Builtin:  "add"
Punctuation:  "("
Keyword:  "res"
Punctuation:  ","
Text:  " "
Keyword:  "m"
Punctuation:  ")"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Keyword:  "let"
Text:  " int_list "
Punctuation:  "="
Text:  " "
Keyword:  "res"
Text:  "<newline><newline>\t\t"
Keyword:  "let"
Text:  " final_list "
Punctuation:  "="
Text:  " "
Punctuation:  "[]"
Text:  "<newline>\t\t"
Keyword:  "for"
Text:  " "
Keyword:  "i"
Text:  " "
Keyword:  "in"
Text:  " int_list<newline>\t\t\t"
Keyword:  "if"
Text:  " "
Name.Builtin:  "has_key"
Punctuation:  "("
Text:  "int_functions"
Punctuation:  ","
Text:  " "
Keyword:  "i"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " final_list "
Punctuation:  "+="
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\\"
Text:  " "
Punctuation:  "[{"
Literal.String.Single:  "'word'"
Punctuation:  ":"
Keyword:  "i"
Punctuation:  ","
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\\"
Text:  "   "
Literal.String.Single:  "'info'"
Punctuation:  ":"
Keyword:  "i"
Punctuation:  "."
Text:  "int_functions"
Punctuation:  "["
Keyword:  "i"
Punctuation:  "],"
Text:  "<newline>"
Literal.String.Escape:  "\t\t\t\t\t\t\\"
Text:  "   "
Literal.String.Single:  "'kind'"
Punctuation:  ":"
Literal.String.Single:  "'f'"
Punctuation:  "}]"
Text:  "<newline>\t\t\t"
Keyword:  "elseif"
Text:  " "
Name.Builtin:  "has_key"
Punctuation:  "("
Text:  "int_constants"
Punctuation:  ","
Text:  " "
Keyword:  "i"
Punctuation:  ")"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " final_list "
Punctuation:  "+="
Text:  " "
Punctuation:  "[{"
Literal.String.Single:  "'word'"
Punctuation:  ":"
Keyword:  "i"
Punctuation:  ","
Text:  " "
Literal.String.Single:  "'kind'"
Punctuation:  ":"
Literal.String.Single:  "'d'"
Punctuation:  "}]"
Text:  "<newline>\t\t\t"
Keyword:  "else"
Text:  "<newline>\t\t\t\t"
Keyword:  "let"
Text:  " final_list "
Punctuation:  "+="
Text:  " "
Punctuation:  "[{"
Literal.String.Single:  "'word'"
Punctuation:  ":"
Keyword:  "i"
Punctuation:  "}]"
Text:  "<newline>\t\t\t"
Keyword:  "endif"
Text:  "<newline>\t\t"
Keyword:  "endfor"
Text:  "<newline><newline>\t\t"
Keyword:  "return"
Text:  " final_list<newline><newline>\t"
Keyword:  "endif"
Text:  "<newline><newline>"
Keyword:  "endfunction"
Text:  "<newline>"
Comment:  "\" vim:set foldmethod=marker:"
Text:  "<newline><newline>"
Keyword:  "if"
Text:  " &"
Name.Builtin:  "term"
Text:  " "
Punctuation:  "=~"
Text:  " "
Literal.String.Single:  "'256color'"
Text:  "<newline>  "
Comment:  "\" Disable Background Color Erase (BCE) so that color schemes"
Text:  "<newline>  "
Comment:  "\" work properly when Vim is used inside tmux and GNU screen."
Text:  "<newline>  "
Comment:  "\" See also http://snk.tuxfamily.org/log/vim-256color-bce.html"
Text:  "<newline>  "
Keyword:  "set"
Text:  " "
Name.Builtin:  "t_ut"
Punctuation:  "="
Text:  "<newline>"
Keyword:  "endif"
Text:  "<newline>"
