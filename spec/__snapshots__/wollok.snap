Keyword.Reserved:  "import"
Text:  " foo.bar"
Text.Whitespace:  "<newline>"
Keyword.Reserved:  "import"
Text:  " quux.*"
Text.Whitespace:  "<newline><newline><newline>"
Keyword.Reserved:  "object"
Text.Whitespace:  " "
Name.Class:  "noCompression"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "compressedSize("
Keyword.Variable:  "fileSize"
Text:  ")"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Keyword.Variable:  "fileSize"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline>"
Text:  "}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "object"
Text.Whitespace:  " "
Name.Class:  "reflate"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "compressedSize("
Keyword.Variable:  "fileSize"
Text:  ")"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Keyword.Variable:  "fileSize"
Text.Whitespace:  " "
Operator:  "*"
Text.Whitespace:  " "
Literal.Number:  "0.8"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline>"
Text:  "}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "class"
Text.Whitespace:  " "
Name.Class:  "Content"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t"
Keyword.Reserved:  "var"
Text.Whitespace:  " "
Keyword.Variable:  "name"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "constructor"
Text:  "("
Keyword.Variable:  "aName"
Text:  ")"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Variable:  "name"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Keyword.Variable:  "aName"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "isLight()"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Name.Builtin.Pseudo:  "self"
Text:  ".size()"
Text.Whitespace:  " "
Operator:  ">"
Text.Whitespace:  " "
Literal.Number:  "150"
Text.Whitespace:  " "
Operator:  "*"
Text.Whitespace:  " "
Literal.Number:  "1024"
Text.Whitespace:  " "
Operator:  "**"
Text.Whitespace:  " "
Literal.Number:  "2"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "canBeUploadedTo("
Keyword.Variable:  "aRepo"
Text:  ")"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Keyword.Variable:  "aRepo"
Text:  ".canUpload("
Name.Builtin.Pseudo:  "self"
Text:  ")"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "longName()"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Keyword.Variable:  "name"
Text:  ".length()"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline>"
Text:  "}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "class"
Text.Whitespace:  " "
Name.Class:  "TextFile"
Text.Whitespace:  " "
Keyword.Reserved:  "inherits"
Text.Whitespace:  " "
Name.Class:  "Content"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t"
Keyword.Reserved:  "var"
Text.Whitespace:  " "
Keyword.Variable:  "lines"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "constructor"
Text:  "("
Keyword.Variable:  "aName"
Punctuation:  ","
Text.Whitespace:  " "
Keyword.Variable:  "someLines"
Text:  ")"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Keyword.Reserved:  "super"
Text:  "("
Keyword.Variable:  "aName"
Text:  ")"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Variable:  "lines"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Keyword.Variable:  "someLines"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "size()"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Keyword.Variable:  "lines"
Text:  ".sum({"
Text.Whitespace:  " "
Keyword.Variable:  "line"
Text.Whitespace:  " "
Operator:  "=>"
Text.Whitespace:  " "
Keyword.Variable:  "line"
Text:  ".size()"
Text.Whitespace:  " "
Text:  "})"
Text.Whitespace:  " "
Operator:  "*"
Text.Whitespace:  " "
Literal.Number:  "16"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline>"
Text:  "}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "class"
Text.Whitespace:  " "
Name.Class:  "BinaryFile"
Text.Whitespace:  " "
Keyword.Reserved:  "inherits"
Text.Whitespace:  " "
Name.Class:  "Content"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t"
Keyword.Reserved:  "var"
Text.Whitespace:  " "
Keyword.Variable:  "bytes"
Text.Whitespace:  "<newline>\t"
Keyword.Reserved:  "var"
Text.Whitespace:  " "
Keyword.Variable:  "compressionMethod"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Name.Class:  "noCompression"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "constructor"
Text:  "("
Keyword.Variable:  "aName"
Punctuation:  ","
Text.Whitespace:  " "
Keyword.Variable:  "someBytes"
Text:  ")"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Keyword.Reserved:  "super"
Text:  "("
Keyword.Variable:  "aName"
Text:  ")"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Variable:  "bytes"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Keyword.Variable:  "someBytes"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "size()"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Keyword.Variable:  "compressionMethod"
Text:  ".compressedSize("
Keyword.Variable:  "bytes"
Text:  ".size())"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "compressionMethod("
Keyword.Variable:  "aCompressionMethod"
Text:  ")"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Variable:  "compressionMethod"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Keyword.Variable:  "aCompressionMethod"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline>"
Text:  "}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "program"
Text.Whitespace:  " "
Literal.String:  "\"aProgram\""
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>        "
Name.Class:  "pepita"
Text:  ".fly("
Literal.Number:  "20"
Text:  ")"
Text.Whitespace:  "<newline>        "
Keyword.Reserved:  "const"
Text.Whitespace:  " "
Keyword.Variable:  "t"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Keyword.Reserved:  "new"
Text.Whitespace:  " "
Name.Class:  "Trainer"
Text:  "()"
Text.Whitespace:  "<newline>        "
Keyword.Variable:  "t"
Text:  ".train("
Name.Class:  "pepita"
Text:  ")"
Text.Whitespace:  "<newline>"
Text:  "}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "test"
Text.Whitespace:  " "
Literal.String:  "\"pepita should spent twice the kilometers flown\""
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>        "
Name.Class:  "pepita"
Text:  ".energy("
Literal.Number:  "100"
Text:  ")"
Text.Whitespace:  "<newline>        "
Name.Class:  "pepita"
Text:  ".fly("
Literal.Number:  "20"
Text:  ")"
Text.Whitespace:  "<newline>        "
Keyword.Variable:  "assert"
Text:  ".equals("
Literal.Number:  "60"
Punctuation:  ","
Text.Whitespace:  " "
Name.Class:  "pepita"
Text:  ".energy())"
Text.Whitespace:  "<newline>"
Text:  "}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "mixin"
Text.Whitespace:  " "
Name.Class:  "Walks"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t"
Keyword.Reserved:  "var"
Text.Whitespace:  " "
Keyword.Variable:  "walkedDistance"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Literal.Number:  "0"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "walk("
Keyword.Variable:  "distance"
Text:  ")"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>\t\t"
Keyword.Variable:  "walkedDistance"
Text.Whitespace:  " "
Operator:  "+="
Text.Whitespace:  " "
Keyword.Variable:  "distance"
Text.Whitespace:  "<newline>\t"
Text:  "}"
Text.Whitespace:  "<newline><newline>\t"
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "walkedDistance()"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Keyword.Variable:  "walkedDistance"
Text.Whitespace:  "<newline>"
Text:  "}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "class"
Text.Whitespace:  " "
Name.Class:  "WalkingBird"
Text.Whitespace:  " "
Keyword.Reserved:  "mixed"
Text.Whitespace:  " "
Keyword.Reserved:  "with"
Text.Whitespace:  " "
Name.Class:  "Walks"
Text.Whitespace:  " "
Text:  "{}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "mixin"
Text.Whitespace:  " "
Name.Class:  "M1"
Text.Whitespace:  " "
Text:  "{}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "mixin"
Text.Whitespace:  " "
Name.Class:  "M2"
Text.Whitespace:  " "
Text:  "{}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "class"
Text.Whitespace:  " "
Name.Class:  "C"
Text.Whitespace:  " "
Keyword.Reserved:  "mixed"
Text.Whitespace:  " "
Keyword.Reserved:  "with"
Text.Whitespace:  " "
Name.Class:  "M1"
Text.Whitespace:  " "
Keyword.Reserved:  "and"
Text.Whitespace:  " "
Name.Class:  "M2"
Text.Whitespace:  " "
Text:  "{}"
Text.Whitespace:  "<newline><newline>"
Comment.Single:  "//object Set {"
Text.Whitespace:  "<newline>"
Comment.Single:  "//"
Text.Whitespace:  "<newline>"
Comment.Single:  "//}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "object"
Text.Whitespace:  " "
Name.Class:  "Set"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline><newline>    "
Comment.Multiline:  "/*<newline>    method add(element){<newline>    }<newline>    */"
Text.Whitespace:  "<newline>"
Text:  "}"
Text.Whitespace:  "<newline><newline>"
Keyword.Reserved:  "package"
Text.Whitespace:  " "
Name.Class:  "bar"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline><newline>    "
Keyword.Reserved:  "object"
Text.Whitespace:  " "
Name.Class:  "foo"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline><newline>        "
Keyword.Reserved:  "var"
Text.Whitespace:  " "
Keyword.Variable:  "numbers"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Punctuation:  "["
Literal.Number:  "1"
Punctuation:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Punctuation:  ","
Literal.Number:  "3"
Punctuation:  "]"
Text:  ".map({"
Keyword.Variable:  "it"
Text.Whitespace:  " "
Operator:  "=>"
Text.Whitespace:  " "
Keyword.Variable:  "it"
Text.Whitespace:  " "
Operator:  "+"
Text.Whitespace:  " "
Literal.Number:  "1"
Text:  "})"
Text.Whitespace:  "<newline>        "
Keyword.Reserved:  "var"
Text.Whitespace:  " "
Keyword.Variable:  "bar"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Literal.String:  "\"asd\""
Text.Whitespace:  "<newline>        "
Keyword.Reserved:  "var"
Text.Whitespace:  " "
Keyword.Variable:  "quux"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Punctuation:  "\#{}"
Text.Whitespace:  "<newline>        "
Keyword.Reserved:  "var"
Text.Whitespace:  " "
Keyword.Variable:  "ruux"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Punctuation:  "["
Literal.Number:  "1"
Punctuation:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Punctuation:  ","
Text.Whitespace:  " "
Literal.String:  "\"foo\""
Punctuation:  ","
Text.Whitespace:  " "
Punctuation:  "["
Literal.Number:  "1"
Punctuation:  "]]"
Text.Whitespace:  "<newline><newline><newline>        "
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "sayHi()"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Literal.String:  "\"Hi!\""
Text.Whitespace:  "<newline><newline>        "
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "close()"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Keyword.Variable:  "true"
Text.Whitespace:  " "
Operator:  "or"
Text.Whitespace:  " "
Keyword.Variable:  "true"
Text.Whitespace:  " "
Operator:  "and"
Text.Whitespace:  " "
Keyword.Variable:  "false"
Text.Whitespace:  " "
Operator:  "not"
Text.Whitespace:  " "
Keyword.Variable:  "true"
Text.Whitespace:  "<newline><newline>        "
Keyword.Reserved:  "method"
Text.Whitespace:  " "
Text:  "sayBye("
Keyword.Variable:  "_some"
Text:  ")"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>            "
Keyword.Reserved:  "var"
Text.Whitespace:  " "
Keyword.Variable:  "a"
Text.Whitespace:  " "
Text:  "="
Text.Whitespace:  " "
Literal.Number:  "0"
Text.Whitespace:  "<newline>            "
Keyword.Variable:  "a"
Operator:  "++"
Text.Whitespace:  "<newline>            "
Keyword.Variable:  "a"
Operator:  "--"
Text.Whitespace:  "<newline>            "
Keyword.Reserved:  "if"
Text:  "("
Literal.Number:  "1"
Operator:  ">"
Literal.Number:  "0"
Text:  ")"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>                "
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Literal.Number:  "0"
Text.Whitespace:  "<newline>            "
Text:  "}"
Text.Whitespace:  " "
Keyword.Reserved:  "else"
Text.Whitespace:  " "
Text:  "{"
Text.Whitespace:  "<newline>                "
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Literal.Number:  "1"
Text.Whitespace:  "<newline>            "
Text:  "}"
Text.Whitespace:  "<newline><newline>            "
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Literal.Number:  "1"
Text.Whitespace:  " "
Operator:  "==="
Text.Whitespace:  " "
Literal.Number:  "2"
Text.Whitespace:  "<newline>            "
Keyword.Reserved:  "return"
Text.Whitespace:  " "
Literal.Number:  "1"
Text.Whitespace:  " "
Operator:  "=="
Text.Whitespace:  " "
Literal.Number:  "2"
Text.Whitespace:  "<newline>        "
Text:  "}"
Text.Whitespace:  "<newline>    "
Text:  "}"
Text.Whitespace:  "<newline>"
Text:  "}"
Text.Whitespace:  "<newline>"
