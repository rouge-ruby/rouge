Comment:  "(:<newline>    The following samples have been compiled from examples from the XQuery language specification.<newline>    The following notice is to comply with the W3C Software and Document Notice and License:<newline><newline>    This software or document includes material copied from or derived from \"XML Path Language (XPath)<newline>    3.1\" https://www.w3.org/TR/xpath-31/.<newline>    Copyright \u00A9 2017 W3C\u00AE (MIT, ERCIM, Keio, Beihang).<newline><newline>    (:<newline>        W3C Software and Document Notice and License<newline><newline>        This work is being provided by the copyright holders under the following<newline>        license.<newline><newline>        License<newline>        By obtaining and/or copying this work, you (the licensee) agree that you have<newline>        read, understood, and will comply with the following terms and conditions.<newline><newline>        Permission to copy, modify, and distribute this work, with or without<newline>        modification, for any purpose and without fee or royalty is hereby granted,<newline>        provided that you include the following on ALL copies of the work or portions<newline>        thereof, including modifications:<newline><newline>            1. The full text of this NOTICE in a location viewable to users of the<newline>               redistributed or derivative work.<newline>            2. Any pre-existing intellectual property disclaimers, notices, or terms and<newline>               conditions. If none exist, the W3C Software and Document Short Notice<newline>               should be included.<newline>            3. Notice of any changes or modifications, through a copyright statement on<newline>               the new code or document such as \"This software or document includes<newline>               material copied from or derived from [title and URI of the W3C document].<newline>               Copyright \u00A9 [YEAR] W3C\u00AE (MIT, ERCIM, Keio, Beihang).\"<newline><newline>        Disclaimers<newline>        THIS WORK IS PROVIDED \"AS IS,\" AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR<newline>        WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF<newline>        MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE<newline>        SOFTWARE OR DOCUMENT WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS,<newline>        TRADEMARKS OR OTHER RIGHTS.<newline><newline>        COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR<newline>        CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENT.<newline>        The name and trademarks of copyright holders may NOT be used in advertising or<newline>        publicity pertaining to the work without specific, written prior permission.<newline><newline>        Title to copyright in this work will at all times remain with copyright holders.<newline>    :)<newline>:)"
Text.Whitespace:  "<newline><newline>"
Comment:  "(: XPATH 2.0 :)"
Text.Whitespace:  "<newline>"
Comment:  "(:   1. Arithmetic :)"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Variable:  "$x"
Text.Whitespace:  " "
Operator.Word:  "div"
Text.Whitespace:  " "
Name.Variable:  "$y"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "+"
Text.Whitespace:  " "
Name.Function:  "xs:decimal"
Punctuation:  "("
Name.Variable:  "$z"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Literal.Number:  "1"
Text.Whitespace:  " "
Operator.Word:  "to"
Text.Whitespace:  " "
Literal.Number:  "100"
Punctuation:  ")["
Operator:  "."
Text.Whitespace:  " "
Operator.Word:  "mod"
Text.Whitespace:  " "
Literal.Number:  "5"
Text.Whitespace:  " "
Operator.Word:  "eq"
Text.Whitespace:  " "
Literal.Number:  "0"
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Name.Function:  "xs:decimal"
Punctuation:  "("
Name.Variable:  "$floatvalue"
Text.Whitespace:  " "
Operator:  "*"
Text.Whitespace:  " "
Literal.Number.Float:  "0.2E-5"
Punctuation:  ")"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   2. Sequences :)"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Literal.Number:  "10"
Operator:  ","
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "1"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Punctuation:  ")"
Operator:  ","
Text.Whitespace:  " "
Punctuation:  "()"
Operator:  ","
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "3"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "4"
Punctuation:  "))"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Literal.Number:  "1"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "2"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "3"
Punctuation:  ")"
Text.Whitespace:  " "
Operator.Word:  "and"
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "2"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "3"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "3"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "4"
Punctuation:  ")"
Text.Whitespace:  " "
Operator.Word:  "and"
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "1"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "3"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "4"
Punctuation:  ")"
Text.Whitespace:  " "
Operator.Word:  "and"
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "1"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "!="
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "2"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "3"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Tag:  "salary"
Operator:  ","
Text.Whitespace:  " "
Name.Tag:  "bonus"
Punctuation:  ")"
Text.Whitespace:  "  "
Operator:  "|"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Variable:  "$price"
Operator:  ","
Text.Whitespace:  " "
Name.Variable:  "$price"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   3. Path selection :)"
Text.Whitespace:  "<newline>"
Keyword:  "child"
Operator:  "::"
Name.Tag:  "chapter"
Punctuation:  "["
Literal.Number:  "2"
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Keyword:  "descendant"
Operator:  "::"
Name.Tag:  "toy"
Punctuation:  "["
Keyword:  "attribute"
Operator:  "::"
Name.Tag:  "color"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Literal.String:  "\"red\""
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Keyword:  "child"
Operator:  "::"
Name.Tag:  "employee"
Punctuation:  "["
Name.Tag:  "secretary"
Punctuation:  "]["
Name.Tag:  "assistant"
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Operator:  "/"
Name.Tag:  "books"
Operator:  "/"
Name.Tag:  "book"
Punctuation:  "["
Name.Tag:  "isbn"
Operator:  "="
Literal.String:  "\"1558604820\""
Punctuation:  "]"
Text.Whitespace:  " "
Operator.Word:  "is"
Text.Whitespace:  " "
Operator:  "/"
Name.Tag:  "books"
Operator:  "/"
Name.Tag:  "book"
Punctuation:  "["
Name.Tag:  "call"
Operator:  "="
Literal.String:  "\"QA76.9 C3845\""
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   4. Functions :)"
Text.Whitespace:  "<newline>"
Name.Function:  "fn:error"
Punctuation:  "("
Name.Function:  "xs:QName"
Punctuation:  "("
Literal.String:  "\"app:err057\""
Punctuation:  ")"
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Unexpected value\""
Operator:  ","
Text.Whitespace:  " "
Name.Function:  "fn:string"
Punctuation:  "("
Name.Variable:  "$v"
Punctuation:  "))"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   5. Control flow :)"
Text.Whitespace:  "<newline>"
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "castable"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "hatsize"
Punctuation:  ")"
Text.Whitespace:  "<newline>   "
Keyword:  "then"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "cast"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "hatsize"
Text.Whitespace:  "<newline>   "
Keyword:  "else"
Text.Whitespace:  " "
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "castable"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "IQ"
Punctuation:  ")"
Text.Whitespace:  "<newline>       "
Keyword:  "then"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "cast"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "IQ"
Text.Whitespace:  "<newline>       "
Keyword:  "else"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "cast"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "xs:string"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Name.Variable:  "$N"
Punctuation:  "["
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Attribute:  "@x"
Text.Whitespace:  " "
Keyword:  "castable"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "xs:date"
Punctuation:  ")"
Text.Whitespace:  "<newline>   "
Keyword:  "then"
Text.Whitespace:  " "
Name.Function:  "xs:date"
Punctuation:  "("
Name.Attribute:  "@x"
Punctuation:  ")"
Text.Whitespace:  " "
Operator.Word:  "gt"
Text.Whitespace:  " "
Name.Function:  "xs:date"
Punctuation:  "("
Literal.String:  "\"2000-01-01\""
Punctuation:  ")"
Text.Whitespace:  "<newline>   "
Keyword:  "else"
Text.Whitespace:  " "
Name.Function:  "false"
Punctuation:  "()]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   6. Looping :)"
Text.Whitespace:  "<newline>"
Keyword:  "for"
Text.Whitespace:  " "
Name.Variable:  "$a"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  " "
Name.Function:  "fn:distinct-values"
Punctuation:  "("
Name.Tag:  "book"
Operator:  "/"
Name.Tag:  "author"
Punctuation:  ")"
Text.Whitespace:  " "
Keyword:  "return"
Text.Whitespace:  " "
Punctuation:  "("
Name.Tag:  "book"
Operator:  "/"
Name.Tag:  "author"
Punctuation:  "["
Operator:  "."
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Name.Variable:  "$a"
Punctuation:  "]["
Literal.Number:  "1"
Punctuation:  "]"
Operator:  ","
Text.Whitespace:  " "
Name.Tag:  "book"
Punctuation:  "["
Name.Tag:  "author"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Name.Variable:  "$a"
Punctuation:  "]"
Operator:  "/"
Name.Tag:  "title"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Keyword:  "every"
Text.Whitespace:  " "
Name.Variable:  "$part"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  " "
Operator:  "/"
Name.Tag:  "parts"
Operator:  "/"
Name.Tag:  "part"
Text.Whitespace:  " "
Keyword:  "satisfies"
Text.Whitespace:  " "
Name.Variable:  "$part"
Operator:  "/"
Name.Attribute:  "@discounted"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Keyword:  "some"
Text.Whitespace:  " "
Name.Variable:  "$emp"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  " "
Operator:  "/"
Name.Tag:  "emps"
Operator:  "/"
Name.Tag:  "employee"
Text.Whitespace:  " "
Keyword:  "satisfies"
Text.Whitespace:  " "
Punctuation:  "("
Name.Variable:  "$emp"
Operator:  "/"
Name.Tag:  "bonus"
Text.Whitespace:  " "
Operator:  ">"
Text.Whitespace:  " "
Literal.Number.Float:  "0.25"
Text.Whitespace:  " "
Operator:  "*"
Text.Whitespace:  " "
Name.Variable:  "$emp"
Operator:  "/"
Name.Tag:  "salary"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   7. Type casts :)"
Text.Whitespace:  "<newline>"
Name.Variable:  "$myaddress"
Text.Whitespace:  " "
Keyword:  "treat"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "element"
Punctuation:  "("
Operator:  "*"
Punctuation:  ","
Text.Whitespace:  " "
Name.Tag:  "USAddress"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Function:  "fn:root"
Punctuation:  "("
Keyword:  "self"
Operator:  "::"
Keyword:  "node"
Punctuation:  "())"
Text.Whitespace:  " "
Keyword:  "treat"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "document-node"
Punctuation:  "())"
Operator:  "/"
Text.Whitespace:  "<newline><newline>"
Comment:  "(: XPATH 3.0 :)"
Text.Whitespace:  "<newline>"
Comment:  "(:   8. Functions and let :)"
Text.Whitespace:  "<newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$f"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Keyword:  "function"
Text.Whitespace:  " "
Punctuation:  "("
Name.Variable:  "$seq"
Operator:  ","
Text.Whitespace:  " "
Name.Variable:  "$delim"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  " "
Name.Function:  "fn:fold-left"
Punctuation:  "("
Name.Variable:  "$seq"
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"\""
Operator:  ","
Text.Whitespace:  " "
Name.Function:  "fn:concat"
Punctuation:  "(?"
Operator:  ","
Text.Whitespace:  " "
Name.Variable:  "$delim"
Operator:  ","
Text.Whitespace:  " "
Punctuation:  "?))"
Text.Whitespace:  " "
Punctuation:  "}"
Operator:  ","
Text.Whitespace:  "<newline>    "
Name.Variable:  "$paf"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Name.Variable:  "$f"
Punctuation:  "(?"
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\".\""
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  " "
Name.Variable:  "$paf"
Punctuation:  "("
Literal.Number:  "1"
Text.Whitespace:  " "
Operator.Word:  "to"
Text.Whitespace:  " "
Literal.Number:  "5"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Name.Function:  "collection"
Punctuation:  "()"
Operator:  "/"
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$a"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Operator:  "."
Text.Whitespace:  " "
Keyword:  "return"
Text.Whitespace:  " "
Keyword:  "function"
Punctuation:  "()"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  " "
Name.Variable:  "$a"
Text.Whitespace:  " "
Punctuation:  "})"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Name.Function:  "doc"
Punctuation:  "("
Literal.String:  "'a.xml'"
Punctuation:  ")"
Operator:  "/*,"
Text.Whitespace:  " "
Name.Variable:  "$y"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Name.Variable:  "$x"
Operator:  "//*"
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  " "
Name.Variable:  "$y"
Punctuation:  "["
Name.Attribute:  "@value"
Text.Whitespace:  " "
Operator.Word:  "gt"
Text.Whitespace:  " "
Name.Variable:  "$x"
Operator:  "/"
Name.Attribute:  "@min"
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline><newline>"
Comment:  "(: XPATH 3.1 :)"
Text.Whitespace:  "<newline>"
Comment:  "(:   9. Maps :)"
Text.Whitespace:  "<newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$m"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Keyword:  "map"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  "<newline>  "
Literal.String:  "\"Monday\""
Text.Whitespace:  " "
Operator:  ":"
Text.Whitespace:  " "
Name.Function:  "true"
Punctuation:  "()"
Operator:  ","
Text.Whitespace:  "<newline>  "
Literal.String:  "\"Wednesday\""
Text.Whitespace:  " "
Operator:  ":"
Text.Whitespace:  " "
Name.Function:  "true"
Punctuation:  "()"
Operator:  ","
Text.Whitespace:  "<newline>  "
Literal.String:  "\"Friday\""
Text.Whitespace:  " "
Operator:  ":"
Text.Whitespace:  " "
Name.Function:  "true"
Punctuation:  "()"
Operator:  ","
Text.Whitespace:  "<newline>  "
Literal.String:  "\"Saturday\""
Text.Whitespace:  " "
Operator:  ":"
Text.Whitespace:  " "
Name.Function:  "false"
Punctuation:  "()"
Operator:  ","
Text.Whitespace:  "<newline>  "
Literal.String:  "\"Sunday\""
Text.Whitespace:  " "
Operator:  ":"
Text.Whitespace:  " "
Name.Function:  "false"
Punctuation:  "()"
Text.Whitespace:  "<newline>"
Punctuation:  "}"
Operator:  ","
Text.Whitespace:  "<newline>"
Name.Variable:  "$days"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Punctuation:  "("
Literal.String:  "\"Monday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Tuesday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Wednesday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Thursday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Friday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Saturday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Sunday\""
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  " "
Name.Function:  "fn:filter"
Punctuation:  "("
Name.Variable:  "$days"
Operator:  ","
Text.Whitespace:  " "
Name.Variable:  "$m"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   10. Arrays :)"
Text.Whitespace:  "<newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Tag:  "a"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Keyword:  "array"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  " "
Literal.String:  "\"licorice\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"ginger\""
Text.Whitespace:  " "
Punctuation:  "}("
Literal.Number:  "1"
Punctuation:  ")"
Operator:  ","
Text.Whitespace:  "<newline>    "
Name.Tag:  "b"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Punctuation:  "["
Text.Whitespace:  " "
Literal.Number:  "1"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "5"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "7"
Text.Whitespace:  " "
Punctuation:  "]("
Literal.Number:  "4"
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  " "
Name.Tag:  "a"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   11. Arrow operator :)"
Text.Whitespace:  "<newline>"
Name.Variable:  "$string"
Text.Whitespace:  " "
Operator:  "=>"
Text.Whitespace:  " "
Name.Function:  "upper-case"
Punctuation:  "()"
Text.Whitespace:  " "
Operator:  "=>"
Text.Whitespace:  " "
Name.Function:  "normalize-unicode"
Punctuation:  "()"
Text.Whitespace:  " "
Operator:  "=>"
Text.Whitespace:  " "
Name.Function:  "tokenize"
Punctuation:  "("
Literal.String:  "\"\\s+\""
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
