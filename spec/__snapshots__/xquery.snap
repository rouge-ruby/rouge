Comment:  "(:<newline>    The following samples have been compiled from examples from the XQuery language specification.<newline>    The following notice is to comply with the W3C Software and Document Notice and License:<newline><newline>    This software or document includes material copied from or derived from \"XQuery 3.1: An XML Query<newline>    Language\", https://www.w3.org/TR/xquery-31/. \u00A9 2017 W3C\u00AE (MIT, ERCIM, Keio, Beihang).<newline><newline>    This software or document includes material copied from or derived from \"XML Path Language (XPath)<newline>    3.1\" https://www.w3.org/TR/xpath-31/.<newline>    Copyright \u00A9 2017 W3C\u00AE (MIT, ERCIM, Keio, Beihang).<newline><newline>    (:<newline>        W3C Software and Document Notice and License<newline><newline>        This work is being provided by the copyright holders under the following<newline>        license.<newline><newline>        License<newline>        By obtaining and/or copying this work, you (the licensee) agree that you have<newline>        read, understood, and will comply with the following terms and conditions.<newline><newline>        Permission to copy, modify, and distribute this work, with or without<newline>        modification, for any purpose and without fee or royalty is hereby granted,<newline>        provided that you include the following on ALL copies of the work or portions<newline>        thereof, including modifications:<newline><newline>            1. The full text of this NOTICE in a location viewable to users of the<newline>               redistributed or derivative work.<newline>            2. Any pre-existing intellectual property disclaimers, notices, or terms and<newline>               conditions. If none exist, the W3C Software and Document Short Notice<newline>               should be included.<newline>            3. Notice of any changes or modifications, through a copyright statement on<newline>               the new code or document such as \"This software or document includes<newline>               material copied from or derived from [title and URI of the W3C document].<newline>               Copyright \u00A9 [YEAR] W3C\u00AE (MIT, ERCIM, Keio, Beihang).\"<newline><newline>        Disclaimers<newline>        THIS WORK IS PROVIDED \"AS IS,\" AND COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR<newline>        WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF<newline>        MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE<newline>        SOFTWARE OR DOCUMENT WILL NOT INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS,<newline>        TRADEMARKS OR OTHER RIGHTS.<newline><newline>        COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR<newline>        CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE SOFTWARE OR DOCUMENT.<newline>        The name and trademarks of copyright holders may NOT be used in advertising or<newline>        publicity pertaining to the work without specific, written prior permission.<newline><newline>        Title to copyright in this work will at all times remain with copyright holders.<newline>    :)<newline>:)"
Text.Whitespace:  "<newline><newline>"
Comment:  "(: 1. Prologs :)"
Text.Whitespace:  "<newline>"
Keyword:  "xquery"
Text.Whitespace:  " "
Keyword:  "version"
Text.Whitespace:  " "
Literal.String:  "\"3.1\""
Text.Whitespace:  " "
Keyword:  "encoding"
Text.Whitespace:  " "
Literal.String:  "\"utf-8\""
Punctuation:  ";"
Text.Whitespace:  "<newline>"
Keyword:  "module"
Text.Whitespace:  " "
Keyword:  "namespace"
Text.Whitespace:  " "
Name.Namespace:  "gis"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Literal.String:  "\"http://example.org/gis-functions\""
Punctuation:  ";"
Text.Whitespace:  "<newline>"
Keyword:  "declare"
Text.Whitespace:  " "
Keyword:  "boundary-space"
Text.Whitespace:  " "
Keyword:  "preserve"
Punctuation:  ";"
Text.Whitespace:  "<newline>"
Keyword:  "declare"
Text.Whitespace:  " "
Keyword:  "default"
Text.Whitespace:  " "
Keyword:  "collation"
Text.Whitespace:  " "
Literal.String:  "\"http://example.org/languages/Icelandic\""
Punctuation:  ";"
Text.Whitespace:  "<newline>"
Keyword:  "declare"
Text.Whitespace:  " "
Keyword:  "base-uri"
Text.Whitespace:  " "
Literal.String:  "\"http://example.org\""
Punctuation:  ";"
Text.Whitespace:  "<newline>"
Keyword:  "declare"
Text.Whitespace:  " "
Keyword:  "decimal-format"
Text.Whitespace:  " "
Name.Tag:  "local:de"
Text.Whitespace:  " "
Keyword:  "decimal-separator"
Operator:  "="
Literal.String:  "\",\""
Text.Whitespace:  " "
Keyword:  "grouping-separator"
Operator:  "="
Literal.String:  "\".\""
Punctuation:  ";"
Text.Whitespace:  "<newline>"
Keyword:  "declare"
Text.Whitespace:  " "
Keyword:  "decimal-format"
Text.Whitespace:  " "
Name.Tag:  "local:en"
Text.Whitespace:  " "
Keyword:  "decimal-separator"
Operator:  "="
Literal.String:  "\".\""
Text.Whitespace:  " "
Keyword:  "grouping-separator"
Operator:  "="
Literal.String:  "\",\""
Punctuation:  ";"
Text.Whitespace:  "<newline>"
Keyword:  "import"
Text.Whitespace:  " "
Keyword:  "schema"
Text.Whitespace:  " "
Keyword:  "namespace"
Text.Whitespace:  " "
Name.Namespace:  "soap"
Operator:  "="
Literal.String:  "\"http://www.w3.org/2003/05/soap-envelope\""
Text.Whitespace:  " "
Keyword:  "at"
Text.Whitespace:  " "
Literal.String:  "\"http://www.w3.org/2003/05/soap-envelope/\""
Punctuation:  ";"
Text.Whitespace:  "<newline>"
Keyword:  "declare"
Text.Whitespace:  " "
Keyword:  "option"
Text.Whitespace:  " "
Name.Tag:  "exq:strip-comments"
Text.Whitespace:  " "
Literal.String:  "\"true\""
Punctuation:  ";"
Text.Whitespace:  "<newline><newline>"
Comment:  "(: 2. Node constructors :)"
Text.Whitespace:  "<newline>"
Name.Tag:  "<example"
Text.Whitespace:  " "
Name.Attribute:  "size="
Literal.String:  "\"As big as "
Punctuation:  "{"
Name.Variable:  "$hat"
Operator:  "/"
Name.Attribute:  "@size"
Punctuation:  "}"
Literal.String:  "\""
Name.Tag:  ">"
Text.Whitespace:  "<newline>    "
Comment:  "<!-- XML comment -->"
Text.Whitespace:  "<newline>    "
Name.Tag:  "<p>"
Text.Whitespace:  " "
Text:  "Here"
Text.Whitespace:  " "
Text:  "is"
Text.Whitespace:  " "
Text:  "a"
Text.Whitespace:  " "
Text:  "query."
Text.Whitespace:  " "
Name.Tag:  "</p>"
Text.Whitespace:  "<newline>    "
Name.Tag:  "<eg>"
Text:  "{{"
Text.Whitespace:  " "
Text:  "$b/title"
Text.Whitespace:  " "
Text:  "}}"
Name.Tag:  "</eg>"
Text.Whitespace:  "<newline>    "
Name.Tag:  "<p>"
Text.Whitespace:  " "
Text:  "Here"
Text.Whitespace:  " "
Text:  "is"
Text.Whitespace:  " "
Text:  "the"
Text.Whitespace:  " "
Text:  "result"
Text.Whitespace:  " "
Text:  "of"
Text.Whitespace:  " "
Text:  "the"
Text.Whitespace:  " "
Text:  "query."
Text.Whitespace:  " "
Name.Tag:  "</p>"
Text.Whitespace:  "<newline>    "
Name.Tag:  "<eg>"
Punctuation:  "{"
Text.Whitespace:  " "
Name.Variable:  "$b"
Operator:  "/"
Name.Tag:  "title"
Text.Whitespace:  " "
Punctuation:  "}"
Name.Tag:  "</eg>"
Text.Whitespace:  "<newline>    "
Name.Tag:  "<p>"
Text.Whitespace:  " "
Text:  "Here"
Text.Whitespace:  " "
Text:  "is"
Text.Whitespace:  " "
Text:  "a"
Text.Whitespace:  " "
Text:  "another"
Text.Whitespace:  " "
Text:  "example"
Text.Whitespace:  " "
Name.Tag:  "</p>"
Text.Whitespace:  "<newline>    "
Name.Tag:  "<eg>"
Text.Whitespace:  " "
Text:  "Hello"
Name.Entity:  "&#x20;"
Punctuation:  "{"
Literal.String:  "\"world\""
Punctuation:  "}"
Name.Tag:  "</eg>"
Text.Whitespace:  "<newline>    "
Name.Tag:  "<fact>"
Text:  "I"
Text.Whitespace:  " "
Text:  "saw"
Text.Whitespace:  " "
Name.Tag:  "<howmany>"
Punctuation:  "{"
Literal.Number:  "5"
Text.Whitespace:  " "
Operator:  "+"
Text.Whitespace:  " "
Literal.Number:  "3"
Punctuation:  "}"
Name.Tag:  "</howmany>"
Text.Whitespace:  " "
Text:  "cats."
Name.Tag:  "</fact>"
Text.Whitespace:  "<newline>"
Name.Tag:  "</example>"
Text.Whitespace:  "<newline><newline><newline>"
Keyword:  "element"
Text.Whitespace:  " "
Name.Tag:  "book"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  "<newline>   "
Keyword:  "attribute"
Text.Whitespace:  " "
Name.Tag:  "isbn"
Text.Whitespace:  " "
Punctuation:  "{"
Literal.String:  "\"isbn-0060229357\""
Text.Whitespace:  " "
Punctuation:  "}"
Operator:  ","
Text.Whitespace:  "<newline>   "
Keyword:  "element"
Text.Whitespace:  " "
Name.Tag:  "title"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  " "
Literal.String:  "\"Harold and the Purple Crayon\""
Punctuation:  "}"
Operator:  ","
Text.Whitespace:  "<newline>   "
Keyword:  "element"
Text.Whitespace:  " "
Name.Tag:  "author"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  "<newline>      "
Keyword:  "element"
Text.Whitespace:  " "
Name.Tag:  "first"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  " "
Literal.String:  "\"Crockett\""
Text.Whitespace:  " "
Punctuation:  "}"
Operator:  ","
Text.Whitespace:  "<newline>      "
Keyword:  "element"
Text.Whitespace:  " "
Name.Tag:  "last"
Text.Whitespace:  " "
Punctuation:  "{"
Literal.String:  "\"Johnson\""
Text.Whitespace:  " "
Punctuation:  "}"
Text.Whitespace:  "<newline>   "
Punctuation:  "}"
Text.Whitespace:  "<newline>"
Punctuation:  "}"
Text.Whitespace:  "<newline><newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$e"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Name.Tag:  "<length"
Text.Whitespace:  " "
Name.Attribute:  "units="
Literal.String:  "\"inches\""
Name.Tag:  ">"
Punctuation:  "{"
Literal.Number:  "5"
Punctuation:  "}"
Name.Tag:  "</length>"
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  " "
Keyword:  "element"
Text.Whitespace:  " "
Punctuation:  "{"
Name.Function:  "fn:node-name"
Punctuation:  "("
Name.Variable:  "$e"
Punctuation:  ")}"
Text.Whitespace:  " "
Punctuation:  "{"
Name.Variable:  "$e"
Operator:  "/"
Name.Attribute:  "@"
Operator:  "*,"
Text.Whitespace:  " "
Literal.Number:  "2"
Text.Whitespace:  " "
Operator:  "*"
Text.Whitespace:  " "
Name.Function:  "fn:data"
Punctuation:  "("
Name.Variable:  "$e"
Punctuation:  ")}"
Text.Whitespace:  "<newline><newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$target"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Literal.String:  "\"audio-output\""
Operator:  ","
Text.Whitespace:  "<newline>    "
Name.Variable:  "$content"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Literal.String:  "\"beep\""
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  " "
Keyword:  "processing-instruction"
Text.Whitespace:  " "
Punctuation:  "{"
Name.Variable:  "$target"
Punctuation:  "}"
Text.Whitespace:  " "
Punctuation:  "{"
Name.Variable:  "$content"
Punctuation:  "}"
Text.Whitespace:  "<newline><newline><newline>"
Comment:  "(: 3. String constructors :)"
Text.Whitespace:  "<newline>"
Keyword:  "declare"
Text.Whitespace:  " "
Keyword:  "function"
Text.Whitespace:  " "
Name.Function:  "local:prize-message"
Punctuation:  "("
Name.Variable:  "$a"
Punctuation:  ")"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "xs:string"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  "<newline>    "
Literal.String:  "``[Hello "
Punctuation:  "`{"
Name.Variable:  "$a"
Punctuation:  "?"
Name.Tag:  "name"
Punctuation:  "}`"
Literal.String:  "<newline>    You have just won "
Punctuation:  "`{"
Name.Variable:  "$a"
Punctuation:  "?"
Name.Tag:  "value"
Punctuation:  "}`"
Literal.String:  " dollars!<newline>    "
Punctuation:  "`{"
Text.Whitespace:  "<newline>       "
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Variable:  "$a"
Punctuation:  "?"
Name.Tag:  "in_ca"
Punctuation:  ")"
Text.Whitespace:  "<newline>       "
Keyword:  "then"
Text.Whitespace:  " "
Literal.String:  "``[Well, "
Punctuation:  "`{"
Name.Variable:  "$a"
Punctuation:  "?"
Name.Tag:  "taxed_value"
Punctuation:  "}`"
Literal.String:  " dollars, after taxes.]``"
Text.Whitespace:  "<newline>       "
Keyword:  "else"
Text.Whitespace:  " "
Literal.String:  "\"\""
Text.Whitespace:  "<newline>    "
Punctuation:  "}`"
Literal.String:  "]``"
Text.Whitespace:  "<newline>"
Punctuation:  "};"
Text.Whitespace:  "<newline><newline>"
Comment:  "(: 4. FLWOR :)"
Text.Whitespace:  "<newline>"
Keyword:  "for"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "at"
Text.Whitespace:  " "
Name.Variable:  "$i"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  " "
Name.Variable:  "$inputvalues"
Text.Whitespace:  "<newline>"
Keyword:  "where"
Text.Whitespace:  " "
Name.Variable:  "$i"
Text.Whitespace:  " "
Operator.Word:  "mod"
Text.Whitespace:  " "
Literal.Number:  "100"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Literal.Number:  "0"
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  "<newline><newline>"
Keyword:  "for"
Text.Whitespace:  " "
Keyword:  "tumbling"
Text.Whitespace:  " "
Keyword:  "window"
Text.Whitespace:  " "
Name.Variable:  "$w"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "2"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "4"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "6"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "8"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "10"
Punctuation:  ")"
Text.Whitespace:  "<newline>    "
Keyword:  "start"
Text.Whitespace:  " "
Name.Variable:  "$s"
Text.Whitespace:  " "
Keyword:  "at"
Text.Whitespace:  " "
Name.Variable:  "$spos"
Text.Whitespace:  " "
Keyword:  "previous"
Text.Whitespace:  " "
Name.Variable:  "$sprev"
Text.Whitespace:  " "
Keyword:  "next"
Text.Whitespace:  " "
Name.Variable:  "$snext"
Text.Whitespace:  " "
Keyword:  "when"
Text.Whitespace:  " "
Name.Function:  "true"
Punctuation:  "()"
Text.Whitespace:  "<newline>    "
Keyword:  "end"
Text.Whitespace:  " "
Name.Variable:  "$e"
Text.Whitespace:  " "
Keyword:  "at"
Text.Whitespace:  " "
Name.Variable:  "$epos"
Text.Whitespace:  " "
Keyword:  "previous"
Text.Whitespace:  " "
Name.Variable:  "$eprev"
Text.Whitespace:  " "
Keyword:  "next"
Text.Whitespace:  " "
Name.Variable:  "$enext"
Text.Whitespace:  " "
Keyword:  "when"
Text.Whitespace:  " "
Name.Function:  "true"
Punctuation:  "()"
Text.Whitespace:  "<newline><newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Literal.Number:  "64000"
Text.Whitespace:  "<newline>"
Keyword:  "for"
Text.Whitespace:  " "
Name.Variable:  "$c"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  " "
Operator:  "//"
Name.Tag:  "customer"
Text.Whitespace:  "<newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$d"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Name.Variable:  "$c"
Operator:  "/"
Name.Tag:  "department"
Text.Whitespace:  "<newline>"
Keyword:  "where"
Text.Whitespace:  " "
Name.Variable:  "$c"
Operator:  "/"
Name.Tag:  "salary"
Text.Whitespace:  " "
Operator:  ">"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  "<newline>"
Keyword:  "group"
Text.Whitespace:  " "
Keyword:  "by"
Text.Whitespace:  " "
Name.Variable:  "$d"
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  "<newline> "
Name.Tag:  "<department"
Text.Whitespace:  " "
Name.Attribute:  "name="
Literal.String:  "\""
Punctuation:  "{"
Name.Variable:  "$d"
Punctuation:  "}"
Literal.String:  "\""
Name.Tag:  ">"
Text.Whitespace:  "<newline>  "
Text:  "Number"
Text.Whitespace:  " "
Text:  "of"
Text.Whitespace:  " "
Text:  "employees"
Text.Whitespace:  " "
Text:  "earning"
Text.Whitespace:  " "
Text:  "more"
Text.Whitespace:  " "
Text:  "than"
Text.Whitespace:  " "
Text:  "$"
Punctuation:  "{"
Name.Function:  "distinct-values"
Punctuation:  "("
Name.Variable:  "$x"
Punctuation:  ")}"
Text.Whitespace:  " "
Text:  "is"
Text.Whitespace:  " "
Punctuation:  "{"
Keyword:  "count"
Punctuation:  "("
Name.Variable:  "$c"
Punctuation:  ")}"
Text.Whitespace:  "<newline> "
Name.Tag:  "</department>"
Text.Whitespace:  "<newline><newline>"
Comment:  "(: 5. Switch :)"
Text.Whitespace:  "<newline>"
Keyword:  "switch"
Text.Whitespace:  " "
Punctuation:  "("
Name.Variable:  "$animal"
Punctuation:  ")"
Text.Whitespace:  "<newline>   "
Keyword:  "case"
Text.Whitespace:  " "
Literal.String:  "\"Cow\""
Text.Whitespace:  " "
Keyword:  "return"
Text.Whitespace:  " "
Literal.String:  "\"Moo\""
Text.Whitespace:  "<newline>   "
Keyword:  "case"
Text.Whitespace:  " "
Literal.String:  "\"Cat\""
Text.Whitespace:  " "
Keyword:  "return"
Text.Whitespace:  " "
Literal.String:  "\"Meow\""
Text.Whitespace:  "<newline>   "
Keyword:  "case"
Text.Whitespace:  " "
Literal.String:  "\"Duck\""
Text.Whitespace:  " "
Keyword:  "return"
Text.Whitespace:  " "
Literal.String:  "\"Quack\""
Text.Whitespace:  "<newline>   "
Keyword:  "default"
Text.Whitespace:  " "
Keyword:  "return"
Text.Whitespace:  " "
Literal.String:  "\"What's that odd noise?\""
Text.Whitespace:  "<newline><newline>"
Comment:  "(: 6. Try/catch :)"
Text.Whitespace:  "<newline>"
Keyword:  "try"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  "<newline>    "
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "cast"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "xs:integer"
Text.Whitespace:  "<newline>"
Punctuation:  "}"
Text.Whitespace:  "<newline>"
Keyword:  "catch"
Text.Whitespace:  " "
Name.Tag:  "err:FORG0001"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  " "
Name.Tag:  "err:XPTY0004"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  "<newline>    "
Literal.Number:  "0"
Text.Whitespace:  "<newline>"
Punctuation:  "}"
Text.Whitespace:  "<newline><newline>"
Comment:  "(: 7. Type expressions: instance of, typeswitch, cast, castable, ... :)"
Text.Whitespace:  "<newline>"
Literal.Number:  "5"
Text.Whitespace:  " "
Keyword:  "instance"
Text.Whitespace:  " "
Keyword:  "of"
Text.Whitespace:  " "
Keyword.Type:  "xs:decimal"
Text.Whitespace:  "<newline><newline>"
Keyword:  "typeswitch"
Punctuation:  "("
Name.Variable:  "$customer"
Operator:  "/"
Name.Tag:  "billing-address"
Punctuation:  ")"
Text.Whitespace:  "<newline>   "
Keyword:  "case"
Text.Whitespace:  " "
Name.Variable:  "$a"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "element"
Punctuation:  "("
Operator:  "*"
Punctuation:  ","
Text.Whitespace:  " "
Name.Tag:  "USAddress"
Punctuation:  ")"
Text.Whitespace:  "<newline>     "
Keyword:  "return"
Text.Whitespace:  " "
Name.Variable:  "$a"
Operator:  "/"
Name.Tag:  "state"
Text.Whitespace:  "<newline>   "
Keyword:  "case"
Text.Whitespace:  " "
Name.Variable:  "$a"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "element"
Punctuation:  "("
Operator:  "*"
Punctuation:  ","
Text.Whitespace:  " "
Name.Tag:  "CanadaAddress"
Punctuation:  ")"
Text.Whitespace:  "<newline>     "
Keyword:  "return"
Text.Whitespace:  " "
Name.Variable:  "$a"
Operator:  "/"
Name.Tag:  "province"
Text.Whitespace:  "<newline>   "
Keyword:  "default"
Text.Whitespace:  "<newline>     "
Keyword:  "return"
Text.Whitespace:  " "
Literal.String:  "\"unknown\""
Text.Whitespace:  "<newline><newline>"
Comment:  "(: 8. Validate :)"
Text.Whitespace:  "<newline>"
Keyword:  "validate"
Text.Whitespace:  " "
Keyword:  "strict"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  "<newline>    "
Name.Tag:  "<x>"
Text:  "12"
Name.Tag:  "</x>"
Text.Whitespace:  "<newline>"
Punctuation:  "}"
Text.Whitespace:  "<newline><newline>"
Comment:  "(: 9. Pragma :)"
Text.Whitespace:  "<newline>"
Keyword:  "declare"
Text.Whitespace:  " "
Keyword:  "namespace"
Text.Whitespace:  " "
Name.Namespace:  "exq"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Literal.String:  "\"http://example.org/XQueryImplementation\""
Punctuation:  ";"
Text.Whitespace:  "<newline>"
Keyword:  "for"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  "<newline>    "
Comment.Preproc:  "(#"
Text.Whitespace:  " "
Name.Tag:  "exq:distinct"
Text.Whitespace:  " "
Comment.Preproc:  "//city"
Text.Whitespace:  " "
Comment.Preproc:  "by"
Text.Whitespace:  " "
Comment.Preproc:  "@country"
Text.Whitespace:  " "
Comment.Preproc:  "#)"
Text.Whitespace:  "<newline>    "
Punctuation:  "{"
Text.Whitespace:  " "
Operator:  "//"
Name.Tag:  "city"
Punctuation:  "["
Name.Function:  "not"
Punctuation:  "("
Name.Attribute:  "@country"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Keyword:  "preceding"
Operator:  "::"
Name.Tag:  "city"
Operator:  "/"
Name.Attribute:  "@country"
Punctuation:  ")]"
Text.Whitespace:  " "
Punctuation:  "}"
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  " "
Name.Function:  "f:show-city"
Punctuation:  "("
Name.Variable:  "$x"
Punctuation:  ")"
Text.Whitespace:  "<newline><newline>"
Comment:  "(: 10. Declarations and annotations :)"
Text.Whitespace:  "<newline>"
Keyword:  "declare"
Text.Whitespace:  " "
Keyword.Declaration:  "%eg:volatile"
Text.Whitespace:  " "
Name.Tag:  "variable"
Text.Whitespace:  " "
Name.Variable:  "$time"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "xs:time"
Text.Whitespace:  " "
Keyword:  "external"
Punctuation:  ";"
Text.Whitespace:  "<newline>"
Keyword:  "declare"
Text.Whitespace:  " "
Keyword:  "context"
Text.Whitespace:  " "
Keyword:  "item"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "item"
Punctuation:  "()"
Text.Whitespace:  " "
Keyword:  "external"
Punctuation:  ";"
Text.Whitespace:  "<newline>"
Keyword:  "declare"
Text.Whitespace:  "<newline>   "
Keyword.Declaration:  "%java:method"
Punctuation:  "("
Literal.String:  "\"java.lang.StrictMath.copySign\""
Punctuation:  ")"
Text.Whitespace:  "<newline>   "
Keyword:  "function"
Text.Whitespace:  " "
Name.Function:  "smath:copySign"
Punctuation:  "("
Name.Variable:  "$magnitude"
Operator:  ","
Text.Whitespace:  " "
Name.Variable:  "$sign"
Punctuation:  ")"
Text.Whitespace:  "<newline>   "
Keyword:  "external"
Punctuation:  ";"
Text.Whitespace:  "<newline><newline><newline>"
Comment:  "(:<newline>   The XQuery specification states:<newline>      > XQuery 3.1 is an extension of XPath 3.1. In general, any expression that<newline>      > is syntactically valid and executes successfully in both XPath 3.1 and<newline>      > XQuery 3.1 will return the same result in both languages.<newline><newline>   The following XPath examples have been compiled from the XPath language specification.<newline>:)"
Text.Whitespace:  "<newline><newline>"
Comment:  "(: XPATH 2.0 :)"
Text.Whitespace:  "<newline>"
Comment:  "(:   1. Arithmetic :)"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Variable:  "$x"
Text.Whitespace:  " "
Operator.Word:  "div"
Text.Whitespace:  " "
Name.Variable:  "$y"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "+"
Text.Whitespace:  " "
Name.Function:  "xs:decimal"
Punctuation:  "("
Name.Variable:  "$z"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Literal.Number:  "1"
Text.Whitespace:  " "
Operator.Word:  "to"
Text.Whitespace:  " "
Literal.Number:  "100"
Punctuation:  ")["
Operator:  "."
Text.Whitespace:  " "
Operator.Word:  "mod"
Text.Whitespace:  " "
Literal.Number:  "5"
Text.Whitespace:  " "
Operator.Word:  "eq"
Text.Whitespace:  " "
Literal.Number:  "0"
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Name.Function:  "xs:decimal"
Punctuation:  "("
Name.Variable:  "$floatvalue"
Text.Whitespace:  " "
Operator:  "*"
Text.Whitespace:  " "
Literal.Number.Float:  "0.2E-5"
Punctuation:  ")"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   2. Sequences :)"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Literal.Number:  "10"
Operator:  ","
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "1"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Punctuation:  ")"
Operator:  ","
Text.Whitespace:  " "
Punctuation:  "()"
Operator:  ","
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "3"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "4"
Punctuation:  "))"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Literal.Number:  "1"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "2"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "3"
Punctuation:  ")"
Text.Whitespace:  " "
Operator.Word:  "and"
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "2"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "3"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "3"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "4"
Punctuation:  ")"
Text.Whitespace:  " "
Operator.Word:  "and"
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "1"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "3"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "4"
Punctuation:  ")"
Text.Whitespace:  " "
Operator.Word:  "and"
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "1"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "!="
Text.Whitespace:  " "
Punctuation:  "("
Literal.Number:  "2"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "3"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Tag:  "salary"
Operator:  ","
Text.Whitespace:  " "
Name.Tag:  "bonus"
Punctuation:  ")"
Text.Whitespace:  "  "
Operator:  "|"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Variable:  "$price"
Operator:  ","
Text.Whitespace:  " "
Name.Variable:  "$price"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   3. Path selection :)"
Text.Whitespace:  "<newline>"
Keyword:  "child"
Operator:  "::"
Name.Tag:  "chapter"
Punctuation:  "["
Literal.Number:  "2"
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Keyword:  "descendant"
Operator:  "::"
Name.Tag:  "toy"
Punctuation:  "["
Keyword:  "attribute"
Operator:  "::"
Name.Tag:  "color"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Literal.String:  "\"red\""
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Keyword:  "child"
Operator:  "::"
Name.Tag:  "employee"
Punctuation:  "["
Name.Tag:  "secretary"
Punctuation:  "]["
Name.Tag:  "assistant"
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Operator:  "/"
Name.Tag:  "books"
Operator:  "/"
Name.Tag:  "book"
Punctuation:  "["
Name.Tag:  "isbn"
Operator:  "="
Literal.String:  "\"1558604820\""
Punctuation:  "]"
Text.Whitespace:  " "
Operator.Word:  "is"
Text.Whitespace:  " "
Operator:  "/"
Name.Tag:  "books"
Operator:  "/"
Name.Tag:  "book"
Punctuation:  "["
Name.Tag:  "call"
Operator:  "="
Literal.String:  "\"QA76.9 C3845\""
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   4. Functions :)"
Text.Whitespace:  "<newline>"
Name.Function:  "fn:error"
Punctuation:  "("
Name.Function:  "xs:QName"
Punctuation:  "("
Literal.String:  "\"app:err057\""
Punctuation:  ")"
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Unexpected value\""
Operator:  ","
Text.Whitespace:  " "
Name.Function:  "fn:string"
Punctuation:  "("
Name.Variable:  "$v"
Punctuation:  "))"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   5. Control flow :)"
Text.Whitespace:  "<newline>"
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "castable"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "hatsize"
Punctuation:  ")"
Text.Whitespace:  "<newline>   "
Keyword:  "then"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "cast"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "hatsize"
Text.Whitespace:  "<newline>   "
Keyword:  "else"
Text.Whitespace:  " "
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "castable"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "IQ"
Punctuation:  ")"
Text.Whitespace:  "<newline>       "
Keyword:  "then"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "cast"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "IQ"
Text.Whitespace:  "<newline>       "
Keyword:  "else"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  " "
Keyword:  "cast"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "xs:string"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Name.Variable:  "$N"
Punctuation:  "["
Keyword:  "if"
Text.Whitespace:  " "
Punctuation:  "("
Name.Attribute:  "@x"
Text.Whitespace:  " "
Keyword:  "castable"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "xs:date"
Punctuation:  ")"
Text.Whitespace:  "<newline>   "
Keyword:  "then"
Text.Whitespace:  " "
Name.Function:  "xs:date"
Punctuation:  "("
Name.Attribute:  "@x"
Punctuation:  ")"
Text.Whitespace:  " "
Operator.Word:  "gt"
Text.Whitespace:  " "
Name.Function:  "xs:date"
Punctuation:  "("
Literal.String:  "\"2000-01-01\""
Punctuation:  ")"
Text.Whitespace:  "<newline>   "
Keyword:  "else"
Text.Whitespace:  " "
Name.Function:  "false"
Punctuation:  "()]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   6. Looping :)"
Text.Whitespace:  "<newline>"
Keyword:  "for"
Text.Whitespace:  " "
Name.Variable:  "$a"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  " "
Name.Function:  "fn:distinct-values"
Punctuation:  "("
Name.Tag:  "book"
Operator:  "/"
Name.Tag:  "author"
Punctuation:  ")"
Text.Whitespace:  " "
Keyword:  "return"
Text.Whitespace:  " "
Punctuation:  "("
Name.Tag:  "book"
Operator:  "/"
Name.Tag:  "author"
Punctuation:  "["
Operator:  "."
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Name.Variable:  "$a"
Punctuation:  "]["
Literal.Number:  "1"
Punctuation:  "]"
Operator:  ","
Text.Whitespace:  " "
Name.Tag:  "book"
Punctuation:  "["
Name.Tag:  "author"
Text.Whitespace:  " "
Operator:  "="
Text.Whitespace:  " "
Name.Variable:  "$a"
Punctuation:  "]"
Operator:  "/"
Name.Tag:  "title"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Keyword:  "every"
Text.Whitespace:  " "
Name.Variable:  "$part"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  " "
Operator:  "/"
Name.Tag:  "parts"
Operator:  "/"
Name.Tag:  "part"
Text.Whitespace:  " "
Keyword:  "satisfies"
Text.Whitespace:  " "
Name.Variable:  "$part"
Operator:  "/"
Name.Attribute:  "@discounted"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Keyword:  "some"
Text.Whitespace:  " "
Name.Variable:  "$emp"
Text.Whitespace:  " "
Keyword:  "in"
Text.Whitespace:  " "
Operator:  "/"
Name.Tag:  "emps"
Operator:  "/"
Name.Tag:  "employee"
Text.Whitespace:  " "
Keyword:  "satisfies"
Text.Whitespace:  " "
Punctuation:  "("
Name.Variable:  "$emp"
Operator:  "/"
Name.Tag:  "bonus"
Text.Whitespace:  " "
Operator:  ">"
Text.Whitespace:  " "
Literal.Number.Float:  "0.25"
Text.Whitespace:  " "
Operator:  "*"
Text.Whitespace:  " "
Name.Variable:  "$emp"
Operator:  "/"
Name.Tag:  "salary"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   7. Type casts :)"
Text.Whitespace:  "<newline>"
Name.Variable:  "$myaddress"
Text.Whitespace:  " "
Keyword:  "treat"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "element"
Punctuation:  "("
Operator:  "*"
Punctuation:  ","
Text.Whitespace:  " "
Name.Tag:  "USAddress"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
Punctuation:  "("
Name.Function:  "fn:root"
Punctuation:  "("
Keyword:  "self"
Operator:  "::"
Keyword:  "node"
Punctuation:  "())"
Text.Whitespace:  " "
Keyword:  "treat"
Text.Whitespace:  " "
Keyword:  "as"
Text.Whitespace:  " "
Keyword.Type:  "document-node"
Punctuation:  "())"
Operator:  "/"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   8. Functions and let :)"
Text.Whitespace:  "<newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$f"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Keyword:  "function"
Punctuation:  "("
Name.Variable:  "$a"
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  " "
Name.Function:  "starts-with"
Punctuation:  "("
Name.Variable:  "$a"
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"E\""
Punctuation:  ")"
Text.Whitespace:  " "
Punctuation:  "}"
Text.Whitespace:  "<newline>    "
Keyword:  "return"
Text.Whitespace:  " "
Name.Function:  "local:filter"
Punctuation:  "(("
Literal.String:  "\"Ethel\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Enid\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Gertrude\""
Punctuation:  ")"
Operator:  ","
Text.Whitespace:  " "
Name.Variable:  "$f"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Name.Function:  "collection"
Punctuation:  "()"
Operator:  "/"
Punctuation:  "("
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$a"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Operator:  "."
Text.Whitespace:  " "
Keyword:  "return"
Text.Whitespace:  " "
Keyword:  "function"
Punctuation:  "()"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  " "
Name.Variable:  "$a"
Text.Whitespace:  " "
Punctuation:  "})"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$x"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Name.Function:  "doc"
Punctuation:  "("
Literal.String:  "'a.xml'"
Punctuation:  ")"
Operator:  "/*,"
Text.Whitespace:  "<newline>    "
Name.Variable:  "$y"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Name.Variable:  "$x"
Operator:  "//*,"
Text.Whitespace:  "<newline>    "
Name.Variable:  "$z"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Name.Function:  "f"
Punctuation:  "("
Literal.Number:  "3"
Operator:  ","
Text.Whitespace:  " "
Punctuation:  "?)"
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  " "
Name.Variable:  "$y"
Punctuation:  "["
Name.Attribute:  "@value"
Text.Whitespace:  " "
Operator.Word:  "gt"
Text.Whitespace:  " "
Name.Variable:  "$x"
Operator:  "/"
Name.Attribute:  "@min"
Punctuation:  "]"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   9. Maps :)"
Text.Whitespace:  "<newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Variable:  "$m"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Keyword:  "map"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  "<newline>  "
Literal.String:  "\"Monday\""
Text.Whitespace:  " "
Operator:  ":"
Text.Whitespace:  " "
Name.Function:  "true"
Punctuation:  "()"
Operator:  ","
Text.Whitespace:  "<newline>  "
Literal.String:  "\"Wednesday\""
Text.Whitespace:  " "
Operator:  ":"
Text.Whitespace:  " "
Name.Function:  "true"
Punctuation:  "()"
Operator:  ","
Text.Whitespace:  "<newline>  "
Literal.String:  "\"Friday\""
Text.Whitespace:  " "
Operator:  ":"
Text.Whitespace:  " "
Name.Function:  "true"
Punctuation:  "()"
Operator:  ","
Text.Whitespace:  "<newline>  "
Literal.String:  "\"Saturday\""
Text.Whitespace:  " "
Operator:  ":"
Text.Whitespace:  " "
Name.Function:  "false"
Punctuation:  "()"
Operator:  ","
Text.Whitespace:  "<newline>  "
Literal.String:  "\"Sunday\""
Text.Whitespace:  " "
Operator:  ":"
Text.Whitespace:  " "
Name.Function:  "false"
Punctuation:  "()"
Text.Whitespace:  "<newline>"
Punctuation:  "}"
Operator:  ","
Text.Whitespace:  "<newline>"
Name.Variable:  "$days"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Punctuation:  "("
Literal.String:  "\"Monday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Tuesday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Wednesday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Thursday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Friday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Saturday\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"Sunday\""
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  " "
Name.Function:  "fn:filter"
Punctuation:  "("
Name.Variable:  "$days"
Operator:  ","
Text.Whitespace:  " "
Name.Variable:  "$m"
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   10. Arrays :)"
Text.Whitespace:  "<newline>"
Keyword:  "let"
Text.Whitespace:  " "
Name.Tag:  "a"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Keyword:  "array"
Text.Whitespace:  " "
Punctuation:  "{"
Text.Whitespace:  " "
Literal.String:  "\"licorice\""
Operator:  ","
Text.Whitespace:  " "
Literal.String:  "\"ginger\""
Text.Whitespace:  " "
Punctuation:  "}("
Literal.Number:  "1"
Punctuation:  ")"
Operator:  ","
Text.Whitespace:  "<newline>    "
Name.Tag:  "b"
Text.Whitespace:  " "
Operator:  ":="
Text.Whitespace:  " "
Punctuation:  "["
Text.Whitespace:  " "
Literal.Number:  "1"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "2"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "5"
Operator:  ","
Text.Whitespace:  " "
Literal.Number:  "7"
Text.Whitespace:  " "
Punctuation:  "]("
Literal.Number:  "4"
Punctuation:  ")"
Text.Whitespace:  "<newline>"
Keyword:  "return"
Text.Whitespace:  " "
Name.Tag:  "a"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline><newline>"
Comment:  "(:   11. Arrow operator :)"
Text.Whitespace:  "<newline>"
Name.Variable:  "$string"
Text.Whitespace:  " "
Operator:  "=>"
Text.Whitespace:  " "
Name.Function:  "upper-case"
Punctuation:  "()"
Text.Whitespace:  " "
Operator:  "=>"
Text.Whitespace:  " "
Name.Function:  "normalize-unicode"
Punctuation:  "()"
Text.Whitespace:  " "
Operator:  "=>"
Text.Whitespace:  " "
Name.Function:  "tokenize"
Punctuation:  "("
Literal.String:  "\"\\s+\""
Punctuation:  ")"
Text.Whitespace:  " "
Operator:  "|"
Text.Whitespace:  "<newline>"
