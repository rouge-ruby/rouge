Comment:  "// builtin demo"
Text:  "<newline><newline>"
Keyword:  "const"
Text:  " "
Name:  "std"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "@import"
Punctuation:  "("
Literal.String:  "\"std\""
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "const"
Text:  " "
Name:  "warn"
Text:  " "
Operator:  "="
Text:  " "
Name:  "std"
Punctuation:  "."
Name.Property:  "debug"
Punctuation:  "."
Name.Property:  "warn"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name:  "add_integers"
Punctuation:  "("
Name:  "x"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "i78"
Punctuation:  ","
Text:  " "
Name:  "y"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "i78"
Punctuation:  ")"
Text:  " "
Keyword.Type:  "i78"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "var"
Text:  " "
Name:  "res"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "i78"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "undefined"
Punctuation:  ";"
Text:  "<newline><newline>    "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name.Builtin:  "@addWithOverflow"
Punctuation:  "("
Keyword.Type:  "i78"
Punctuation:  ","
Text:  " "
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "y"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "res"
Punctuation:  "))"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "warn"
Punctuation:  "("
Literal.String:  "\"overflow detected!"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{});"
Text:  "<newline>        "
Keyword:  "return"
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ";"
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline><newline>    "
Keyword:  "return"
Text:  " "
Name:  "res"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "test"
Text:  " "
Literal.String:  "\"add_integers\""
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "warn"
Punctuation:  "("
Literal.String:  "\"{}"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{"
Name:  "add_integers"
Punctuation:  "("
Literal.Number.Integer:  "123"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "171781717"
Punctuation:  ")});"
Text:  "<newline>    "
Name:  "warn"
Punctuation:  "("
Literal.String:  "\"{}"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{"
Name:  "add_integers"
Punctuation:  "("
Literal.Number.Integer:  "97239729372893729998991"
Punctuation:  ","
Text:  " "
Literal.Number.Integer:  "99900091788888881781717"
Punctuation:  ")});"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Comment:  "// demo of real numbers"
Text:  "<newline><newline>"
Keyword:  "const"
Text:  " "
Name:  "std"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "@import"
Punctuation:  "("
Literal.String:  "\"std\""
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "const"
Text:  " "
Name:  "warn"
Text:  " "
Operator:  "="
Text:  " "
Name:  "std"
Punctuation:  "."
Name.Property:  "debug"
Punctuation:  "."
Name.Property:  "warn"
Punctuation:  ";"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name:  "add_floats"
Punctuation:  "("
Name:  "x"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "f128"
Punctuation:  ","
Text:  " "
Name:  "y"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "f128"
Punctuation:  ")"
Text:  " "
Keyword.Type:  "f128"
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "return"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "y"
Punctuation:  ";"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "test"
Text:  " "
Literal.String:  "\"add_floats\""
Text:  " "
Punctuation:  "{"
Text:  "<newline>  "
Keyword:  "const"
Text:  " "
Name:  "x"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Float:  "1.23"
Punctuation:  ";"
Text:  "<newline>  "
Keyword:  "const"
Text:  " "
Name:  "y"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "-."
Literal.Number.Integer:  "0019"
Punctuation:  ";"
Text:  "<newline>  "
Name:  "warn"
Punctuation:  "("
Literal.String:  "\"{} + {} = {}"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{"
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "y"
Punctuation:  ","
Text:  " "
Name:  "add_floats"
Punctuation:  "("
Name:  "x"
Punctuation:  ","
Text:  " "
Name:  "y"
Punctuation:  ")});"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline><newline>"
Comment:  "// unions and enums demo - a simple arithmetic expression evaluator"
Text:  "<newline><newline>"
Keyword:  "const"
Text:  " "
Name:  "std"
Text:  " "
Operator:  "="
Text:  " "
Name.Builtin:  "@import"
Punctuation:  "("
Literal.String:  "\"std\""
Punctuation:  ");"
Text:  "<newline>"
Keyword:  "const"
Text:  " "
Name:  "warn"
Text:  " "
Operator:  "="
Text:  " "
Name:  "std"
Punctuation:  "."
Name.Property:  "debug"
Punctuation:  "."
Name.Property:  "warn"
Punctuation:  ";"
Text:  "<newline><newline>"
Comment:  "/// this expresses the variants that an arithmetic expression can take"
Text:  "<newline>"
Keyword:  "const"
Text:  " "
Name:  "Expr"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "union"
Punctuation:  "("
Keyword:  "enum"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "Val"
Punctuation:  ":"
Text:  " "
Keyword.Type:  "i32"
Punctuation:  ","
Text:  "<newline>    "
Name:  "Add"
Punctuation:  ":"
Text:  " "
Name:  "Payload"
Punctuation:  ","
Text:  "<newline>    "
Name:  "Div"
Punctuation:  ":"
Text:  " "
Name:  "Payload"
Punctuation:  ","
Text:  "<newline>    "
Name:  "Sub"
Punctuation:  ":"
Text:  " "
Name:  "Payload"
Punctuation:  ","
Text:  "<newline>    "
Name:  "Mul"
Punctuation:  ":"
Text:  " "
Name:  "Payload"
Punctuation:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "const"
Text:  " "
Name:  "Payload"
Text:  " "
Operator:  "="
Text:  " "
Keyword:  "struct"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Name:  "left"
Punctuation:  ":"
Text:  " "
Operator:  "*"
Keyword:  "const"
Text:  " "
Name:  "Expr"
Punctuation:  ","
Text:  "<newline>    "
Name:  "right"
Punctuation:  ":"
Text:  " "
Operator:  "*"
Keyword:  "const"
Text:  " "
Name:  "Expr"
Punctuation:  ","
Text:  "<newline>"
Punctuation:  "};"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name:  "show_helper"
Punctuation:  "("
Name:  "expr"
Punctuation:  ":"
Text:  " "
Operator:  "*"
Keyword:  "const"
Text:  " "
Name:  "Payload"
Punctuation:  ","
Text:  " "
Name:  "expr_name"
Punctuation:  ":"
Text:  " "
Punctuation:  "[]"
Keyword:  "const"
Text:  " "
Keyword.Type:  "u8"
Punctuation:  ","
Text:  " "
Name:  "stdout"
Punctuation:  ":"
Text:  " "
Operator:  "*"
Keyword:  "const"
Text:  " "
Name.Builtin:  "@TypeOf"
Punctuation:  "("
Name:  "std"
Punctuation:  "."
Name.Property:  "io"
Punctuation:  "."
Name.Function:  "getStdOut"
Punctuation:  "()."
Name.Function:  "outStream"
Punctuation:  "()))"
Text:  " "
Keyword:  "anyerror"
Operator:  "!"
Keyword:  "void"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "stdout"
Punctuation:  "."
Name.Function:  "print"
Punctuation:  "("
Literal.String:  "\"{}\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{"
Name:  "expr_name"
Punctuation:  "});"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "show"
Punctuation:  "("
Name:  "expr"
Punctuation:  "."
Name.Property:  "left"
Punctuation:  ","
Text:  " "
Name:  "stdout"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "stdout"
Punctuation:  "."
Name.Function:  "print"
Punctuation:  "("
Literal.String:  "\", \""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{});"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "show"
Punctuation:  "("
Name:  "expr"
Punctuation:  "."
Name.Property:  "right"
Punctuation:  ","
Text:  " "
Name:  "stdout"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "stdout"
Punctuation:  "."
Name.Function:  "print"
Punctuation:  "("
Literal.String:  "\")\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{});"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name:  "show"
Punctuation:  "("
Name:  "e"
Punctuation:  ":"
Text:  " "
Operator:  "*"
Keyword:  "const"
Text:  " "
Name:  "Expr"
Punctuation:  ","
Text:  " "
Name:  "stdout"
Punctuation:  ":"
Text:  " "
Operator:  "*"
Keyword:  "const"
Text:  " "
Name.Builtin:  "@TypeOf"
Punctuation:  "("
Name:  "std"
Punctuation:  "."
Name.Property:  "io"
Punctuation:  "."
Name.Function:  "getStdOut"
Punctuation:  "()."
Name.Function:  "outStream"
Punctuation:  "()))"
Text:  " "
Keyword:  "anyerror"
Operator:  "!"
Keyword:  "void"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "e"
Operator:  ".*"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "Expr"
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "|"
Name:  "n"
Punctuation:  "|"
Text:  " "
Keyword:  "try"
Text:  " "
Name:  "stdout"
Punctuation:  "."
Name.Function:  "print"
Punctuation:  "("
Literal.String:  "\"Val {}\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{"
Name:  "n"
Punctuation:  "}),"
Text:  "<newline>        "
Name:  "Expr"
Punctuation:  "."
Name.Property:  "Add"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "|"
Name:  "a"
Punctuation:  "|"
Text:  " "
Keyword:  "try"
Text:  " "
Name:  "show_helper"
Punctuation:  "("
Operator:  "&"
Name:  "a"
Punctuation:  ","
Text:  " "
Literal.String:  "\"Add (\""
Punctuation:  ","
Text:  " "
Name:  "stdout"
Punctuation:  "),"
Text:  "<newline>        "
Name:  "Expr"
Punctuation:  "."
Name.Property:  "Sub"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "|"
Name:  "s"
Punctuation:  "|"
Text:  " "
Keyword:  "try"
Text:  " "
Name:  "show_helper"
Punctuation:  "("
Operator:  "&"
Name:  "s"
Punctuation:  ","
Text:  " "
Literal.String:  "\"Sub (\""
Punctuation:  ","
Text:  " "
Name:  "stdout"
Punctuation:  "),"
Text:  "<newline>        "
Name:  "Expr"
Punctuation:  "."
Name.Property:  "Mul"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "|"
Name:  "m"
Punctuation:  "|"
Text:  " "
Keyword:  "try"
Text:  " "
Name:  "show_helper"
Punctuation:  "("
Operator:  "&"
Name:  "m"
Punctuation:  ","
Text:  " "
Literal.String:  "\"Mul (\""
Punctuation:  ","
Text:  " "
Name:  "stdout"
Punctuation:  "),"
Text:  "<newline>        "
Name:  "Expr"
Punctuation:  "."
Name.Property:  "Div"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "|"
Name:  "d"
Punctuation:  "|"
Text:  " "
Keyword:  "try"
Text:  " "
Name:  "show_helper"
Punctuation:  "("
Operator:  "&"
Name:  "d"
Punctuation:  ","
Text:  " "
Literal.String:  "\"Div (\""
Punctuation:  ","
Text:  " "
Name:  "stdout"
Punctuation:  "),"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword:  "unreachable"
Punctuation:  ","
Text:  "<newline>    "
Punctuation:  "}"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "fn"
Text:  " "
Name:  "eval"
Punctuation:  "("
Name:  "e"
Punctuation:  ":"
Text:  " "
Operator:  "*"
Keyword:  "const"
Text:  " "
Name:  "Expr"
Punctuation:  ")"
Text:  " "
Keyword.Type:  "i32"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "return"
Text:  " "
Keyword:  "switch"
Text:  " "
Punctuation:  "("
Name:  "e"
Operator:  ".*"
Punctuation:  ")"
Text:  " "
Punctuation:  "{"
Text:  "<newline>        "
Name:  "Expr"
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "|"
Name:  "v"
Punctuation:  "|"
Text:  " "
Name:  "v"
Punctuation:  ","
Text:  "<newline>        "
Name:  "Expr"
Punctuation:  "."
Name.Property:  "Add"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "|"
Name:  "a"
Punctuation:  "|"
Text:  " "
Name:  "eval"
Punctuation:  "("
Name:  "a"
Punctuation:  "."
Name.Property:  "left"
Punctuation:  ")"
Text:  " "
Operator:  "+"
Text:  " "
Name:  "eval"
Punctuation:  "("
Name:  "a"
Punctuation:  "."
Name.Property:  "right"
Punctuation:  "),"
Text:  "<newline>        "
Name:  "Expr"
Punctuation:  "."
Name.Property:  "Sub"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "|"
Name:  "s"
Punctuation:  "|"
Text:  " "
Name:  "eval"
Punctuation:  "("
Name:  "s"
Punctuation:  "."
Name.Property:  "left"
Punctuation:  ")"
Text:  " "
Operator:  "-"
Text:  " "
Name:  "eval"
Punctuation:  "("
Name:  "s"
Punctuation:  "."
Name.Property:  "right"
Punctuation:  "),"
Text:  "<newline>        "
Name:  "Expr"
Punctuation:  "."
Name.Property:  "Mul"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "|"
Name:  "m"
Punctuation:  "|"
Text:  " "
Name:  "eval"
Punctuation:  "("
Name:  "m"
Punctuation:  "."
Name.Property:  "left"
Punctuation:  ")"
Text:  " "
Operator:  "*"
Text:  " "
Name:  "eval"
Punctuation:  "("
Name:  "m"
Punctuation:  "."
Name.Property:  "right"
Punctuation:  "),"
Text:  "<newline>        "
Name:  "Expr"
Punctuation:  "."
Name.Property:  "Div"
Text:  " "
Operator:  "=>"
Text:  " "
Punctuation:  "|"
Name:  "d"
Punctuation:  "|"
Text:  " "
Keyword:  "return"
Text:  " "
Keyword:  "if"
Text:  " "
Punctuation:  "("
Name:  "eval"
Punctuation:  "("
Name:  "d"
Punctuation:  "."
Name.Property:  "right"
Punctuation:  ")"
Text:  " "
Operator:  "=="
Text:  " "
Literal.Number.Integer:  "0"
Punctuation:  ")"
Text:  " "
Name:  "eval"
Punctuation:  "("
Name:  "d"
Punctuation:  "."
Name.Property:  "left"
Punctuation:  ")"
Text:  " "
Keyword:  "else"
Text:  " "
Name.Builtin:  "@divTrunc"
Punctuation:  "("
Name:  "eval"
Punctuation:  "("
Name:  "d"
Punctuation:  "."
Name.Property:  "left"
Punctuation:  "),"
Text:  " "
Name:  "eval"
Punctuation:  "("
Name:  "d"
Punctuation:  "."
Name.Property:  "right"
Punctuation:  ")),"
Text:  "<newline>        "
Keyword:  "else"
Text:  " "
Operator:  "=>"
Text:  " "
Keyword:  "unreachable"
Punctuation:  ","
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline><newline>"
Keyword:  "pub"
Text:  " "
Keyword:  "fn"
Text:  " "
Name:  "main"
Punctuation:  "()"
Text:  " "
Operator:  "!"
Keyword:  "void"
Text:  " "
Punctuation:  "{"
Text:  "<newline>    "
Keyword:  "const"
Text:  " "
Name:  "stdout"
Text:  " "
Operator:  "="
Text:  " "
Name:  "std"
Punctuation:  "."
Name.Property:  "io"
Punctuation:  "."
Name.Function:  "getStdOut"
Punctuation:  "()."
Name.Function:  "outStream"
Punctuation:  "();"
Text:  "<newline><newline>    "
Keyword:  "const"
Text:  " "
Name:  "e1"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "100"
Text:  " "
Punctuation:  "};"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "show"
Punctuation:  "("
Operator:  "&"
Name:  "e1"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "stdout"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "stdout"
Punctuation:  "."
Name.Function:  "print"
Punctuation:  "("
Literal.String:  "\" = {}"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{"
Name:  "eval"
Punctuation:  "("
Operator:  "&"
Name:  "e1"
Punctuation:  ")});"
Text:  "<newline><newline>    "
Keyword:  "const"
Text:  " "
Name:  "e2"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Div"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "."
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "left"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "10"
Text:  " "
Punctuation:  "},"
Text:  " "
Punctuation:  "."
Name.Property:  "right"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "}"
Text:  " "
Punctuation:  "}"
Text:  " "
Punctuation:  "};"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "show"
Punctuation:  "("
Operator:  "&"
Name:  "e2"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "stdout"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "stdout"
Punctuation:  "."
Name.Function:  "print"
Punctuation:  "("
Literal.String:  "\" = {}"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{"
Name:  "eval"
Punctuation:  "("
Operator:  "&"
Name:  "e2"
Punctuation:  ")});"
Text:  "<newline><newline>    "
Keyword:  "const"
Text:  " "
Name:  "e3"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Expr"
Punctuation:  "{"
Text:  "<newline>        "
Punctuation:  "."
Name.Property:  "Div"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "."
Punctuation:  "{"
Text:  "<newline>            "
Punctuation:  "."
Name.Property:  "left"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  "<newline>                "
Punctuation:  "."
Name.Property:  "Mul"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "."
Punctuation:  "{"
Text:  "<newline>                    "
Punctuation:  "."
Name.Property:  "left"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Punctuation:  "},"
Text:  "<newline>                    "
Punctuation:  "."
Name.Property:  "right"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "4"
Text:  " "
Punctuation:  "},"
Text:  "<newline>                "
Punctuation:  "},"
Text:  "<newline>            "
Punctuation:  "},"
Text:  "<newline>            "
Punctuation:  "."
Name.Property:  "right"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "2"
Text:  " "
Punctuation:  "},"
Text:  "<newline>        "
Punctuation:  "},"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "show"
Punctuation:  "("
Operator:  "&"
Name:  "e3"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "stdout"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "stdout"
Punctuation:  "."
Name.Function:  "print"
Punctuation:  "("
Literal.String:  "\" = {}"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{"
Name:  "eval"
Punctuation:  "("
Operator:  "&"
Name:  "e3"
Punctuation:  ")});"
Text:  "<newline><newline>    "
Keyword:  "const"
Text:  " "
Name:  "e4"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Expr"
Punctuation:  "{"
Text:  "<newline>        "
Punctuation:  "."
Name.Property:  "Add"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "."
Punctuation:  "{"
Text:  "<newline>            "
Punctuation:  "."
Name.Property:  "left"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  "<newline>                "
Punctuation:  "."
Name.Property:  "Mul"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "."
Punctuation:  "{"
Text:  "<newline>                    "
Punctuation:  "."
Name.Property:  "left"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "5"
Text:  " "
Punctuation:  "},"
Text:  "<newline>                    "
Punctuation:  "."
Name.Property:  "right"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "4"
Text:  " "
Punctuation:  "},"
Text:  "<newline>                "
Punctuation:  "},"
Text:  "<newline>            "
Punctuation:  "},"
Text:  "<newline>            "
Punctuation:  "."
Name.Property:  "right"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  "<newline>                "
Punctuation:  "."
Name.Property:  "Sub"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "."
Punctuation:  "{"
Text:  "<newline>                    "
Punctuation:  "."
Name.Property:  "left"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "100"
Text:  " "
Punctuation:  "},"
Text:  "<newline>                    "
Punctuation:  "."
Name.Property:  "right"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  "<newline>                        "
Punctuation:  "."
Name.Property:  "Div"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "."
Punctuation:  "{"
Text:  "<newline>                            "
Punctuation:  "."
Name.Property:  "left"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "12"
Text:  " "
Punctuation:  "},"
Text:  "<newline>                            "
Punctuation:  "."
Name.Property:  "right"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "4"
Text:  " "
Punctuation:  "},"
Text:  "<newline>                        "
Punctuation:  "},"
Text:  "<newline>                    "
Punctuation:  "},"
Text:  "<newline>                "
Punctuation:  "},"
Text:  "<newline>            "
Punctuation:  "},"
Text:  "<newline>        "
Punctuation:  "},"
Text:  "<newline>    "
Punctuation:  "};"
Text:  "<newline><newline>    "
Keyword:  "try"
Text:  " "
Name:  "show"
Punctuation:  "("
Operator:  "&"
Name:  "e4"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "stdout"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "stdout"
Punctuation:  "."
Name.Function:  "print"
Punctuation:  "("
Literal.String:  "\" = {}"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{"
Name:  "eval"
Punctuation:  "("
Operator:  "&"
Name:  "e4"
Punctuation:  ")});"
Text:  "<newline><newline>    "
Keyword:  "const"
Text:  " "
Name:  "e5"
Text:  " "
Operator:  "="
Text:  " "
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Div"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "."
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "left"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "100"
Text:  " "
Punctuation:  "},"
Text:  " "
Punctuation:  "."
Name.Property:  "right"
Text:  " "
Operator:  "="
Text:  " "
Operator:  "&"
Name:  "Expr"
Punctuation:  "{"
Text:  " "
Punctuation:  "."
Name.Property:  "Val"
Text:  " "
Operator:  "="
Text:  " "
Literal.Number.Integer:  "0"
Text:  " "
Punctuation:  "}"
Text:  " "
Punctuation:  "}"
Text:  " "
Punctuation:  "};"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "show"
Punctuation:  "("
Operator:  "&"
Name:  "e5"
Punctuation:  ","
Text:  " "
Operator:  "&"
Name:  "stdout"
Punctuation:  ");"
Text:  "<newline>    "
Keyword:  "try"
Text:  " "
Name:  "stdout"
Punctuation:  "."
Name.Function:  "print"
Punctuation:  "("
Literal.String:  "\" = {}"
Literal.String.Escape:  "<newline>"
Literal.String:  "\""
Punctuation:  ","
Text:  " "
Operator:  "."
Punctuation:  "{"
Name:  "eval"
Punctuation:  "("
Operator:  "&"
Name:  "e5"
Punctuation:  ")});"
Text:  "<newline>"
Punctuation:  "}"
Text:  "<newline>"
