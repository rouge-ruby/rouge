<p>It's html outside php!</p>


<?php /* Single statements */ ?>

<?php use Foo, Bar ?>
<?php use /*Foo, */Bar ?>
<?php use Class1, Class2; ?>
<?php const FOO = 42, BAR = C ?>
<?php const /*FOO = 42, */BAR = C; ?>


<?php /* Multiple statements */ ?>

<?php
  file_put_contents("log.txt", "\u{FEFF}===== Début du fichier =====\n");
  $test = function($a) { $lambda = 1; }
?>


<?php /* Embedded PHP */ ?>

<a href="<?= $url ?>">I can close php tags and get html!</a>


<?php

/* Comments */

# A comment
$a = 1;
// Another comment
$a = 1;
/* another comment */
$a = 1;
/* a multi
line comemnt
followed by an empty comment */
$a = 1;
/**/
$a = 1;
/**
 * doc block comment
 */
$a = 1;


/* Variable names */

$a = 1;
$Δ = 1;
++$_Δ;
echo $ΔΔ;


/* Numbers */

1;
3.14;
1.414e10;
1_000_000;
007;
0b1010;
0xabcdef;


/* Strings */

'A single-quoted string';
"A double-quoted string";

// heredoc
$a = <<<EOF
Some long string with $values
EOF;

$b = <<<'EOF'
Some long string without $values
EOF;

$c = <<<EOF
  Hello
  EOF;

// Flexible heredoc
callingFunc(<<<EOF
    With a long string
    EOF, <<<'EOF'
    Another string
    EOF);

// Interpolation
"thing {$thing->other_thing()}"


/* Functions */

function &byref() {
    $x = array();
    return $x;
}

public abstract function thing(mysqli $mysqli, int FOO + BAR, ?mysqli $mysqli): mysqli $mysqli;

function sort_on(array &$array, string $key) {
    usort($array, function ($a, $b) use($key) { return $a <=> $b; });
}

// Function-like keywords.
isset($foo);
empty($bar);
unset($baz);
die($qux);

// No "use"
$example = function () {
    some_fn($message);
};

// Inherit $message
$example = function () use ($message) {
    some_fn($message);
};

// A generator
$gen = (function() {
    yield 1;
    yield 2;

    return 3;
})();

$fn = fn($x) => fn($y) => $x * $y + $z;
fn(array $x) => $x;
static fn(): int => $x;
fn($x = 42) => $x;
fn(&$x) => $x;
fn&($x) => $x;
fn($x, ...$rest) => $rest;


/* Classes */

class Foo extends AbstractFoo implements Bar {
}

//Anonymous class example
$app->setLogger(new class implements Logger {
    public function log(string $msg) {
        echo $msg;
    }
});

class ClassB
{
    use TraitA, TraitB, TraitC {
        TraitB::foo insteadof TraitA;
    }
}

class Zip\Zipp {

}

class Zip extends Archive {
  function out($filename = false) {
    // Empty output
    $file_data = array(); // Data of the file part
    $cd_data   = array(); // Data of the central directory
  }
}

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

class C {
    private readonly $x;
    protected readonly int $y;
    private string $z;

    public static ?string $a = "";
    public static int $b = 0;

    public function __construct(
        public $foo,
        protected readonly $bar,
        private readonly array $baz = [],
        private string $qux = "",
    ) {
    }
}


/* Traits */

trait SomeTrait {
  // Some visibility
  const PUBLIC_CONST_A = 1;
  public const PUBLIC_CONST_B = 2;
  protected const PROTECTED_CONST = 3;
  private const PRIVATE_CONST = 4;

  function afunc(string $arg, SomeInterface $arg2, callable $arg3, object $arg4): void {
    echo "hello";
    if (1 <=> 1) {
      echo "yep!";
    }
  }
}


/* Interfaces */

interface SomeInterface {
  function interfaceFunc(bool $arg): iterable;
  function nullableTypes(?bool $arg): ?iterable;
}


/* Imports */

use some\namespace\ClassA;
use some\namespace\ClassB as B;
use function some\namespace\fn_a;
use const some\namespace\ConstA;
use Class1, /*Class2, */Class3;

use some\namespace\{ClassA, ClassB, ClassC as C};
use function some\namespace\{fn_a, fn_b, fn_c};
use const some\namespace\{ConstA, ConstB, ConstC};
use some\name\{function some_fn, const Foo\BAR, SomeClass};

use const some\namespace\{
    ConstA,
    #ConstB,
    ConstC
};


/* Namespaces */

namespace some\namespace;


/* Assignments */

list($id1, $name1) = $data[0];
[$id1, $name1] = $data[0];
const A = f(1, 2, g(3, 4, $my_var[0])), B = "abc";


/* Conditionals */

if(!defined('UNLOCK') || !UNLOCK)
  die();

if(function_exists('gzdeflate')) {
  $method = 8;
  $compressed_data = gzdeflate($content);
} elseif(function_exists('bzcompress')) {
  $method = 12;
  $compressed_data = bzcompress($content);
} else {
  $compressed_data = $content;
}

switch($header_info['compression_method']) {
  case 0:
    $content = $data;
    break;

  case 8:
    $content = gzinflate($data);
    break;

  case 12:
    if(!function_exists('bzdecompress'))
      return false;
    break;

  default:
    return false;
}

$y = match ($x) {
  0 => 1,
  1 => -1,
  default => 0,
};

/* Loops */

foreach($this->files as $name => $file) {
  $content = $file[0];
  $fd .= "\x50\x4b\x03\x04";                  // Local file header signature
  $fd .= pack("v", 20);                       // Version needed to extract
  $fd .= pack("V", crc32($content));          // crc-32
  $fd .= pack("V", strlen($compressed_data)); // Compressed size
}

while($pos < strlen($cdr)) {
  if(substr($cdr, $pos, 4) == "\x50\x4b\x05\x05") {
    $tmp_info = unpack('vsize', substr($cdr, $pos + 4, 2));
    $digital_sig = substr($header, $pos + 6, $tmp_info['size']);
    break;
  }
}


/* Exceptions */

class Test {
    public function testing() {
        try {
            throw new MyException();
        } catch (MyException | MyOtherException $e) {
            var_dump(get_class($e));
        } catch (\Exception $x) {
            throw $x;
        }
    }
}

?>

<?php /* Edge cases */ ?>

<?php if (true): ?><!-- Notice the space between the colon & question mark -->
  <p>Hello world!</p>
<?php endif ?>

<?php if (true) :?><!-- No space -->
  <p>Hello world!</p>
<?php endif ?>

<p>it's html here at the end, too.</p>


/* Attributes */

<?php

#[MyAttribute]
#[\MyExample\MyAttribute]
#[MyAttribute(1234)]
#[MyAttribute(value: 1234)]
#[MyAttribute(MyAttribute::VALUE)]
#[MyAttribute(array("key" => "value"))]
#[MyAttribute(100 + 200)]
class SetUp {
   #[JsonSerialize('Setup')]
   public const version = '0.0.1';

   #[SetUp]
   public function fileExists() {}
}

function f(\Ns1\Ns2\Ns3\Class $x) {
}

?>
