data BinTree:
  | leaf
  | node(value, left, right)
end

fun tree-sum(t):
  doc: "Calculate the sum of node values"
  cases (BinTree) t:
    | leaf => 0
    | node(v, l, r) =>
      v + tree-sum(l) + tree-sum(r)
  end
where:
  tree-sum(leaf) is 0
  node4 = node(4, leaf, leaf)
  tree-sum(node(5, node4, leaf)) is 9
end

for map(n from [list: 1,2,3]): n * n end
# ==> [list: 1, 4, 9]

for filter(n from [list: 1, 2, 3]):
  n >= 2
end
# ==> [list: 2, 3]

for fold(sum from 0, n from [list: 4, 5, 6]):
  sum + n
end
# ==> 15

fun insert(n :: Number,
           l :: List % (is-sorted-ascending))
  -> List % (is-sorted-ascending):
  cases (List) l:
    | empty => [list: n]
    | link(f, r) =>
      if n < f: link(n, l)
      else:     link(f, insert(n, r))
      end
  end
end

check:
  fun get-status(url):
    request({
        url: url,
        verb: "get",
        params: [list: ]
      }).status-code
  end
  get-status("http://google.com/") is 200
end

point-methods = {
  method dist(self, other):
    ysquared = num-expt(other.y - self.y, 2)
    xsquared = num-expt(other.x - self.x, 2)
    num-sqrt(ysquared + xsquared)
  end
}

fun make-point(x, y):
  point-methods.{ x: x, y: y }
end

check:
  p1 = make-point(1, 2)
  p2 = make-point(1, 5)

  p1.dist(p2) is 3
end