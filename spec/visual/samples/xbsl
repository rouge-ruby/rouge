import Библиотека /* тест */

импорт Товары.МодульОбъекта.ОписаниеТовара// dfdf

конст Б = Истина

/* Многострочный
   комментарий 
/* может содержать
   любые символы * / */
@ВПодсистеме @клиент //sdddsds
метод Метод1(Параметр1   : Тип1, 
             Параметр2: Массив<Строка | Число|?> = "Значение по умолчанию"): Тип2<Тип2<Тип3|Тип4>> 

    пер А: Число
    А = 15 // целое десятичное число
    А = 3.141592654 // дробное десятичное число
    А = 15/7 // выражение с использованием десятичных чисел
    А = 0xff // шестнадцатеричное число
    А = -0xff // отрицательное шестнадцатеричное число
    А = 0b10101 // двоичное число

    пер б = а.Представление("'Результат: '6.2")

    // Полная форма - %{выражение}
    пер Длина:Число = 100
    пер Ширина = 30
    пер Сообщение = "Площадь равна %{Длина * Ширина} м2"

    // С форматированием - ${выражение|формат}
    пер Сейчас = ДатаВремя.Сейчас()
    пер Сообщение = "Текущая дата ${Сейчас|дд ММММ гггг, дддд}"
;

статический метод Скрипт()
    пер а: Число = 2
    пер б: Число = 3
    б++
    Консоль.Записать(а > б) // Выдаст значение Ложь типа Булево
    Консоль.Записать(а < 123) // Выдаст значение Истина типа Булево

    знч Стр1 = "%0"
    знч Стр2 = "$0"
    знч Стр3 = "50% заряда"
    знч Стр4 = "цена 10$"
    область
        // вариант 1
        пер ИмяПользователя: Строка
        пер Приветствие = "Привет, %ИмяПользователя!"
        ИмяПользователя = "Ипполит"
    ;
;

метод РассчитатьСебестоимость(Нал_ог: Число = 1, //comment
            Наценка: Число = 10, /*inline*/ Цена: Строка = "Строка"): Число
    возврат Цена - (Цена * Наценка / 100 + Цена * Налог / 100)
;

структура ПользовательПриложения
    обз пер Переменная: Строка
    пер Имя: Строка
    пер Ид: Ууид
    пер ДоступКПриложению: Булево = Истина

    // Возвращает значение: "Вторая строка"
    знч СтрокаДва = новый Строка(Байты{feff04120442043e04400430044f0020044104420440043e043a0430},
                             Кодировка.Utf16)

    ДанныеСообщений.Добавить("{\n \"date\" : \"%ДатаСообщения\",\n\"headers\" : %Заголовки,\n\"body\" : %Тело\n}")


    если ФильтроватьПоВозрасту
        СотрудникиПоследовательность = СотрудникиПоследовательность.Фильтровать(а -> а.Возраст > 30)
    ;

    знч Запрос = Запрос{ВЫБРАТЬ 
                            Лог.ЗаголовкиСообщения КАК Заголовки,
                            Лог.ТелоСообщения КАК Тело,
                            Лог.МеткаВремени КАК ДатаСообщения // комментарий
                        ИЗ
                            Лог КАК Лог
                        ГДЕ
                            Лог.ИдентификаторСодержимогоСообщения == %ИдентификаторОбъекта
                            //И Лог.МеткаВремени >= %{ДатаОт}
                            И Лог.МеткаВремени <= %ДатаДо
                            И Лог.МеткаВремени != 7
                            }

    знч Запрос2 = новый Запрос("
        ВЫБРАТь ПЕРВЫЕ 1 Поле, Поле2 ИЗ Таблица ГДЕ Поле НЕ ЕСТЬ NULL
        ИМЕЮЩИЕ ПО СУММА(Поле2 * ВЫБОР КОГДА ИСТИНА НЕ ЕСТЬ NULL ТОГДА 1 ИНАЧЕ 42 КОНЕЦ) > 42 
            / КОЛИЧЕСТВО(%Делитель)
    ")

    пер КонкретныйИдентификатор = новый Ууид("550e8400-e29b-41d4-a716-446655440000")
    пер КонкретныйИдентификатор2 = Ууид{550e8400-e29b-41d4-a716-446655440000}

    метод Скрипт()
        пер МоментСоздания = новый ДатаВремя(2019, 05, 01, 23, 30, 40, 345)
        пер МоментСозданияФормат = МоментСоздания.ВМомент(ЧасовойПояс{UTC})

        пер ДатаСоздания = новый ДатаВремя(2019, 5, 1, 23, 30, 40)
        пер ДатаСозданияФормат = ДатаСоздания.Представление("дд ММММ гггг', 'ЧЧ:мм:сс")

        пер Период = Строки.Шаблон("С %0 по %1 года", [ДатаНачалаФормат, ДатаОкончанияФормат])

        пер ОкончаниеРаботы = Время{18:00}

        пер Значение3: Строка|Число|Неопределено = МоментСоздания("ы")
    ;

    метод НайтиПользователя(Ид: ИдПользователя): ОписаниеПользователяСервиса
        знч ОписаниеПользователя = ПользователиСервиса.Найти(Ид)
        
        // Метод вернет "никогда", если "ОписаниеПользователя" неопределено
        возврат ОписаниеПользователя != Неопределено ? ОписаниеПользователя : ВыброситьИсключение("Пользователь не найден!")
    ;
;

метод ЭтоМассив(Параметр: Объект)
    пер ТипПараметра = Параметр.ПолучитьТип()
    пер Результат: Строка
    если Параметр это не ЧитаемыйМассив<Объект>
        Результат = "Это не массив!"
    иначе если Параметр это ЧитаемыйМассив<Строка>
        Результат = "Это массив строк!"
    иначе если Параметр это ЧитаемыйМассив<Число>
        Результат = "Это массив чисел!"
    иначе
        Результат = "Это массив!"
    ;

    пер Значение = Ссылка.ЗагрузитьОбъект()?.РеквизитСсылка?.ЗагрузитьОбъект()?.РеквизитЧисло ?? 0
;


метод ПримерНаЗакрываемыйТип()
    попытка 
        пер Файл = Файлы.Создать(СредаИсполнения.ПолучитьПеременную("temp") + "\\test.txt")
        исп Поток = Файл.ОткрытьПотокЗаписи()
        Поток.Записать("1-я строка\н")
        Поток.Записать("2-я строка\н")
        Поток.Записать("3-я строка\н")
        пер Успех = "Файл записан!"
    поймать Искл: Исключение
        // попадем сюда, если хоть какое-то исключение случилось
        // здесь поток записи уже закрыт
        // переменная Поток здесь уже отсутствует
        пер Ошибка = Искл.ПоследовательностьВызовов + "\н" + Искл.Описание
    вконце
        // попадем сюда в любом случае
        // здесь поток записи уже закрыт!
        // переменная Поток здесь уже отсутствует
        пер Конец = "Файловый поток закрыт, переменная недоступна (выход из области видимости)"
    ;

    пер А = Момент{2019-05-01 23:30:40.345 UTC+3}
    пер Б = Момент(Дата{2019-05-01},Время{23:30:40},ЧасовойПояс{UTC+3})
;

перечисление ОперационныеСистемы
    Linux,
    macOS, // для ОС Apple
    Windows умолчание

    @сервер
    метод МетодПеречисления(): Булево
    ;

    статический метод МетодПеречисления2(): Булево
    ;
;


структура Продажа
    обз пер Товар: Строка = "Пустая"
    обз пер Дата: Дата

    @ИменованныеПараметры
    конструктор

    // Простой метод
    метод ВСтроку(): Строка
        возврат Товар + " " + Дата
    ;

    // Статический метод 
    @Аннотация1(Параметр11 = @Аннотация2(Параметр21 = "ЗначениеПараметра"))
    статический метод ИзСтроки(СтрокаПродажи: Строка): Продажа
        знч Части = СтрокаПродажи.Разделить(" ")
        возврат новый Продажа(Части[0], новый Дата(Части[1]))
    ;
;
