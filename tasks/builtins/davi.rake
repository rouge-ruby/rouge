# -*- coding: utf-8 -*- #
# frozen_string_literal: true

DAVI_DOCS_URI = "https://raw.githubusercontent.com/davinci-script/davi/main/docs/docs/.vuepress/dist/davi-details.json"
DAVI_KEYWORDS_FILE = "./lib/rouge/lexers/davi/keywords.rb"

namespace :builtins do
  task :davi do
    generator = Rouge::Tasks::Builtins::DAVI.new

     files    = generator.download_docs(DAVI_DOCS_URI)
     keywords = generator.extract_keywords(files.values)
     output = generator.render_output(keywords)

     File.write(DAVI_KEYWORDS_FILE, output)

  end
end

module Rouge
  module Tasks
    module Builtins
      class DAVI
        def download_docs(input)
          files = Hash.new

          system "mkdir -p /tmp/rouge"
          Dir.chdir "/tmp/rouge" do
            system "wget #{input} -O davi-details.json -q "
            files["davi-details.json"] = File.read("davi-details.json")
          end

          files
        end

        def extract_keywords(files)
            keywords = Hash.new { |h,k| h[k] = Array.new }
            json = JSON.parse(files[0])

            json.each do |k, v|
                keywords[k] = json[k].keys
            end

            keywords
        end

        def render_output(keywords, &b)
          return enum_for(:render_output, keywords).to_a.join("\n") unless b

          yield   "# -*- coding: utf-8 -*- #"
          yield   "# frozen_string_literal: true"
          yield   ""
          yield   "# DO NOT EDIT"
          yield   "# This file is automatically generated by `rake builtins:davi`."
          yield   "# See tasks/builtins/davi.rake for more info."
          yield   ""
          yield   "module Rouge"
          yield   "  module Lexers"
          yield   "    class DAVI"
          yield   "      def self.builtins"
          yield   "        @builtins ||= {}.tap do |b|"
          keywords.each do |n, fs|
            yield "          b[#{n.inspect}] = Set.new #{fs.inspect}"
          end
          yield   "        end"
          yield   "      end"
          yield   "    end"
          yield   "  end"
          yield   "end"
        end
      end
    end
  end
end

def davi_references(&b)
  return enum_for :davi_references unless block_given?

  davi_manual_url = 'http://us3.davi.net/distributions/manual/davi_manual_en.tar.gz'

  sh 'mkdir -p /tmp/rouge', { verbose: false }
  Dir.chdir '/tmp/rouge' do
    sh "wget -qO- #{davi_manual_url} | tar -xz", { verbose: false }
    Dir.chdir './davi-chunked-xhtml' do
      Dir.glob('./ref.*').sort.each { |x| yield File.read(x) }
    end
  end
end

def davi_functions(&b)
  return enum_for :davi_functions unless block_given?

  davi_references do |file|
    file =~ %r(<title>(.*?) Functions</title>)
    name = $1

    next unless name

    functions = file.scan %r(<a href="function\..*?\.html">(.*?)</a>)

    yield [name, functions]
  end
end

def davi_builtins_source
  yield   "# -*- coding: utf-8 -*- #"
  yield   "# frozen_string_literal: true"
  yield   ""
  yield   "# automatically generated by `rake builtins:davi`"
  yield   "module Rouge"
  yield   "  module Lexers"
  yield   "    class DAVI"
  yield   "      def self.builtins"
  yield   "        @builtins ||= {}.tap do |b|"
  davi_functions do |n, fs|
    yield "          b[#{n.inspect}] = Set.new %w(#{fs.join(' ')})"
  end
  yield   "        end"
  yield   "      end"
  yield   "    end"
  yield   "  end"
  yield   "end"
end
